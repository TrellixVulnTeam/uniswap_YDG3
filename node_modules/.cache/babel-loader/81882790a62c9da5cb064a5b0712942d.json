{"ast":null,"code":"import{CurrencyAmount,Percent}from'@uniswap/sdk-core';import{SUPPORTED_GAS_ESTIMATE_CHAIN_IDS}from'components/swap/GasEstimateBadge';import{L2_CHAIN_IDS}from'constants/chains';import JSBI from'jsbi';import{useMemo}from'react';import{useUserSlippageToleranceWithDefault}from'../state/user/hooks';import{useNativeCurrency}from'./Tokens';import useGasPrice from'./useGasPrice';import useUSDCPrice,{useUSDCValue}from'./useUSDCPrice';import{useActiveWeb3React}from'./web3';var V3_SWAP_DEFAULT_SLIPPAGE=new Percent(50,10000);// .50%\nvar ONE_TENTHS_PERCENT=new Percent(10,10000);// .10%\n/**\n * Return a guess of the gas cost used in computing slippage tolerance for a given trade\n * @param trade the trade for which to _guess_ the amount of gas it would cost to execute\n */function guesstimateGas(trade){if(!!trade){return 100000+trade.swaps.reduce(function(memo,swap){return swap.route.pools.length+memo;},0)*30000;}return undefined;}var MIN_AUTO_SLIPPAGE_TOLERANCE=new Percent(5,1000);// 0.5%\nvar MAX_AUTO_SLIPPAGE_TOLERANCE=new Percent(25,100);// 25%\nexport default function useSwapSlippageTolerance(trade){var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId;var onL2=chainId&&L2_CHAIN_IDS.includes(chainId);var outputDollarValue=useUSDCValue(trade===null||trade===void 0?void 0:trade.outputAmount);var nativeGasPrice=useGasPrice();var gasEstimate=guesstimateGas(trade);var nativeCurrency=useNativeCurrency();var nativeCurrencyPrice=useUSDCPrice(nativeCurrency!==null&&nativeCurrency!==void 0?nativeCurrency:undefined);var defaultSlippageTolerance=useMemo(function(){if(!trade||onL2)return ONE_TENTHS_PERCENT;var nativeGasCost=nativeGasPrice&&typeof gasEstimate==='number'?JSBI.multiply(nativeGasPrice,JSBI.BigInt(gasEstimate)):undefined;var dollarGasCost=nativeCurrency&&nativeGasCost&&nativeCurrencyPrice?nativeCurrencyPrice.quote(CurrencyAmount.fromRawAmount(nativeCurrency,nativeGasCost)):undefined;// if valid estimate from api and using api trade, use gas estimate from api\n// NOTE - dont use gas estimate for L2s yet - need to verify accuracy\n// if not, use local heuristic\nvar dollarCostToUse=chainId&&SUPPORTED_GAS_ESTIMATE_CHAIN_IDS.includes(chainId)&&(trade===null||trade===void 0?void 0:trade.gasUseEstimateUSD)?trade.gasUseEstimateUSD:dollarGasCost;if(outputDollarValue&&dollarCostToUse){// the rationale is that a user will not want their trade to fail for a loss due to slippage that is less than\n// the cost of the gas of the failed transaction\nvar fraction=dollarCostToUse.asFraction.divide(outputDollarValue.asFraction);var result=new Percent(fraction.numerator,fraction.denominator);if(result.greaterThan(MAX_AUTO_SLIPPAGE_TOLERANCE))return MAX_AUTO_SLIPPAGE_TOLERANCE;if(result.lessThan(MIN_AUTO_SLIPPAGE_TOLERANCE))return MIN_AUTO_SLIPPAGE_TOLERANCE;return result;}return V3_SWAP_DEFAULT_SLIPPAGE;},[trade,onL2,nativeGasPrice,gasEstimate,nativeCurrency,nativeCurrencyPrice,chainId,outputDollarValue]);return useUserSlippageToleranceWithDefault(defaultSlippageTolerance);}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/hooks/useSwapSlippageTolerance.ts"],"names":["CurrencyAmount","Percent","SUPPORTED_GAS_ESTIMATE_CHAIN_IDS","L2_CHAIN_IDS","JSBI","useMemo","useUserSlippageToleranceWithDefault","useNativeCurrency","useGasPrice","useUSDCPrice","useUSDCValue","useActiveWeb3React","V3_SWAP_DEFAULT_SLIPPAGE","ONE_TENTHS_PERCENT","guesstimateGas","trade","swaps","reduce","memo","swap","route","pools","length","undefined","MIN_AUTO_SLIPPAGE_TOLERANCE","MAX_AUTO_SLIPPAGE_TOLERANCE","useSwapSlippageTolerance","chainId","onL2","includes","outputDollarValue","outputAmount","nativeGasPrice","gasEstimate","nativeCurrency","nativeCurrencyPrice","defaultSlippageTolerance","nativeGasCost","multiply","BigInt","dollarGasCost","quote","fromRawAmount","dollarCostToUse","gasUseEstimateUSD","fraction","asFraction","divide","result","numerator","denominator","greaterThan","lessThan"],"mappings":"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","sourcesContent":["import { Trade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Percent, TradeType } from '@uniswap/sdk-core'\nimport { SUPPORTED_GAS_ESTIMATE_CHAIN_IDS } from 'components/swap/GasEstimateBadge'\nimport { L2_CHAIN_IDS } from 'constants/chains'\nimport JSBI from 'jsbi'\nimport { useMemo } from 'react'\nimport { InterfaceTrade } from 'state/routing/types'\n\nimport { useUserSlippageToleranceWithDefault } from '../state/user/hooks'\nimport { useNativeCurrency } from './Tokens'\nimport useGasPrice from './useGasPrice'\nimport useUSDCPrice, { useUSDCValue } from './useUSDCPrice'\nimport { useActiveWeb3React } from './web3'\n\nconst V3_SWAP_DEFAULT_SLIPPAGE = new Percent(50, 10_000) // .50%\nconst ONE_TENTHS_PERCENT = new Percent(10, 10_000) // .10%\n\n/**\n * Return a guess of the gas cost used in computing slippage tolerance for a given trade\n * @param trade the trade for which to _guess_ the amount of gas it would cost to execute\n */\nfunction guesstimateGas(trade: Trade<Currency, Currency, TradeType> | undefined): number | undefined {\n  if (!!trade) {\n    return 100_000 + trade.swaps.reduce((memo, swap) => swap.route.pools.length + memo, 0) * 30_000\n  }\n  return undefined\n}\n\nconst MIN_AUTO_SLIPPAGE_TOLERANCE = new Percent(5, 1000) // 0.5%\nconst MAX_AUTO_SLIPPAGE_TOLERANCE = new Percent(25, 100) // 25%\n\nexport default function useSwapSlippageTolerance(\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined\n): Percent {\n  const { chainId } = useActiveWeb3React()\n  const onL2 = chainId && L2_CHAIN_IDS.includes(chainId)\n  const outputDollarValue = useUSDCValue(trade?.outputAmount)\n  const nativeGasPrice = useGasPrice()\n\n  const gasEstimate = guesstimateGas(trade)\n  const nativeCurrency = useNativeCurrency()\n  const nativeCurrencyPrice = useUSDCPrice(nativeCurrency ?? undefined)\n\n  const defaultSlippageTolerance = useMemo(() => {\n    if (!trade || onL2) return ONE_TENTHS_PERCENT\n\n    const nativeGasCost =\n      nativeGasPrice && typeof gasEstimate === 'number'\n        ? JSBI.multiply(nativeGasPrice, JSBI.BigInt(gasEstimate))\n        : undefined\n    const dollarGasCost =\n      nativeCurrency && nativeGasCost && nativeCurrencyPrice\n        ? nativeCurrencyPrice.quote(CurrencyAmount.fromRawAmount(nativeCurrency, nativeGasCost))\n        : undefined\n\n    // if valid estimate from api and using api trade, use gas estimate from api\n    // NOTE - dont use gas estimate for L2s yet - need to verify accuracy\n    // if not, use local heuristic\n    const dollarCostToUse =\n      chainId && SUPPORTED_GAS_ESTIMATE_CHAIN_IDS.includes(chainId) && trade?.gasUseEstimateUSD\n        ? trade.gasUseEstimateUSD\n        : dollarGasCost\n\n    if (outputDollarValue && dollarCostToUse) {\n      // the rationale is that a user will not want their trade to fail for a loss due to slippage that is less than\n      // the cost of the gas of the failed transaction\n      const fraction = dollarCostToUse.asFraction.divide(outputDollarValue.asFraction)\n      const result = new Percent(fraction.numerator, fraction.denominator)\n      if (result.greaterThan(MAX_AUTO_SLIPPAGE_TOLERANCE)) return MAX_AUTO_SLIPPAGE_TOLERANCE\n      if (result.lessThan(MIN_AUTO_SLIPPAGE_TOLERANCE)) return MIN_AUTO_SLIPPAGE_TOLERANCE\n      return result\n    }\n\n    return V3_SWAP_DEFAULT_SLIPPAGE\n  }, [trade, onL2, nativeGasPrice, gasEstimate, nativeCurrency, nativeCurrencyPrice, chainId, outputDollarValue])\n\n  return useUserSlippageToleranceWithDefault(defaultSlippageTolerance)\n}\n"]},"metadata":{},"sourceType":"module"}