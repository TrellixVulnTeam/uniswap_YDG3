{"ast":null,"code":"import CID from 'cids';\nimport { getNameFromData, rmPrefix } from 'multicodec';\nimport { decode, toB58String } from 'multihashes';\nexport function hexToUint8Array(hex) {\n  hex = hex.startsWith('0x') ? hex.substr(2) : hex;\n  if (hex.length % 2 !== 0) throw new Error('hex must have length that is multiple of 2');\n  const arr = new Uint8Array(hex.length / 2);\n\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = parseInt(hex.substr(i * 2, 2), 16);\n  }\n\n  return arr;\n}\nconst UTF_8_DECODER = new TextDecoder('utf-8');\n/**\n * Returns the URI representation of the content hash for supported codecs\n * @param contenthash to decode\n */\n\nexport default function contenthashToUri(contenthash) {\n  const data = hexToUint8Array(contenthash);\n  const codec = getNameFromData(data);\n\n  switch (codec) {\n    case 'ipfs-ns':\n      {\n        const unprefixedData = rmPrefix(data);\n        const cid = new CID(unprefixedData);\n        return `ipfs://${toB58String(cid.multihash)}`;\n      }\n\n    case 'ipns-ns':\n      {\n        const unprefixedData = rmPrefix(data);\n        const cid = new CID(unprefixedData);\n        const multihash = decode(cid.multihash);\n\n        if (multihash.name === 'identity') {\n          return `ipns://${UTF_8_DECODER.decode(multihash.digest).trim()}`;\n        } else {\n          return `ipns://${toB58String(cid.multihash)}`;\n        }\n      }\n\n    default:\n      throw new Error(`Unrecognized codec: ${codec}`);\n  }\n}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/utils/contenthashToUri.ts"],"names":["CID","getNameFromData","rmPrefix","decode","toB58String","hexToUint8Array","hex","startsWith","substr","length","Error","arr","Uint8Array","i","parseInt","UTF_8_DECODER","TextDecoder","contenthashToUri","contenthash","data","codec","unprefixedData","cid","multihash","name","digest","trim"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,MAAhB;AACA,SAASC,eAAT,EAA0BC,QAA1B,QAA0C,YAA1C;AACA,SAASC,MAAT,EAAiBC,WAAjB,QAAoC,aAApC;AAEA,OAAO,SAASC,eAAT,CAAyBC,GAAzB,EAAkD;AACvDA,EAAAA,GAAG,GAAGA,GAAG,CAACC,UAAJ,CAAe,IAAf,IAAuBD,GAAG,CAACE,MAAJ,CAAW,CAAX,CAAvB,GAAuCF,GAA7C;AACA,MAAIA,GAAG,CAACG,MAAJ,GAAa,CAAb,KAAmB,CAAvB,EAA0B,MAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AAC1B,QAAMC,GAAG,GAAG,IAAIC,UAAJ,CAAeN,GAAG,CAACG,MAAJ,GAAa,CAA5B,CAAZ;;AACA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACF,MAAxB,EAAgCI,CAAC,EAAjC,EAAqC;AACnCF,IAAAA,GAAG,CAACE,CAAD,CAAH,GAASC,QAAQ,CAACR,GAAG,CAACE,MAAJ,CAAWK,CAAC,GAAG,CAAf,EAAkB,CAAlB,CAAD,EAAuB,EAAvB,CAAjB;AACD;;AACD,SAAOF,GAAP;AACD;AAED,MAAMI,aAAa,GAAG,IAAIC,WAAJ,CAAgB,OAAhB,CAAtB;AAEA;AACA;AACA;AACA;;AACA,eAAe,SAASC,gBAAT,CAA0BC,WAA1B,EAAuD;AACpE,QAAMC,IAAI,GAAGd,eAAe,CAACa,WAAD,CAA5B;AACA,QAAME,KAAK,GAAGnB,eAAe,CAACkB,IAAD,CAA7B;;AACA,UAAQC,KAAR;AACE,SAAK,SAAL;AAAgB;AACd,cAAMC,cAAc,GAAGnB,QAAQ,CAACiB,IAAD,CAA/B;AACA,cAAMG,GAAG,GAAG,IAAItB,GAAJ,CAAQqB,cAAR,CAAZ;AACA,eAAQ,UAASjB,WAAW,CAACkB,GAAG,CAACC,SAAL,CAAgB,EAA5C;AACD;;AACD,SAAK,SAAL;AAAgB;AACd,cAAMF,cAAc,GAAGnB,QAAQ,CAACiB,IAAD,CAA/B;AACA,cAAMG,GAAG,GAAG,IAAItB,GAAJ,CAAQqB,cAAR,CAAZ;AACA,cAAME,SAAS,GAAGpB,MAAM,CAACmB,GAAG,CAACC,SAAL,CAAxB;;AACA,YAAIA,SAAS,CAACC,IAAV,KAAmB,UAAvB,EAAmC;AACjC,iBAAQ,UAAST,aAAa,CAACZ,MAAd,CAAqBoB,SAAS,CAACE,MAA/B,EAAuCC,IAAvC,EAA8C,EAA/D;AACD,SAFD,MAEO;AACL,iBAAQ,UAAStB,WAAW,CAACkB,GAAG,CAACC,SAAL,CAAgB,EAA5C;AACD;AACF;;AACD;AACE,YAAM,IAAIb,KAAJ,CAAW,uBAAsBU,KAAM,EAAvC,CAAN;AAjBJ;AAmBD","sourcesContent":["import CID from 'cids'\nimport { getNameFromData, rmPrefix } from 'multicodec'\nimport { decode, toB58String } from 'multihashes'\n\nexport function hexToUint8Array(hex: string): Uint8Array {\n  hex = hex.startsWith('0x') ? hex.substr(2) : hex\n  if (hex.length % 2 !== 0) throw new Error('hex must have length that is multiple of 2')\n  const arr = new Uint8Array(hex.length / 2)\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = parseInt(hex.substr(i * 2, 2), 16)\n  }\n  return arr\n}\n\nconst UTF_8_DECODER = new TextDecoder('utf-8')\n\n/**\n * Returns the URI representation of the content hash for supported codecs\n * @param contenthash to decode\n */\nexport default function contenthashToUri(contenthash: string): string {\n  const data = hexToUint8Array(contenthash)\n  const codec = getNameFromData(data)\n  switch (codec) {\n    case 'ipfs-ns': {\n      const unprefixedData = rmPrefix(data)\n      const cid = new CID(unprefixedData)\n      return `ipfs://${toB58String(cid.multihash)}`\n    }\n    case 'ipns-ns': {\n      const unprefixedData = rmPrefix(data)\n      const cid = new CID(unprefixedData)\n      const multihash = decode(cid.multihash)\n      if (multihash.name === 'identity') {\n        return `ipns://${UTF_8_DECODER.decode(multihash.digest).trim()}`\n      } else {\n        return `ipns://${toB58String(cid.multihash)}`\n      }\n    }\n    default:\n      throw new Error(`Unrecognized codec: ${codec}`)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}