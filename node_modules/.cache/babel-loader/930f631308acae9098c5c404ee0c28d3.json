{"ast":null,"code":"import{parse}from'qs';import{useMemo}from'react';import{useLocation}from'react-router-dom';export function parsedQueryString(search){if(!search){// react-router-dom places search string in the hash\nvar hash=window.location.hash;search=hash.substr(hash.indexOf('?'));}return search&&search.length>1?parse(search,{parseArrays:false,ignoreQueryPrefix:true}):{};}export default function useParsedQueryString(){var _useLocation=useLocation(),search=_useLocation.search;return useMemo(function(){return parsedQueryString(search);},[search]);}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/hooks/useParsedQueryString.ts"],"names":["parse","useMemo","useLocation","parsedQueryString","search","hash","window","location","substr","indexOf","length","parseArrays","ignoreQueryPrefix","useParsedQueryString"],"mappings":"AAAA,OAASA,KAAT,KAAgC,IAAhC,CACA,OAASC,OAAT,KAAwB,OAAxB,CACA,OAASC,WAAT,KAA4B,kBAA5B,CAEA,MAAO,SAASC,CAAAA,iBAAT,CAA2BC,MAA3B,CAAsD,CAC3D,GAAI,CAACA,MAAL,CAAa,CACX;AACA,GAAMC,CAAAA,IAAI,CAAGC,MAAM,CAACC,QAAP,CAAgBF,IAA7B,CACAD,MAAM,CAAGC,IAAI,CAACG,MAAL,CAAYH,IAAI,CAACI,OAAL,CAAa,GAAb,CAAZ,CAAT,CACD,CACD,MAAOL,CAAAA,MAAM,EAAIA,MAAM,CAACM,MAAP,CAAgB,CAA1B,CAA8BV,KAAK,CAACI,MAAD,CAAS,CAAEO,WAAW,CAAE,KAAf,CAAsBC,iBAAiB,CAAE,IAAzC,CAAT,CAAnC,CAA+F,EAAtG,CACD,CAED,cAAe,SAASC,CAAAA,oBAAT,EAA0C,CACvD,iBAAmBX,WAAW,EAA9B,CAAQE,MAAR,cAAQA,MAAR,CACA,MAAOH,CAAAA,OAAO,CAAC,iBAAME,CAAAA,iBAAiB,CAACC,MAAD,CAAvB,EAAD,CAAkC,CAACA,MAAD,CAAlC,CAAd,CACD","sourcesContent":["import { parse, ParsedQs } from 'qs'\nimport { useMemo } from 'react'\nimport { useLocation } from 'react-router-dom'\n\nexport function parsedQueryString(search?: string): ParsedQs {\n  if (!search) {\n    // react-router-dom places search string in the hash\n    const hash = window.location.hash\n    search = hash.substr(hash.indexOf('?'))\n  }\n  return search && search.length > 1 ? parse(search, { parseArrays: false, ignoreQueryPrefix: true }) : {}\n}\n\nexport default function useParsedQueryString(): ParsedQs {\n  const { search } = useLocation()\n  return useMemo(() => parsedQueryString(search), [search])\n}\n"]},"metadata":{},"sourceType":"module"}