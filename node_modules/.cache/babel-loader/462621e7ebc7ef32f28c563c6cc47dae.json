{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { useMemo } from 'react';\nimport { NEVER_RELOAD, useSingleCallResult } from '../state/multicall/hooks';\nimport { useV3NFTPositionManagerContract } from './useContract';\nconst STARTS_WITH = 'data:application/json;base64,';\nexport function usePositionTokenURI(tokenId) {\n  _s();\n\n  const contract = useV3NFTPositionManagerContract();\n  const inputs = useMemo(() => [tokenId instanceof BigNumber ? tokenId.toHexString() : tokenId === null || tokenId === void 0 ? void 0 : tokenId.toString(16)], [tokenId]);\n  const {\n    result,\n    error,\n    loading,\n    valid\n  } = useSingleCallResult(contract, 'tokenURI', inputs, { ...NEVER_RELOAD,\n    gasRequired: 3000000\n  });\n  return useMemo(() => {\n    if (error || !valid || !tokenId) {\n      return {\n        valid: false,\n        loading: false\n      };\n    }\n\n    if (loading) {\n      return {\n        valid: true,\n        loading: true\n      };\n    }\n\n    if (!result) {\n      return {\n        valid: false,\n        loading: false\n      };\n    }\n\n    const [tokenURI] = result;\n    if (!tokenURI || !tokenURI.startsWith(STARTS_WITH)) return {\n      valid: false,\n      loading: false\n    };\n\n    try {\n      const json = JSON.parse(atob(tokenURI.slice(STARTS_WITH.length)));\n      return {\n        valid: true,\n        loading: false,\n        result: json\n      };\n    } catch (error) {\n      return {\n        valid: false,\n        loading: false\n      };\n    }\n  }, [error, loading, result, tokenId, valid]);\n}\n\n_s(usePositionTokenURI, \"SCLtzeoN4yVO2UjcH/UMQ86G5Io=\", false, function () {\n  return [useV3NFTPositionManagerContract, useSingleCallResult];\n});","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/hooks/usePositionTokenURI.ts"],"names":["BigNumber","useMemo","NEVER_RELOAD","useSingleCallResult","useV3NFTPositionManagerContract","STARTS_WITH","usePositionTokenURI","tokenId","contract","inputs","toHexString","toString","result","error","loading","valid","gasRequired","tokenURI","startsWith","json","JSON","parse","atob","slice","length"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,0BAA1B;AAEA,SAASC,OAAT,QAAwB,OAAxB;AAEA,SAASC,YAAT,EAAuBC,mBAAvB,QAAkD,0BAAlD;AACA,SAASC,+BAAT,QAAgD,eAAhD;AAIA,MAAMC,WAAW,GAAG,+BAApB;AAqBA,OAAO,SAASC,mBAAT,CAA6BC,OAA7B,EAAsF;AAAA;;AAC3F,QAAMC,QAAQ,GAAGJ,+BAA+B,EAAhD;AACA,QAAMK,MAAM,GAAGR,OAAO,CACpB,MAAM,CAACM,OAAO,YAAYP,SAAnB,GAA+BO,OAAO,CAACG,WAAR,EAA/B,GAAuDH,OAAvD,aAAuDA,OAAvD,uBAAuDA,OAAO,CAAEI,QAAT,CAAkB,EAAlB,CAAxD,CADc,EAEpB,CAACJ,OAAD,CAFoB,CAAtB;AAIA,QAAM;AAAEK,IAAAA,MAAF;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA,OAAjB;AAA0BC,IAAAA;AAA1B,MAAoCZ,mBAAmB,CAACK,QAAD,EAAW,UAAX,EAAuBC,MAAvB,EAA+B,EAC1F,GAAGP,YADuF;AAE1Fc,IAAAA,WAAW,EAAE;AAF6E,GAA/B,CAA7D;AAKA,SAAOf,OAAO,CAAC,MAAM;AACnB,QAAIY,KAAK,IAAI,CAACE,KAAV,IAAmB,CAACR,OAAxB,EAAiC;AAC/B,aAAO;AACLQ,QAAAA,KAAK,EAAE,KADF;AAELD,QAAAA,OAAO,EAAE;AAFJ,OAAP;AAID;;AACD,QAAIA,OAAJ,EAAa;AACX,aAAO;AACLC,QAAAA,KAAK,EAAE,IADF;AAELD,QAAAA,OAAO,EAAE;AAFJ,OAAP;AAID;;AACD,QAAI,CAACF,MAAL,EAAa;AACX,aAAO;AACLG,QAAAA,KAAK,EAAE,KADF;AAELD,QAAAA,OAAO,EAAE;AAFJ,OAAP;AAID;;AACD,UAAM,CAACG,QAAD,IAAaL,MAAnB;AACA,QAAI,CAACK,QAAD,IAAa,CAACA,QAAQ,CAACC,UAAT,CAAoBb,WAApB,CAAlB,EACE,OAAO;AACLU,MAAAA,KAAK,EAAE,KADF;AAELD,MAAAA,OAAO,EAAE;AAFJ,KAAP;;AAKF,QAAI;AACF,YAAMK,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACL,QAAQ,CAACM,KAAT,CAAelB,WAAW,CAACmB,MAA3B,CAAD,CAAf,CAAb;AAEA,aAAO;AACLT,QAAAA,KAAK,EAAE,IADF;AAELD,QAAAA,OAAO,EAAE,KAFJ;AAGLF,QAAAA,MAAM,EAAEO;AAHH,OAAP;AAKD,KARD,CAQE,OAAON,KAAP,EAAc;AACd,aAAO;AAAEE,QAAAA,KAAK,EAAE,KAAT;AAAgBD,QAAAA,OAAO,EAAE;AAAzB,OAAP;AACD;AACF,GArCa,EAqCX,CAACD,KAAD,EAAQC,OAAR,EAAiBF,MAAjB,EAAyBL,OAAzB,EAAkCQ,KAAlC,CArCW,CAAd;AAsCD;;GAjDeT,mB;UACGF,+B,EAKyBD,mB","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\nimport JSBI from 'jsbi'\nimport { useMemo } from 'react'\n\nimport { NEVER_RELOAD, useSingleCallResult } from '../state/multicall/hooks'\nimport { useV3NFTPositionManagerContract } from './useContract'\n\ntype TokenId = number | JSBI | BigNumber\n\nconst STARTS_WITH = 'data:application/json;base64,'\n\ntype UsePositionTokenURIResult =\n  | {\n      valid: true\n      loading: false\n      result: {\n        name: string\n        description: string\n        image: string\n      }\n    }\n  | {\n      valid: false\n      loading: false\n    }\n  | {\n      valid: true\n      loading: true\n    }\n\nexport function usePositionTokenURI(tokenId: TokenId | undefined): UsePositionTokenURIResult {\n  const contract = useV3NFTPositionManagerContract()\n  const inputs = useMemo(\n    () => [tokenId instanceof BigNumber ? tokenId.toHexString() : tokenId?.toString(16)],\n    [tokenId]\n  )\n  const { result, error, loading, valid } = useSingleCallResult(contract, 'tokenURI', inputs, {\n    ...NEVER_RELOAD,\n    gasRequired: 3_000_000,\n  })\n\n  return useMemo(() => {\n    if (error || !valid || !tokenId) {\n      return {\n        valid: false,\n        loading: false,\n      }\n    }\n    if (loading) {\n      return {\n        valid: true,\n        loading: true,\n      }\n    }\n    if (!result) {\n      return {\n        valid: false,\n        loading: false,\n      }\n    }\n    const [tokenURI] = result as [string]\n    if (!tokenURI || !tokenURI.startsWith(STARTS_WITH))\n      return {\n        valid: false,\n        loading: false,\n      }\n\n    try {\n      const json = JSON.parse(atob(tokenURI.slice(STARTS_WITH.length)))\n\n      return {\n        valid: true,\n        loading: false,\n        result: json,\n      }\n    } catch (error) {\n      return { valid: false, loading: false }\n    }\n  }, [error, loading, result, tokenId, valid])\n}\n"]},"metadata":{},"sourceType":"module"}