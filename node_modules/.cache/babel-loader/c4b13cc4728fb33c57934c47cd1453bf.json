{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { getVersionUpgrade, minVersionBump, VersionUpgrade } from '@uniswap/token-lists';\nimport { SupportedChainId } from 'constants/chains';\nimport { ARBITRUM_LIST, OPTIMISM_LIST, UNSUPPORTED_LIST_URLS } from 'constants/lists';\nimport { useCallback, useEffect } from 'react';\nimport { useAppDispatch } from 'state/hooks';\nimport { useAllLists } from 'state/lists/hooks';\nimport { useFetchListCallback } from '../../hooks/useFetchListCallback';\nimport useInterval from '../../hooks/useInterval';\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible';\nimport { useActiveWeb3React } from '../../hooks/web3';\nimport { acceptListUpdate, enableList } from './actions';\nimport { useActiveListUrls } from './hooks';\nexport default function Updater() {\n  _s();\n\n  const {\n    chainId,\n    library\n  } = useActiveWeb3React();\n  const dispatch = useAppDispatch();\n  const isWindowVisible = useIsWindowVisible(); // get all loaded lists, and the active urls\n\n  const lists = useAllLists();\n  const activeListUrls = useActiveListUrls();\n  const fetchList = useFetchListCallback();\n  const fetchAllListsCallback = useCallback(() => {\n    if (!isWindowVisible) return;\n    Object.keys(lists).forEach(url => fetchList(url).catch(error => console.debug('interval list fetching error', error)));\n  }, [fetchList, isWindowVisible, lists]);\n  useEffect(() => {\n    if (chainId && [SupportedChainId.OPTIMISM, SupportedChainId.OPTIMISTIC_KOVAN].includes(chainId)) {\n      dispatch(enableList(OPTIMISM_LIST));\n    }\n\n    if (chainId && [SupportedChainId.ARBITRUM_ONE, SupportedChainId.ARBITRUM_RINKEBY].includes(chainId)) {\n      dispatch(enableList(ARBITRUM_LIST));\n    }\n  }, [chainId, dispatch]); // fetch all lists every 10 minutes, but only after we initialize library\n\n  useInterval(fetchAllListsCallback, library ? 1000 * 60 * 10 : null); // whenever a list is not loaded and not loading, try again to load it\n\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl];\n\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch(error => console.debug('list added fetching error', error));\n      }\n    });\n  }, [dispatch, fetchList, library, lists]); // if any lists from unsupported lists are loaded, check them too (in case new updates since last visit)\n\n  useEffect(() => {\n    UNSUPPORTED_LIST_URLS.forEach(listUrl => {\n      const list = lists[listUrl];\n\n      if (!list || !list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch(error => console.debug('list added fetching error', error));\n      }\n    });\n  }, [dispatch, fetchList, library, lists]); // automatically update lists if versions are minor/patch\n\n  useEffect(() => {\n    Object.keys(lists).forEach(listUrl => {\n      const list = lists[listUrl];\n\n      if (list.current && list.pendingUpdate) {\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version);\n\n        switch (bump) {\n          case VersionUpgrade.NONE:\n            throw new Error('unexpected no version bump');\n\n          case VersionUpgrade.PATCH:\n          case VersionUpgrade.MINOR:\n            const min = minVersionBump(list.current.tokens, list.pendingUpdate.tokens); // automatically update minor/patch as long as bump matches the min update\n\n            if (bump >= min) {\n              dispatch(acceptListUpdate(listUrl));\n            } else {\n              console.error(`List at url ${listUrl} could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR`);\n            }\n\n            break;\n          // update any active or inactive lists\n\n          case VersionUpgrade.MAJOR:\n            dispatch(acceptListUpdate(listUrl));\n        }\n      }\n    });\n  }, [dispatch, lists, activeListUrls]);\n  return null;\n}\n\n_s(Updater, \"pyRAF4FUgH259ofhyapMD2QiZss=\", false, function () {\n  return [useActiveWeb3React, useAppDispatch, useIsWindowVisible, useAllLists, useActiveListUrls, useFetchListCallback, useInterval];\n});\n\n_c = Updater;\n\nvar _c;\n\n$RefreshReg$(_c, \"Updater\");","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/state/lists/updater.ts"],"names":["getVersionUpgrade","minVersionBump","VersionUpgrade","SupportedChainId","ARBITRUM_LIST","OPTIMISM_LIST","UNSUPPORTED_LIST_URLS","useCallback","useEffect","useAppDispatch","useAllLists","useFetchListCallback","useInterval","useIsWindowVisible","useActiveWeb3React","acceptListUpdate","enableList","useActiveListUrls","Updater","chainId","library","dispatch","isWindowVisible","lists","activeListUrls","fetchList","fetchAllListsCallback","Object","keys","forEach","url","catch","error","console","debug","OPTIMISM","OPTIMISTIC_KOVAN","includes","ARBITRUM_ONE","ARBITRUM_RINKEBY","listUrl","list","current","loadingRequestId","pendingUpdate","bump","version","NONE","Error","PATCH","MINOR","min","tokens","MAJOR"],"mappings":"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","sourcesContent":["import { getVersionUpgrade, minVersionBump, VersionUpgrade } from '@uniswap/token-lists'\nimport { SupportedChainId } from 'constants/chains'\nimport { ARBITRUM_LIST, OPTIMISM_LIST, UNSUPPORTED_LIST_URLS } from 'constants/lists'\nimport { useCallback, useEffect } from 'react'\nimport { useAppDispatch } from 'state/hooks'\nimport { useAllLists } from 'state/lists/hooks'\n\nimport { useFetchListCallback } from '../../hooks/useFetchListCallback'\nimport useInterval from '../../hooks/useInterval'\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible'\nimport { useActiveWeb3React } from '../../hooks/web3'\nimport { acceptListUpdate, enableList } from './actions'\nimport { useActiveListUrls } from './hooks'\n\nexport default function Updater(): null {\n  const { chainId, library } = useActiveWeb3React()\n  const dispatch = useAppDispatch()\n  const isWindowVisible = useIsWindowVisible()\n\n  // get all loaded lists, and the active urls\n  const lists = useAllLists()\n  const activeListUrls = useActiveListUrls()\n\n  const fetchList = useFetchListCallback()\n  const fetchAllListsCallback = useCallback(() => {\n    if (!isWindowVisible) return\n    Object.keys(lists).forEach((url) =>\n      fetchList(url).catch((error) => console.debug('interval list fetching error', error))\n    )\n  }, [fetchList, isWindowVisible, lists])\n\n  useEffect(() => {\n    if (chainId && [SupportedChainId.OPTIMISM, SupportedChainId.OPTIMISTIC_KOVAN].includes(chainId)) {\n      dispatch(enableList(OPTIMISM_LIST))\n    }\n    if (chainId && [SupportedChainId.ARBITRUM_ONE, SupportedChainId.ARBITRUM_RINKEBY].includes(chainId)) {\n      dispatch(enableList(ARBITRUM_LIST))\n    }\n  }, [chainId, dispatch])\n  // fetch all lists every 10 minutes, but only after we initialize library\n  useInterval(fetchAllListsCallback, library ? 1000 * 60 * 10 : null)\n\n  // whenever a list is not loaded and not loading, try again to load it\n  useEffect(() => {\n    Object.keys(lists).forEach((listUrl) => {\n      const list = lists[listUrl]\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch((error) => console.debug('list added fetching error', error))\n      }\n    })\n  }, [dispatch, fetchList, library, lists])\n\n  // if any lists from unsupported lists are loaded, check them too (in case new updates since last visit)\n  useEffect(() => {\n    UNSUPPORTED_LIST_URLS.forEach((listUrl) => {\n      const list = lists[listUrl]\n      if (!list || (!list.current && !list.loadingRequestId && !list.error)) {\n        fetchList(listUrl).catch((error) => console.debug('list added fetching error', error))\n      }\n    })\n  }, [dispatch, fetchList, library, lists])\n\n  // automatically update lists if versions are minor/patch\n  useEffect(() => {\n    Object.keys(lists).forEach((listUrl) => {\n      const list = lists[listUrl]\n      if (list.current && list.pendingUpdate) {\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version)\n        switch (bump) {\n          case VersionUpgrade.NONE:\n            throw new Error('unexpected no version bump')\n          case VersionUpgrade.PATCH:\n          case VersionUpgrade.MINOR:\n            const min = minVersionBump(list.current.tokens, list.pendingUpdate.tokens)\n            // automatically update minor/patch as long as bump matches the min update\n            if (bump >= min) {\n              dispatch(acceptListUpdate(listUrl))\n            } else {\n              console.error(\n                `List at url ${listUrl} could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR`\n              )\n            }\n            break\n\n          // update any active or inactive lists\n          case VersionUpgrade.MAJOR:\n            dispatch(acceptListUpdate(listUrl))\n        }\n      }\n    })\n  }, [dispatch, lists, activeListUrls])\n\n  return null\n}\n"]},"metadata":{},"sourceType":"module"}