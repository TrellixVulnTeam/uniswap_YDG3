{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { parsedQueryString } from 'hooks/useParsedQueryString';\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions';\nimport { queryParametersToSwapState } from './hooks';\nconst initialState = queryParametersToSwapState(parsedQueryString());\nexport default createReducer(initialState, builder => builder.addCase(replaceSwapState, (state, {\n  payload: {\n    typedValue,\n    recipient,\n    field,\n    inputCurrencyId,\n    outputCurrencyId\n  }\n}) => {\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrencyId !== null && inputCurrencyId !== void 0 ? inputCurrencyId : null\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrencyId !== null && outputCurrencyId !== void 0 ? outputCurrencyId : null\n    },\n    independentField: field,\n    typedValue,\n    recipient\n  };\n}).addCase(selectCurrency, (state, {\n  payload: {\n    currencyId,\n    field\n  }\n}) => {\n  const otherField = field === Field.INPUT ? Field.OUTPUT : Field.INPUT;\n\n  if (currencyId === state[otherField].currencyId) {\n    // the case where we have to swap the order\n    return { ...state,\n      independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n      [field]: {\n        currencyId\n      },\n      [otherField]: {\n        currencyId: state[field].currencyId\n      }\n    };\n  } else {\n    // the normal case\n    return { ...state,\n      [field]: {\n        currencyId\n      }\n    };\n  }\n}).addCase(switchCurrencies, state => {\n  return { ...state,\n    independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n    [Field.INPUT]: {\n      currencyId: state[Field.OUTPUT].currencyId\n    },\n    [Field.OUTPUT]: {\n      currencyId: state[Field.INPUT].currencyId\n    }\n  };\n}).addCase(typeInput, (state, {\n  payload: {\n    field,\n    typedValue\n  }\n}) => {\n  return { ...state,\n    independentField: field,\n    typedValue\n  };\n}).addCase(setRecipient, (state, {\n  payload: {\n    recipient\n  }\n}) => {\n  state.recipient = recipient;\n}));","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/state/swap/reducer.ts"],"names":["createReducer","parsedQueryString","Field","replaceSwapState","selectCurrency","setRecipient","switchCurrencies","typeInput","queryParametersToSwapState","initialState","builder","addCase","state","payload","typedValue","recipient","field","inputCurrencyId","outputCurrencyId","INPUT","currencyId","OUTPUT","independentField","otherField"],"mappings":"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","sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\nimport { parsedQueryString } from 'hooks/useParsedQueryString'\n\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions'\nimport { queryParametersToSwapState } from './hooks'\n\nexport interface SwapState {\n  readonly independentField: Field\n  readonly typedValue: string\n  readonly [Field.INPUT]: {\n    readonly currencyId: string | undefined | null\n  }\n  readonly [Field.OUTPUT]: {\n    readonly currencyId: string | undefined | null\n  }\n  // the typed recipient address or ENS name, or null if swap should go to sender\n  readonly recipient: string | null\n}\n\nconst initialState: SwapState = queryParametersToSwapState(parsedQueryString())\n\nexport default createReducer<SwapState>(initialState, (builder) =>\n  builder\n    .addCase(\n      replaceSwapState,\n      (state, { payload: { typedValue, recipient, field, inputCurrencyId, outputCurrencyId } }) => {\n        return {\n          [Field.INPUT]: {\n            currencyId: inputCurrencyId ?? null,\n          },\n          [Field.OUTPUT]: {\n            currencyId: outputCurrencyId ?? null,\n          },\n          independentField: field,\n          typedValue,\n          recipient,\n        }\n      }\n    )\n    .addCase(selectCurrency, (state, { payload: { currencyId, field } }) => {\n      const otherField = field === Field.INPUT ? Field.OUTPUT : Field.INPUT\n      if (currencyId === state[otherField].currencyId) {\n        // the case where we have to swap the order\n        return {\n          ...state,\n          independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n          [field]: { currencyId },\n          [otherField]: { currencyId: state[field].currencyId },\n        }\n      } else {\n        // the normal case\n        return {\n          ...state,\n          [field]: { currencyId },\n        }\n      }\n    })\n    .addCase(switchCurrencies, (state) => {\n      return {\n        ...state,\n        independentField: state.independentField === Field.INPUT ? Field.OUTPUT : Field.INPUT,\n        [Field.INPUT]: { currencyId: state[Field.OUTPUT].currencyId },\n        [Field.OUTPUT]: { currencyId: state[Field.INPUT].currencyId },\n      }\n    })\n    .addCase(typeInput, (state, { payload: { field, typedValue } }) => {\n      return {\n        ...state,\n        independentField: field,\n        typedValue,\n      }\n    })\n    .addCase(setRecipient, (state, { payload: { recipient } }) => {\n      state.recipient = recipient\n    })\n)\n"]},"metadata":{},"sourceType":"module"}