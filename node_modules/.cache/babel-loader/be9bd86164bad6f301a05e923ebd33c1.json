{"ast":null,"code":"import _slicedToArray from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _defineProperty from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import{Trans}from\"@lingui/react\";import{parseUnits}from'@ethersproject/units';import{CurrencyAmount,TradeType}from'@uniswap/sdk-core';import{useBestTrade}from'hooks/useBestTrade';import JSBI from'jsbi';import{useCallback,useEffect,useMemo,useState}from'react';import{useAppDispatch,useAppSelector}from'state/hooks';import{useCurrency}from'../../hooks/Tokens';import useENS from'../../hooks/useENS';import useParsedQueryString from'../../hooks/useParsedQueryString';import useSwapSlippageTolerance from'../../hooks/useSwapSlippageTolerance';import{useActiveWeb3React}from'../../hooks/web3';import{isAddress}from'../../utils';import{useCurrencyBalances}from'../wallet/hooks';import{Field,replaceSwapState,selectCurrency,setRecipient,switchCurrencies,typeInput}from'./actions';import{jsx as _jsx}from\"react/jsx-runtime\";export function useSwapState(){return useAppSelector(function(state){return state.swap;});}export function useSwapActionHandlers(){var dispatch=useAppDispatch();var onCurrencySelection=useCallback(function(field,currency){dispatch(selectCurrency({field:field,currencyId:currency.isToken?currency.address:currency.isNative?'ETH':''}));},[dispatch]);var onSwitchTokens=useCallback(function(){dispatch(switchCurrencies());},[dispatch]);var onUserInput=useCallback(function(field,typedValue){dispatch(typeInput({field:field,typedValue:typedValue}));},[dispatch]);var onChangeRecipient=useCallback(function(recipient){dispatch(setRecipient({recipient:recipient}));},[dispatch]);return{onSwitchTokens:onSwitchTokens,onCurrencySelection:onCurrencySelection,onUserInput:onUserInput,onChangeRecipient:onChangeRecipient};}// try to parse a user entered amount for a given token\nexport function tryParseAmount(value,currency){if(!value||!currency){return undefined;}try{var typedValueParsed=parseUnits(value,currency.decimals).toString();if(typedValueParsed!=='0'){return CurrencyAmount.fromRawAmount(currency,JSBI.BigInt(typedValueParsed));}}catch(error){// should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\nconsole.debug(\"Failed to parse input amount: \\\"\".concat(value,\"\\\"\"),error);}// necessary for all paths to return a value\nreturn undefined;}var BAD_RECIPIENT_ADDRESSES={'0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f':true,// v2 factory\n'0xf164fC0Ec4E93095b804a4795bBe1e041497b92a':true,// v2 router 01\n'0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D':true// v2 router 02\n};// from the current swap inputs, compute the best trade and return it.\nexport function useDerivedSwapInfo(){var _ref,_ref3,_currencyBalances,_currencies,_trade$trade,_trade$trade2;var _useActiveWeb3React=useActiveWeb3React(),account=_useActiveWeb3React.account;var _useSwapState=useSwapState(),independentField=_useSwapState.independentField,typedValue=_useSwapState.typedValue,inputCurrencyId=_useSwapState[Field.INPUT].currencyId,outputCurrencyId=_useSwapState[Field.OUTPUT].currencyId,recipient=_useSwapState.recipient;var inputCurrency=useCurrency(inputCurrencyId);var outputCurrency=useCurrency(outputCurrencyId);var recipientLookup=useENS(recipient!==null&&recipient!==void 0?recipient:undefined);var to=(_ref=recipient===null?account:recipientLookup.address)!==null&&_ref!==void 0?_ref:null;var relevantTokenBalances=useCurrencyBalances(account!==null&&account!==void 0?account:undefined,useMemo(function(){return[inputCurrency!==null&&inputCurrency!==void 0?inputCurrency:undefined,outputCurrency!==null&&outputCurrency!==void 0?outputCurrency:undefined];},[inputCurrency,outputCurrency]));var isExactIn=independentField===Field.INPUT;var parsedAmount=useMemo(function(){var _ref2;return tryParseAmount(typedValue,(_ref2=isExactIn?inputCurrency:outputCurrency)!==null&&_ref2!==void 0?_ref2:undefined);},[inputCurrency,isExactIn,outputCurrency,typedValue]);var trade=useBestTrade(isExactIn?TradeType.EXACT_INPUT:TradeType.EXACT_OUTPUT,parsedAmount,(_ref3=isExactIn?outputCurrency:inputCurrency)!==null&&_ref3!==void 0?_ref3:undefined);var currencyBalances=(_currencyBalances={},_defineProperty(_currencyBalances,Field.INPUT,relevantTokenBalances[0]),_defineProperty(_currencyBalances,Field.OUTPUT,relevantTokenBalances[1]),_currencyBalances);var currencies=(_currencies={},_defineProperty(_currencies,Field.INPUT,inputCurrency),_defineProperty(_currencies,Field.OUTPUT,outputCurrency),_currencies);var inputError;if(!account){inputError=/*#__PURE__*/_jsx(Trans,{id:\"Connect Wallet\"});}if(!currencies[Field.INPUT]||!currencies[Field.OUTPUT]){var _inputError;inputError=(_inputError=inputError)!==null&&_inputError!==void 0?_inputError:/*#__PURE__*/_jsx(Trans,{id:\"Select a token\"});}if(!parsedAmount){var _inputError2;inputError=(_inputError2=inputError)!==null&&_inputError2!==void 0?_inputError2:/*#__PURE__*/_jsx(Trans,{id:\"Enter an amount\"});}var formattedTo=isAddress(to);if(!to||!formattedTo){var _inputError3;inputError=(_inputError3=inputError)!==null&&_inputError3!==void 0?_inputError3:/*#__PURE__*/_jsx(Trans,{id:\"Enter a recipient\"});}else{if(BAD_RECIPIENT_ADDRESSES[formattedTo]){var _inputError4;inputError=(_inputError4=inputError)!==null&&_inputError4!==void 0?_inputError4:/*#__PURE__*/_jsx(Trans,{id:\"Invalid recipient\"});}}var allowedSlippage=useSwapSlippageTolerance((_trade$trade=trade.trade)!==null&&_trade$trade!==void 0?_trade$trade:undefined);// compare input balance to max input based on version\nvar _ref4=[currencyBalances[Field.INPUT],(_trade$trade2=trade.trade)===null||_trade$trade2===void 0?void 0:_trade$trade2.maximumAmountIn(allowedSlippage)],balanceIn=_ref4[0],amountIn=_ref4[1];if(balanceIn&&amountIn&&balanceIn.lessThan(amountIn)){inputError=/*#__PURE__*/_jsx(Trans,{id:\"Insufficient {0} balance\",values:{0:amountIn.currency.symbol}});}return{currencies:currencies,currencyBalances:currencyBalances,parsedAmount:parsedAmount,inputError:inputError,trade:trade,allowedSlippage:allowedSlippage};}function parseCurrencyFromURLParameter(urlParam){if(typeof urlParam==='string'){var valid=isAddress(urlParam);if(valid)return valid;if(urlParam.toUpperCase()==='ETH')return'ETH';}return'';}function parseTokenAmountURLParameter(urlParam){return typeof urlParam==='string'&&!isNaN(parseFloat(urlParam))?urlParam:'';}function parseIndependentFieldURLParameter(urlParam){return typeof urlParam==='string'&&urlParam.toLowerCase()==='output'?Field.OUTPUT:Field.INPUT;}var ENS_NAME_REGEX=/^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/;var ADDRESS_REGEX=/^0x[a-fA-F0-9]{40}$/;function validatedRecipient(recipient){if(typeof recipient!=='string')return null;var address=isAddress(recipient);if(address)return address;if(ENS_NAME_REGEX.test(recipient))return recipient;if(ADDRESS_REGEX.test(recipient))return recipient;return null;}export function queryParametersToSwapState(parsedQs){var _inputCurrency,_outputCurrency,_ref5;var inputCurrency=parseCurrencyFromURLParameter(parsedQs.inputCurrency);var outputCurrency=parseCurrencyFromURLParameter(parsedQs.outputCurrency);if(inputCurrency===''&&outputCurrency===''){// default to ETH input\ninputCurrency='ETH';}else if(inputCurrency===outputCurrency){// clear output if identical\noutputCurrency='';}var recipient=validatedRecipient(parsedQs.recipient);return _ref5={},_defineProperty(_ref5,Field.INPUT,{currencyId:inputCurrency===''?null:(_inputCurrency=inputCurrency)!==null&&_inputCurrency!==void 0?_inputCurrency:null}),_defineProperty(_ref5,Field.OUTPUT,{currencyId:outputCurrency===''?null:(_outputCurrency=outputCurrency)!==null&&_outputCurrency!==void 0?_outputCurrency:null}),_defineProperty(_ref5,\"typedValue\",parseTokenAmountURLParameter(parsedQs.exactAmount)),_defineProperty(_ref5,\"independentField\",parseIndependentFieldURLParameter(parsedQs.exactField)),_defineProperty(_ref5,\"recipient\",recipient),_ref5;}// updates the swap state to use the defaults for a given network\nexport function useDefaultsFromURLSearch(){var _useActiveWeb3React2=useActiveWeb3React(),chainId=_useActiveWeb3React2.chainId;var dispatch=useAppDispatch();var parsedQs=useParsedQueryString();var _useState=useState(),_useState2=_slicedToArray(_useState,2),result=_useState2[0],setResult=_useState2[1];useEffect(function(){var _parsed$Field$INPUT$c,_parsed$Field$OUTPUT$;if(!chainId)return;var parsed=queryParametersToSwapState(parsedQs);var inputCurrencyId=(_parsed$Field$INPUT$c=parsed[Field.INPUT].currencyId)!==null&&_parsed$Field$INPUT$c!==void 0?_parsed$Field$INPUT$c:undefined;var outputCurrencyId=(_parsed$Field$OUTPUT$=parsed[Field.OUTPUT].currencyId)!==null&&_parsed$Field$OUTPUT$!==void 0?_parsed$Field$OUTPUT$:undefined;dispatch(replaceSwapState({typedValue:parsed.typedValue,field:parsed.independentField,inputCurrencyId:inputCurrencyId,outputCurrencyId:outputCurrencyId,recipient:parsed.recipient}));setResult({inputCurrencyId:inputCurrencyId,outputCurrencyId:outputCurrencyId});// eslint-disable-next-line react-hooks/exhaustive-deps\n},[dispatch,chainId]);return result;}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/state/swap/hooks.tsx"],"names":["parseUnits","CurrencyAmount","TradeType","useBestTrade","JSBI","useCallback","useEffect","useMemo","useState","useAppDispatch","useAppSelector","useCurrency","useENS","useParsedQueryString","useSwapSlippageTolerance","useActiveWeb3React","isAddress","useCurrencyBalances","Field","replaceSwapState","selectCurrency","setRecipient","switchCurrencies","typeInput","useSwapState","state","swap","useSwapActionHandlers","dispatch","onCurrencySelection","field","currency","currencyId","isToken","address","isNative","onSwitchTokens","onUserInput","typedValue","onChangeRecipient","recipient","tryParseAmount","value","undefined","typedValueParsed","decimals","toString","fromRawAmount","BigInt","error","console","debug","BAD_RECIPIENT_ADDRESSES","useDerivedSwapInfo","account","independentField","inputCurrencyId","INPUT","outputCurrencyId","OUTPUT","inputCurrency","outputCurrency","recipientLookup","to","relevantTokenBalances","isExactIn","parsedAmount","trade","EXACT_INPUT","EXACT_OUTPUT","currencyBalances","currencies","inputError","formattedTo","allowedSlippage","maximumAmountIn","balanceIn","amountIn","lessThan","symbol","parseCurrencyFromURLParameter","urlParam","valid","toUpperCase","parseTokenAmountURLParameter","isNaN","parseFloat","parseIndependentFieldURLParameter","toLowerCase","ENS_NAME_REGEX","ADDRESS_REGEX","validatedRecipient","test","queryParametersToSwapState","parsedQs","exactAmount","exactField","useDefaultsFromURLSearch","chainId","result","setResult","parsed"],"mappings":"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","sourcesContent":["import { parseUnits } from '@ethersproject/units'\nimport { Trans } from '@lingui/macro'\nimport { Currency, CurrencyAmount, Percent, TradeType } from '@uniswap/sdk-core'\nimport { useBestTrade } from 'hooks/useBestTrade'\nimport JSBI from 'jsbi'\nimport { ParsedQs } from 'qs'\nimport { ReactNode, useCallback, useEffect, useMemo, useState } from 'react'\nimport { useAppDispatch, useAppSelector } from 'state/hooks'\nimport { InterfaceTrade, TradeState } from 'state/routing/types'\n\nimport { useCurrency } from '../../hooks/Tokens'\nimport useENS from '../../hooks/useENS'\nimport useParsedQueryString from '../../hooks/useParsedQueryString'\nimport useSwapSlippageTolerance from '../../hooks/useSwapSlippageTolerance'\nimport { useActiveWeb3React } from '../../hooks/web3'\nimport { isAddress } from '../../utils'\nimport { AppState } from '../index'\nimport { useCurrencyBalances } from '../wallet/hooks'\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions'\nimport { SwapState } from './reducer'\n\nexport function useSwapState(): AppState['swap'] {\n  return useAppSelector((state) => state.swap)\n}\n\nexport function useSwapActionHandlers(): {\n  onCurrencySelection: (field: Field, currency: Currency) => void\n  onSwitchTokens: () => void\n  onUserInput: (field: Field, typedValue: string) => void\n  onChangeRecipient: (recipient: string | null) => void\n} {\n  const dispatch = useAppDispatch()\n  const onCurrencySelection = useCallback(\n    (field: Field, currency: Currency) => {\n      dispatch(\n        selectCurrency({\n          field,\n          currencyId: currency.isToken ? currency.address : currency.isNative ? 'ETH' : '',\n        })\n      )\n    },\n    [dispatch]\n  )\n\n  const onSwitchTokens = useCallback(() => {\n    dispatch(switchCurrencies())\n  }, [dispatch])\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue }))\n    },\n    [dispatch]\n  )\n\n  const onChangeRecipient = useCallback(\n    (recipient: string | null) => {\n      dispatch(setRecipient({ recipient }))\n    },\n    [dispatch]\n  )\n\n  return {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient,\n  }\n}\n\n// try to parse a user entered amount for a given token\nexport function tryParseAmount<T extends Currency>(value?: string, currency?: T): CurrencyAmount<T> | undefined {\n  if (!value || !currency) {\n    return undefined\n  }\n  try {\n    const typedValueParsed = parseUnits(value, currency.decimals).toString()\n    if (typedValueParsed !== '0') {\n      return CurrencyAmount.fromRawAmount(currency, JSBI.BigInt(typedValueParsed))\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(`Failed to parse input amount: \"${value}\"`, error)\n  }\n  // necessary for all paths to return a value\n  return undefined\n}\n\nconst BAD_RECIPIENT_ADDRESSES: { [address: string]: true } = {\n  '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f': true, // v2 factory\n  '0xf164fC0Ec4E93095b804a4795bBe1e041497b92a': true, // v2 router 01\n  '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D': true, // v2 router 02\n}\n\n// from the current swap inputs, compute the best trade and return it.\nexport function useDerivedSwapInfo(): {\n  currencies: { [field in Field]?: Currency | null }\n  currencyBalances: { [field in Field]?: CurrencyAmount<Currency> }\n  parsedAmount: CurrencyAmount<Currency> | undefined\n  inputError?: ReactNode\n  trade: {\n    trade: InterfaceTrade<Currency, Currency, TradeType> | undefined\n    state: TradeState\n  }\n  allowedSlippage: Percent\n} {\n  const { account } = useActiveWeb3React()\n\n  const {\n    independentField,\n    typedValue,\n    [Field.INPUT]: { currencyId: inputCurrencyId },\n    [Field.OUTPUT]: { currencyId: outputCurrencyId },\n    recipient,\n  } = useSwapState()\n\n  const inputCurrency = useCurrency(inputCurrencyId)\n  const outputCurrency = useCurrency(outputCurrencyId)\n  const recipientLookup = useENS(recipient ?? undefined)\n  const to: string | null = (recipient === null ? account : recipientLookup.address) ?? null\n\n  const relevantTokenBalances = useCurrencyBalances(\n    account ?? undefined,\n    useMemo(() => [inputCurrency ?? undefined, outputCurrency ?? undefined], [inputCurrency, outputCurrency])\n  )\n\n  const isExactIn: boolean = independentField === Field.INPUT\n  const parsedAmount = useMemo(\n    () => tryParseAmount(typedValue, (isExactIn ? inputCurrency : outputCurrency) ?? undefined),\n    [inputCurrency, isExactIn, outputCurrency, typedValue]\n  )\n\n  const trade = useBestTrade(\n    isExactIn ? TradeType.EXACT_INPUT : TradeType.EXACT_OUTPUT,\n    parsedAmount,\n    (isExactIn ? outputCurrency : inputCurrency) ?? undefined\n  )\n\n  const currencyBalances = {\n    [Field.INPUT]: relevantTokenBalances[0],\n    [Field.OUTPUT]: relevantTokenBalances[1],\n  }\n\n  const currencies: { [field in Field]?: Currency | null } = {\n    [Field.INPUT]: inputCurrency,\n    [Field.OUTPUT]: outputCurrency,\n  }\n\n  let inputError: ReactNode | undefined\n  if (!account) {\n    inputError = <Trans>Connect Wallet</Trans>\n  }\n\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n    inputError = inputError ?? <Trans>Select a token</Trans>\n  }\n\n  if (!parsedAmount) {\n    inputError = inputError ?? <Trans>Enter an amount</Trans>\n  }\n\n  const formattedTo = isAddress(to)\n  if (!to || !formattedTo) {\n    inputError = inputError ?? <Trans>Enter a recipient</Trans>\n  } else {\n    if (BAD_RECIPIENT_ADDRESSES[formattedTo]) {\n      inputError = inputError ?? <Trans>Invalid recipient</Trans>\n    }\n  }\n\n  const allowedSlippage = useSwapSlippageTolerance(trade.trade ?? undefined)\n\n  // compare input balance to max input based on version\n  const [balanceIn, amountIn] = [currencyBalances[Field.INPUT], trade.trade?.maximumAmountIn(allowedSlippage)]\n\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n    inputError = <Trans>Insufficient {amountIn.currency.symbol} balance</Trans>\n  }\n\n  return {\n    currencies,\n    currencyBalances,\n    parsedAmount,\n    inputError,\n    trade,\n    allowedSlippage,\n  }\n}\n\nfunction parseCurrencyFromURLParameter(urlParam: any): string {\n  if (typeof urlParam === 'string') {\n    const valid = isAddress(urlParam)\n    if (valid) return valid\n    if (urlParam.toUpperCase() === 'ETH') return 'ETH'\n  }\n  return ''\n}\n\nfunction parseTokenAmountURLParameter(urlParam: any): string {\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam)) ? urlParam : ''\n}\n\nfunction parseIndependentFieldURLParameter(urlParam: any): Field {\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT\n}\n\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/\nfunction validatedRecipient(recipient: any): string | null {\n  if (typeof recipient !== 'string') return null\n  const address = isAddress(recipient)\n  if (address) return address\n  if (ENS_NAME_REGEX.test(recipient)) return recipient\n  if (ADDRESS_REGEX.test(recipient)) return recipient\n  return null\n}\n\nexport function queryParametersToSwapState(parsedQs: ParsedQs): SwapState {\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency)\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency)\n  if (inputCurrency === '' && outputCurrency === '') {\n    // default to ETH input\n    inputCurrency = 'ETH'\n  } else if (inputCurrency === outputCurrency) {\n    // clear output if identical\n    outputCurrency = ''\n  }\n\n  const recipient = validatedRecipient(parsedQs.recipient)\n\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrency === '' ? null : inputCurrency ?? null,\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrency === '' ? null : outputCurrency ?? null,\n    },\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\n    recipient,\n  }\n}\n\n// updates the swap state to use the defaults for a given network\nexport function useDefaultsFromURLSearch():\n  | { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined }\n  | undefined {\n  const { chainId } = useActiveWeb3React()\n  const dispatch = useAppDispatch()\n  const parsedQs = useParsedQueryString()\n  const [result, setResult] = useState<\n    { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined } | undefined\n  >()\n\n  useEffect(() => {\n    if (!chainId) return\n    const parsed = queryParametersToSwapState(parsedQs)\n    const inputCurrencyId = parsed[Field.INPUT].currencyId ?? undefined\n    const outputCurrencyId = parsed[Field.OUTPUT].currencyId ?? undefined\n\n    dispatch(\n      replaceSwapState({\n        typedValue: parsed.typedValue,\n        field: parsed.independentField,\n        inputCurrencyId,\n        outputCurrencyId,\n        recipient: parsed.recipient,\n      })\n    )\n\n    setResult({ inputCurrencyId, outputCurrencyId })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, chainId])\n\n  return result\n}\n"]},"metadata":{},"sourceType":"module"}