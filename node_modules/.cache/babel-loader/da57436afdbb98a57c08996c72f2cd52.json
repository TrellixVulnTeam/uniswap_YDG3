{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { CurrencyAmount } from '@uniswap/sdk-core';\nimport { useEffect, useState } from 'react';\nimport { useBlockNumber } from 'state/application/hooks';\nimport { useSingleCallResult } from 'state/multicall/hooks';\nimport { unwrappedToken } from 'utils/unwrappedToken';\nimport { useV3NFTPositionManagerContract } from './useContract';\nconst MAX_UINT128 = BigNumber.from(2).pow(128).sub(1); // compute current + counterfactual fees for a v3 position\n\nexport function useV3PositionFees(pool, tokenId, asWETH = false) {\n  _s();\n\n  var _useSingleCallResult$;\n\n  const positionManager = useV3NFTPositionManagerContract(false);\n  const owner = (_useSingleCallResult$ = useSingleCallResult(tokenId ? positionManager : null, 'ownerOf', [tokenId]).result) === null || _useSingleCallResult$ === void 0 ? void 0 : _useSingleCallResult$[0];\n  const tokenIdHexString = tokenId === null || tokenId === void 0 ? void 0 : tokenId.toHexString();\n  const latestBlockNumber = useBlockNumber(); // TODO find a way to get this into multicall\n  // latestBlockNumber is included to ensure data stays up-to-date every block\n\n  const [amounts, setAmounts] = useState();\n  useEffect(() => {\n    let stale = false;\n\n    if (positionManager && tokenIdHexString && owner && typeof latestBlockNumber === 'number') {\n      positionManager.callStatic.collect({\n        tokenId: tokenIdHexString,\n        recipient: owner,\n        // some tokens might fail if transferred to address(0)\n        amount0Max: MAX_UINT128,\n        amount1Max: MAX_UINT128\n      }, {\n        from: owner\n      } // need to simulate the call as the owner\n      ).then(results => {\n        if (!stale) setAmounts([results.amount0, results.amount1]);\n      });\n    }\n\n    return () => {\n      stale = true;\n    };\n  }, [positionManager, tokenIdHexString, owner, latestBlockNumber]);\n\n  if (pool && amounts) {\n    return [CurrencyAmount.fromRawAmount(!asWETH ? unwrappedToken(pool.token0) : pool.token0, amounts[0].toString()), CurrencyAmount.fromRawAmount(!asWETH ? unwrappedToken(pool.token1) : pool.token1, amounts[1].toString())];\n  } else {\n    return [undefined, undefined];\n  }\n}\n\n_s(useV3PositionFees, \"t8p/q2rBtY3wEf4/gwyPaO1+rtM=\", false, function () {\n  return [useV3NFTPositionManagerContract, useSingleCallResult, useBlockNumber];\n});","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/hooks/useV3PositionFees.ts"],"names":["BigNumber","CurrencyAmount","useEffect","useState","useBlockNumber","useSingleCallResult","unwrappedToken","useV3NFTPositionManagerContract","MAX_UINT128","from","pow","sub","useV3PositionFees","pool","tokenId","asWETH","positionManager","owner","result","tokenIdHexString","toHexString","latestBlockNumber","amounts","setAmounts","stale","callStatic","collect","recipient","amount0Max","amount1Max","then","results","amount0","amount1","fromRawAmount","token0","toString","token1","undefined"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,0BAA1B;AACA,SAAmBC,cAAnB,QAAyC,mBAAzC;AAEA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,cAAT,QAA+B,sBAA/B;AAEA,SAASC,+BAAT,QAAgD,eAAhD;AAEA,MAAMC,WAAW,GAAGR,SAAS,CAACS,IAAV,CAAe,CAAf,EAAkBC,GAAlB,CAAsB,GAAtB,EAA2BC,GAA3B,CAA+B,CAA/B,CAApB,C,CAEA;;AACA,OAAO,SAASC,iBAAT,CACLC,IADK,EAELC,OAFK,EAGLC,MAAM,GAAG,KAHJ,EAI0E;AAAA;;AAAA;;AAC/E,QAAMC,eAAe,GAAGT,+BAA+B,CAAC,KAAD,CAAvD;AACA,QAAMU,KAAyB,4BAAGZ,mBAAmB,CAACS,OAAO,GAAGE,eAAH,GAAqB,IAA7B,EAAmC,SAAnC,EAA8C,CAACF,OAAD,CAA9C,CAAnB,CAC/BI,MAD4B,0DAAG,sBACtB,CADsB,CAAlC;AAGA,QAAMC,gBAAgB,GAAGL,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEM,WAAT,EAAzB;AACA,QAAMC,iBAAiB,GAAGjB,cAAc,EAAxC,CAN+E,CAQ/E;AACA;;AACA,QAAM,CAACkB,OAAD,EAAUC,UAAV,IAAwBpB,QAAQ,EAAtC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIsB,KAAK,GAAG,KAAZ;;AAEA,QAAIR,eAAe,IAAIG,gBAAnB,IAAuCF,KAAvC,IAAgD,OAAOI,iBAAP,KAA6B,QAAjF,EAA2F;AACzFL,MAAAA,eAAe,CAACS,UAAhB,CACGC,OADH,CAEI;AACEZ,QAAAA,OAAO,EAAEK,gBADX;AAEEQ,QAAAA,SAAS,EAAEV,KAFb;AAEoB;AAClBW,QAAAA,UAAU,EAAEpB,WAHd;AAIEqB,QAAAA,UAAU,EAAErB;AAJd,OAFJ,EAQI;AAAEC,QAAAA,IAAI,EAAEQ;AAAR,OARJ,CAQoB;AARpB,QAUGa,IAVH,CAUSC,OAAD,IAAa;AACjB,YAAI,CAACP,KAAL,EAAYD,UAAU,CAAC,CAACQ,OAAO,CAACC,OAAT,EAAkBD,OAAO,CAACE,OAA1B,CAAD,CAAV;AACb,OAZH;AAaD;;AAED,WAAO,MAAM;AACXT,MAAAA,KAAK,GAAG,IAAR;AACD,KAFD;AAGD,GAtBQ,EAsBN,CAACR,eAAD,EAAkBG,gBAAlB,EAAoCF,KAApC,EAA2CI,iBAA3C,CAtBM,CAAT;;AAwBA,MAAIR,IAAI,IAAIS,OAAZ,EAAqB;AACnB,WAAO,CACLrB,cAAc,CAACiC,aAAf,CAA6B,CAACnB,MAAD,GAAUT,cAAc,CAACO,IAAI,CAACsB,MAAN,CAAxB,GAAwCtB,IAAI,CAACsB,MAA1E,EAAkFb,OAAO,CAAC,CAAD,CAAP,CAAWc,QAAX,EAAlF,CADK,EAELnC,cAAc,CAACiC,aAAf,CAA6B,CAACnB,MAAD,GAAUT,cAAc,CAACO,IAAI,CAACwB,MAAN,CAAxB,GAAwCxB,IAAI,CAACwB,MAA1E,EAAkFf,OAAO,CAAC,CAAD,CAAP,CAAWc,QAAX,EAAlF,CAFK,CAAP;AAID,GALD,MAKO;AACL,WAAO,CAACE,SAAD,EAAYA,SAAZ,CAAP;AACD;AACF;;GA/Ce1B,iB;UAKUL,+B,EACUF,mB,EAIRD,c","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\nimport { Currency, CurrencyAmount } from '@uniswap/sdk-core'\nimport { Pool } from '@uniswap/v3-sdk'\nimport { useEffect, useState } from 'react'\nimport { useBlockNumber } from 'state/application/hooks'\nimport { useSingleCallResult } from 'state/multicall/hooks'\nimport { unwrappedToken } from 'utils/unwrappedToken'\n\nimport { useV3NFTPositionManagerContract } from './useContract'\n\nconst MAX_UINT128 = BigNumber.from(2).pow(128).sub(1)\n\n// compute current + counterfactual fees for a v3 position\nexport function useV3PositionFees(\n  pool?: Pool,\n  tokenId?: BigNumber,\n  asWETH = false\n): [CurrencyAmount<Currency>, CurrencyAmount<Currency>] | [undefined, undefined] {\n  const positionManager = useV3NFTPositionManagerContract(false)\n  const owner: string | undefined = useSingleCallResult(tokenId ? positionManager : null, 'ownerOf', [tokenId])\n    .result?.[0]\n\n  const tokenIdHexString = tokenId?.toHexString()\n  const latestBlockNumber = useBlockNumber()\n\n  // TODO find a way to get this into multicall\n  // latestBlockNumber is included to ensure data stays up-to-date every block\n  const [amounts, setAmounts] = useState<[BigNumber, BigNumber]>()\n  useEffect(() => {\n    let stale = false\n\n    if (positionManager && tokenIdHexString && owner && typeof latestBlockNumber === 'number') {\n      positionManager.callStatic\n        .collect(\n          {\n            tokenId: tokenIdHexString,\n            recipient: owner, // some tokens might fail if transferred to address(0)\n            amount0Max: MAX_UINT128,\n            amount1Max: MAX_UINT128,\n          },\n          { from: owner } // need to simulate the call as the owner\n        )\n        .then((results) => {\n          if (!stale) setAmounts([results.amount0, results.amount1])\n        })\n    }\n\n    return () => {\n      stale = true\n    }\n  }, [positionManager, tokenIdHexString, owner, latestBlockNumber])\n\n  if (pool && amounts) {\n    return [\n      CurrencyAmount.fromRawAmount(!asWETH ? unwrappedToken(pool.token0) : pool.token0, amounts[0].toString()),\n      CurrencyAmount.fromRawAmount(!asWETH ? unwrappedToken(pool.token1) : pool.token1, amounts[1].toString()),\n    ]\n  } else {\n    return [undefined, undefined]\n  }\n}\n"]},"metadata":{},"sourceType":"module"}