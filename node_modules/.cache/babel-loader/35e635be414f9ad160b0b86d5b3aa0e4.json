{"ast":null,"code":"import { ThemeContext as _ThemeContext } from \"styled-components\";\nimport _styled from \"styled-components\";\n\nvar _jsxFileName = \"/Users/safahi/Downloads/interface-4.30.1/src/components/ProgressSteps/index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useContext } from 'react';\nimport { ThemedText } from '../../theme';\nimport { AutoColumn } from '../Column';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Wrapper = _styled(AutoColumn).withConfig({\n  displayName: \"ProgressSteps__Wrapper\",\n  componentId: \"sc-dlion8-0\"\n})([\"margin-right:8px;height:100%;\"]);\n\nconst Grouping = _styled(AutoColumn).withConfig({\n  displayName: \"ProgressSteps__Grouping\",\n  componentId: \"sc-dlion8-1\"\n})([\"width:fit-content;padding:4px;border-radius:16px;\"]);\n\nconst Circle = _styled.div.withConfig({\n  displayName: \"ProgressSteps__Circle\",\n  componentId: \"sc-dlion8-2\"\n})([\"width:48px;height:48px;background-color:\", \";border-radius:50%;color:\", \";display:flex;align-items:center;justify-content:center;line-height:8px;font-size:16px;padding:1rem;\"], ({\n  theme,\n  confirmed,\n  disabled\n}) => disabled ? theme.bg3 : confirmed ? theme.green1 : theme.primary1, ({\n  theme,\n  disabled\n}) => disabled ? theme.text3 : theme.text1);\n\nconst CircleRow = _styled.div.withConfig({\n  displayName: \"ProgressSteps__CircleRow\",\n  componentId: \"sc-dlion8-3\"\n})([\"display:flex;flex-direction:column;align-items:center;\"]);\n\n/**\n * Based on array of steps, create a step counter of circles.\n * A circle can be enabled, disabled, or confirmed. States are derived\n * from previous step.\n *\n * An extra circle is added to represent the ability to swap, add, or remove.\n * This step will never be marked as complete (because no 'txn done' state in body ui).\n *\n * @param steps  array of booleans where true means step is complete\n */\nexport default function ProgressCircles({\n  steps,\n  disabled = false,\n  ...rest\n}) {\n  _s();\n\n  const theme = useContext(_ThemeContext);\n  return /*#__PURE__*/_jsxDEV(Wrapper, {\n    justify: 'center',\n    ...rest,\n    children: /*#__PURE__*/_jsxDEV(Grouping, {\n      children: [steps.map((step, i) => {\n        return /*#__PURE__*/_jsxDEV(CircleRow, {\n          children: [/*#__PURE__*/_jsxDEV(Circle, {\n            confirmed: step,\n            disabled: disabled || !steps[i - 1] && i !== 0,\n            children: step ? '✓' : i + 1 + '.'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ThemedText.Main, {\n            color: theme.text4,\n            children: \"|\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(Circle, {\n        disabled: disabled || !steps[steps.length - 1],\n        children: steps.length + 1 + '.'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ProgressCircles, \"+C1P7ukOg/azcV4AZ819oyezFOE=\");\n\n_c = ProgressCircles;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProgressCircles\");","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/components/ProgressSteps/index.tsx"],"names":["useContext","ThemedText","AutoColumn","Wrapper","styled","Grouping","Circle","div","theme","confirmed","disabled","bg3","green1","primary1","text3","text1","CircleRow","ProgressCircles","steps","rest","ThemeContext","map","step","i","text4","length"],"mappings":";;;;;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AAIA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,UAAT,QAA2B,WAA3B;;;AAEA,MAAMC,OAAO,GAAGC,OAAM,CAACF,UAAD,CAAT;AAAA;AAAA;AAAA,qCAAb;;AAKA,MAAMG,QAAQ,GAAGD,OAAM,CAACF,UAAD,CAAT;AAAA;AAAA;AAAA,yDAAd;;AAOA,MAAMI,MAAM,GAAGF,OAAM,CAACG,GAAV;AAAA;AAAA;AAAA,sLAGU,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,SAAT;AAAoBC,EAAAA;AAApB,CAAD,KAClBA,QAAQ,GAAGF,KAAK,CAACG,GAAT,GAAeF,SAAS,GAAGD,KAAK,CAACI,MAAT,GAAkBJ,KAAK,CAACK,QAJhD,EAMD,CAAC;AAAEL,EAAAA,KAAF;AAASE,EAAAA;AAAT,CAAD,KAA0BA,QAAQ,GAAGF,KAAK,CAACM,KAAT,GAAiBN,KAAK,CAACO,KANxD,CAAZ;;AAeA,MAAMC,SAAS,GAAGZ,OAAM,CAACG,GAAV;AAAA;AAAA;AAAA,8DAAf;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASU,eAAT,CAAyB;AAAEC,EAAAA,KAAF;AAASR,EAAAA,QAAQ,GAAG,KAApB;AAA2B,KAAGS;AAA9B,CAAzB,EAAqF;AAAA;;AAClG,QAAMX,KAAK,GAAGR,UAAU,CAACoB,aAAD,CAAxB;AAEA,sBACE,QAAC,OAAD;AAAS,IAAA,OAAO,EAAE,QAAlB;AAAA,OAAgCD,IAAhC;AAAA,2BACE,QAAC,QAAD;AAAA,iBACGD,KAAK,CAACG,GAAN,CAAU,CAACC,IAAD,EAAOC,CAAP,KAAa;AACtB,4BACE,QAAC,SAAD;AAAA,kCACE,QAAC,MAAD;AAAQ,YAAA,SAAS,EAAED,IAAnB;AAAyB,YAAA,QAAQ,EAAEZ,QAAQ,IAAK,CAACQ,KAAK,CAACK,CAAC,GAAG,CAAL,CAAN,IAAiBA,CAAC,KAAK,CAAvE;AAAA,sBACGD,IAAI,GAAG,GAAH,GAASC,CAAC,GAAG,CAAJ,GAAQ;AADxB;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE,QAAC,UAAD,CAAY,IAAZ;AAAiB,YAAA,KAAK,EAAEf,KAAK,CAACgB,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA,WAAgBD,CAAhB;AAAA;AAAA;AAAA;AAAA,gBADF;AAQD,OATA,CADH,eAWE,QAAC,MAAD;AAAQ,QAAA,QAAQ,EAAEb,QAAQ,IAAI,CAACQ,KAAK,CAACA,KAAK,CAACO,MAAN,GAAe,CAAhB,CAApC;AAAA,kBAAyDP,KAAK,CAACO,MAAN,GAAe,CAAf,GAAmB;AAA5E;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD;;GApBuBR,e;;KAAAA,e","sourcesContent":["import { useContext } from 'react'\nimport styled from 'styled-components/macro'\nimport { ThemeContext } from 'styled-components/macro'\n\nimport { ThemedText } from '../../theme'\nimport { AutoColumn } from '../Column'\n\nconst Wrapper = styled(AutoColumn)`\n  margin-right: 8px;\n  height: 100%;\n`\n\nconst Grouping = styled(AutoColumn)`\n  width: fit-content;\n  padding: 4px;\n  /* background-color: ${({ theme }) => theme.bg2}; */\n  border-radius: 16px;\n`\n\nconst Circle = styled.div<{ confirmed?: boolean; disabled?: boolean }>`\n  width: 48px;\n  height: 48px;\n  background-color: ${({ theme, confirmed, disabled }) =>\n    disabled ? theme.bg3 : confirmed ? theme.green1 : theme.primary1};\n  border-radius: 50%;\n  color: ${({ theme, disabled }) => (disabled ? theme.text3 : theme.text1)};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  line-height: 8px;\n  font-size: 16px;\n  padding: 1rem;\n`\n\nconst CircleRow = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\ninterface ProgressCirclesProps {\n  steps: boolean[]\n  disabled?: boolean\n}\n\n/**\n * Based on array of steps, create a step counter of circles.\n * A circle can be enabled, disabled, or confirmed. States are derived\n * from previous step.\n *\n * An extra circle is added to represent the ability to swap, add, or remove.\n * This step will never be marked as complete (because no 'txn done' state in body ui).\n *\n * @param steps  array of booleans where true means step is complete\n */\nexport default function ProgressCircles({ steps, disabled = false, ...rest }: ProgressCirclesProps) {\n  const theme = useContext(ThemeContext)\n\n  return (\n    <Wrapper justify={'center'} {...rest}>\n      <Grouping>\n        {steps.map((step, i) => {\n          return (\n            <CircleRow key={i}>\n              <Circle confirmed={step} disabled={disabled || (!steps[i - 1] && i !== 0)}>\n                {step ? '✓' : i + 1 + '.'}\n              </Circle>\n              <ThemedText.Main color={theme.text4}>|</ThemedText.Main>\n            </CircleRow>\n          )\n        })}\n        <Circle disabled={disabled || !steps[steps.length - 1]}>{steps.length + 1 + '.'}</Circle>\n      </Grouping>\n    </Wrapper>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}