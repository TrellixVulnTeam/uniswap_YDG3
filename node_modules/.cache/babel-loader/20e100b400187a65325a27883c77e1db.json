{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nimport { useActiveWeb3React } from '../../hooks/web3';\nimport { useBlockNumber } from '../application/hooks';\nimport { multicall } from './instance';\n// re-export for convenience\nexport { NEVER_RELOAD } from '@uniswap/redux-multicall'; // re-export for convenience\n\nconst {\n  useMultipleContractSingleData: _useMultipleContractSingleData,\n  useSingleCallResult: _useSingleCallResult,\n  useSingleContractMultipleData: _useSingleContractMultipleData,\n  useSingleContractWithCallData: _useSingleContractWithCallData\n} = multicall.hooks; // Create wrappers for hooks so consumers don't need to get latest block themselves\n\nexport function useMultipleContractSingleData(...args) {\n  _s();\n\n  const {\n    chainId,\n    latestBlock\n  } = useCallContext();\n  return _useMultipleContractSingleData(chainId, latestBlock, ...args);\n}\n\n_s(useMultipleContractSingleData, \"qAid86ri52VpfNSl+HGDXGIwWRc=\", false, function () {\n  return [useCallContext];\n});\n\nexport function useSingleCallResult(...args) {\n  _s2();\n\n  const {\n    chainId,\n    latestBlock\n  } = useCallContext();\n  return _useSingleCallResult(chainId, latestBlock, ...args);\n}\n\n_s2(useSingleCallResult, \"qAid86ri52VpfNSl+HGDXGIwWRc=\", false, function () {\n  return [useCallContext];\n});\n\nexport function useSingleContractMultipleData(...args) {\n  _s3();\n\n  const {\n    chainId,\n    latestBlock\n  } = useCallContext();\n  return _useSingleContractMultipleData(chainId, latestBlock, ...args);\n}\n\n_s3(useSingleContractMultipleData, \"qAid86ri52VpfNSl+HGDXGIwWRc=\", false, function () {\n  return [useCallContext];\n});\n\nexport function useSingleContractWithCallData(...args) {\n  _s4();\n\n  const {\n    chainId,\n    latestBlock\n  } = useCallContext();\n  return _useSingleContractWithCallData(chainId, latestBlock, ...args);\n}\n\n_s4(useSingleContractWithCallData, \"qAid86ri52VpfNSl+HGDXGIwWRc=\", false, function () {\n  return [useCallContext];\n});\n\nfunction useCallContext() {\n  _s5();\n\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const latestBlock = useBlockNumber();\n  return {\n    chainId,\n    latestBlock\n  };\n}\n\n_s5(useCallContext, \"i42sXSHkJs9Kkd1rukVX1jh2igY=\", false, function () {\n  return [useActiveWeb3React, useBlockNumber];\n});","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/state/multicall/hooks.ts"],"names":["useActiveWeb3React","useBlockNumber","multicall","NEVER_RELOAD","useMultipleContractSingleData","_useMultipleContractSingleData","useSingleCallResult","_useSingleCallResult","useSingleContractMultipleData","_useSingleContractMultipleData","useSingleContractWithCallData","_useSingleContractWithCallData","hooks","args","chainId","latestBlock","useCallContext"],"mappings":";;;;;;AAAA,SAASA,kBAAT,QAAmC,kBAAnC;AAEA,SAASC,cAAT,QAA+B,sBAA/B;AACA,SAASC,SAAT,QAA0B,YAA1B;AACgE;AAChE,SAASC,YAAT,QAA6B,0BAA7B,C,CAAwD;;AAExD,MAAM;AACJC,EAAAA,6BAA6B,EAAEC,8BAD3B;AAEJC,EAAAA,mBAAmB,EAAEC,oBAFjB;AAGJC,EAAAA,6BAA6B,EAAEC,8BAH3B;AAIJC,EAAAA,6BAA6B,EAAEC;AAJ3B,IAKFT,SAAS,CAACU,KALd,C,CAOA;;AAIA,OAAO,SAASR,6BAAT,CAAuC,GAAGS,IAA1C,EAA2G;AAAA;;AAChH,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAA2BC,cAAc,EAA/C;AACA,SAAOX,8BAA8B,CAACS,OAAD,EAAUC,WAAV,EAAuB,GAAGF,IAA1B,CAArC;AACD;;GAHeT,6B;UACmBY,c;;;AAInC,OAAO,SAASV,mBAAT,CAA6B,GAAGO,IAAhC,EAAuF;AAAA;;AAC5F,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAA2BC,cAAc,EAA/C;AACA,SAAOT,oBAAoB,CAACO,OAAD,EAAUC,WAAV,EAAuB,GAAGF,IAA1B,CAA3B;AACD;;IAHeP,mB;UACmBU,c;;;AAInC,OAAO,SAASR,6BAAT,CAAuC,GAAGK,IAA1C,EAA2G;AAAA;;AAChH,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAA2BC,cAAc,EAA/C;AACA,SAAOP,8BAA8B,CAACK,OAAD,EAAUC,WAAV,EAAuB,GAAGF,IAA1B,CAArC;AACD;;IAHeL,6B;UACmBQ,c;;;AAInC,OAAO,SAASN,6BAAT,CAAuC,GAAGG,IAA1C,EAA2G;AAAA;;AAChH,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAA2BC,cAAc,EAA/C;AACA,SAAOL,8BAA8B,CAACG,OAAD,EAAUC,WAAV,EAAuB,GAAGF,IAA1B,CAArC;AACD;;IAHeH,6B;UACmBM,c;;;AAInC,SAASA,cAAT,GAA0B;AAAA;;AACxB,QAAM;AAAEF,IAAAA;AAAF,MAAcd,kBAAkB,EAAtC;AACA,QAAMe,WAAW,GAAGd,cAAc,EAAlC;AACA,SAAO;AAAEa,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAP;AACD;;IAJQC,c;UACahB,kB,EACAC,c","sourcesContent":["import { useActiveWeb3React } from '../../hooks/web3'\nimport { SkipFirst } from '../../types/tuple'\nimport { useBlockNumber } from '../application/hooks'\nimport { multicall } from './instance'\nexport type { CallStateResult } from '@uniswap/redux-multicall' // re-export for convenience\nexport { NEVER_RELOAD } from '@uniswap/redux-multicall' // re-export for convenience\n\nconst {\n  useMultipleContractSingleData: _useMultipleContractSingleData,\n  useSingleCallResult: _useSingleCallResult,\n  useSingleContractMultipleData: _useSingleContractMultipleData,\n  useSingleContractWithCallData: _useSingleContractWithCallData,\n} = multicall.hooks\n\n// Create wrappers for hooks so consumers don't need to get latest block themselves\n\ntype SkipFirstTwoParams<T extends (...args: any) => any> = SkipFirst<Parameters<T>, 2>\n\nexport function useMultipleContractSingleData(...args: SkipFirstTwoParams<typeof _useMultipleContractSingleData>) {\n  const { chainId, latestBlock } = useCallContext()\n  return _useMultipleContractSingleData(chainId, latestBlock, ...args)\n}\n\nexport function useSingleCallResult(...args: SkipFirstTwoParams<typeof _useSingleCallResult>) {\n  const { chainId, latestBlock } = useCallContext()\n  return _useSingleCallResult(chainId, latestBlock, ...args)\n}\n\nexport function useSingleContractMultipleData(...args: SkipFirstTwoParams<typeof _useSingleContractMultipleData>) {\n  const { chainId, latestBlock } = useCallContext()\n  return _useSingleContractMultipleData(chainId, latestBlock, ...args)\n}\n\nexport function useSingleContractWithCallData(...args: SkipFirstTwoParams<typeof _useSingleContractWithCallData>) {\n  const { chainId, latestBlock } = useCallContext()\n  return _useSingleContractWithCallData(chainId, latestBlock, ...args)\n}\n\nfunction useCallContext() {\n  const { chainId } = useActiveWeb3React()\n  const latestBlock = useBlockNumber()\n  return { chainId, latestBlock }\n}\n"]},"metadata":{},"sourceType":"module"}