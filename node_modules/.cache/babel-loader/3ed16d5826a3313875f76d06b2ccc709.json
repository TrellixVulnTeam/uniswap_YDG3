{"ast":null,"code":"import DEFAULT_TOKEN_LIST from '@uniswap/default-token-list';\nimport { Protocol, SwapRouter, Trade } from '@uniswap/router-sdk';\nimport { Fraction, TradeType } from '@uniswap/sdk-core';\nimport { Route as V2RouteRaw } from '@uniswap/v2-sdk';\nimport { Pool, Position, Route as V3RouteRaw, SqrtPriceMath, TickMath } from '@uniswap/v3-sdk';\nimport { BigNumber, providers } from 'ethers';\nimport JSBI from 'jsbi';\nimport _ from 'lodash';\nimport NodeCache from 'node-cache';\nimport { V3HeuristicGasModelFactory } from '.';\nimport { CachingGasStationProvider, CachingTokenProviderWithFallback, CachingV2SubgraphProvider, CachingV3PoolProvider, CachingV3SubgraphProvider, EIP1559GasPriceProvider, ETHGasStationInfoProvider, LegacyGasPriceProvider, NodeJSCache, OnChainGasPriceProvider, StaticV2SubgraphProvider, StaticV3SubgraphProvider, SwapRouterProvider, UniswapMulticallProvider, URISubgraphProvider, V2QuoteProvider, V2SubgraphProviderWithFallBacks, V3SubgraphProviderWithFallBacks } from '../../providers';\nimport { CachingTokenListProvider } from '../../providers/caching-token-list-provider';\nimport { TokenProvider } from '../../providers/token-provider';\nimport { V2PoolProvider } from '../../providers/v2/pool-provider';\nimport { V3PoolProvider } from '../../providers/v3/pool-provider';\nimport { V3QuoteProvider } from '../../providers/v3/quote-provider';\nimport { CurrencyAmount } from '../../util/amounts';\nimport { ChainId, ID_TO_CHAIN_ID, ID_TO_NETWORK_NAME } from '../../util/chains';\nimport { log } from '../../util/log';\nimport { metric, MetricLoggerUnit } from '../../util/metric';\nimport { routeToString } from '../../util/routes';\nimport { UNSUPPORTED_TOKENS } from '../../util/unsupported-tokens';\nimport { SwapToRatioStatus } from '../router';\nimport { DEFAULT_ROUTING_CONFIG_BY_CHAIN, ETH_GAS_STATION_API_URL } from './config';\nimport { V2RouteWithValidQuote, V3RouteWithValidQuote } from './entities/route-with-valid-quote';\nimport { getBestSwapRoute } from './functions/best-swap-route';\nimport { calculateRatioAmountIn } from './functions/calculate-ratio-amount-in';\nimport { computeAllV2Routes, computeAllV3Routes } from './functions/compute-all-routes';\nimport { getV2CandidatePools, getV3CandidatePools } from './functions/get-candidate-pools';\nimport { V2HeuristicGasModelFactory } from './gas-models/v2/v2-heuristic-gas-model';\nexport class AlphaRouter {\n  constructor({\n    chainId,\n    provider,\n    multicall2Provider,\n    v3PoolProvider,\n    v3QuoteProvider,\n    v2PoolProvider,\n    v2QuoteProvider,\n    v2SubgraphProvider,\n    tokenProvider,\n    blockedTokenListProvider,\n    v3SubgraphProvider,\n    gasPriceProvider,\n    v3GasModelFactory,\n    v2GasModelFactory,\n    swapRouterProvider\n  }) {\n    this.chainId = chainId;\n    this.provider = provider;\n    this.multicall2Provider = multicall2Provider !== null && multicall2Provider !== void 0 ? multicall2Provider : new UniswapMulticallProvider(chainId, provider, 375000);\n    this.v3PoolProvider = v3PoolProvider !== null && v3PoolProvider !== void 0 ? v3PoolProvider : new CachingV3PoolProvider(this.chainId, new V3PoolProvider(ID_TO_CHAIN_ID(chainId), this.multicall2Provider), new NodeJSCache(new NodeCache({\n      stdTTL: 360,\n      useClones: false\n    })));\n\n    if (v3QuoteProvider) {\n      this.v3QuoteProvider = v3QuoteProvider;\n    } else {\n      switch (chainId) {\n        case ChainId.OPTIMISM:\n        case ChainId.OPTIMISTIC_KOVAN:\n          this.v3QuoteProvider = new V3QuoteProvider(chainId, provider, this.multicall2Provider, {\n            retries: 2,\n            minTimeout: 100,\n            maxTimeout: 1000\n          }, {\n            multicallChunk: 110,\n            gasLimitPerCall: 1200000,\n            quoteMinSuccessRate: 0.1\n          }, {\n            gasLimitOverride: 3000000,\n            multicallChunk: 45\n          }, {\n            gasLimitOverride: 3000000,\n            multicallChunk: 45\n          }, {\n            baseBlockOffset: -10,\n            rollback: {\n              enabled: true,\n              attemptsBeforeRollback: 1,\n              rollbackBlockOffset: -10\n            }\n          });\n          break;\n\n        case ChainId.ARBITRUM_ONE:\n        case ChainId.ARBITRUM_RINKEBY:\n          this.v3QuoteProvider = new V3QuoteProvider(chainId, provider, this.multicall2Provider, {\n            retries: 2,\n            minTimeout: 100,\n            maxTimeout: 1000\n          }, {\n            multicallChunk: 10,\n            gasLimitPerCall: 12000000,\n            quoteMinSuccessRate: 0.1\n          }, {\n            gasLimitOverride: 30000000,\n            multicallChunk: 6\n          }, {\n            gasLimitOverride: 30000000,\n            multicallChunk: 6\n          });\n          break;\n\n        default:\n          this.v3QuoteProvider = new V3QuoteProvider(chainId, provider, this.multicall2Provider, {\n            retries: 2,\n            minTimeout: 100,\n            maxTimeout: 1000\n          }, {\n            multicallChunk: 210,\n            gasLimitPerCall: 705000,\n            quoteMinSuccessRate: 0.15\n          }, {\n            gasLimitOverride: 2000000,\n            multicallChunk: 70\n          });\n          break;\n      }\n    }\n\n    this.v2PoolProvider = v2PoolProvider !== null && v2PoolProvider !== void 0 ? v2PoolProvider : new V2PoolProvider(chainId, this.multicall2Provider);\n    this.v2QuoteProvider = v2QuoteProvider !== null && v2QuoteProvider !== void 0 ? v2QuoteProvider : new V2QuoteProvider();\n    this.blockedTokenListProvider = blockedTokenListProvider !== null && blockedTokenListProvider !== void 0 ? blockedTokenListProvider : new CachingTokenListProvider(chainId, UNSUPPORTED_TOKENS, new NodeJSCache(new NodeCache({\n      stdTTL: 3600,\n      useClones: false\n    })));\n    this.tokenProvider = tokenProvider !== null && tokenProvider !== void 0 ? tokenProvider : new CachingTokenProviderWithFallback(chainId, new NodeJSCache(new NodeCache({\n      stdTTL: 3600,\n      useClones: false\n    })), new CachingTokenListProvider(chainId, DEFAULT_TOKEN_LIST, new NodeJSCache(new NodeCache({\n      stdTTL: 3600,\n      useClones: false\n    }))), new TokenProvider(chainId, this.multicall2Provider));\n    const chainName = ID_TO_NETWORK_NAME(chainId); // ipfs urls in the following format: `https://cloudflare-ipfs.com/ipns/api.uniswap.org/v1/pools/${protocol}/${chainName}.json`;\n\n    if (v2SubgraphProvider) {\n      this.v2SubgraphProvider = v2SubgraphProvider;\n    } else {\n      this.v2SubgraphProvider = new V2SubgraphProviderWithFallBacks([new CachingV2SubgraphProvider(chainId, new URISubgraphProvider(chainId, `https://cloudflare-ipfs.com/ipns/api.uniswap.org/v1/pools/v2/${chainName}.json`, undefined, 0), new NodeJSCache(new NodeCache({\n        stdTTL: 300,\n        useClones: false\n      }))), new StaticV2SubgraphProvider(chainId)]);\n    }\n\n    if (v3SubgraphProvider) {\n      this.v3SubgraphProvider = v3SubgraphProvider;\n    } else {\n      this.v3SubgraphProvider = new V3SubgraphProviderWithFallBacks([new CachingV3SubgraphProvider(chainId, new URISubgraphProvider(chainId, `https://cloudflare-ipfs.com/ipns/api.uniswap.org/v1/pools/v3/${chainName}.json`, undefined, 0), new NodeJSCache(new NodeCache({\n        stdTTL: 300,\n        useClones: false\n      }))), new StaticV3SubgraphProvider(chainId, this.v3PoolProvider)]);\n    }\n\n    this.gasPriceProvider = gasPriceProvider !== null && gasPriceProvider !== void 0 ? gasPriceProvider : new CachingGasStationProvider(chainId, this.provider instanceof providers.JsonRpcProvider ? new OnChainGasPriceProvider(chainId, new EIP1559GasPriceProvider(this.provider), new LegacyGasPriceProvider(this.provider)) : new ETHGasStationInfoProvider(ETH_GAS_STATION_API_URL), new NodeJSCache(new NodeCache({\n      stdTTL: 15,\n      useClones: false\n    })));\n    this.v3GasModelFactory = v3GasModelFactory !== null && v3GasModelFactory !== void 0 ? v3GasModelFactory : new V3HeuristicGasModelFactory();\n    this.v2GasModelFactory = v2GasModelFactory !== null && v2GasModelFactory !== void 0 ? v2GasModelFactory : new V2HeuristicGasModelFactory();\n    this.swapRouterProvider = swapRouterProvider !== null && swapRouterProvider !== void 0 ? swapRouterProvider : new SwapRouterProvider(this.multicall2Provider);\n  }\n\n  async routeToRatio(token0Balance, token1Balance, position, swapAndAddConfig, swapAndAddOptions, routingConfig = DEFAULT_ROUTING_CONFIG_BY_CHAIN(this.chainId)) {\n    if (token1Balance.currency.wrapped.sortsBefore(token0Balance.currency.wrapped)) {\n      [token0Balance, token1Balance] = [token1Balance, token0Balance];\n    }\n\n    let preSwapOptimalRatio = this.calculateOptimalRatio(position, position.pool.sqrtRatioX96, true); // set up parameters according to which token will be swapped\n\n    let zeroForOne;\n\n    if (position.pool.tickCurrent > position.tickUpper) {\n      zeroForOne = true;\n    } else if (position.pool.tickCurrent < position.tickLower) {\n      zeroForOne = false;\n    } else {\n      zeroForOne = new Fraction(token0Balance.quotient, token1Balance.quotient).greaterThan(preSwapOptimalRatio);\n      if (!zeroForOne) preSwapOptimalRatio = preSwapOptimalRatio.invert();\n    }\n\n    const [inputBalance, outputBalance] = zeroForOne ? [token0Balance, token1Balance] : [token1Balance, token0Balance];\n    let optimalRatio = preSwapOptimalRatio;\n    let postSwapTargetPool = position.pool;\n    let exchangeRate = zeroForOne ? position.pool.token0Price : position.pool.token1Price;\n    let swap = null;\n    let ratioAchieved = false;\n    let n = 0; // iterate until we find a swap with a sufficient ratio or return null\n\n    while (!ratioAchieved) {\n      n++;\n\n      if (n > swapAndAddConfig.maxIterations) {\n        log.info('max iterations exceeded');\n        return {\n          status: SwapToRatioStatus.NO_ROUTE_FOUND,\n          error: 'max iterations exceeded'\n        };\n      }\n\n      let amountToSwap = calculateRatioAmountIn(optimalRatio, exchangeRate, inputBalance, outputBalance);\n\n      if (amountToSwap.equalTo(0)) {\n        log.info(`no swap needed`);\n        return {\n          status: SwapToRatioStatus.NO_SWAP_NEEDED\n        };\n      }\n\n      swap = await this.route(amountToSwap, outputBalance.currency, TradeType.EXACT_INPUT, undefined, { ...DEFAULT_ROUTING_CONFIG_BY_CHAIN(this.chainId),\n        ...routingConfig,\n        protocols: [Protocol.V3, Protocol.V2]\n      });\n\n      if (!swap) {\n        return {\n          status: SwapToRatioStatus.NO_ROUTE_FOUND,\n          error: 'no route found'\n        };\n      }\n\n      let inputBalanceUpdated = inputBalance.subtract(swap.trade.inputAmount);\n      let outputBalanceUpdated = outputBalance.add(swap.trade.outputAmount);\n      let newRatio = inputBalanceUpdated.divide(outputBalanceUpdated);\n      let targetPoolPriceUpdate;\n      swap.route.forEach(route => {\n        if (route.protocol == Protocol.V3) {\n          const v3Route = route;\n          v3Route.route.pools.forEach((pool, i) => {\n            if (pool.token0.equals(position.pool.token0) && pool.token1.equals(position.pool.token1) && pool.fee == position.pool.fee) {\n              targetPoolPriceUpdate = JSBI.BigInt(v3Route.sqrtPriceX96AfterList[i].toString());\n              optimalRatio = this.calculateOptimalRatio(position, JSBI.BigInt(targetPoolPriceUpdate.toString()), zeroForOne);\n            }\n          });\n        }\n      });\n\n      if (!targetPoolPriceUpdate) {\n        optimalRatio = preSwapOptimalRatio;\n      }\n\n      ratioAchieved = newRatio.equalTo(optimalRatio) || this.absoluteValue(newRatio.asFraction.divide(optimalRatio).subtract(1)).lessThan(swapAndAddConfig.ratioErrorTolerance);\n\n      if (ratioAchieved && targetPoolPriceUpdate) {\n        postSwapTargetPool = new Pool(position.pool.token0, position.pool.token1, position.pool.fee, targetPoolPriceUpdate, position.pool.liquidity, TickMath.getTickAtSqrtRatio(targetPoolPriceUpdate), position.pool.tickDataProvider);\n      }\n\n      exchangeRate = swap.trade.outputAmount.divide(swap.trade.inputAmount);\n      log.info({\n        optimalRatio: optimalRatio.asFraction.toFixed(18),\n        newRatio: newRatio.asFraction.toFixed(18),\n        ratioErrorTolerance: swapAndAddConfig.ratioErrorTolerance.toFixed(18),\n        iterationN: n.toString()\n      });\n    }\n\n    if (!swap) {\n      return {\n        status: SwapToRatioStatus.NO_ROUTE_FOUND,\n        error: 'no route found'\n      };\n    }\n\n    let methodParameters;\n\n    if (swapAndAddOptions) {\n      methodParameters = await this.buildSwapAndAddMethodParameters(swap.trade, swapAndAddOptions, {\n        initialBalanceTokenIn: inputBalance,\n        initialBalanceTokenOut: outputBalance,\n        preLiquidityPosition: position\n      });\n    }\n\n    return {\n      status: SwapToRatioStatus.SUCCESS,\n      result: { ...swap,\n        methodParameters,\n        optimalRatio,\n        postSwapTargetPool\n      }\n    };\n  }\n  /**\n   * @inheritdoc IRouter\n   */\n\n\n  async route(amount, quoteCurrency, tradeType, swapConfig, partialRoutingConfig = {}) {\n    var _a;\n\n    metric.putMetric(`QuoteRequestedForChain${this.chainId}`, 1, MetricLoggerUnit.Count); // Get a block number to specify in all our calls. Ensures data we fetch from chain is\n    // from the same block.\n\n    const blockNumber = (_a = partialRoutingConfig.blockNumber) !== null && _a !== void 0 ? _a : this.provider.getBlockNumber();\n\n    const routingConfig = _.merge({}, DEFAULT_ROUTING_CONFIG_BY_CHAIN(this.chainId), partialRoutingConfig, {\n      blockNumber\n    });\n\n    const {\n      protocols\n    } = routingConfig;\n    const currencyIn = tradeType == TradeType.EXACT_INPUT ? amount.currency : quoteCurrency;\n    const currencyOut = tradeType == TradeType.EXACT_INPUT ? quoteCurrency : amount.currency;\n    const tokenIn = currencyIn.wrapped;\n    const tokenOut = currencyOut.wrapped; // Generate our distribution of amounts, i.e. fractions of the input amount.\n    // We will get quotes for fractions of the input amount for different routes, then\n    // combine to generate split routes.\n\n    const [percents, amounts] = this.getAmountDistribution(amount, routingConfig); // Get an estimate of the gas price to use when estimating gas cost of different routes.\n\n    const beforeGas = Date.now();\n    const {\n      gasPriceWei\n    } = await this.gasPriceProvider.getGasPrice();\n    metric.putMetric('GasPriceLoad', Date.now() - beforeGas, MetricLoggerUnit.Milliseconds);\n    const quoteToken = quoteCurrency.wrapped;\n    const quotePromises = [];\n    const protocolsSet = new Set(protocols !== null && protocols !== void 0 ? protocols : []);\n\n    if (protocolsSet.size == 0 || protocolsSet.has(Protocol.V2) && protocolsSet.has(Protocol.V3)) {\n      log.info({\n        protocols,\n        tradeType\n      }, 'Routing across all protocols');\n      quotePromises.push(this.getV3Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, gasPriceWei, tradeType, routingConfig));\n      quotePromises.push(this.getV2Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, gasPriceWei, tradeType, routingConfig));\n    } else {\n      if (protocolsSet.has(Protocol.V3)) {\n        log.info({\n          protocols,\n          swapType: tradeType\n        }, 'Routing across V3');\n        quotePromises.push(this.getV3Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, gasPriceWei, tradeType, routingConfig));\n      }\n\n      if (protocolsSet.has(Protocol.V2)) {\n        log.info({\n          protocols,\n          swapType: tradeType\n        }, 'Routing across V2');\n        quotePromises.push(this.getV2Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, gasPriceWei, tradeType, routingConfig));\n      }\n    }\n\n    const routesWithValidQuotesByProtocol = await Promise.all(quotePromises);\n    let allRoutesWithValidQuotes = [];\n    let allCandidatePools = [];\n\n    for (const {\n      routesWithValidQuotes,\n      candidatePools\n    } of routesWithValidQuotesByProtocol) {\n      allRoutesWithValidQuotes = [...allRoutesWithValidQuotes, ...routesWithValidQuotes];\n      allCandidatePools = [...allCandidatePools, candidatePools];\n    }\n\n    if (allRoutesWithValidQuotes.length == 0) {\n      log.info({\n        allRoutesWithValidQuotes\n      }, 'Received no valid quotes');\n      return null;\n    } // Given all the quotes for all the amounts for all the routes, find the best combination.\n\n\n    const beforeBestSwap = Date.now();\n    const swapRouteRaw = getBestSwapRoute(amount, percents, allRoutesWithValidQuotes, tradeType, this.chainId, routingConfig);\n\n    if (!swapRouteRaw) {\n      return null;\n    }\n\n    const {\n      quote,\n      quoteGasAdjusted,\n      estimatedGasUsed,\n      routes: routeAmounts,\n      estimatedGasUsedQuoteToken,\n      estimatedGasUsedUSD\n    } = swapRouteRaw; // Build Trade object that represents the optimal swap.\n\n    const trade = this.buildTrade(currencyIn, currencyOut, tradeType, routeAmounts);\n    let methodParameters; // If user provided recipient, deadline etc. we also generate the calldata required to execute\n    // the swap and return it too.\n\n    if (swapConfig) {\n      methodParameters = this.buildSwapMethodParameters(trade, swapConfig);\n    }\n\n    metric.putMetric('FindBestSwapRoute', Date.now() - beforeBestSwap, MetricLoggerUnit.Milliseconds);\n    metric.putMetric(`QuoteFoundForChain${this.chainId}`, 1, MetricLoggerUnit.Count);\n    this.emitPoolSelectionMetrics(swapRouteRaw, allCandidatePools);\n    return {\n      quote,\n      quoteGasAdjusted,\n      estimatedGasUsed,\n      estimatedGasUsedQuoteToken,\n      estimatedGasUsedUSD,\n      gasPriceWei,\n      route: routeAmounts,\n      trade,\n      methodParameters,\n      blockNumber: BigNumber.from(await blockNumber)\n    };\n  }\n\n  async getV3Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, gasPriceWei, swapType, routingConfig) {\n    log.info('Starting to get V3 quotes'); // Fetch all the pools that we will consider routing via. There are thousands\n    // of pools, so we filter them to a set of candidate pools that we expect will\n    // result in good prices.\n\n    const {\n      poolAccessor,\n      candidatePools\n    } = await getV3CandidatePools({\n      tokenIn,\n      tokenOut,\n      tokenProvider: this.tokenProvider,\n      blockedTokenListProvider: this.blockedTokenListProvider,\n      poolProvider: this.v3PoolProvider,\n      routeType: swapType,\n      subgraphProvider: this.v3SubgraphProvider,\n      routingConfig,\n      chainId: this.chainId\n    });\n    const pools = poolAccessor.getAllPools(); // Given all our candidate pools, compute all the possible ways to route from tokenIn to tokenOut.\n\n    const {\n      maxSwapsPerPath\n    } = routingConfig;\n    const routes = computeAllV3Routes(tokenIn, tokenOut, pools, maxSwapsPerPath);\n\n    if (routes.length == 0) {\n      return {\n        routesWithValidQuotes: [],\n        candidatePools\n      };\n    } // For all our routes, and all the fractional amounts, fetch quotes on-chain.\n\n\n    const quoteFn = swapType == TradeType.EXACT_INPUT ? this.v3QuoteProvider.getQuotesManyExactIn.bind(this.v3QuoteProvider) : this.v3QuoteProvider.getQuotesManyExactOut.bind(this.v3QuoteProvider);\n    const beforeQuotes = Date.now();\n    log.info(`Getting quotes for V3 for ${routes.length} routes with ${amounts.length} amounts per route.`);\n    const {\n      routesWithQuotes\n    } = await quoteFn(amounts, routes, {\n      blockNumber: routingConfig.blockNumber\n    });\n    const gasModel = await this.v3GasModelFactory.buildGasModel(this.chainId, gasPriceWei, this.v3PoolProvider, quoteToken);\n    metric.putMetric('V3QuotesLoad', Date.now() - beforeQuotes, MetricLoggerUnit.Milliseconds);\n    metric.putMetric('V3QuotesFetched', _(routesWithQuotes).map(([, quotes]) => quotes.length).sum(), MetricLoggerUnit.Count);\n    const routesWithValidQuotes = [];\n\n    for (const routeWithQuote of routesWithQuotes) {\n      const [route, quotes] = routeWithQuote;\n\n      for (let i = 0; i < quotes.length; i++) {\n        const percent = percents[i];\n        const amountQuote = quotes[i];\n        const {\n          quote,\n          amount,\n          sqrtPriceX96AfterList,\n          initializedTicksCrossedList,\n          gasEstimate\n        } = amountQuote;\n\n        if (!quote || !sqrtPriceX96AfterList || !initializedTicksCrossedList || !gasEstimate) {\n          log.debug({\n            route: routeToString(route),\n            amountQuote\n          }, 'Dropping a null V3 quote for route.');\n          continue;\n        }\n\n        const routeWithValidQuote = new V3RouteWithValidQuote({\n          route,\n          rawQuote: quote,\n          amount,\n          percent,\n          sqrtPriceX96AfterList,\n          initializedTicksCrossedList,\n          quoterGasEstimate: gasEstimate,\n          gasModel,\n          quoteToken,\n          tradeType: swapType,\n          v3PoolProvider: this.v3PoolProvider\n        });\n        routesWithValidQuotes.push(routeWithValidQuote);\n      }\n    }\n\n    return {\n      routesWithValidQuotes,\n      candidatePools\n    };\n  }\n\n  async getV2Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, gasPriceWei, swapType, routingConfig) {\n    log.info('Starting to get V2 quotes'); // Fetch all the pools that we will consider routing via. There are thousands\n    // of pools, so we filter them to a set of candidate pools that we expect will\n    // result in good prices.\n\n    const {\n      poolAccessor,\n      candidatePools\n    } = await getV2CandidatePools({\n      tokenIn,\n      tokenOut,\n      tokenProvider: this.tokenProvider,\n      blockedTokenListProvider: this.blockedTokenListProvider,\n      poolProvider: this.v2PoolProvider,\n      routeType: swapType,\n      subgraphProvider: this.v2SubgraphProvider,\n      routingConfig,\n      chainId: this.chainId\n    });\n    const pools = poolAccessor.getAllPools(); // Given all our candidate pools, compute all the possible ways to route from tokenIn to tokenOut.\n\n    const {\n      maxSwapsPerPath\n    } = routingConfig;\n    const routes = computeAllV2Routes(tokenIn, tokenOut, pools, maxSwapsPerPath);\n\n    if (routes.length == 0) {\n      return {\n        routesWithValidQuotes: [],\n        candidatePools\n      };\n    } // For all our routes, and all the fractional amounts, fetch quotes on-chain.\n\n\n    const quoteFn = swapType == TradeType.EXACT_INPUT ? this.v2QuoteProvider.getQuotesManyExactIn.bind(this.v2QuoteProvider) : this.v2QuoteProvider.getQuotesManyExactOut.bind(this.v2QuoteProvider);\n    const beforeQuotes = Date.now();\n    log.info(`Getting quotes for V2 for ${routes.length} routes with ${amounts.length} amounts per route.`);\n    const {\n      routesWithQuotes\n    } = await quoteFn(amounts, routes);\n    const gasModel = await this.v2GasModelFactory.buildGasModel(this.chainId, gasPriceWei, this.v2PoolProvider, quoteToken);\n    metric.putMetric('V2QuotesLoad', Date.now() - beforeQuotes, MetricLoggerUnit.Milliseconds);\n    metric.putMetric('V2QuotesFetched', _(routesWithQuotes).map(([, quotes]) => quotes.length).sum(), MetricLoggerUnit.Count);\n    const routesWithValidQuotes = [];\n\n    for (const routeWithQuote of routesWithQuotes) {\n      const [route, quotes] = routeWithQuote;\n\n      for (let i = 0; i < quotes.length; i++) {\n        const percent = percents[i];\n        const amountQuote = quotes[i];\n        const {\n          quote,\n          amount\n        } = amountQuote;\n\n        if (!quote) {\n          log.debug({\n            route: routeToString(route),\n            amountQuote\n          }, 'Dropping a null V2 quote for route.');\n          continue;\n        }\n\n        const routeWithValidQuote = new V2RouteWithValidQuote({\n          route,\n          rawQuote: quote,\n          amount,\n          percent,\n          gasModel,\n          quoteToken,\n          tradeType: swapType,\n          v2PoolProvider: this.v2PoolProvider\n        });\n        routesWithValidQuotes.push(routeWithValidQuote);\n      }\n    }\n\n    return {\n      routesWithValidQuotes,\n      candidatePools\n    };\n  } // Note multiplications here can result in a loss of precision in the amounts (e.g. taking 50% of 101)\n  // This is reconcilled at the end of the algorithm by adding any lost precision to one of\n  // the splits in the route.\n\n\n  getAmountDistribution(amount, routingConfig) {\n    const {\n      distributionPercent\n    } = routingConfig;\n    let percents = [];\n    let amounts = [];\n\n    for (let i = 1; i <= 100 / distributionPercent; i++) {\n      percents.push(i * distributionPercent);\n      amounts.push(amount.multiply(new Fraction(i * distributionPercent, 100)));\n    }\n\n    return [percents, amounts];\n  }\n\n  buildTrade(tokenInCurrency, tokenOutCurrency, tradeType, routeAmounts) {\n    const [v3RouteAmounts, v2RouteAmounts] = _.partition(routeAmounts, routeAmount => routeAmount.protocol == Protocol.V3);\n\n    const v3Routes = _.map(v3RouteAmounts, routeAmount => {\n      const {\n        route,\n        amount,\n        quote\n      } = routeAmount; // The route, amount and quote are all in terms of wrapped tokens.\n      // When constructing the Trade object the inputAmount/outputAmount must\n      // use native currencies if specified by the user. This is so that the Trade knows to wrap/unwrap.\n\n      if (tradeType == TradeType.EXACT_INPUT) {\n        const amountCurrency = CurrencyAmount.fromFractionalAmount(tokenInCurrency, amount.numerator, amount.denominator);\n        const quoteCurrency = CurrencyAmount.fromFractionalAmount(tokenOutCurrency, quote.numerator, quote.denominator);\n        const routeRaw = new V3RouteRaw(route.pools, amountCurrency.currency, quoteCurrency.currency);\n        return {\n          routev3: routeRaw,\n          inputAmount: amountCurrency,\n          outputAmount: quoteCurrency\n        };\n      } else {\n        const quoteCurrency = CurrencyAmount.fromFractionalAmount(tokenInCurrency, quote.numerator, quote.denominator);\n        const amountCurrency = CurrencyAmount.fromFractionalAmount(tokenOutCurrency, amount.numerator, amount.denominator);\n        const routeCurrency = new V3RouteRaw(route.pools, quoteCurrency.currency, amountCurrency.currency);\n        return {\n          routev3: routeCurrency,\n          inputAmount: quoteCurrency,\n          outputAmount: amountCurrency\n        };\n      }\n    });\n\n    const v2Routes = _.map(v2RouteAmounts, routeAmount => {\n      const {\n        route,\n        amount,\n        quote\n      } = routeAmount; // The route, amount and quote are all in terms of wrapped tokens.\n      // When constructing the Trade object the inputAmount/outputAmount must\n      // use native currencies if specified by the user. This is so that the Trade knows to wrap/unwrap.\n\n      if (tradeType == TradeType.EXACT_INPUT) {\n        const amountCurrency = CurrencyAmount.fromFractionalAmount(tokenInCurrency, amount.numerator, amount.denominator);\n        const quoteCurrency = CurrencyAmount.fromFractionalAmount(tokenOutCurrency, quote.numerator, quote.denominator);\n        const routeV2SDK = new V2RouteRaw(route.pairs, amountCurrency.currency, quoteCurrency.currency);\n        return {\n          routev2: routeV2SDK,\n          inputAmount: amountCurrency,\n          outputAmount: quoteCurrency\n        };\n      } else {\n        const quoteCurrency = CurrencyAmount.fromFractionalAmount(tokenInCurrency, quote.numerator, quote.denominator);\n        const amountCurrency = CurrencyAmount.fromFractionalAmount(tokenOutCurrency, amount.numerator, amount.denominator);\n        const routeV2SDK = new V2RouteRaw(route.pairs, quoteCurrency.currency, amountCurrency.currency);\n        return {\n          routev2: routeV2SDK,\n          inputAmount: quoteCurrency,\n          outputAmount: amountCurrency\n        };\n      }\n    });\n\n    const trade = new Trade({\n      v2Routes,\n      v3Routes,\n      tradeType\n    });\n    return trade;\n  }\n\n  buildSwapMethodParameters(trade, swapConfig) {\n    const {\n      recipient,\n      slippageTolerance,\n      deadline,\n      inputTokenPermit\n    } = swapConfig;\n    return SwapRouter.swapCallParameters(trade, {\n      recipient,\n      slippageTolerance,\n      deadlineOrPreviousBlockhash: deadline,\n      inputTokenPermit\n    });\n  }\n\n  async buildSwapAndAddMethodParameters(trade, swapAndAddOptions, swapAndAddParameters) {\n    const {\n      swapOptions: {\n        recipient,\n        slippageTolerance,\n        deadline,\n        inputTokenPermit\n      },\n      addLiquidityOptions: addLiquidityConfig\n    } = swapAndAddOptions;\n    const preLiquidityPosition = swapAndAddParameters.preLiquidityPosition;\n    const finalBalanceTokenIn = swapAndAddParameters.initialBalanceTokenIn.subtract(trade.inputAmount);\n    const finalBalanceTokenOut = swapAndAddParameters.initialBalanceTokenOut.add(trade.outputAmount);\n    const approvalTypes = await this.swapRouterProvider.getApprovalType(finalBalanceTokenIn, finalBalanceTokenOut);\n    const zeroForOne = finalBalanceTokenIn.currency.wrapped.sortsBefore(finalBalanceTokenOut.currency.wrapped);\n    return SwapRouter.swapAndAddCallParameters(trade, {\n      recipient,\n      slippageTolerance,\n      deadlineOrPreviousBlockhash: deadline,\n      inputTokenPermit\n    }, Position.fromAmounts({\n      pool: preLiquidityPosition.pool,\n      tickLower: preLiquidityPosition.tickLower,\n      tickUpper: preLiquidityPosition.tickUpper,\n      amount0: zeroForOne ? finalBalanceTokenIn.quotient.toString() : finalBalanceTokenOut.quotient.toString(),\n      amount1: zeroForOne ? finalBalanceTokenOut.quotient.toString() : finalBalanceTokenIn.quotient.toString(),\n      useFullPrecision: false\n    }), addLiquidityConfig, approvalTypes.approvalTokenIn, approvalTypes.approvalTokenOut);\n  }\n\n  emitPoolSelectionMetrics(swapRouteRaw, allPoolsBySelection) {\n    const poolAddressesUsed = new Set();\n    const {\n      routes: routeAmounts\n    } = swapRouteRaw;\n\n    _(routeAmounts).flatMap(routeAmount => {\n      const {\n        poolAddresses\n      } = routeAmount;\n      return poolAddresses;\n    }).forEach(address => {\n      poolAddressesUsed.add(address.toLowerCase());\n    });\n\n    for (const poolsBySelection of allPoolsBySelection) {\n      const {\n        protocol\n      } = poolsBySelection;\n\n      _.forIn(poolsBySelection.selections, (pools, topNSelection) => {\n        const topNUsed = _.findLastIndex(pools, pool => poolAddressesUsed.has(pool.id.toLowerCase())) + 1;\n        metric.putMetric(_.capitalize(`${protocol}${topNSelection}`), topNUsed, MetricLoggerUnit.Count);\n      });\n    }\n\n    let hasV3Route = false;\n    let hasV2Route = false;\n\n    for (const routeAmount of routeAmounts) {\n      if (routeAmount.protocol == Protocol.V3) {\n        hasV3Route = true;\n      }\n\n      if (routeAmount.protocol == Protocol.V2) {\n        hasV2Route = true;\n      }\n    }\n\n    if (hasV3Route && hasV2Route) {\n      metric.putMetric(`V3AndV2SplitRoute`, 1, MetricLoggerUnit.Count);\n    } else if (hasV3Route) {\n      if (routeAmounts.length > 1) {\n        metric.putMetric(`V3SplitRoute`, 1, MetricLoggerUnit.Count);\n      } else {\n        metric.putMetric(`V3Route`, 1, MetricLoggerUnit.Count);\n      }\n    } else if (hasV2Route) {\n      if (routeAmounts.length > 1) {\n        metric.putMetric(`V2SplitRoute`, 1, MetricLoggerUnit.Count);\n      } else {\n        metric.putMetric(`V2Route`, 1, MetricLoggerUnit.Count);\n      }\n    }\n  }\n\n  calculateOptimalRatio(position, sqrtRatioX96, zeroForOne) {\n    const upperSqrtRatioX96 = TickMath.getSqrtRatioAtTick(position.tickUpper);\n    const lowerSqrtRatioX96 = TickMath.getSqrtRatioAtTick(position.tickLower); // returns Fraction(0, 1) for any out of range position regardless of zeroForOne. Implication: function\n    // cannot be used to determine the trading direction of out of range positions.\n\n    if (JSBI.greaterThan(sqrtRatioX96, upperSqrtRatioX96) || JSBI.lessThan(sqrtRatioX96, lowerSqrtRatioX96)) {\n      return new Fraction(0, 1);\n    }\n\n    const precision = JSBI.BigInt('1' + '0'.repeat(18));\n    let optimalRatio = new Fraction(SqrtPriceMath.getAmount0Delta(sqrtRatioX96, upperSqrtRatioX96, precision, true), SqrtPriceMath.getAmount1Delta(sqrtRatioX96, lowerSqrtRatioX96, precision, true));\n    if (!zeroForOne) optimalRatio = optimalRatio.invert();\n    return optimalRatio;\n  }\n\n  absoluteValue(fraction) {\n    const numeratorAbs = JSBI.lessThan(fraction.numerator, JSBI.BigInt(0)) ? JSBI.unaryMinus(fraction.numerator) : fraction.numerator;\n    const denominatorAbs = JSBI.lessThan(fraction.denominator, JSBI.BigInt(0)) ? JSBI.unaryMinus(fraction.denominator) : fraction.denominator;\n    return new Fraction(numeratorAbs, denominatorAbs);\n  }\n\n}","map":{"version":3,"sources":["../../../../../src/routers/alpha-router/alpha-router.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import DEFAULT_TOKEN_LIST from '@uniswap/default-token-list';\nimport { Protocol, SwapRouter, Trade } from '@uniswap/router-sdk';\nimport { Fraction, TradeType } from '@uniswap/sdk-core';\nimport { Route as V2RouteRaw } from '@uniswap/v2-sdk';\nimport { Pool, Position, Route as V3RouteRaw, SqrtPriceMath, TickMath, } from '@uniswap/v3-sdk';\nimport { BigNumber, providers } from 'ethers';\nimport JSBI from 'jsbi';\nimport _ from 'lodash';\nimport NodeCache from 'node-cache';\nimport { V3HeuristicGasModelFactory } from '.';\nimport { CachingGasStationProvider, CachingTokenProviderWithFallback, CachingV2SubgraphProvider, CachingV3PoolProvider, CachingV3SubgraphProvider, EIP1559GasPriceProvider, ETHGasStationInfoProvider, LegacyGasPriceProvider, NodeJSCache, OnChainGasPriceProvider, StaticV2SubgraphProvider, StaticV3SubgraphProvider, SwapRouterProvider, UniswapMulticallProvider, URISubgraphProvider, V2QuoteProvider, V2SubgraphProviderWithFallBacks, V3SubgraphProviderWithFallBacks, } from '../../providers';\nimport { CachingTokenListProvider, } from '../../providers/caching-token-list-provider';\nimport { TokenProvider } from '../../providers/token-provider';\nimport { V2PoolProvider, } from '../../providers/v2/pool-provider';\nimport { V3PoolProvider, } from '../../providers/v3/pool-provider';\nimport { V3QuoteProvider, } from '../../providers/v3/quote-provider';\nimport { CurrencyAmount } from '../../util/amounts';\nimport { ChainId, ID_TO_CHAIN_ID, ID_TO_NETWORK_NAME } from '../../util/chains';\nimport { log } from '../../util/log';\nimport { metric, MetricLoggerUnit } from '../../util/metric';\nimport { routeToString } from '../../util/routes';\nimport { UNSUPPORTED_TOKENS } from '../../util/unsupported-tokens';\nimport { SwapToRatioStatus, } from '../router';\nimport { DEFAULT_ROUTING_CONFIG_BY_CHAIN, ETH_GAS_STATION_API_URL, } from './config';\nimport { V2RouteWithValidQuote, V3RouteWithValidQuote, } from './entities/route-with-valid-quote';\nimport { getBestSwapRoute } from './functions/best-swap-route';\nimport { calculateRatioAmountIn } from './functions/calculate-ratio-amount-in';\nimport { computeAllV2Routes, computeAllV3Routes, } from './functions/compute-all-routes';\nimport { getV2CandidatePools, getV3CandidatePools as getV3CandidatePools, } from './functions/get-candidate-pools';\nimport { V2HeuristicGasModelFactory } from './gas-models/v2/v2-heuristic-gas-model';\nexport class AlphaRouter {\n    constructor({ chainId, provider, multicall2Provider, v3PoolProvider, v3QuoteProvider, v2PoolProvider, v2QuoteProvider, v2SubgraphProvider, tokenProvider, blockedTokenListProvider, v3SubgraphProvider, gasPriceProvider, v3GasModelFactory, v2GasModelFactory, swapRouterProvider, }) {\n        this.chainId = chainId;\n        this.provider = provider;\n        this.multicall2Provider =\n            multicall2Provider !== null && multicall2Provider !== void 0 ? multicall2Provider : new UniswapMulticallProvider(chainId, provider, 375000);\n        this.v3PoolProvider =\n            v3PoolProvider !== null && v3PoolProvider !== void 0 ? v3PoolProvider : new CachingV3PoolProvider(this.chainId, new V3PoolProvider(ID_TO_CHAIN_ID(chainId), this.multicall2Provider), new NodeJSCache(new NodeCache({ stdTTL: 360, useClones: false })));\n        if (v3QuoteProvider) {\n            this.v3QuoteProvider = v3QuoteProvider;\n        }\n        else {\n            switch (chainId) {\n                case ChainId.OPTIMISM:\n                case ChainId.OPTIMISTIC_KOVAN:\n                    this.v3QuoteProvider = new V3QuoteProvider(chainId, provider, this.multicall2Provider, {\n                        retries: 2,\n                        minTimeout: 100,\n                        maxTimeout: 1000,\n                    }, {\n                        multicallChunk: 110,\n                        gasLimitPerCall: 1200000,\n                        quoteMinSuccessRate: 0.1,\n                    }, {\n                        gasLimitOverride: 3000000,\n                        multicallChunk: 45,\n                    }, {\n                        gasLimitOverride: 3000000,\n                        multicallChunk: 45,\n                    }, {\n                        baseBlockOffset: -10,\n                        rollback: {\n                            enabled: true,\n                            attemptsBeforeRollback: 1,\n                            rollbackBlockOffset: -10,\n                        },\n                    });\n                    break;\n                case ChainId.ARBITRUM_ONE:\n                case ChainId.ARBITRUM_RINKEBY:\n                    this.v3QuoteProvider = new V3QuoteProvider(chainId, provider, this.multicall2Provider, {\n                        retries: 2,\n                        minTimeout: 100,\n                        maxTimeout: 1000,\n                    }, {\n                        multicallChunk: 10,\n                        gasLimitPerCall: 12000000,\n                        quoteMinSuccessRate: 0.1,\n                    }, {\n                        gasLimitOverride: 30000000,\n                        multicallChunk: 6,\n                    }, {\n                        gasLimitOverride: 30000000,\n                        multicallChunk: 6,\n                    });\n                    break;\n                default:\n                    this.v3QuoteProvider = new V3QuoteProvider(chainId, provider, this.multicall2Provider, {\n                        retries: 2,\n                        minTimeout: 100,\n                        maxTimeout: 1000,\n                    }, {\n                        multicallChunk: 210,\n                        gasLimitPerCall: 705000,\n                        quoteMinSuccessRate: 0.15,\n                    }, {\n                        gasLimitOverride: 2000000,\n                        multicallChunk: 70,\n                    });\n                    break;\n            }\n        }\n        this.v2PoolProvider =\n            v2PoolProvider !== null && v2PoolProvider !== void 0 ? v2PoolProvider : new V2PoolProvider(chainId, this.multicall2Provider);\n        this.v2QuoteProvider = v2QuoteProvider !== null && v2QuoteProvider !== void 0 ? v2QuoteProvider : new V2QuoteProvider();\n        this.blockedTokenListProvider =\n            blockedTokenListProvider !== null && blockedTokenListProvider !== void 0 ? blockedTokenListProvider : new CachingTokenListProvider(chainId, UNSUPPORTED_TOKENS, new NodeJSCache(new NodeCache({ stdTTL: 3600, useClones: false })));\n        this.tokenProvider =\n            tokenProvider !== null && tokenProvider !== void 0 ? tokenProvider : new CachingTokenProviderWithFallback(chainId, new NodeJSCache(new NodeCache({ stdTTL: 3600, useClones: false })), new CachingTokenListProvider(chainId, DEFAULT_TOKEN_LIST, new NodeJSCache(new NodeCache({ stdTTL: 3600, useClones: false }))), new TokenProvider(chainId, this.multicall2Provider));\n        const chainName = ID_TO_NETWORK_NAME(chainId);\n        // ipfs urls in the following format: `https://cloudflare-ipfs.com/ipns/api.uniswap.org/v1/pools/${protocol}/${chainName}.json`;\n        if (v2SubgraphProvider) {\n            this.v2SubgraphProvider = v2SubgraphProvider;\n        }\n        else {\n            this.v2SubgraphProvider = new V2SubgraphProviderWithFallBacks([\n                new CachingV2SubgraphProvider(chainId, new URISubgraphProvider(chainId, `https://cloudflare-ipfs.com/ipns/api.uniswap.org/v1/pools/v2/${chainName}.json`, undefined, 0), new NodeJSCache(new NodeCache({ stdTTL: 300, useClones: false }))),\n                new StaticV2SubgraphProvider(chainId),\n            ]);\n        }\n        if (v3SubgraphProvider) {\n            this.v3SubgraphProvider = v3SubgraphProvider;\n        }\n        else {\n            this.v3SubgraphProvider = new V3SubgraphProviderWithFallBacks([\n                new CachingV3SubgraphProvider(chainId, new URISubgraphProvider(chainId, `https://cloudflare-ipfs.com/ipns/api.uniswap.org/v1/pools/v3/${chainName}.json`, undefined, 0), new NodeJSCache(new NodeCache({ stdTTL: 300, useClones: false }))),\n                new StaticV3SubgraphProvider(chainId, this.v3PoolProvider),\n            ]);\n        }\n        this.gasPriceProvider =\n            gasPriceProvider !== null && gasPriceProvider !== void 0 ? gasPriceProvider : new CachingGasStationProvider(chainId, this.provider instanceof providers.JsonRpcProvider\n                ? new OnChainGasPriceProvider(chainId, new EIP1559GasPriceProvider(this.provider), new LegacyGasPriceProvider(this.provider))\n                : new ETHGasStationInfoProvider(ETH_GAS_STATION_API_URL), new NodeJSCache(new NodeCache({ stdTTL: 15, useClones: false })));\n        this.v3GasModelFactory =\n            v3GasModelFactory !== null && v3GasModelFactory !== void 0 ? v3GasModelFactory : new V3HeuristicGasModelFactory();\n        this.v2GasModelFactory =\n            v2GasModelFactory !== null && v2GasModelFactory !== void 0 ? v2GasModelFactory : new V2HeuristicGasModelFactory();\n        this.swapRouterProvider =\n            swapRouterProvider !== null && swapRouterProvider !== void 0 ? swapRouterProvider : new SwapRouterProvider(this.multicall2Provider);\n    }\n    async routeToRatio(token0Balance, token1Balance, position, swapAndAddConfig, swapAndAddOptions, routingConfig = DEFAULT_ROUTING_CONFIG_BY_CHAIN(this.chainId)) {\n        if (token1Balance.currency.wrapped.sortsBefore(token0Balance.currency.wrapped)) {\n            [token0Balance, token1Balance] = [token1Balance, token0Balance];\n        }\n        let preSwapOptimalRatio = this.calculateOptimalRatio(position, position.pool.sqrtRatioX96, true);\n        // set up parameters according to which token will be swapped\n        let zeroForOne;\n        if (position.pool.tickCurrent > position.tickUpper) {\n            zeroForOne = true;\n        }\n        else if (position.pool.tickCurrent < position.tickLower) {\n            zeroForOne = false;\n        }\n        else {\n            zeroForOne = new Fraction(token0Balance.quotient, token1Balance.quotient).greaterThan(preSwapOptimalRatio);\n            if (!zeroForOne)\n                preSwapOptimalRatio = preSwapOptimalRatio.invert();\n        }\n        const [inputBalance, outputBalance] = zeroForOne\n            ? [token0Balance, token1Balance]\n            : [token1Balance, token0Balance];\n        let optimalRatio = preSwapOptimalRatio;\n        let postSwapTargetPool = position.pool;\n        let exchangeRate = zeroForOne\n            ? position.pool.token0Price\n            : position.pool.token1Price;\n        let swap = null;\n        let ratioAchieved = false;\n        let n = 0;\n        // iterate until we find a swap with a sufficient ratio or return null\n        while (!ratioAchieved) {\n            n++;\n            if (n > swapAndAddConfig.maxIterations) {\n                log.info('max iterations exceeded');\n                return {\n                    status: SwapToRatioStatus.NO_ROUTE_FOUND,\n                    error: 'max iterations exceeded',\n                };\n            }\n            let amountToSwap = calculateRatioAmountIn(optimalRatio, exchangeRate, inputBalance, outputBalance);\n            if (amountToSwap.equalTo(0)) {\n                log.info(`no swap needed`);\n                return {\n                    status: SwapToRatioStatus.NO_SWAP_NEEDED,\n                };\n            }\n            swap = await this.route(amountToSwap, outputBalance.currency, TradeType.EXACT_INPUT, undefined, {\n                ...DEFAULT_ROUTING_CONFIG_BY_CHAIN(this.chainId),\n                ...routingConfig,\n                protocols: [Protocol.V3, Protocol.V2],\n            });\n            if (!swap) {\n                return {\n                    status: SwapToRatioStatus.NO_ROUTE_FOUND,\n                    error: 'no route found',\n                };\n            }\n            let inputBalanceUpdated = inputBalance.subtract(swap.trade.inputAmount);\n            let outputBalanceUpdated = outputBalance.add(swap.trade.outputAmount);\n            let newRatio = inputBalanceUpdated.divide(outputBalanceUpdated);\n            let targetPoolPriceUpdate;\n            swap.route.forEach((route) => {\n                if (route.protocol == Protocol.V3) {\n                    const v3Route = route;\n                    v3Route.route.pools.forEach((pool, i) => {\n                        if (pool.token0.equals(position.pool.token0) &&\n                            pool.token1.equals(position.pool.token1) &&\n                            pool.fee == position.pool.fee) {\n                            targetPoolPriceUpdate = JSBI.BigInt(v3Route.sqrtPriceX96AfterList[i].toString());\n                            optimalRatio = this.calculateOptimalRatio(position, JSBI.BigInt(targetPoolPriceUpdate.toString()), zeroForOne);\n                        }\n                    });\n                }\n            });\n            if (!targetPoolPriceUpdate) {\n                optimalRatio = preSwapOptimalRatio;\n            }\n            ratioAchieved =\n                newRatio.equalTo(optimalRatio) ||\n                    this.absoluteValue(newRatio.asFraction.divide(optimalRatio).subtract(1)).lessThan(swapAndAddConfig.ratioErrorTolerance);\n            if (ratioAchieved && targetPoolPriceUpdate) {\n                postSwapTargetPool = new Pool(position.pool.token0, position.pool.token1, position.pool.fee, targetPoolPriceUpdate, position.pool.liquidity, TickMath.getTickAtSqrtRatio(targetPoolPriceUpdate), position.pool.tickDataProvider);\n            }\n            exchangeRate = swap.trade.outputAmount.divide(swap.trade.inputAmount);\n            log.info({\n                optimalRatio: optimalRatio.asFraction.toFixed(18),\n                newRatio: newRatio.asFraction.toFixed(18),\n                ratioErrorTolerance: swapAndAddConfig.ratioErrorTolerance.toFixed(18),\n                iterationN: n.toString(),\n            });\n        }\n        if (!swap) {\n            return {\n                status: SwapToRatioStatus.NO_ROUTE_FOUND,\n                error: 'no route found',\n            };\n        }\n        let methodParameters;\n        if (swapAndAddOptions) {\n            methodParameters = await this.buildSwapAndAddMethodParameters(swap.trade, swapAndAddOptions, {\n                initialBalanceTokenIn: inputBalance,\n                initialBalanceTokenOut: outputBalance,\n                preLiquidityPosition: position,\n            });\n        }\n        return {\n            status: SwapToRatioStatus.SUCCESS,\n            result: { ...swap, methodParameters, optimalRatio, postSwapTargetPool },\n        };\n    }\n    /**\n     * @inheritdoc IRouter\n     */\n    async route(amount, quoteCurrency, tradeType, swapConfig, partialRoutingConfig = {}) {\n        var _a;\n        metric.putMetric(`QuoteRequestedForChain${this.chainId}`, 1, MetricLoggerUnit.Count);\n        // Get a block number to specify in all our calls. Ensures data we fetch from chain is\n        // from the same block.\n        const blockNumber = (_a = partialRoutingConfig.blockNumber) !== null && _a !== void 0 ? _a : this.provider.getBlockNumber();\n        const routingConfig = _.merge({}, DEFAULT_ROUTING_CONFIG_BY_CHAIN(this.chainId), partialRoutingConfig, { blockNumber });\n        const { protocols } = routingConfig;\n        const currencyIn = tradeType == TradeType.EXACT_INPUT ? amount.currency : quoteCurrency;\n        const currencyOut = tradeType == TradeType.EXACT_INPUT ? quoteCurrency : amount.currency;\n        const tokenIn = currencyIn.wrapped;\n        const tokenOut = currencyOut.wrapped;\n        // Generate our distribution of amounts, i.e. fractions of the input amount.\n        // We will get quotes for fractions of the input amount for different routes, then\n        // combine to generate split routes.\n        const [percents, amounts] = this.getAmountDistribution(amount, routingConfig);\n        // Get an estimate of the gas price to use when estimating gas cost of different routes.\n        const beforeGas = Date.now();\n        const { gasPriceWei } = await this.gasPriceProvider.getGasPrice();\n        metric.putMetric('GasPriceLoad', Date.now() - beforeGas, MetricLoggerUnit.Milliseconds);\n        const quoteToken = quoteCurrency.wrapped;\n        const quotePromises = [];\n        const protocolsSet = new Set(protocols !== null && protocols !== void 0 ? protocols : []);\n        if (protocolsSet.size == 0 ||\n            (protocolsSet.has(Protocol.V2) && protocolsSet.has(Protocol.V3))) {\n            log.info({ protocols, tradeType }, 'Routing across all protocols');\n            quotePromises.push(this.getV3Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, gasPriceWei, tradeType, routingConfig));\n            quotePromises.push(this.getV2Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, gasPriceWei, tradeType, routingConfig));\n        }\n        else {\n            if (protocolsSet.has(Protocol.V3)) {\n                log.info({ protocols, swapType: tradeType }, 'Routing across V3');\n                quotePromises.push(this.getV3Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, gasPriceWei, tradeType, routingConfig));\n            }\n            if (protocolsSet.has(Protocol.V2)) {\n                log.info({ protocols, swapType: tradeType }, 'Routing across V2');\n                quotePromises.push(this.getV2Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, gasPriceWei, tradeType, routingConfig));\n            }\n        }\n        const routesWithValidQuotesByProtocol = await Promise.all(quotePromises);\n        let allRoutesWithValidQuotes = [];\n        let allCandidatePools = [];\n        for (const { routesWithValidQuotes, candidatePools, } of routesWithValidQuotesByProtocol) {\n            allRoutesWithValidQuotes = [\n                ...allRoutesWithValidQuotes,\n                ...routesWithValidQuotes,\n            ];\n            allCandidatePools = [...allCandidatePools, candidatePools];\n        }\n        if (allRoutesWithValidQuotes.length == 0) {\n            log.info({ allRoutesWithValidQuotes }, 'Received no valid quotes');\n            return null;\n        }\n        // Given all the quotes for all the amounts for all the routes, find the best combination.\n        const beforeBestSwap = Date.now();\n        const swapRouteRaw = getBestSwapRoute(amount, percents, allRoutesWithValidQuotes, tradeType, this.chainId, routingConfig);\n        if (!swapRouteRaw) {\n            return null;\n        }\n        const { quote, quoteGasAdjusted, estimatedGasUsed, routes: routeAmounts, estimatedGasUsedQuoteToken, estimatedGasUsedUSD, } = swapRouteRaw;\n        // Build Trade object that represents the optimal swap.\n        const trade = this.buildTrade(currencyIn, currencyOut, tradeType, routeAmounts);\n        let methodParameters;\n        // If user provided recipient, deadline etc. we also generate the calldata required to execute\n        // the swap and return it too.\n        if (swapConfig) {\n            methodParameters = this.buildSwapMethodParameters(trade, swapConfig);\n        }\n        metric.putMetric('FindBestSwapRoute', Date.now() - beforeBestSwap, MetricLoggerUnit.Milliseconds);\n        metric.putMetric(`QuoteFoundForChain${this.chainId}`, 1, MetricLoggerUnit.Count);\n        this.emitPoolSelectionMetrics(swapRouteRaw, allCandidatePools);\n        return {\n            quote,\n            quoteGasAdjusted,\n            estimatedGasUsed,\n            estimatedGasUsedQuoteToken,\n            estimatedGasUsedUSD,\n            gasPriceWei,\n            route: routeAmounts,\n            trade,\n            methodParameters,\n            blockNumber: BigNumber.from(await blockNumber),\n        };\n    }\n    async getV3Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, gasPriceWei, swapType, routingConfig) {\n        log.info('Starting to get V3 quotes');\n        // Fetch all the pools that we will consider routing via. There are thousands\n        // of pools, so we filter them to a set of candidate pools that we expect will\n        // result in good prices.\n        const { poolAccessor, candidatePools } = await getV3CandidatePools({\n            tokenIn,\n            tokenOut,\n            tokenProvider: this.tokenProvider,\n            blockedTokenListProvider: this.blockedTokenListProvider,\n            poolProvider: this.v3PoolProvider,\n            routeType: swapType,\n            subgraphProvider: this.v3SubgraphProvider,\n            routingConfig,\n            chainId: this.chainId,\n        });\n        const pools = poolAccessor.getAllPools();\n        // Given all our candidate pools, compute all the possible ways to route from tokenIn to tokenOut.\n        const { maxSwapsPerPath } = routingConfig;\n        const routes = computeAllV3Routes(tokenIn, tokenOut, pools, maxSwapsPerPath);\n        if (routes.length == 0) {\n            return { routesWithValidQuotes: [], candidatePools };\n        }\n        // For all our routes, and all the fractional amounts, fetch quotes on-chain.\n        const quoteFn = swapType == TradeType.EXACT_INPUT\n            ? this.v3QuoteProvider.getQuotesManyExactIn.bind(this.v3QuoteProvider)\n            : this.v3QuoteProvider.getQuotesManyExactOut.bind(this.v3QuoteProvider);\n        const beforeQuotes = Date.now();\n        log.info(`Getting quotes for V3 for ${routes.length} routes with ${amounts.length} amounts per route.`);\n        const { routesWithQuotes } = await quoteFn(amounts, routes, {\n            blockNumber: routingConfig.blockNumber,\n        });\n        const gasModel = await this.v3GasModelFactory.buildGasModel(this.chainId, gasPriceWei, this.v3PoolProvider, quoteToken);\n        metric.putMetric('V3QuotesLoad', Date.now() - beforeQuotes, MetricLoggerUnit.Milliseconds);\n        metric.putMetric('V3QuotesFetched', _(routesWithQuotes)\n            .map(([, quotes]) => quotes.length)\n            .sum(), MetricLoggerUnit.Count);\n        const routesWithValidQuotes = [];\n        for (const routeWithQuote of routesWithQuotes) {\n            const [route, quotes] = routeWithQuote;\n            for (let i = 0; i < quotes.length; i++) {\n                const percent = percents[i];\n                const amountQuote = quotes[i];\n                const { quote, amount, sqrtPriceX96AfterList, initializedTicksCrossedList, gasEstimate, } = amountQuote;\n                if (!quote ||\n                    !sqrtPriceX96AfterList ||\n                    !initializedTicksCrossedList ||\n                    !gasEstimate) {\n                    log.debug({\n                        route: routeToString(route),\n                        amountQuote,\n                    }, 'Dropping a null V3 quote for route.');\n                    continue;\n                }\n                const routeWithValidQuote = new V3RouteWithValidQuote({\n                    route,\n                    rawQuote: quote,\n                    amount,\n                    percent,\n                    sqrtPriceX96AfterList,\n                    initializedTicksCrossedList,\n                    quoterGasEstimate: gasEstimate,\n                    gasModel,\n                    quoteToken,\n                    tradeType: swapType,\n                    v3PoolProvider: this.v3PoolProvider,\n                });\n                routesWithValidQuotes.push(routeWithValidQuote);\n            }\n        }\n        return { routesWithValidQuotes, candidatePools };\n    }\n    async getV2Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, gasPriceWei, swapType, routingConfig) {\n        log.info('Starting to get V2 quotes');\n        // Fetch all the pools that we will consider routing via. There are thousands\n        // of pools, so we filter them to a set of candidate pools that we expect will\n        // result in good prices.\n        const { poolAccessor, candidatePools } = await getV2CandidatePools({\n            tokenIn,\n            tokenOut,\n            tokenProvider: this.tokenProvider,\n            blockedTokenListProvider: this.blockedTokenListProvider,\n            poolProvider: this.v2PoolProvider,\n            routeType: swapType,\n            subgraphProvider: this.v2SubgraphProvider,\n            routingConfig,\n            chainId: this.chainId,\n        });\n        const pools = poolAccessor.getAllPools();\n        // Given all our candidate pools, compute all the possible ways to route from tokenIn to tokenOut.\n        const { maxSwapsPerPath } = routingConfig;\n        const routes = computeAllV2Routes(tokenIn, tokenOut, pools, maxSwapsPerPath);\n        if (routes.length == 0) {\n            return { routesWithValidQuotes: [], candidatePools };\n        }\n        // For all our routes, and all the fractional amounts, fetch quotes on-chain.\n        const quoteFn = swapType == TradeType.EXACT_INPUT\n            ? this.v2QuoteProvider.getQuotesManyExactIn.bind(this.v2QuoteProvider)\n            : this.v2QuoteProvider.getQuotesManyExactOut.bind(this.v2QuoteProvider);\n        const beforeQuotes = Date.now();\n        log.info(`Getting quotes for V2 for ${routes.length} routes with ${amounts.length} amounts per route.`);\n        const { routesWithQuotes } = await quoteFn(amounts, routes);\n        const gasModel = await this.v2GasModelFactory.buildGasModel(this.chainId, gasPriceWei, this.v2PoolProvider, quoteToken);\n        metric.putMetric('V2QuotesLoad', Date.now() - beforeQuotes, MetricLoggerUnit.Milliseconds);\n        metric.putMetric('V2QuotesFetched', _(routesWithQuotes)\n            .map(([, quotes]) => quotes.length)\n            .sum(), MetricLoggerUnit.Count);\n        const routesWithValidQuotes = [];\n        for (const routeWithQuote of routesWithQuotes) {\n            const [route, quotes] = routeWithQuote;\n            for (let i = 0; i < quotes.length; i++) {\n                const percent = percents[i];\n                const amountQuote = quotes[i];\n                const { quote, amount } = amountQuote;\n                if (!quote) {\n                    log.debug({\n                        route: routeToString(route),\n                        amountQuote,\n                    }, 'Dropping a null V2 quote for route.');\n                    continue;\n                }\n                const routeWithValidQuote = new V2RouteWithValidQuote({\n                    route,\n                    rawQuote: quote,\n                    amount,\n                    percent,\n                    gasModel,\n                    quoteToken,\n                    tradeType: swapType,\n                    v2PoolProvider: this.v2PoolProvider,\n                });\n                routesWithValidQuotes.push(routeWithValidQuote);\n            }\n        }\n        return { routesWithValidQuotes, candidatePools };\n    }\n    // Note multiplications here can result in a loss of precision in the amounts (e.g. taking 50% of 101)\n    // This is reconcilled at the end of the algorithm by adding any lost precision to one of\n    // the splits in the route.\n    getAmountDistribution(amount, routingConfig) {\n        const { distributionPercent } = routingConfig;\n        let percents = [];\n        let amounts = [];\n        for (let i = 1; i <= 100 / distributionPercent; i++) {\n            percents.push(i * distributionPercent);\n            amounts.push(amount.multiply(new Fraction(i * distributionPercent, 100)));\n        }\n        return [percents, amounts];\n    }\n    buildTrade(tokenInCurrency, tokenOutCurrency, tradeType, routeAmounts) {\n        const [v3RouteAmounts, v2RouteAmounts] = _.partition(routeAmounts, (routeAmount) => routeAmount.protocol == Protocol.V3);\n        const v3Routes = _.map(v3RouteAmounts, (routeAmount) => {\n            const { route, amount, quote } = routeAmount;\n            // The route, amount and quote are all in terms of wrapped tokens.\n            // When constructing the Trade object the inputAmount/outputAmount must\n            // use native currencies if specified by the user. This is so that the Trade knows to wrap/unwrap.\n            if (tradeType == TradeType.EXACT_INPUT) {\n                const amountCurrency = CurrencyAmount.fromFractionalAmount(tokenInCurrency, amount.numerator, amount.denominator);\n                const quoteCurrency = CurrencyAmount.fromFractionalAmount(tokenOutCurrency, quote.numerator, quote.denominator);\n                const routeRaw = new V3RouteRaw(route.pools, amountCurrency.currency, quoteCurrency.currency);\n                return {\n                    routev3: routeRaw,\n                    inputAmount: amountCurrency,\n                    outputAmount: quoteCurrency,\n                };\n            }\n            else {\n                const quoteCurrency = CurrencyAmount.fromFractionalAmount(tokenInCurrency, quote.numerator, quote.denominator);\n                const amountCurrency = CurrencyAmount.fromFractionalAmount(tokenOutCurrency, amount.numerator, amount.denominator);\n                const routeCurrency = new V3RouteRaw(route.pools, quoteCurrency.currency, amountCurrency.currency);\n                return {\n                    routev3: routeCurrency,\n                    inputAmount: quoteCurrency,\n                    outputAmount: amountCurrency,\n                };\n            }\n        });\n        const v2Routes = _.map(v2RouteAmounts, (routeAmount) => {\n            const { route, amount, quote } = routeAmount;\n            // The route, amount and quote are all in terms of wrapped tokens.\n            // When constructing the Trade object the inputAmount/outputAmount must\n            // use native currencies if specified by the user. This is so that the Trade knows to wrap/unwrap.\n            if (tradeType == TradeType.EXACT_INPUT) {\n                const amountCurrency = CurrencyAmount.fromFractionalAmount(tokenInCurrency, amount.numerator, amount.denominator);\n                const quoteCurrency = CurrencyAmount.fromFractionalAmount(tokenOutCurrency, quote.numerator, quote.denominator);\n                const routeV2SDK = new V2RouteRaw(route.pairs, amountCurrency.currency, quoteCurrency.currency);\n                return {\n                    routev2: routeV2SDK,\n                    inputAmount: amountCurrency,\n                    outputAmount: quoteCurrency,\n                };\n            }\n            else {\n                const quoteCurrency = CurrencyAmount.fromFractionalAmount(tokenInCurrency, quote.numerator, quote.denominator);\n                const amountCurrency = CurrencyAmount.fromFractionalAmount(tokenOutCurrency, amount.numerator, amount.denominator);\n                const routeV2SDK = new V2RouteRaw(route.pairs, quoteCurrency.currency, amountCurrency.currency);\n                return {\n                    routev2: routeV2SDK,\n                    inputAmount: quoteCurrency,\n                    outputAmount: amountCurrency,\n                };\n            }\n        });\n        const trade = new Trade({ v2Routes, v3Routes, tradeType });\n        return trade;\n    }\n    buildSwapMethodParameters(trade, swapConfig) {\n        const { recipient, slippageTolerance, deadline, inputTokenPermit } = swapConfig;\n        return SwapRouter.swapCallParameters(trade, {\n            recipient,\n            slippageTolerance,\n            deadlineOrPreviousBlockhash: deadline,\n            inputTokenPermit,\n        });\n    }\n    async buildSwapAndAddMethodParameters(trade, swapAndAddOptions, swapAndAddParameters) {\n        const { swapOptions: { recipient, slippageTolerance, deadline, inputTokenPermit }, addLiquidityOptions: addLiquidityConfig, } = swapAndAddOptions;\n        const preLiquidityPosition = swapAndAddParameters.preLiquidityPosition;\n        const finalBalanceTokenIn = swapAndAddParameters.initialBalanceTokenIn.subtract(trade.inputAmount);\n        const finalBalanceTokenOut = swapAndAddParameters.initialBalanceTokenOut.add(trade.outputAmount);\n        const approvalTypes = await this.swapRouterProvider.getApprovalType(finalBalanceTokenIn, finalBalanceTokenOut);\n        const zeroForOne = finalBalanceTokenIn.currency.wrapped.sortsBefore(finalBalanceTokenOut.currency.wrapped);\n        return SwapRouter.swapAndAddCallParameters(trade, {\n            recipient,\n            slippageTolerance,\n            deadlineOrPreviousBlockhash: deadline,\n            inputTokenPermit,\n        }, Position.fromAmounts({\n            pool: preLiquidityPosition.pool,\n            tickLower: preLiquidityPosition.tickLower,\n            tickUpper: preLiquidityPosition.tickUpper,\n            amount0: zeroForOne\n                ? finalBalanceTokenIn.quotient.toString()\n                : finalBalanceTokenOut.quotient.toString(),\n            amount1: zeroForOne\n                ? finalBalanceTokenOut.quotient.toString()\n                : finalBalanceTokenIn.quotient.toString(),\n            useFullPrecision: false,\n        }), addLiquidityConfig, approvalTypes.approvalTokenIn, approvalTypes.approvalTokenOut);\n    }\n    emitPoolSelectionMetrics(swapRouteRaw, allPoolsBySelection) {\n        const poolAddressesUsed = new Set();\n        const { routes: routeAmounts } = swapRouteRaw;\n        _(routeAmounts)\n            .flatMap((routeAmount) => {\n            const { poolAddresses } = routeAmount;\n            return poolAddresses;\n        })\n            .forEach((address) => {\n            poolAddressesUsed.add(address.toLowerCase());\n        });\n        for (const poolsBySelection of allPoolsBySelection) {\n            const { protocol } = poolsBySelection;\n            _.forIn(poolsBySelection.selections, (pools, topNSelection) => {\n                const topNUsed = _.findLastIndex(pools, (pool) => poolAddressesUsed.has(pool.id.toLowerCase())) + 1;\n                metric.putMetric(_.capitalize(`${protocol}${topNSelection}`), topNUsed, MetricLoggerUnit.Count);\n            });\n        }\n        let hasV3Route = false;\n        let hasV2Route = false;\n        for (const routeAmount of routeAmounts) {\n            if (routeAmount.protocol == Protocol.V3) {\n                hasV3Route = true;\n            }\n            if (routeAmount.protocol == Protocol.V2) {\n                hasV2Route = true;\n            }\n        }\n        if (hasV3Route && hasV2Route) {\n            metric.putMetric(`V3AndV2SplitRoute`, 1, MetricLoggerUnit.Count);\n        }\n        else if (hasV3Route) {\n            if (routeAmounts.length > 1) {\n                metric.putMetric(`V3SplitRoute`, 1, MetricLoggerUnit.Count);\n            }\n            else {\n                metric.putMetric(`V3Route`, 1, MetricLoggerUnit.Count);\n            }\n        }\n        else if (hasV2Route) {\n            if (routeAmounts.length > 1) {\n                metric.putMetric(`V2SplitRoute`, 1, MetricLoggerUnit.Count);\n            }\n            else {\n                metric.putMetric(`V2Route`, 1, MetricLoggerUnit.Count);\n            }\n        }\n    }\n    calculateOptimalRatio(position, sqrtRatioX96, zeroForOne) {\n        const upperSqrtRatioX96 = TickMath.getSqrtRatioAtTick(position.tickUpper);\n        const lowerSqrtRatioX96 = TickMath.getSqrtRatioAtTick(position.tickLower);\n        // returns Fraction(0, 1) for any out of range position regardless of zeroForOne. Implication: function\n        // cannot be used to determine the trading direction of out of range positions.\n        if (JSBI.greaterThan(sqrtRatioX96, upperSqrtRatioX96) ||\n            JSBI.lessThan(sqrtRatioX96, lowerSqrtRatioX96)) {\n            return new Fraction(0, 1);\n        }\n        const precision = JSBI.BigInt('1' + '0'.repeat(18));\n        let optimalRatio = new Fraction(SqrtPriceMath.getAmount0Delta(sqrtRatioX96, upperSqrtRatioX96, precision, true), SqrtPriceMath.getAmount1Delta(sqrtRatioX96, lowerSqrtRatioX96, precision, true));\n        if (!zeroForOne)\n            optimalRatio = optimalRatio.invert();\n        return optimalRatio;\n    }\n    absoluteValue(fraction) {\n        const numeratorAbs = JSBI.lessThan(fraction.numerator, JSBI.BigInt(0))\n            ? JSBI.unaryMinus(fraction.numerator)\n            : fraction.numerator;\n        const denominatorAbs = JSBI.lessThan(fraction.denominator, JSBI.BigInt(0))\n            ? JSBI.unaryMinus(fraction.denominator)\n            : fraction.denominator;\n        return new Fraction(numeratorAbs, denominatorAbs);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxwaGEtcm91dGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3JvdXRlcnMvYWxwaGEtcm91dGVyL2FscGhhLXJvdXRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLGtCQUFrQixNQUFNLDZCQUE2QixDQUFDO0FBQzdELE9BQU8sRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2xFLE9BQU8sRUFBWSxRQUFRLEVBQVMsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFekUsT0FBTyxFQUFFLEtBQUssSUFBSSxVQUFVLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN0RCxPQUFPLEVBRUwsSUFBSSxFQUNKLFFBQVEsRUFDUixLQUFLLElBQUksVUFBVSxFQUNuQixhQUFhLEVBQ2IsUUFBUSxHQUNULE1BQU0saUJBQWlCLENBQUM7QUFDekIsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDOUMsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBQ3hCLE9BQU8sQ0FBQyxNQUFNLFFBQVEsQ0FBQztBQUN2QixPQUFPLFNBQVMsTUFBTSxZQUFZLENBQUM7QUFDbkMsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sR0FBRyxDQUFDO0FBQy9DLE9BQU8sRUFDTCx5QkFBeUIsRUFDekIsZ0NBQWdDLEVBQ2hDLHlCQUF5QixFQUN6QixxQkFBcUIsRUFDckIseUJBQXlCLEVBQ3pCLHVCQUF1QixFQUN2Qix5QkFBeUIsRUFJekIsc0JBQXNCLEVBQ3RCLFdBQVcsRUFDWCx1QkFBdUIsRUFDdkIsd0JBQXdCLEVBQ3hCLHdCQUF3QixFQUN4QixrQkFBa0IsRUFDbEIsd0JBQXdCLEVBQ3hCLG1CQUFtQixFQUNuQixlQUFlLEVBQ2YsK0JBQStCLEVBQy9CLCtCQUErQixHQUNoQyxNQUFNLGlCQUFpQixDQUFDO0FBQ3pCLE9BQU8sRUFDTCx3QkFBd0IsR0FFekIsTUFBTSw2Q0FBNkMsQ0FBQztBQUtyRCxPQUFPLEVBQWtCLGFBQWEsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQy9FLE9BQU8sRUFFTCxjQUFjLEdBQ2YsTUFBTSxrQ0FBa0MsQ0FBQztBQUMxQyxPQUFPLEVBRUwsY0FBYyxHQUNmLE1BQU0sa0NBQWtDLENBQUM7QUFDMUMsT0FBTyxFQUVMLGVBQWUsR0FDaEIsTUFBTSxtQ0FBbUMsQ0FBQztBQUUzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNoRixPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFFLE1BQU0sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzdELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNuRSxPQUFPLEVBU0wsaUJBQWlCLEdBQ2xCLE1BQU0sV0FBVyxDQUFDO0FBQ25CLE9BQU8sRUFDTCwrQkFBK0IsRUFDL0IsdUJBQXVCLEdBQ3hCLE1BQU0sVUFBVSxDQUFDO0FBQ2xCLE9BQU8sRUFFTCxxQkFBcUIsRUFDckIscUJBQXFCLEdBQ3RCLE1BQU0sbUNBQW1DLENBQUM7QUFDM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDL0QsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDL0UsT0FBTyxFQUNMLGtCQUFrQixFQUNsQixrQkFBa0IsR0FDbkIsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN4QyxPQUFPLEVBRUwsbUJBQW1CLEVBQ25CLG1CQUFtQixJQUFJLG1CQUFtQixHQUUzQyxNQUFNLGlDQUFpQyxDQUFDO0FBRXpDLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBd0twRixNQUFNLE9BQU8sV0FBVztJQXFCdEIsWUFBWSxFQUNWLE9BQU8sRUFDUCxRQUFRLEVBQ1Isa0JBQWtCLEVBQ2xCLGNBQWMsRUFDZCxlQUFlLEVBQ2YsY0FBYyxFQUNkLGVBQWUsRUFDZixrQkFBa0IsRUFDbEIsYUFBYSxFQUNiLHdCQUF3QixFQUN4QixrQkFBa0IsRUFDbEIsZ0JBQWdCLEVBQ2hCLGlCQUFpQixFQUNqQixpQkFBaUIsRUFDakIsa0JBQWtCLEdBQ0E7UUFDbEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLGtCQUFrQjtZQUNyQixrQkFBa0IsYUFBbEIsa0JBQWtCLGNBQWxCLGtCQUFrQixHQUNsQixJQUFJLHdCQUF3QixDQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTyxDQUFDLENBQUM7UUFDM0QsSUFBSSxDQUFDLGNBQWM7WUFDakIsY0FBYyxhQUFkLGNBQWMsY0FBZCxjQUFjLEdBQ2QsSUFBSSxxQkFBcUIsQ0FDdkIsSUFBSSxDQUFDLE9BQU8sRUFDWixJQUFJLGNBQWMsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEVBQ3BFLElBQUksV0FBVyxDQUFDLElBQUksU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUNsRSxDQUFDO1FBRUosSUFBSSxlQUFlLEVBQUU7WUFDbkIsSUFBSSxDQUFDLGVBQWUsR0FBRyxlQUFlLENBQUM7U0FDeEM7YUFBTTtZQUNMLFFBQVEsT0FBTyxFQUFFO2dCQUNmLEtBQUssT0FBTyxDQUFDLFFBQVEsQ0FBQztnQkFDdEIsS0FBSyxPQUFPLENBQUMsZ0JBQWdCO29CQUMzQixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksZUFBZSxDQUN4QyxPQUFPLEVBQ1AsUUFBUSxFQUNSLElBQUksQ0FBQyxrQkFBa0IsRUFDdkI7d0JBQ0UsT0FBTyxFQUFFLENBQUM7d0JBQ1YsVUFBVSxFQUFFLEdBQUc7d0JBQ2YsVUFBVSxFQUFFLElBQUk7cUJBQ2pCLEVBQ0Q7d0JBQ0UsY0FBYyxFQUFFLEdBQUc7d0JBQ25CLGVBQWUsRUFBRSxPQUFTO3dCQUMxQixtQkFBbUIsRUFBRSxHQUFHO3FCQUN6QixFQUNEO3dCQUNFLGdCQUFnQixFQUFFLE9BQVM7d0JBQzNCLGNBQWMsRUFBRSxFQUFFO3FCQUNuQixFQUNEO3dCQUNFLGdCQUFnQixFQUFFLE9BQVM7d0JBQzNCLGNBQWMsRUFBRSxFQUFFO3FCQUNuQixFQUNEO3dCQUNFLGVBQWUsRUFBRSxDQUFDLEVBQUU7d0JBQ3BCLFFBQVEsRUFBRTs0QkFDUixPQUFPLEVBQUUsSUFBSTs0QkFDYixzQkFBc0IsRUFBRSxDQUFDOzRCQUN6QixtQkFBbUIsRUFBRSxDQUFDLEVBQUU7eUJBQ3pCO3FCQUNGLENBQ0YsQ0FBQztvQkFDRixNQUFNO2dCQUNSLEtBQUssT0FBTyxDQUFDLFlBQVksQ0FBQztnQkFDMUIsS0FBSyxPQUFPLENBQUMsZ0JBQWdCO29CQUMzQixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksZUFBZSxDQUN4QyxPQUFPLEVBQ1AsUUFBUSxFQUNSLElBQUksQ0FBQyxrQkFBa0IsRUFDdkI7d0JBQ0UsT0FBTyxFQUFFLENBQUM7d0JBQ1YsVUFBVSxFQUFFLEdBQUc7d0JBQ2YsVUFBVSxFQUFFLElBQUk7cUJBQ2pCLEVBQ0Q7d0JBQ0UsY0FBYyxFQUFFLEVBQUU7d0JBQ2xCLGVBQWUsRUFBRSxRQUFVO3dCQUMzQixtQkFBbUIsRUFBRSxHQUFHO3FCQUN6QixFQUNEO3dCQUNFLGdCQUFnQixFQUFFLFFBQVU7d0JBQzVCLGNBQWMsRUFBRSxDQUFDO3FCQUNsQixFQUNEO3dCQUNFLGdCQUFnQixFQUFFLFFBQVU7d0JBQzVCLGNBQWMsRUFBRSxDQUFDO3FCQUNsQixDQUNGLENBQUM7b0JBQ0YsTUFBTTtnQkFDUjtvQkFDRSxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksZUFBZSxDQUN4QyxPQUFPLEVBQ1AsUUFBUSxFQUNSLElBQUksQ0FBQyxrQkFBa0IsRUFDdkI7d0JBQ0UsT0FBTyxFQUFFLENBQUM7d0JBQ1YsVUFBVSxFQUFFLEdBQUc7d0JBQ2YsVUFBVSxFQUFFLElBQUk7cUJBQ2pCLEVBQ0Q7d0JBQ0UsY0FBYyxFQUFFLEdBQUc7d0JBQ25CLGVBQWUsRUFBRSxNQUFPO3dCQUN4QixtQkFBbUIsRUFBRSxJQUFJO3FCQUMxQixFQUNEO3dCQUNFLGdCQUFnQixFQUFFLE9BQVM7d0JBQzNCLGNBQWMsRUFBRSxFQUFFO3FCQUNuQixDQUNGLENBQUM7b0JBQ0YsTUFBTTthQUNUO1NBQ0Y7UUFFRCxJQUFJLENBQUMsY0FBYztZQUNqQixjQUFjLGFBQWQsY0FBYyxjQUFkLGNBQWMsR0FBSSxJQUFJLGNBQWMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDekUsSUFBSSxDQUFDLGVBQWUsR0FBRyxlQUFlLGFBQWYsZUFBZSxjQUFmLGVBQWUsR0FBSSxJQUFJLGVBQWUsRUFBRSxDQUFDO1FBRWhFLElBQUksQ0FBQyx3QkFBd0I7WUFDM0Isd0JBQXdCLGFBQXhCLHdCQUF3QixjQUF4Qix3QkFBd0IsR0FDeEIsSUFBSSx3QkFBd0IsQ0FDMUIsT0FBTyxFQUNQLGtCQUErQixFQUMvQixJQUFJLFdBQVcsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FDbkUsQ0FBQztRQUNKLElBQUksQ0FBQyxhQUFhO1lBQ2hCLGFBQWEsYUFBYixhQUFhLGNBQWIsYUFBYSxHQUNiLElBQUksZ0NBQWdDLENBQ2xDLE9BQU8sRUFDUCxJQUFJLFdBQVcsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsRUFDbEUsSUFBSSx3QkFBd0IsQ0FDMUIsT0FBTyxFQUNQLGtCQUFrQixFQUNsQixJQUFJLFdBQVcsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FDbkUsRUFDRCxJQUFJLGFBQWEsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQ3BELENBQUM7UUFFSixNQUFNLFNBQVMsR0FBRyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU5QyxnSUFBZ0k7UUFDaEksSUFBSSxrQkFBa0IsRUFBRTtZQUN0QixJQUFJLENBQUMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUM7U0FDOUM7YUFBTTtZQUNMLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLCtCQUErQixDQUFDO2dCQUM1RCxJQUFJLHlCQUF5QixDQUMzQixPQUFPLEVBQ1AsSUFBSSxtQkFBbUIsQ0FDckIsT0FBTyxFQUNQLGdFQUFnRSxTQUFTLE9BQU8sRUFDaEYsU0FBUyxFQUNULENBQUMsQ0FDRixFQUNELElBQUksV0FBVyxDQUFDLElBQUksU0FBUyxDQUFDLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUNsRTtnQkFDRCxJQUFJLHdCQUF3QixDQUFDLE9BQU8sQ0FBQzthQUN0QyxDQUFDLENBQUM7U0FDSjtRQUVELElBQUksa0JBQWtCLEVBQUU7WUFDdEIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDO1NBQzlDO2FBQU07WUFDTCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSwrQkFBK0IsQ0FBQztnQkFDNUQsSUFBSSx5QkFBeUIsQ0FDM0IsT0FBTyxFQUNQLElBQUksbUJBQW1CLENBQ3JCLE9BQU8sRUFDUCxnRUFBZ0UsU0FBUyxPQUFPLEVBQ2hGLFNBQVMsRUFDVCxDQUFDLENBQ0YsRUFDRCxJQUFJLFdBQVcsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FDbEU7Z0JBQ0QsSUFBSSx3QkFBd0IsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQzthQUMzRCxDQUFDLENBQUM7U0FDSjtRQUVELElBQUksQ0FBQyxnQkFBZ0I7WUFDbkIsZ0JBQWdCLGFBQWhCLGdCQUFnQixjQUFoQixnQkFBZ0IsR0FDaEIsSUFBSSx5QkFBeUIsQ0FDM0IsT0FBTyxFQUNQLElBQUksQ0FBQyxRQUFRLFlBQVksU0FBUyxDQUFDLGVBQWU7Z0JBQ2hELENBQUMsQ0FBQyxJQUFJLHVCQUF1QixDQUN6QixPQUFPLEVBQ1AsSUFBSSx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQzFDLElBQUksc0JBQXNCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUMxQztnQkFDSCxDQUFDLENBQUMsSUFBSSx5QkFBeUIsQ0FBQyx1QkFBdUIsQ0FBQyxFQUMxRCxJQUFJLFdBQVcsQ0FDYixJQUFJLFNBQVMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQ2hELENBQ0YsQ0FBQztRQUNKLElBQUksQ0FBQyxpQkFBaUI7WUFDcEIsaUJBQWlCLGFBQWpCLGlCQUFpQixjQUFqQixpQkFBaUIsR0FBSSxJQUFJLDBCQUEwQixFQUFFLENBQUM7UUFDeEQsSUFBSSxDQUFDLGlCQUFpQjtZQUNwQixpQkFBaUIsYUFBakIsaUJBQWlCLGNBQWpCLGlCQUFpQixHQUFJLElBQUksMEJBQTBCLEVBQUUsQ0FBQztRQUV4RCxJQUFJLENBQUMsa0JBQWtCO1lBQ3JCLGtCQUFrQixhQUFsQixrQkFBa0IsY0FBbEIsa0JBQWtCLEdBQUksSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRU0sS0FBSyxDQUFDLFlBQVksQ0FDdkIsYUFBNkIsRUFDN0IsYUFBNkIsRUFDN0IsUUFBa0IsRUFDbEIsZ0JBQWtDLEVBQ2xDLGlCQUFxQyxFQUNyQyxnQkFBNEMsK0JBQStCLENBQ3pFLElBQUksQ0FBQyxPQUFPLENBQ2I7UUFFRCxJQUNFLGFBQWEsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUMxRTtZQUNBLENBQUMsYUFBYSxFQUFFLGFBQWEsQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1NBQ2pFO1FBRUQsSUFBSSxtQkFBbUIsR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQ2xELFFBQVEsRUFDUixRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksRUFDMUIsSUFBSSxDQUNMLENBQUM7UUFDRiw2REFBNkQ7UUFDN0QsSUFBSSxVQUFtQixDQUFDO1FBQ3hCLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFDLFNBQVMsRUFBRTtZQUNsRCxVQUFVLEdBQUcsSUFBSSxDQUFDO1NBQ25CO2FBQU0sSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxRQUFRLENBQUMsU0FBUyxFQUFFO1lBQ3pELFVBQVUsR0FBRyxLQUFLLENBQUM7U0FDcEI7YUFBTTtZQUNMLFVBQVUsR0FBRyxJQUFJLFFBQVEsQ0FDdkIsYUFBYSxDQUFDLFFBQVEsRUFDdEIsYUFBYSxDQUFDLFFBQVEsQ0FDdkIsQ0FBQyxXQUFXLENBQUMsbUJBQW1CLENBQUMsQ0FBQztZQUNuQyxJQUFJLENBQUMsVUFBVTtnQkFBRSxtQkFBbUIsR0FBRyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUNyRTtRQUVELE1BQU0sQ0FBQyxZQUFZLEVBQUUsYUFBYSxDQUFDLEdBQUcsVUFBVTtZQUM5QyxDQUFDLENBQUMsQ0FBQyxhQUFhLEVBQUUsYUFBYSxDQUFDO1lBQ2hDLENBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUVuQyxJQUFJLFlBQVksR0FBRyxtQkFBbUIsQ0FBQztRQUN2QyxJQUFJLGtCQUFrQixHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUM7UUFDdkMsSUFBSSxZQUFZLEdBQWEsVUFBVTtZQUNyQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXO1lBQzNCLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUM5QixJQUFJLElBQUksR0FBcUIsSUFBSSxDQUFDO1FBQ2xDLElBQUksYUFBYSxHQUFHLEtBQUssQ0FBQztRQUMxQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDVixzRUFBc0U7UUFDdEUsT0FBTyxDQUFDLGFBQWEsRUFBRTtZQUNyQixDQUFDLEVBQUUsQ0FBQztZQUNKLElBQUksQ0FBQyxHQUFHLGdCQUFnQixDQUFDLGFBQWEsRUFBRTtnQkFDdEMsR0FBRyxDQUFDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO2dCQUNwQyxPQUFPO29CQUNMLE1BQU0sRUFBRSxpQkFBaUIsQ0FBQyxjQUFjO29CQUN4QyxLQUFLLEVBQUUseUJBQXlCO2lCQUNqQyxDQUFDO2FBQ0g7WUFFRCxJQUFJLFlBQVksR0FBRyxzQkFBc0IsQ0FDdkMsWUFBWSxFQUNaLFlBQVksRUFDWixZQUFZLEVBQ1osYUFBYSxDQUNkLENBQUM7WUFDRixJQUFJLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQzNCLEdBQUcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztnQkFDM0IsT0FBTztvQkFDTCxNQUFNLEVBQUUsaUJBQWlCLENBQUMsY0FBYztpQkFDekMsQ0FBQzthQUNIO1lBQ0QsSUFBSSxHQUFHLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FDckIsWUFBWSxFQUNaLGFBQWEsQ0FBQyxRQUFRLEVBQ3RCLFNBQVMsQ0FBQyxXQUFXLEVBQ3JCLFNBQVMsRUFDVDtnQkFDRSxHQUFHLCtCQUErQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7Z0JBQ2hELEdBQUcsYUFBYTtnQkFDaEIsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxRQUFRLENBQUMsRUFBRSxDQUFDO2FBQ3RDLENBQ0YsQ0FBQztZQUNGLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ1QsT0FBTztvQkFDTCxNQUFNLEVBQUUsaUJBQWlCLENBQUMsY0FBYztvQkFDeEMsS0FBSyxFQUFFLGdCQUFnQjtpQkFDeEIsQ0FBQzthQUNIO1lBRUQsSUFBSSxtQkFBbUIsR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDekUsSUFBSSxvQkFBb0IsR0FBRyxhQUFhLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDdkUsSUFBSSxRQUFRLEdBQUcsbUJBQW1CLENBQUMsTUFBTSxDQUFDLG9CQUFvQixDQUFDLENBQUM7WUFFaEUsSUFBSSxxQkFBcUIsQ0FBQztZQUMxQixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUMzQixJQUFJLEtBQUssQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDLEVBQUUsRUFBRTtvQkFDakMsTUFBTSxPQUFPLEdBQUcsS0FBOEIsQ0FBQztvQkFDL0MsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFO3dCQUN0QyxJQUNFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDOzRCQUN4QyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQzs0QkFDeEMsSUFBSSxDQUFDLEdBQUcsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFDN0I7NEJBQ0EscUJBQXFCLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FDakMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUMsQ0FBRSxDQUFDLFFBQVEsRUFBRSxDQUM3QyxDQUFDOzRCQUNGLFlBQVksR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQ3ZDLFFBQVEsRUFDUixJQUFJLENBQUMsTUFBTSxDQUFDLHFCQUFzQixDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQzlDLFVBQVUsQ0FDWCxDQUFDO3lCQUNIO29CQUNILENBQUMsQ0FBQyxDQUFDO2lCQUNKO1lBQ0gsQ0FBQyxDQUFDLENBQUM7WUFDSCxJQUFJLENBQUMscUJBQXFCLEVBQUU7Z0JBQzFCLFlBQVksR0FBRyxtQkFBbUIsQ0FBQzthQUNwQztZQUNELGFBQWE7Z0JBQ1gsUUFBUSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUM7b0JBQzlCLElBQUksQ0FBQyxhQUFhLENBQ2hCLFFBQVEsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FDckQsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsbUJBQW1CLENBQUMsQ0FBQztZQUVuRCxJQUFJLGFBQWEsSUFBSSxxQkFBcUIsRUFBRTtnQkFDMUMsa0JBQWtCLEdBQUcsSUFBSSxJQUFJLENBQzNCLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUNwQixRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFDcEIsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQ2pCLHFCQUFxQixFQUNyQixRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFDdkIsUUFBUSxDQUFDLGtCQUFrQixDQUFDLHFCQUFxQixDQUFDLEVBQ2xELFFBQVEsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQy9CLENBQUM7YUFDSDtZQUNELFlBQVksR0FBRyxJQUFJLENBQUMsS0FBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUV4RSxHQUFHLENBQUMsSUFBSSxDQUFDO2dCQUNQLFlBQVksRUFBRSxZQUFZLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7Z0JBQ2pELFFBQVEsRUFBRSxRQUFRLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7Z0JBQ3pDLG1CQUFtQixFQUFFLGdCQUFnQixDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7Z0JBQ3JFLFVBQVUsRUFBRSxDQUFDLENBQUMsUUFBUSxFQUFFO2FBQ3pCLENBQUMsQ0FBQztTQUNKO1FBRUQsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNULE9BQU87Z0JBQ0wsTUFBTSxFQUFFLGlCQUFpQixDQUFDLGNBQWM7Z0JBQ3hDLEtBQUssRUFBRSxnQkFBZ0I7YUFDeEIsQ0FBQztTQUNIO1FBQ0QsSUFBSSxnQkFBOEMsQ0FBQztRQUNuRCxJQUFJLGlCQUFpQixFQUFFO1lBQ3JCLGdCQUFnQixHQUFHLE1BQU0sSUFBSSxDQUFDLCtCQUErQixDQUMzRCxJQUFJLENBQUMsS0FBSyxFQUNWLGlCQUFpQixFQUNqQjtnQkFDRSxxQkFBcUIsRUFBRSxZQUFZO2dCQUNuQyxzQkFBc0IsRUFBRSxhQUFhO2dCQUNyQyxvQkFBb0IsRUFBRSxRQUFRO2FBQy9CLENBQ0YsQ0FBQztTQUNIO1FBRUQsT0FBTztZQUNMLE1BQU0sRUFBRSxpQkFBaUIsQ0FBQyxPQUFPO1lBQ2pDLE1BQU0sRUFBRSxFQUFFLEdBQUcsSUFBSSxFQUFFLGdCQUFnQixFQUFFLFlBQVksRUFBRSxrQkFBa0IsRUFBRTtTQUN4RSxDQUFDO0lBQ0osQ0FBQztJQUVEOztPQUVHO0lBQ0ksS0FBSyxDQUFDLEtBQUssQ0FDaEIsTUFBc0IsRUFDdEIsYUFBdUIsRUFDdkIsU0FBb0IsRUFDcEIsVUFBd0IsRUFDeEIsdUJBQW1ELEVBQUU7O1FBRXJELE1BQU0sQ0FBQyxTQUFTLENBQ2QseUJBQXlCLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFDdkMsQ0FBQyxFQUNELGdCQUFnQixDQUFDLEtBQUssQ0FDdkIsQ0FBQztRQUVGLHNGQUFzRjtRQUN0Rix1QkFBdUI7UUFDdkIsTUFBTSxXQUFXLEdBQ2YsTUFBQSxvQkFBb0IsQ0FBQyxXQUFXLG1DQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLENBQUM7UUFFckUsTUFBTSxhQUFhLEdBQXNCLENBQUMsQ0FBQyxLQUFLLENBQzlDLEVBQUUsRUFDRiwrQkFBK0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQzdDLG9CQUFvQixFQUNwQixFQUFFLFdBQVcsRUFBRSxDQUNoQixDQUFDO1FBRUYsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLGFBQWEsQ0FBQztRQUVwQyxNQUFNLFVBQVUsR0FDZCxTQUFTLElBQUksU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDO1FBQ3ZFLE1BQU0sV0FBVyxHQUNmLFNBQVMsSUFBSSxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDdkUsTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQztRQUNuQyxNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDO1FBRXJDLDRFQUE0RTtRQUM1RSxrRkFBa0Y7UUFDbEYsb0NBQW9DO1FBQ3BDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUNwRCxNQUFNLEVBQ04sYUFBYSxDQUNkLENBQUM7UUFFRix3RkFBd0Y7UUFDeEYsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzdCLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUVsRSxNQUFNLENBQUMsU0FBUyxDQUNkLGNBQWMsRUFDZCxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsU0FBUyxFQUN0QixnQkFBZ0IsQ0FBQyxZQUFZLENBQzlCLENBQUM7UUFFRixNQUFNLFVBQVUsR0FBRyxhQUFhLENBQUMsT0FBTyxDQUFDO1FBRXpDLE1BQU0sYUFBYSxHQUdaLEVBQUUsQ0FBQztRQUVWLE1BQU0sWUFBWSxHQUFHLElBQUksR0FBRyxDQUFDLFNBQVMsYUFBVCxTQUFTLGNBQVQsU0FBUyxHQUFJLEVBQUUsQ0FBQyxDQUFDO1FBRTlDLElBQ0UsWUFBWSxDQUFDLElBQUksSUFBSSxDQUFDO1lBQ3RCLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksWUFBWSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsRUFDaEU7WUFDQSxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxFQUFFLDhCQUE4QixDQUFDLENBQUM7WUFDbkUsYUFBYSxDQUFDLElBQUksQ0FDaEIsSUFBSSxDQUFDLFdBQVcsQ0FDZCxPQUFPLEVBQ1AsUUFBUSxFQUNSLE9BQU8sRUFDUCxRQUFRLEVBQ1IsVUFBVSxFQUNWLFdBQVcsRUFDWCxTQUFTLEVBQ1QsYUFBYSxDQUNkLENBQ0YsQ0FBQztZQUNGLGFBQWEsQ0FBQyxJQUFJLENBQ2hCLElBQUksQ0FBQyxXQUFXLENBQ2QsT0FBTyxFQUNQLFFBQVEsRUFDUixPQUFPLEVBQ1AsUUFBUSxFQUNSLFVBQVUsRUFDVixXQUFXLEVBQ1gsU0FBUyxFQUNULGFBQWEsQ0FDZCxDQUNGLENBQUM7U0FDSDthQUFNO1lBQ0wsSUFBSSxZQUFZLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRTtnQkFDakMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztnQkFDbEUsYUFBYSxDQUFDLElBQUksQ0FDaEIsSUFBSSxDQUFDLFdBQVcsQ0FDZCxPQUFPLEVBQ1AsUUFBUSxFQUNSLE9BQU8sRUFDUCxRQUFRLEVBQ1IsVUFBVSxFQUNWLFdBQVcsRUFDWCxTQUFTLEVBQ1QsYUFBYSxDQUNkLENBQ0YsQ0FBQzthQUNIO1lBQ0QsSUFBSSxZQUFZLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRTtnQkFDakMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztnQkFDbEUsYUFBYSxDQUFDLElBQUksQ0FDaEIsSUFBSSxDQUFDLFdBQVcsQ0FDZCxPQUFPLEVBQ1AsUUFBUSxFQUNSLE9BQU8sRUFDUCxRQUFRLEVBQ1IsVUFBVSxFQUNWLFdBQVcsRUFDWCxTQUFTLEVBQ1QsYUFBYSxDQUNkLENBQ0YsQ0FBQzthQUNIO1NBQ0Y7UUFFRCxNQUFNLCtCQUErQixHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUV6RSxJQUFJLHdCQUF3QixHQUEwQixFQUFFLENBQUM7UUFDekQsSUFBSSxpQkFBaUIsR0FBd0MsRUFBRSxDQUFDO1FBQ2hFLEtBQUssTUFBTSxFQUNULHFCQUFxQixFQUNyQixjQUFjLEdBQ2YsSUFBSSwrQkFBK0IsRUFBRTtZQUNwQyx3QkFBd0IsR0FBRztnQkFDekIsR0FBRyx3QkFBd0I7Z0JBQzNCLEdBQUcscUJBQXFCO2FBQ3pCLENBQUM7WUFDRixpQkFBaUIsR0FBRyxDQUFDLEdBQUcsaUJBQWlCLEVBQUUsY0FBYyxDQUFDLENBQUM7U0FDNUQ7UUFFRCxJQUFJLHdCQUF3QixDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7WUFDeEMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLHdCQUF3QixFQUFFLEVBQUUsMEJBQTBCLENBQUMsQ0FBQztZQUNuRSxPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsMEZBQTBGO1FBQzFGLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNsQyxNQUFNLFlBQVksR0FBRyxnQkFBZ0IsQ0FDbkMsTUFBTSxFQUNOLFFBQVEsRUFDUix3QkFBd0IsRUFDeEIsU0FBUyxFQUNULElBQUksQ0FBQyxPQUFPLEVBQ1osYUFBYSxDQUNkLENBQUM7UUFFRixJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ2pCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxNQUFNLEVBQ0osS0FBSyxFQUNMLGdCQUFnQixFQUNoQixnQkFBZ0IsRUFDaEIsTUFBTSxFQUFFLFlBQVksRUFDcEIsMEJBQTBCLEVBQzFCLG1CQUFtQixHQUNwQixHQUFHLFlBQVksQ0FBQztRQUVqQix1REFBdUQ7UUFDdkQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FDM0IsVUFBVSxFQUNWLFdBQVcsRUFDWCxTQUFTLEVBQ1QsWUFBWSxDQUNiLENBQUM7UUFFRixJQUFJLGdCQUE4QyxDQUFDO1FBRW5ELDhGQUE4RjtRQUM5Riw4QkFBOEI7UUFDOUIsSUFBSSxVQUFVLEVBQUU7WUFDZCxnQkFBZ0IsR0FBRyxJQUFJLENBQUMseUJBQXlCLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1NBQ3RFO1FBRUQsTUFBTSxDQUFDLFNBQVMsQ0FDZCxtQkFBbUIsRUFDbkIsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLGNBQWMsRUFDM0IsZ0JBQWdCLENBQUMsWUFBWSxDQUM5QixDQUFDO1FBRUYsTUFBTSxDQUFDLFNBQVMsQ0FDZCxxQkFBcUIsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUNuQyxDQUFDLEVBQ0QsZ0JBQWdCLENBQUMsS0FBSyxDQUN2QixDQUFDO1FBRUYsSUFBSSxDQUFDLHdCQUF3QixDQUFDLFlBQVksRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBRS9ELE9BQU87WUFDTCxLQUFLO1lBQ0wsZ0JBQWdCO1lBQ2hCLGdCQUFnQjtZQUNoQiwwQkFBMEI7WUFDMUIsbUJBQW1CO1lBQ25CLFdBQVc7WUFDWCxLQUFLLEVBQUUsWUFBWTtZQUNuQixLQUFLO1lBQ0wsZ0JBQWdCO1lBQ2hCLFdBQVcsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sV0FBVyxDQUFDO1NBQy9DLENBQUM7SUFDSixDQUFDO0lBRU8sS0FBSyxDQUFDLFdBQVcsQ0FDdkIsT0FBYyxFQUNkLFFBQWUsRUFDZixPQUF5QixFQUN6QixRQUFrQixFQUNsQixVQUFpQixFQUNqQixXQUFzQixFQUN0QixRQUFtQixFQUNuQixhQUFnQztRQUtoQyxHQUFHLENBQUMsSUFBSSxDQUFDLDJCQUEyQixDQUFDLENBQUM7UUFDdEMsNkVBQTZFO1FBQzdFLDhFQUE4RTtRQUM5RSx5QkFBeUI7UUFDekIsTUFBTSxFQUFFLFlBQVksRUFBRSxjQUFjLEVBQUUsR0FBRyxNQUFNLG1CQUFtQixDQUFDO1lBQ2pFLE9BQU87WUFDUCxRQUFRO1lBQ1IsYUFBYSxFQUFFLElBQUksQ0FBQyxhQUFhO1lBQ2pDLHdCQUF3QixFQUFFLElBQUksQ0FBQyx3QkFBd0I7WUFDdkQsWUFBWSxFQUFFLElBQUksQ0FBQyxjQUFjO1lBQ2pDLFNBQVMsRUFBRSxRQUFRO1lBQ25CLGdCQUFnQixFQUFFLElBQUksQ0FBQyxrQkFBa0I7WUFDekMsYUFBYTtZQUNiLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztTQUN0QixDQUFDLENBQUM7UUFDSCxNQUFNLEtBQUssR0FBRyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFekMsa0dBQWtHO1FBQ2xHLE1BQU0sRUFBRSxlQUFlLEVBQUUsR0FBRyxhQUFhLENBQUM7UUFDMUMsTUFBTSxNQUFNLEdBQUcsa0JBQWtCLENBQy9CLE9BQU8sRUFDUCxRQUFRLEVBQ1IsS0FBSyxFQUNMLGVBQWUsQ0FDaEIsQ0FBQztRQUVGLElBQUksTUFBTSxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7WUFDdEIsT0FBTyxFQUFFLHFCQUFxQixFQUFFLEVBQUUsRUFBRSxjQUFjLEVBQUUsQ0FBQztTQUN0RDtRQUVELDZFQUE2RTtRQUM3RSxNQUFNLE9BQU8sR0FDWCxRQUFRLElBQUksU0FBUyxDQUFDLFdBQVc7WUFDL0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7WUFDdEUsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUU1RSxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDaEMsR0FBRyxDQUFDLElBQUksQ0FDTiw2QkFBNkIsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLE9BQU8sQ0FBQyxNQUFNLHFCQUFxQixDQUM5RixDQUFDO1FBQ0YsTUFBTSxFQUFFLGdCQUFnQixFQUFFLEdBQUcsTUFBTSxPQUFPLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRTtZQUMxRCxXQUFXLEVBQUUsYUFBYSxDQUFDLFdBQVc7U0FDdkMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMsYUFBYSxDQUN6RCxJQUFJLENBQUMsT0FBTyxFQUNaLFdBQVcsRUFDWCxJQUFJLENBQUMsY0FBYyxFQUNuQixVQUFVLENBQ1gsQ0FBQztRQUVGLE1BQU0sQ0FBQyxTQUFTLENBQ2QsY0FBYyxFQUNkLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxZQUFZLEVBQ3pCLGdCQUFnQixDQUFDLFlBQVksQ0FDOUIsQ0FBQztRQUVGLE1BQU0sQ0FBQyxTQUFTLENBQ2QsaUJBQWlCLEVBQ2pCLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQzthQUNoQixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7YUFDbEMsR0FBRyxFQUFFLEVBQ1IsZ0JBQWdCLENBQUMsS0FBSyxDQUN2QixDQUFDO1FBRUYsTUFBTSxxQkFBcUIsR0FBRyxFQUFFLENBQUM7UUFFakMsS0FBSyxNQUFNLGNBQWMsSUFBSSxnQkFBZ0IsRUFBRTtZQUM3QyxNQUFNLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxHQUFHLGNBQWMsQ0FBQztZQUV2QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDdEMsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBRSxDQUFDO2dCQUM3QixNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFFLENBQUM7Z0JBQy9CLE1BQU0sRUFDSixLQUFLLEVBQ0wsTUFBTSxFQUNOLHFCQUFxQixFQUNyQiwyQkFBMkIsRUFDM0IsV0FBVyxHQUNaLEdBQUcsV0FBVyxDQUFDO2dCQUVoQixJQUNFLENBQUMsS0FBSztvQkFDTixDQUFDLHFCQUFxQjtvQkFDdEIsQ0FBQywyQkFBMkI7b0JBQzVCLENBQUMsV0FBVyxFQUNaO29CQUNBLEdBQUcsQ0FBQyxLQUFLLENBQ1A7d0JBQ0UsS0FBSyxFQUFFLGFBQWEsQ0FBQyxLQUFLLENBQUM7d0JBQzNCLFdBQVc7cUJBQ1osRUFDRCxxQ0FBcUMsQ0FDdEMsQ0FBQztvQkFDRixTQUFTO2lCQUNWO2dCQUVELE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxxQkFBcUIsQ0FBQztvQkFDcEQsS0FBSztvQkFDTCxRQUFRLEVBQUUsS0FBSztvQkFDZixNQUFNO29CQUNOLE9BQU87b0JBQ1AscUJBQXFCO29CQUNyQiwyQkFBMkI7b0JBQzNCLGlCQUFpQixFQUFFLFdBQVc7b0JBQzlCLFFBQVE7b0JBQ1IsVUFBVTtvQkFDVixTQUFTLEVBQUUsUUFBUTtvQkFDbkIsY0FBYyxFQUFFLElBQUksQ0FBQyxjQUFjO2lCQUNwQyxDQUFDLENBQUM7Z0JBRUgscUJBQXFCLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7YUFDakQ7U0FDRjtRQUVELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxjQUFjLEVBQUUsQ0FBQztJQUNuRCxDQUFDO0lBRU8sS0FBSyxDQUFDLFdBQVcsQ0FDdkIsT0FBYyxFQUNkLFFBQWUsRUFDZixPQUF5QixFQUN6QixRQUFrQixFQUNsQixVQUFpQixFQUNqQixXQUFzQixFQUN0QixRQUFtQixFQUNuQixhQUFnQztRQUtoQyxHQUFHLENBQUMsSUFBSSxDQUFDLDJCQUEyQixDQUFDLENBQUM7UUFDdEMsNkVBQTZFO1FBQzdFLDhFQUE4RTtRQUM5RSx5QkFBeUI7UUFDekIsTUFBTSxFQUFFLFlBQVksRUFBRSxjQUFjLEVBQUUsR0FBRyxNQUFNLG1CQUFtQixDQUFDO1lBQ2pFLE9BQU87WUFDUCxRQUFRO1lBQ1IsYUFBYSxFQUFFLElBQUksQ0FBQyxhQUFhO1lBQ2pDLHdCQUF3QixFQUFFLElBQUksQ0FBQyx3QkFBd0I7WUFDdkQsWUFBWSxFQUFFLElBQUksQ0FBQyxjQUFjO1lBQ2pDLFNBQVMsRUFBRSxRQUFRO1lBQ25CLGdCQUFnQixFQUFFLElBQUksQ0FBQyxrQkFBa0I7WUFDekMsYUFBYTtZQUNiLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztTQUN0QixDQUFDLENBQUM7UUFDSCxNQUFNLEtBQUssR0FBRyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFekMsa0dBQWtHO1FBQ2xHLE1BQU0sRUFBRSxlQUFlLEVBQUUsR0FBRyxhQUFhLENBQUM7UUFDMUMsTUFBTSxNQUFNLEdBQUcsa0JBQWtCLENBQy9CLE9BQU8sRUFDUCxRQUFRLEVBQ1IsS0FBSyxFQUNMLGVBQWUsQ0FDaEIsQ0FBQztRQUVGLElBQUksTUFBTSxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7WUFDdEIsT0FBTyxFQUFFLHFCQUFxQixFQUFFLEVBQUUsRUFBRSxjQUFjLEVBQUUsQ0FBQztTQUN0RDtRQUVELDZFQUE2RTtRQUM3RSxNQUFNLE9BQU8sR0FDWCxRQUFRLElBQUksU0FBUyxDQUFDLFdBQVc7WUFDL0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7WUFDdEUsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUU1RSxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFFaEMsR0FBRyxDQUFDLElBQUksQ0FDTiw2QkFBNkIsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLE9BQU8sQ0FBQyxNQUFNLHFCQUFxQixDQUM5RixDQUFDO1FBQ0YsTUFBTSxFQUFFLGdCQUFnQixFQUFFLEdBQUcsTUFBTSxPQUFPLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRTVELE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsQ0FDekQsSUFBSSxDQUFDLE9BQU8sRUFDWixXQUFXLEVBQ1gsSUFBSSxDQUFDLGNBQWMsRUFDbkIsVUFBVSxDQUNYLENBQUM7UUFFRixNQUFNLENBQUMsU0FBUyxDQUNkLGNBQWMsRUFDZCxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsWUFBWSxFQUN6QixnQkFBZ0IsQ0FBQyxZQUFZLENBQzlCLENBQUM7UUFFRixNQUFNLENBQUMsU0FBUyxDQUNkLGlCQUFpQixFQUNqQixDQUFDLENBQUMsZ0JBQWdCLENBQUM7YUFDaEIsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO2FBQ2xDLEdBQUcsRUFBRSxFQUNSLGdCQUFnQixDQUFDLEtBQUssQ0FDdkIsQ0FBQztRQUVGLE1BQU0scUJBQXFCLEdBQUcsRUFBRSxDQUFDO1FBRWpDLEtBQUssTUFBTSxjQUFjLElBQUksZ0JBQWdCLEVBQUU7WUFDN0MsTUFBTSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsR0FBRyxjQUFjLENBQUM7WUFFdkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3RDLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUUsQ0FBQztnQkFDN0IsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBRSxDQUFDO2dCQUMvQixNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxHQUFHLFdBQVcsQ0FBQztnQkFFdEMsSUFBSSxDQUFDLEtBQUssRUFBRTtvQkFDVixHQUFHLENBQUMsS0FBSyxDQUNQO3dCQUNFLEtBQUssRUFBRSxhQUFhLENBQUMsS0FBSyxDQUFDO3dCQUMzQixXQUFXO3FCQUNaLEVBQ0QscUNBQXFDLENBQ3RDLENBQUM7b0JBQ0YsU0FBUztpQkFDVjtnQkFFRCxNQUFNLG1CQUFtQixHQUFHLElBQUkscUJBQXFCLENBQUM7b0JBQ3BELEtBQUs7b0JBQ0wsUUFBUSxFQUFFLEtBQUs7b0JBQ2YsTUFBTTtvQkFDTixPQUFPO29CQUNQLFFBQVE7b0JBQ1IsVUFBVTtvQkFDVixTQUFTLEVBQUUsUUFBUTtvQkFDbkIsY0FBYyxFQUFFLElBQUksQ0FBQyxjQUFjO2lCQUNwQyxDQUFDLENBQUM7Z0JBRUgscUJBQXFCLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7YUFDakQ7U0FDRjtRQUVELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxjQUFjLEVBQUUsQ0FBQztJQUNuRCxDQUFDO0lBRUQsc0dBQXNHO0lBQ3RHLHlGQUF5RjtJQUN6RiwyQkFBMkI7SUFDbkIscUJBQXFCLENBQzNCLE1BQXNCLEVBQ3RCLGFBQWdDO1FBRWhDLE1BQU0sRUFBRSxtQkFBbUIsRUFBRSxHQUFHLGFBQWEsQ0FBQztRQUM5QyxJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDbEIsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBRWpCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxHQUFHLEdBQUcsbUJBQW1CLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDbkQsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsbUJBQW1CLENBQUMsQ0FBQztZQUN2QyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxRQUFRLENBQUMsQ0FBQyxHQUFHLG1CQUFtQixFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMzRTtRQUVELE9BQU8sQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVPLFVBQVUsQ0FDaEIsZUFBeUIsRUFDekIsZ0JBQTBCLEVBQzFCLFNBQXFCLEVBQ3JCLFlBQW1DO1FBRW5DLE1BQU0sQ0FBQyxjQUFjLEVBQUUsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FDbEQsWUFBWSxFQUNaLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsUUFBUSxJQUFJLFFBQVEsQ0FBQyxFQUFFLENBQ3JELENBQUM7UUFFRixNQUFNLFFBQVEsR0FBRyxDQUFDLENBQUMsR0FBRyxDQVFwQixjQUF5QyxFQUN6QyxDQUFDLFdBQWtDLEVBQUUsRUFBRTtZQUNyQyxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxXQUFXLENBQUM7WUFFN0Msa0VBQWtFO1lBQ2xFLHVFQUF1RTtZQUN2RSxrR0FBa0c7WUFDbEcsSUFBSSxTQUFTLElBQUksU0FBUyxDQUFDLFdBQVcsRUFBRTtnQkFDdEMsTUFBTSxjQUFjLEdBQUcsY0FBYyxDQUFDLG9CQUFvQixDQUN4RCxlQUFlLEVBQ2YsTUFBTSxDQUFDLFNBQVMsRUFDaEIsTUFBTSxDQUFDLFdBQVcsQ0FDbkIsQ0FBQztnQkFDRixNQUFNLGFBQWEsR0FBRyxjQUFjLENBQUMsb0JBQW9CLENBQ3ZELGdCQUFnQixFQUNoQixLQUFLLENBQUMsU0FBUyxFQUNmLEtBQUssQ0FBQyxXQUFXLENBQ2xCLENBQUM7Z0JBRUYsTUFBTSxRQUFRLEdBQUcsSUFBSSxVQUFVLENBQzdCLEtBQUssQ0FBQyxLQUFLLEVBQ1gsY0FBYyxDQUFDLFFBQVEsRUFDdkIsYUFBYSxDQUFDLFFBQVEsQ0FDdkIsQ0FBQztnQkFFRixPQUFPO29CQUNMLE9BQU8sRUFBRSxRQUFRO29CQUNqQixXQUFXLEVBQUUsY0FBYztvQkFDM0IsWUFBWSxFQUFFLGFBQWE7aUJBQzVCLENBQUM7YUFDSDtpQkFBTTtnQkFDTCxNQUFNLGFBQWEsR0FBRyxjQUFjLENBQUMsb0JBQW9CLENBQ3ZELGVBQWUsRUFDZixLQUFLLENBQUMsU0FBUyxFQUNmLEtBQUssQ0FBQyxXQUFXLENBQ2xCLENBQUM7Z0JBRUYsTUFBTSxjQUFjLEdBQUcsY0FBYyxDQUFDLG9CQUFvQixDQUN4RCxnQkFBZ0IsRUFDaEIsTUFBTSxDQUFDLFNBQVMsRUFDaEIsTUFBTSxDQUFDLFdBQVcsQ0FDbkIsQ0FBQztnQkFFRixNQUFNLGFBQWEsR0FBRyxJQUFJLFVBQVUsQ0FDbEMsS0FBSyxDQUFDLEtBQUssRUFDWCxhQUFhLENBQUMsUUFBUSxFQUN0QixjQUFjLENBQUMsUUFBUSxDQUN4QixDQUFDO2dCQUVGLE9BQU87b0JBQ0wsT0FBTyxFQUFFLGFBQWE7b0JBQ3RCLFdBQVcsRUFBRSxhQUFhO29CQUMxQixZQUFZLEVBQUUsY0FBYztpQkFDN0IsQ0FBQzthQUNIO1FBQ0gsQ0FBQyxDQUNGLENBQUM7UUFFRixNQUFNLFFBQVEsR0FBRyxDQUFDLENBQUMsR0FBRyxDQVFwQixjQUF5QyxFQUN6QyxDQUFDLFdBQWtDLEVBQUUsRUFBRTtZQUNyQyxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxXQUFXLENBQUM7WUFFN0Msa0VBQWtFO1lBQ2xFLHVFQUF1RTtZQUN2RSxrR0FBa0c7WUFDbEcsSUFBSSxTQUFTLElBQUksU0FBUyxDQUFDLFdBQVcsRUFBRTtnQkFDdEMsTUFBTSxjQUFjLEdBQUcsY0FBYyxDQUFDLG9CQUFvQixDQUN4RCxlQUFlLEVBQ2YsTUFBTSxDQUFDLFNBQVMsRUFDaEIsTUFBTSxDQUFDLFdBQVcsQ0FDbkIsQ0FBQztnQkFDRixNQUFNLGFBQWEsR0FBRyxjQUFjLENBQUMsb0JBQW9CLENBQ3ZELGdCQUFnQixFQUNoQixLQUFLLENBQUMsU0FBUyxFQUNmLEtBQUssQ0FBQyxXQUFXLENBQ2xCLENBQUM7Z0JBRUYsTUFBTSxVQUFVLEdBQUcsSUFBSSxVQUFVLENBQy9CLEtBQUssQ0FBQyxLQUFLLEVBQ1gsY0FBYyxDQUFDLFFBQVEsRUFDdkIsYUFBYSxDQUFDLFFBQVEsQ0FDdkIsQ0FBQztnQkFFRixPQUFPO29CQUNMLE9BQU8sRUFBRSxVQUFVO29CQUNuQixXQUFXLEVBQUUsY0FBYztvQkFDM0IsWUFBWSxFQUFFLGFBQWE7aUJBQzVCLENBQUM7YUFDSDtpQkFBTTtnQkFDTCxNQUFNLGFBQWEsR0FBRyxjQUFjLENBQUMsb0JBQW9CLENBQ3ZELGVBQWUsRUFDZixLQUFLLENBQUMsU0FBUyxFQUNmLEtBQUssQ0FBQyxXQUFXLENBQ2xCLENBQUM7Z0JBRUYsTUFBTSxjQUFjLEdBQUcsY0FBYyxDQUFDLG9CQUFvQixDQUN4RCxnQkFBZ0IsRUFDaEIsTUFBTSxDQUFDLFNBQVMsRUFDaEIsTUFBTSxDQUFDLFdBQVcsQ0FDbkIsQ0FBQztnQkFFRixNQUFNLFVBQVUsR0FBRyxJQUFJLFVBQVUsQ0FDL0IsS0FBSyxDQUFDLEtBQUssRUFDWCxhQUFhLENBQUMsUUFBUSxFQUN0QixjQUFjLENBQUMsUUFBUSxDQUN4QixDQUFDO2dCQUVGLE9BQU87b0JBQ0wsT0FBTyxFQUFFLFVBQVU7b0JBQ25CLFdBQVcsRUFBRSxhQUFhO29CQUMxQixZQUFZLEVBQUUsY0FBYztpQkFDN0IsQ0FBQzthQUNIO1FBQ0gsQ0FBQyxDQUNGLENBQUM7UUFFRixNQUFNLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUUzRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFTyx5QkFBeUIsQ0FDL0IsS0FBMkMsRUFDM0MsVUFBdUI7UUFFdkIsTUFBTSxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUUsR0FDaEUsVUFBVSxDQUFDO1FBQ2IsT0FBTyxVQUFVLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFFO1lBQzFDLFNBQVM7WUFDVCxpQkFBaUI7WUFDakIsMkJBQTJCLEVBQUUsUUFBUTtZQUNyQyxnQkFBZ0I7U0FDakIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLEtBQUssQ0FBQywrQkFBK0IsQ0FDM0MsS0FBMkMsRUFDM0MsaUJBQW9DLEVBQ3BDLG9CQUEwQztRQUUxQyxNQUFNLEVBQ0osV0FBVyxFQUFFLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxFQUN6RSxtQkFBbUIsRUFBRSxrQkFBa0IsR0FDeEMsR0FBRyxpQkFBaUIsQ0FBQztRQUV0QixNQUFNLG9CQUFvQixHQUFHLG9CQUFvQixDQUFDLG9CQUFvQixDQUFDO1FBQ3ZFLE1BQU0sbUJBQW1CLEdBQ3ZCLG9CQUFvQixDQUFDLHFCQUFxQixDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDekUsTUFBTSxvQkFBb0IsR0FDeEIsb0JBQW9CLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN0RSxNQUFNLGFBQWEsR0FBRyxNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxlQUFlLENBQ2pFLG1CQUFtQixFQUNuQixvQkFBb0IsQ0FDckIsQ0FBQztRQUNGLE1BQU0sVUFBVSxHQUFHLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUNqRSxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUN0QyxDQUFDO1FBQ0YsT0FBTyxVQUFVLENBQUMsd0JBQXdCLENBQ3hDLEtBQUssRUFDTDtZQUNFLFNBQVM7WUFDVCxpQkFBaUI7WUFDakIsMkJBQTJCLEVBQUUsUUFBUTtZQUNyQyxnQkFBZ0I7U0FDakIsRUFDRCxRQUFRLENBQUMsV0FBVyxDQUFDO1lBQ25CLElBQUksRUFBRSxvQkFBb0IsQ0FBQyxJQUFJO1lBQy9CLFNBQVMsRUFBRSxvQkFBb0IsQ0FBQyxTQUFTO1lBQ3pDLFNBQVMsRUFBRSxvQkFBb0IsQ0FBQyxTQUFTO1lBQ3pDLE9BQU8sRUFBRSxVQUFVO2dCQUNqQixDQUFDLENBQUMsbUJBQW1CLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRTtnQkFDekMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUU7WUFDNUMsT0FBTyxFQUFFLFVBQVU7Z0JBQ2pCLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFO2dCQUMxQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRTtZQUMzQyxnQkFBZ0IsRUFBRSxLQUFLO1NBQ3hCLENBQUMsRUFDRixrQkFBa0IsRUFDbEIsYUFBYSxDQUFDLGVBQWUsRUFDN0IsYUFBYSxDQUFDLGdCQUFnQixDQUMvQixDQUFDO0lBQ0osQ0FBQztJQUVPLHdCQUF3QixDQUM5QixZQUtDLEVBQ0QsbUJBQXdEO1FBRXhELE1BQU0saUJBQWlCLEdBQUcsSUFBSSxHQUFHLEVBQVUsQ0FBQztRQUM1QyxNQUFNLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxHQUFHLFlBQVksQ0FBQztRQUM5QyxDQUFDLENBQUMsWUFBWSxDQUFDO2FBQ1osT0FBTyxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUU7WUFDdkIsTUFBTSxFQUFFLGFBQWEsRUFBRSxHQUFHLFdBQVcsQ0FBQztZQUN0QyxPQUFPLGFBQWEsQ0FBQztRQUN2QixDQUFDLENBQUM7YUFDRCxPQUFPLENBQUMsQ0FBQyxPQUFlLEVBQUUsRUFBRTtZQUMzQixpQkFBaUIsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFDL0MsQ0FBQyxDQUFDLENBQUM7UUFFTCxLQUFLLE1BQU0sZ0JBQWdCLElBQUksbUJBQW1CLEVBQUU7WUFDbEQsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLGdCQUFnQixDQUFDO1lBQ3RDLENBQUMsQ0FBQyxLQUFLLENBQ0wsZ0JBQWdCLENBQUMsVUFBVSxFQUMzQixDQUFDLEtBQWUsRUFBRSxhQUFxQixFQUFFLEVBQUU7Z0JBQ3pDLE1BQU0sUUFBUSxHQUNaLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FDOUIsaUJBQWlCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FDN0MsR0FBRyxDQUFDLENBQUM7Z0JBQ1IsTUFBTSxDQUFDLFNBQVMsQ0FDZCxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsUUFBUSxHQUFHLGFBQWEsRUFBRSxDQUFDLEVBQzNDLFFBQVEsRUFDUixnQkFBZ0IsQ0FBQyxLQUFLLENBQ3ZCLENBQUM7WUFDSixDQUFDLENBQ0YsQ0FBQztTQUNIO1FBRUQsSUFBSSxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQztRQUN2QixLQUFLLE1BQU0sV0FBVyxJQUFJLFlBQVksRUFBRTtZQUN0QyxJQUFJLFdBQVcsQ0FBQyxRQUFRLElBQUksUUFBUSxDQUFDLEVBQUUsRUFBRTtnQkFDdkMsVUFBVSxHQUFHLElBQUksQ0FBQzthQUNuQjtZQUNELElBQUksV0FBVyxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUMsRUFBRSxFQUFFO2dCQUN2QyxVQUFVLEdBQUcsSUFBSSxDQUFDO2FBQ25CO1NBQ0Y7UUFFRCxJQUFJLFVBQVUsSUFBSSxVQUFVLEVBQUU7WUFDNUIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLEVBQUUsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDbEU7YUFBTSxJQUFJLFVBQVUsRUFBRTtZQUNyQixJQUFJLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUMzQixNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxDQUFDLEVBQUUsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDN0Q7aUJBQU07Z0JBQ0wsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3hEO1NBQ0Y7YUFBTSxJQUFJLFVBQVUsRUFBRTtZQUNyQixJQUFJLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUMzQixNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxDQUFDLEVBQUUsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDN0Q7aUJBQU07Z0JBQ0wsTUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3hEO1NBQ0Y7SUFDSCxDQUFDO0lBRU8scUJBQXFCLENBQzNCLFFBQWtCLEVBQ2xCLFlBQWtCLEVBQ2xCLFVBQW1CO1FBRW5CLE1BQU0saUJBQWlCLEdBQUcsUUFBUSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUMxRSxNQUFNLGlCQUFpQixHQUFHLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFMUUsdUdBQXVHO1FBQ3ZHLCtFQUErRTtRQUMvRSxJQUNFLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLGlCQUFpQixDQUFDO1lBQ2pELElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLGlCQUFpQixDQUFDLEVBQzlDO1lBQ0EsT0FBTyxJQUFJLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDM0I7UUFFRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDcEQsSUFBSSxZQUFZLEdBQUcsSUFBSSxRQUFRLENBQzdCLGFBQWEsQ0FBQyxlQUFlLENBQzNCLFlBQVksRUFDWixpQkFBaUIsRUFDakIsU0FBUyxFQUNULElBQUksQ0FDTCxFQUNELGFBQWEsQ0FBQyxlQUFlLENBQzNCLFlBQVksRUFDWixpQkFBaUIsRUFDakIsU0FBUyxFQUNULElBQUksQ0FDTCxDQUNGLENBQUM7UUFDRixJQUFJLENBQUMsVUFBVTtZQUFFLFlBQVksR0FBRyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDdEQsT0FBTyxZQUFZLENBQUM7SUFDdEIsQ0FBQztJQUVPLGFBQWEsQ0FBQyxRQUFrQjtRQUN0QyxNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDO1lBQ3JDLENBQUMsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDO1FBQ3ZCLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUM7WUFDdkMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUM7UUFDekIsT0FBTyxJQUFJLFFBQVEsQ0FBQyxZQUFZLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDcEQsQ0FBQztDQUNGIn0="]},"metadata":{},"sourceType":"module"}