{"ast":null,"code":"import { SupportedChainId } from '../constants/chains';\nconst ETHERSCAN_PREFIXES = {\n  [SupportedChainId.MAINNET]: 'https://etherscan.io',\n  [SupportedChainId.ROPSTEN]: 'https://ropsten.etherscan.io',\n  [SupportedChainId.RINKEBY]: 'https://rinkeby.etherscan.io',\n  [SupportedChainId.GOERLI]: 'https://goerli.etherscan.io',\n  [SupportedChainId.KOVAN]: 'https://kovan.etherscan.io',\n  [SupportedChainId.OPTIMISM]: 'https://optimistic.etherscan.io',\n  [SupportedChainId.OPTIMISTIC_KOVAN]: 'https://kovan-optimistic.etherscan.io',\n  [SupportedChainId.POLYGON_MUMBAI]: 'https://mumbai.polygonscan.com',\n  [SupportedChainId.POLYGON]: 'https://polygonscan.com'\n};\nexport let ExplorerDataType;\n/**\n * Return the explorer link for the given data and data type\n * @param chainId the ID of the chain for which to return the data\n * @param data the data to return a link for\n * @param type the type of the data\n */\n\n(function (ExplorerDataType) {\n  ExplorerDataType[\"TRANSACTION\"] = \"transaction\";\n  ExplorerDataType[\"TOKEN\"] = \"token\";\n  ExplorerDataType[\"ADDRESS\"] = \"address\";\n  ExplorerDataType[\"BLOCK\"] = \"block\";\n})(ExplorerDataType || (ExplorerDataType = {}));\n\nexport function getExplorerLink(chainId, data, type) {\n  var _ETHERSCAN_PREFIXES$c;\n\n  if (chainId === SupportedChainId.ARBITRUM_ONE) {\n    switch (type) {\n      case ExplorerDataType.TRANSACTION:\n        return `https://arbiscan.io/tx/${data}`;\n\n      case ExplorerDataType.ADDRESS:\n      case ExplorerDataType.TOKEN:\n        return `https://arbiscan.io/address/${data}`;\n\n      case ExplorerDataType.BLOCK:\n        return `https://arbiscan.io/block/${data}`;\n\n      default:\n        return `https://arbiscan.io/`;\n    }\n  }\n\n  if (chainId === SupportedChainId.ARBITRUM_RINKEBY) {\n    switch (type) {\n      case ExplorerDataType.TRANSACTION:\n        return `https://rinkeby-explorer.arbitrum.io/tx/${data}`;\n\n      case ExplorerDataType.ADDRESS:\n      case ExplorerDataType.TOKEN:\n        return `https://rinkeby-explorer.arbitrum.io/address/${data}`;\n\n      case ExplorerDataType.BLOCK:\n        return `https://rinkeby-explorer.arbitrum.io/block/${data}`;\n\n      default:\n        return `https://rinkeby-explorer.arbitrum.io/`;\n    }\n  }\n\n  const prefix = (_ETHERSCAN_PREFIXES$c = ETHERSCAN_PREFIXES[chainId]) !== null && _ETHERSCAN_PREFIXES$c !== void 0 ? _ETHERSCAN_PREFIXES$c : 'https://etherscan.io';\n\n  switch (type) {\n    case ExplorerDataType.TRANSACTION:\n      return `${prefix}/tx/${data}`;\n\n    case ExplorerDataType.TOKEN:\n      return `${prefix}/token/${data}`;\n\n    case ExplorerDataType.BLOCK:\n      if (chainId === SupportedChainId.OPTIMISM || chainId === SupportedChainId.OPTIMISTIC_KOVAN) {\n        return `${prefix}/tx/${data}`;\n      }\n\n      return `${prefix}/block/${data}`;\n\n    case ExplorerDataType.ADDRESS:\n      return `${prefix}/address/${data}`;\n\n    default:\n      return `${prefix}`;\n  }\n}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/utils/getExplorerLink.ts"],"names":["SupportedChainId","ETHERSCAN_PREFIXES","MAINNET","ROPSTEN","RINKEBY","GOERLI","KOVAN","OPTIMISM","OPTIMISTIC_KOVAN","POLYGON_MUMBAI","POLYGON","ExplorerDataType","getExplorerLink","chainId","data","type","ARBITRUM_ONE","TRANSACTION","ADDRESS","TOKEN","BLOCK","ARBITRUM_RINKEBY","prefix"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,qBAAjC;AAEA,MAAMC,kBAAiD,GAAG;AACxD,GAACD,gBAAgB,CAACE,OAAlB,GAA4B,sBAD4B;AAExD,GAACF,gBAAgB,CAACG,OAAlB,GAA4B,8BAF4B;AAGxD,GAACH,gBAAgB,CAACI,OAAlB,GAA4B,8BAH4B;AAIxD,GAACJ,gBAAgB,CAACK,MAAlB,GAA2B,6BAJ6B;AAKxD,GAACL,gBAAgB,CAACM,KAAlB,GAA0B,4BAL8B;AAMxD,GAACN,gBAAgB,CAACO,QAAlB,GAA6B,iCAN2B;AAOxD,GAACP,gBAAgB,CAACQ,gBAAlB,GAAqC,uCAPmB;AAQxD,GAACR,gBAAgB,CAACS,cAAlB,GAAmC,gCARqB;AASxD,GAACT,gBAAgB,CAACU,OAAlB,GAA4B;AAT4B,CAA1D;AAYA,WAAYC,gBAAZ;AAOA;AACA;AACA;AACA;AACA;AACA;;WAZYA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;AAAAA,EAAAA,gB;GAAAA,gB,KAAAA,gB;;AAaZ,OAAO,SAASC,eAAT,CAAyBC,OAAzB,EAA0CC,IAA1C,EAAwDC,IAAxD,EAAwF;AAAA;;AAC7F,MAAIF,OAAO,KAAKb,gBAAgB,CAACgB,YAAjC,EAA+C;AAC7C,YAAQD,IAAR;AACE,WAAKJ,gBAAgB,CAACM,WAAtB;AACE,eAAQ,0BAAyBH,IAAK,EAAtC;;AACF,WAAKH,gBAAgB,CAACO,OAAtB;AACA,WAAKP,gBAAgB,CAACQ,KAAtB;AACE,eAAQ,+BAA8BL,IAAK,EAA3C;;AACF,WAAKH,gBAAgB,CAACS,KAAtB;AACE,eAAQ,6BAA4BN,IAAK,EAAzC;;AACF;AACE,eAAQ,sBAAR;AATJ;AAWD;;AAED,MAAID,OAAO,KAAKb,gBAAgB,CAACqB,gBAAjC,EAAmD;AACjD,YAAQN,IAAR;AACE,WAAKJ,gBAAgB,CAACM,WAAtB;AACE,eAAQ,2CAA0CH,IAAK,EAAvD;;AACF,WAAKH,gBAAgB,CAACO,OAAtB;AACA,WAAKP,gBAAgB,CAACQ,KAAtB;AACE,eAAQ,gDAA+CL,IAAK,EAA5D;;AACF,WAAKH,gBAAgB,CAACS,KAAtB;AACE,eAAQ,8CAA6CN,IAAK,EAA1D;;AACF;AACE,eAAQ,uCAAR;AATJ;AAWD;;AAED,QAAMQ,MAAM,4BAAGrB,kBAAkB,CAACY,OAAD,CAArB,yEAAkC,sBAA9C;;AAEA,UAAQE,IAAR;AACE,SAAKJ,gBAAgB,CAACM,WAAtB;AACE,aAAQ,GAAEK,MAAO,OAAMR,IAAK,EAA5B;;AAEF,SAAKH,gBAAgB,CAACQ,KAAtB;AACE,aAAQ,GAAEG,MAAO,UAASR,IAAK,EAA/B;;AAEF,SAAKH,gBAAgB,CAACS,KAAtB;AACE,UAAIP,OAAO,KAAKb,gBAAgB,CAACO,QAA7B,IAAyCM,OAAO,KAAKb,gBAAgB,CAACQ,gBAA1E,EAA4F;AAC1F,eAAQ,GAAEc,MAAO,OAAMR,IAAK,EAA5B;AACD;;AACD,aAAQ,GAAEQ,MAAO,UAASR,IAAK,EAA/B;;AAEF,SAAKH,gBAAgB,CAACO,OAAtB;AACE,aAAQ,GAAEI,MAAO,YAAWR,IAAK,EAAjC;;AACF;AACE,aAAQ,GAAEQ,MAAO,EAAjB;AAhBJ;AAkBD","sourcesContent":["import { SupportedChainId } from '../constants/chains'\n\nconst ETHERSCAN_PREFIXES: { [chainId: number]: string } = {\n  [SupportedChainId.MAINNET]: 'https://etherscan.io',\n  [SupportedChainId.ROPSTEN]: 'https://ropsten.etherscan.io',\n  [SupportedChainId.RINKEBY]: 'https://rinkeby.etherscan.io',\n  [SupportedChainId.GOERLI]: 'https://goerli.etherscan.io',\n  [SupportedChainId.KOVAN]: 'https://kovan.etherscan.io',\n  [SupportedChainId.OPTIMISM]: 'https://optimistic.etherscan.io',\n  [SupportedChainId.OPTIMISTIC_KOVAN]: 'https://kovan-optimistic.etherscan.io',\n  [SupportedChainId.POLYGON_MUMBAI]: 'https://mumbai.polygonscan.com',\n  [SupportedChainId.POLYGON]: 'https://polygonscan.com',\n}\n\nexport enum ExplorerDataType {\n  TRANSACTION = 'transaction',\n  TOKEN = 'token',\n  ADDRESS = 'address',\n  BLOCK = 'block',\n}\n\n/**\n * Return the explorer link for the given data and data type\n * @param chainId the ID of the chain for which to return the data\n * @param data the data to return a link for\n * @param type the type of the data\n */\nexport function getExplorerLink(chainId: number, data: string, type: ExplorerDataType): string {\n  if (chainId === SupportedChainId.ARBITRUM_ONE) {\n    switch (type) {\n      case ExplorerDataType.TRANSACTION:\n        return `https://arbiscan.io/tx/${data}`\n      case ExplorerDataType.ADDRESS:\n      case ExplorerDataType.TOKEN:\n        return `https://arbiscan.io/address/${data}`\n      case ExplorerDataType.BLOCK:\n        return `https://arbiscan.io/block/${data}`\n      default:\n        return `https://arbiscan.io/`\n    }\n  }\n\n  if (chainId === SupportedChainId.ARBITRUM_RINKEBY) {\n    switch (type) {\n      case ExplorerDataType.TRANSACTION:\n        return `https://rinkeby-explorer.arbitrum.io/tx/${data}`\n      case ExplorerDataType.ADDRESS:\n      case ExplorerDataType.TOKEN:\n        return `https://rinkeby-explorer.arbitrum.io/address/${data}`\n      case ExplorerDataType.BLOCK:\n        return `https://rinkeby-explorer.arbitrum.io/block/${data}`\n      default:\n        return `https://rinkeby-explorer.arbitrum.io/`\n    }\n  }\n\n  const prefix = ETHERSCAN_PREFIXES[chainId] ?? 'https://etherscan.io'\n\n  switch (type) {\n    case ExplorerDataType.TRANSACTION:\n      return `${prefix}/tx/${data}`\n\n    case ExplorerDataType.TOKEN:\n      return `${prefix}/token/${data}`\n\n    case ExplorerDataType.BLOCK:\n      if (chainId === SupportedChainId.OPTIMISM || chainId === SupportedChainId.OPTIMISTIC_KOVAN) {\n        return `${prefix}/tx/${data}`\n      }\n      return `${prefix}/block/${data}`\n\n    case ExplorerDataType.ADDRESS:\n      return `${prefix}/address/${data}`\n    default:\n      return `${prefix}`\n  }\n}\n"]},"metadata":{},"sourceType":"module"}