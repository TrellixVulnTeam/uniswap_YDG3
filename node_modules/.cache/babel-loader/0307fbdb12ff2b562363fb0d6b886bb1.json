{"ast":null,"code":"import { isAddress } from '../../utils';\n\n/**\n * Token instances created from token info on a token list.\n */\nexport class WrappedTokenInfo {\n  constructor(tokenInfo, list) {\n    this.isNative = false;\n    this.isToken = true;\n    this.list = void 0;\n    this.tokenInfo = void 0;\n    this._checksummedAddress = null;\n    this._tags = null;\n    this.tokenInfo = tokenInfo;\n    this.list = list;\n  }\n\n  get address() {\n    if (this._checksummedAddress) return this._checksummedAddress;\n    const checksummedAddress = isAddress(this.tokenInfo.address);\n    if (!checksummedAddress) throw new Error(`Invalid token address: ${this.tokenInfo.address}`);\n    return this._checksummedAddress = checksummedAddress;\n  }\n\n  get chainId() {\n    return this.tokenInfo.chainId;\n  }\n\n  get decimals() {\n    return this.tokenInfo.decimals;\n  }\n\n  get name() {\n    return this.tokenInfo.name;\n  }\n\n  get symbol() {\n    return this.tokenInfo.symbol;\n  }\n\n  get logoURI() {\n    return this.tokenInfo.logoURI;\n  }\n\n  get tags() {\n    if (this._tags !== null) return this._tags;\n    if (!this.tokenInfo.tags) return this._tags = [];\n    const listTags = this.list.tags;\n    if (!listTags) return this._tags = [];\n    return this._tags = this.tokenInfo.tags.map(tagId => {\n      return { ...listTags[tagId],\n        id: tagId\n      };\n    });\n  }\n\n  equals(other) {\n    return other.chainId === this.chainId && other.isToken && other.address.toLowerCase() === this.address.toLowerCase();\n  }\n\n  sortsBefore(other) {\n    if (this.equals(other)) throw new Error('Addresses should not be equal');\n    return this.address.toLowerCase() < other.address.toLowerCase();\n  }\n\n  get wrapped() {\n    return this;\n  }\n\n}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/state/lists/wrappedTokenInfo.ts"],"names":["isAddress","WrappedTokenInfo","constructor","tokenInfo","list","isNative","isToken","_checksummedAddress","_tags","address","checksummedAddress","Error","chainId","decimals","name","symbol","logoURI","tags","listTags","map","tagId","id","equals","other","toLowerCase","sortsBefore","wrapped"],"mappings":"AAGA,SAASA,SAAT,QAA0B,aAA1B;;AAMA;AACA;AACA;AACA,OAAO,MAAMC,gBAAN,CAAwC;AAO7CC,EAAAA,WAAW,CAACC,SAAD,EAAuBC,IAAvB,EAAwC;AAAA,SANnCC,QAMmC,GANjB,KAMiB;AAAA,SALnCC,OAKmC,GALnB,IAKmB;AAAA,SAJnCF,IAImC;AAAA,SAFnCD,SAEmC;AAAA,SAK3CI,mBAL2C,GAKN,IALM;AAAA,SAkC3CC,KAlC2C,GAkCjB,IAlCiB;AACjD,SAAKL,SAAL,GAAiBA,SAAjB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACD;;AAIiB,MAAPK,OAAO,GAAW;AAC3B,QAAI,KAAKF,mBAAT,EAA8B,OAAO,KAAKA,mBAAZ;AAC9B,UAAMG,kBAAkB,GAAGV,SAAS,CAAC,KAAKG,SAAL,CAAeM,OAAhB,CAApC;AACA,QAAI,CAACC,kBAAL,EAAyB,MAAM,IAAIC,KAAJ,CAAW,0BAAyB,KAAKR,SAAL,CAAeM,OAAQ,EAA3D,CAAN;AACzB,WAAQ,KAAKF,mBAAL,GAA2BG,kBAAnC;AACD;;AAEiB,MAAPE,OAAO,GAAW;AAC3B,WAAO,KAAKT,SAAL,CAAeS,OAAtB;AACD;;AAEkB,MAARC,QAAQ,GAAW;AAC5B,WAAO,KAAKV,SAAL,CAAeU,QAAtB;AACD;;AAEc,MAAJC,IAAI,GAAW;AACxB,WAAO,KAAKX,SAAL,CAAeW,IAAtB;AACD;;AAEgB,MAANC,MAAM,GAAW;AAC1B,WAAO,KAAKZ,SAAL,CAAeY,MAAtB;AACD;;AAEiB,MAAPC,OAAO,GAAuB;AACvC,WAAO,KAAKb,SAAL,CAAea,OAAtB;AACD;;AAGc,MAAJC,IAAI,GAAc;AAC3B,QAAI,KAAKT,KAAL,KAAe,IAAnB,EAAyB,OAAO,KAAKA,KAAZ;AACzB,QAAI,CAAC,KAAKL,SAAL,CAAec,IAApB,EAA0B,OAAQ,KAAKT,KAAL,GAAa,EAArB;AAC1B,UAAMU,QAAQ,GAAG,KAAKd,IAAL,CAAUa,IAA3B;AACA,QAAI,CAACC,QAAL,EAAe,OAAQ,KAAKV,KAAL,GAAa,EAArB;AAEf,WAAQ,KAAKA,KAAL,GAAa,KAAKL,SAAL,CAAec,IAAf,CAAoBE,GAApB,CAAyBC,KAAD,IAAW;AACtD,aAAO,EACL,GAAGF,QAAQ,CAACE,KAAD,CADN;AAELC,QAAAA,EAAE,EAAED;AAFC,OAAP;AAID,KALoB,CAArB;AAMD;;AAEDE,EAAAA,MAAM,CAACC,KAAD,EAA2B;AAC/B,WAAOA,KAAK,CAACX,OAAN,KAAkB,KAAKA,OAAvB,IAAkCW,KAAK,CAACjB,OAAxC,IAAmDiB,KAAK,CAACd,OAAN,CAAce,WAAd,OAAgC,KAAKf,OAAL,CAAae,WAAb,EAA1F;AACD;;AAEDC,EAAAA,WAAW,CAACF,KAAD,EAAwB;AACjC,QAAI,KAAKD,MAAL,CAAYC,KAAZ,CAAJ,EAAwB,MAAM,IAAIZ,KAAJ,CAAU,+BAAV,CAAN;AACxB,WAAO,KAAKF,OAAL,CAAae,WAAb,KAA6BD,KAAK,CAACd,OAAN,CAAce,WAAd,EAApC;AACD;;AAEiB,MAAPE,OAAO,GAAU;AAC1B,WAAO,IAAP;AACD;;AAnE4C","sourcesContent":["import { Currency, Token } from '@uniswap/sdk-core'\nimport { Tags, TokenInfo, TokenList } from '@uniswap/token-lists'\n\nimport { isAddress } from '../../utils'\n\ntype TagDetails = Tags[keyof Tags]\ninterface TagInfo extends TagDetails {\n  id: string\n}\n/**\n * Token instances created from token info on a token list.\n */\nexport class WrappedTokenInfo implements Token {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n  public readonly list: TokenList\n\n  public readonly tokenInfo: TokenInfo\n\n  constructor(tokenInfo: TokenInfo, list: TokenList) {\n    this.tokenInfo = tokenInfo\n    this.list = list\n  }\n\n  private _checksummedAddress: string | null = null\n\n  public get address(): string {\n    if (this._checksummedAddress) return this._checksummedAddress\n    const checksummedAddress = isAddress(this.tokenInfo.address)\n    if (!checksummedAddress) throw new Error(`Invalid token address: ${this.tokenInfo.address}`)\n    return (this._checksummedAddress = checksummedAddress)\n  }\n\n  public get chainId(): number {\n    return this.tokenInfo.chainId\n  }\n\n  public get decimals(): number {\n    return this.tokenInfo.decimals\n  }\n\n  public get name(): string {\n    return this.tokenInfo.name\n  }\n\n  public get symbol(): string {\n    return this.tokenInfo.symbol\n  }\n\n  public get logoURI(): string | undefined {\n    return this.tokenInfo.logoURI\n  }\n\n  private _tags: TagInfo[] | null = null\n  public get tags(): TagInfo[] {\n    if (this._tags !== null) return this._tags\n    if (!this.tokenInfo.tags) return (this._tags = [])\n    const listTags = this.list.tags\n    if (!listTags) return (this._tags = [])\n\n    return (this._tags = this.tokenInfo.tags.map((tagId) => {\n      return {\n        ...listTags[tagId],\n        id: tagId,\n      }\n    }))\n  }\n\n  equals(other: Currency): boolean {\n    return other.chainId === this.chainId && other.isToken && other.address.toLowerCase() === this.address.toLowerCase()\n  }\n\n  sortsBefore(other: Token): boolean {\n    if (this.equals(other)) throw new Error('Addresses should not be equal')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  public get wrapped(): Token {\n    return this\n  }\n}\n"]},"metadata":{},"sourceType":"module"}