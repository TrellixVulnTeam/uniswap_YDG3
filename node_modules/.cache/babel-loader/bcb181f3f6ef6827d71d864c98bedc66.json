{"ast":null,"code":"\"use strict\";\n\nmodule.exports.numbers = numbers;\nmodule.exports.sum = sum;\nmodule.exports.mean = mean;\nmodule.exports.median = median;\nmodule.exports.mode = mode;\nmodule.exports.variance = populationVariance;\nmodule.exports.sampleVariance = sampleVariance;\nmodule.exports.populationVariance = populationVariance;\nmodule.exports.stdev = populationStdev;\nmodule.exports.sampleStdev = sampleStdev;\nmodule.exports.populationStdev = populationStdev;\nmodule.exports.percentile = percentile;\nmodule.exports.histogram = histogram;\n\nvar isNumber = require(\"isnumber\");\n\nfunction numbers(vals) {\n  var nums = [];\n  if (vals == null) return nums;\n\n  for (var i = 0; i < vals.length; i++) {\n    if (isNumber(vals[i])) nums.push(+vals[i]);\n  }\n\n  return nums;\n}\n\nfunction nsort(vals) {\n  return vals.sort(function numericSort(a, b) {\n    return a - b;\n  });\n}\n\nfunction sum(vals) {\n  vals = numbers(vals);\n  var total = 0;\n\n  for (var i = 0; i < vals.length; i++) {\n    total += vals[i];\n  }\n\n  return total;\n}\n\nfunction mean(vals) {\n  vals = numbers(vals);\n  if (vals.length === 0) return NaN;\n  return sum(vals) / vals.length;\n}\n\nfunction median(vals) {\n  vals = numbers(vals);\n  if (vals.length === 0) return NaN;\n  var half = vals.length / 2 | 0;\n  vals = nsort(vals);\n\n  if (vals.length % 2) {\n    // Odd length, true middle element\n    return vals[half];\n  } else {\n    // Even length, average middle two elements\n    return (vals[half - 1] + vals[half]) / 2.0;\n  }\n} // Returns the mode of a unimodal dataset\n// If the dataset is multi-modal, returns a Set containing the modes\n\n\nfunction mode(vals) {\n  vals = numbers(vals);\n  if (vals.length === 0) return NaN;\n  var mode = NaN;\n  var dist = {};\n\n  for (var i = 0; i < vals.length; i++) {\n    var value = vals[i];\n    var me = dist[value] || 0;\n    me++;\n    dist[value] = me;\n  }\n\n  var rank = numbers(Object.keys(dist).sort(function sortMembers(a, b) {\n    return dist[b] - dist[a];\n  }));\n  mode = rank[0];\n\n  if (dist[rank[1]] == dist[mode]) {\n    // multi-modal\n    if (rank.length == vals.length) {\n      // all values are modes\n      return vals;\n    }\n\n    var modes = new Set([mode]);\n    var modeCount = dist[mode];\n\n    for (var i = 1; i < rank.length; i++) {\n      if (dist[rank[i]] == modeCount) {\n        modes.add(rank[i]);\n      } else {\n        break;\n      }\n    }\n\n    return modes;\n  }\n\n  return mode;\n} // This helper finds the mean of all the values, then squares the difference\n// from the mean for each value and returns the resulting array.  This is the\n// core of the varience functions - the difference being dividing by N or N-1.\n\n\nfunction valuesMinusMeanSquared(vals) {\n  vals = numbers(vals);\n  var avg = mean(vals);\n  var diffs = [];\n\n  for (var i = 0; i < vals.length; i++) {\n    diffs.push(Math.pow(vals[i] - avg, 2));\n  }\n\n  return diffs;\n} // Population Variance = average squared deviation from mean\n\n\nfunction populationVariance(vals) {\n  return mean(valuesMinusMeanSquared(vals));\n} // Sample Variance\n\n\nfunction sampleVariance(vals) {\n  var diffs = valuesMinusMeanSquared(vals);\n  if (diffs.length <= 1) return NaN;\n  return sum(diffs) / (diffs.length - 1);\n} // Population Standard Deviation = sqrt of population variance\n\n\nfunction populationStdev(vals) {\n  return Math.sqrt(populationVariance(vals));\n} // Sample Standard Deviation = sqrt of sample variance\n\n\nfunction sampleStdev(vals) {\n  return Math.sqrt(sampleVariance(vals));\n}\n\nfunction percentile(vals, ptile) {\n  vals = numbers(vals);\n  if (vals.length === 0 || ptile == null || ptile < 0) return NaN; // Fudge anything over 100 to 1.0\n\n  if (ptile > 1) ptile = 1;\n  vals = nsort(vals);\n  var i = vals.length * ptile - 0.5;\n  if ((i | 0) === i) return vals[i]; // interpolated percentile -- using Estimation method\n\n  var int_part = i | 0;\n  var fract = i - int_part;\n  return (1 - fract) * vals[int_part] + fract * vals[Math.min(int_part + 1, vals.length - 1)];\n}\n\nfunction histogram(vals, bins) {\n  if (vals == null) {\n    return null;\n  }\n\n  vals = nsort(numbers(vals));\n\n  if (vals.length === 0) {\n    return null;\n  }\n\n  if (bins == null) {\n    // pick bins by simple method: Math.sqrt(n)\n    bins = Math.sqrt(vals.length);\n  }\n\n  bins = Math.round(bins);\n\n  if (bins < 1) {\n    bins = 1;\n  }\n\n  var min = vals[0];\n  var max = vals[vals.length - 1];\n\n  if (min === max) {\n    // fudge for non-variant data\n    min = min - 0.5;\n    max = max + 0.5;\n  }\n\n  var range = max - min; // make the bins slightly larger by expanding the range about 10%\n  // this helps with dumb floating point stuff\n\n  var binWidth = (range + range * 0.05) / bins;\n  var midpoint = (min + max) / 2; // even bin count, midpoint makes an edge\n\n  var leftEdge = midpoint - binWidth * Math.floor(bins / 2);\n\n  if (bins % 2 !== 0) {\n    // odd bin count, center middle bin on midpoint\n    var leftEdge = midpoint - binWidth / 2 - binWidth * Math.floor(bins / 2);\n  }\n\n  var hist = {\n    values: Array(bins).fill(0),\n    bins: bins,\n    binWidth: binWidth,\n    binLimits: [leftEdge, leftEdge + binWidth * bins]\n  };\n  var binIndex = 0;\n\n  for (var i = 0; i < vals.length; i++) {\n    while (vals[i] > (binIndex + 1) * binWidth + leftEdge) {\n      binIndex++;\n    }\n\n    hist.values[binIndex]++;\n  }\n\n  return hist;\n}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/node_modules/stats-lite/stats.js"],"names":["module","exports","numbers","sum","mean","median","mode","variance","populationVariance","sampleVariance","stdev","populationStdev","sampleStdev","percentile","histogram","isNumber","require","vals","nums","i","length","push","nsort","sort","numericSort","a","b","total","NaN","half","dist","value","me","rank","Object","keys","sortMembers","modes","Set","modeCount","add","valuesMinusMeanSquared","avg","diffs","Math","pow","sqrt","ptile","int_part","fract","min","bins","round","max","range","binWidth","midpoint","leftEdge","floor","hist","values","Array","fill","binLimits","binIndex"],"mappings":"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","sourcesContent":["\"use strict\";\n\nmodule.exports.numbers = numbers\nmodule.exports.sum = sum\nmodule.exports.mean = mean\nmodule.exports.median = median\nmodule.exports.mode = mode\nmodule.exports.variance = populationVariance\nmodule.exports.sampleVariance = sampleVariance\nmodule.exports.populationVariance = populationVariance\nmodule.exports.stdev = populationStdev\nmodule.exports.sampleStdev = sampleStdev\nmodule.exports.populationStdev = populationStdev\nmodule.exports.percentile = percentile\nmodule.exports.histogram = histogram\n\nvar isNumber = require(\"isnumber\")\n\nfunction numbers(vals) {\n  var nums = []\n  if (vals == null)\n    return nums\n\n  for (var i = 0; i < vals.length; i++) {\n    if (isNumber(vals[i]))\n      nums.push(+vals[i])\n  }\n  return nums\n}\n\nfunction nsort(vals) {\n  return vals.sort(function numericSort(a, b) { return a - b })\n}\n\nfunction sum(vals) {\n  vals = numbers(vals)\n  var total = 0\n  for (var i = 0; i < vals.length; i++) {\n    total += vals[i]\n  }\n  return total\n}\n\nfunction mean(vals) {\n  vals = numbers(vals)\n  if (vals.length === 0) return NaN\n  return (sum(vals) / vals.length)\n}\n\nfunction median(vals) {\n  vals = numbers(vals)\n  if (vals.length === 0) return NaN\n\n  var half = (vals.length / 2) | 0\n\n  vals = nsort(vals)\n  if (vals.length % 2) {\n    // Odd length, true middle element\n    return vals[half]\n  }\n  else {\n    // Even length, average middle two elements\n    return (vals[half-1] + vals[half]) / 2.0\n  }\n}\n\n// Returns the mode of a unimodal dataset\n// If the dataset is multi-modal, returns a Set containing the modes\nfunction mode(vals) {\n  vals = numbers(vals)\n  if (vals.length === 0) return NaN\n  var mode = NaN\n  var dist = {}\n\n  for (var i = 0; i < vals.length; i++) {\n    var value = vals[i]\n    var me = dist[value] || 0\n    me++\n    dist[value] = me\n  }\n\n  var rank = numbers(Object.keys(dist).sort(function sortMembers(a, b) { return dist[b] - dist[a] }))\n  mode = rank[0]\n  if (dist[rank[1]] == dist[mode]) {\n    // multi-modal\n    if (rank.length == vals.length) {\n      // all values are modes\n      return vals\n    }\n    var modes = new Set([mode])\n    var modeCount = dist[mode]\n    for (var i = 1; i < rank.length; i++) {\n      if (dist[rank[i]] == modeCount) {\n        modes.add(rank[i])\n      }\n      else {\n        break\n      }\n    }\n    return modes\n  }\n  return mode\n}\n\n// This helper finds the mean of all the values, then squares the difference\n// from the mean for each value and returns the resulting array.  This is the\n// core of the varience functions - the difference being dividing by N or N-1.\nfunction valuesMinusMeanSquared(vals) {\n  vals = numbers(vals)\n  var avg = mean(vals)\n  var diffs = []\n  for (var i = 0; i < vals.length; i++) {\n    diffs.push(Math.pow((vals[i] - avg), 2))\n  }\n  return diffs\n}\n\n// Population Variance = average squared deviation from mean\nfunction populationVariance(vals) {\n  return mean(valuesMinusMeanSquared(vals))\n}\n\n// Sample Variance\nfunction sampleVariance(vals) {\n  var diffs = valuesMinusMeanSquared(vals)\n  if (diffs.length <= 1) return NaN\n\n  return sum(diffs) / (diffs.length - 1)\n}\n\n\n// Population Standard Deviation = sqrt of population variance\nfunction populationStdev(vals) {\n  return Math.sqrt(populationVariance(vals))\n}\n\n// Sample Standard Deviation = sqrt of sample variance\nfunction sampleStdev(vals) {\n  return Math.sqrt(sampleVariance(vals))\n}\n\nfunction percentile(vals, ptile) {\n  vals = numbers(vals)\n  if (vals.length === 0 || ptile == null || ptile < 0) return NaN\n\n  // Fudge anything over 100 to 1.0\n  if (ptile > 1) ptile = 1\n  vals = nsort(vals)\n  var i = (vals.length * ptile) - 0.5\n  if ((i | 0) === i) return vals[i]\n  // interpolated percentile -- using Estimation method\n  var int_part = i | 0\n  var fract = i - int_part\n  return (1 - fract) * vals[int_part] + fract * vals[Math.min(int_part + 1, vals.length - 1)]\n}\n\nfunction histogram (vals, bins) {\n  if (vals == null) {\n    return null\n  }\n  vals = nsort(numbers(vals))\n  if (vals.length === 0) {\n    return null\n  }\n  if (bins == null) {\n    // pick bins by simple method: Math.sqrt(n)\n    bins = Math.sqrt(vals.length)\n  }\n  bins = Math.round(bins)\n  if (bins < 1) {\n    bins = 1\n  }\n\n  var min = vals[0]\n  var max = vals[vals.length - 1]\n  if (min === max) {\n    // fudge for non-variant data\n    min = min - 0.5\n    max = max + 0.5\n  }\n\n  var range = (max - min)\n  // make the bins slightly larger by expanding the range about 10%\n  // this helps with dumb floating point stuff\n  var binWidth = (range + (range * 0.05)) / bins\n  var midpoint = (min + max) / 2\n  // even bin count, midpoint makes an edge\n  var leftEdge = midpoint - (binWidth * Math.floor(bins / 2))\n  if (bins % 2 !== 0) {\n    // odd bin count, center middle bin on midpoint\n    var leftEdge = (midpoint - (binWidth / 2)) - (binWidth * Math.floor(bins / 2))\n  }\n\n  var hist = {\n    values: Array(bins).fill(0),\n    bins: bins,\n    binWidth: binWidth,\n    binLimits: [leftEdge, leftEdge + (binWidth * bins)]\n  }\n\n  var binIndex = 0\n  for (var i = 0; i < vals.length; i++) {\n    while (vals[i] > (((binIndex + 1) * binWidth) + leftEdge)) {\n      binIndex++\n    }\n    hist.values[binIndex]++\n  }\n\n  return hist\n}\n"]},"metadata":{},"sourceType":"script"}