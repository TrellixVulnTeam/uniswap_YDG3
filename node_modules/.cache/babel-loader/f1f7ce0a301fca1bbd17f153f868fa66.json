{"ast":null,"code":"import { IMetric, setGlobalMetric } from '@uniswap/smart-order-router';\nimport { INFURA_NETWORK_URLS } from 'constants/chains';\nimport { providers } from 'ethers/lib/ethers';\nimport ReactGA from 'react-ga';\nimport { AUTO_ROUTER_SUPPORTED_CHAINS } from './constants';\n\n/** Minimal set of dependencies for the router to work locally. */\nexport function buildDependencies() {\n  const dependenciesByChain = {};\n\n  for (const chainId of AUTO_ROUTER_SUPPORTED_CHAINS) {\n    const provider = new providers.JsonRpcProvider(INFURA_NETWORK_URLS[chainId]);\n    dependenciesByChain[chainId] = {\n      chainId,\n      provider\n    };\n  }\n\n  return dependenciesByChain;\n}\n\nclass GAMetric extends IMetric {\n  putDimensions() {\n    return;\n  }\n\n  putMetric(key, value, unit) {\n    ReactGA.timing({\n      category: 'Routing API',\n      variable: `${key} | ${unit}`,\n      value,\n      label: 'client'\n    });\n  }\n\n}\n\nsetGlobalMetric(new GAMetric());","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/state/routing/clientSideSmartOrderRouter/dependencies.ts"],"names":["IMetric","setGlobalMetric","INFURA_NETWORK_URLS","providers","ReactGA","AUTO_ROUTER_SUPPORTED_CHAINS","buildDependencies","dependenciesByChain","chainId","provider","JsonRpcProvider","GAMetric","putDimensions","putMetric","key","value","unit","timing","category","variable","label"],"mappings":"AAAA,SAA4BA,OAA5B,EAAuDC,eAAvD,QAA8E,6BAA9E;AACA,SAASC,mBAAT,QAAsD,kBAAtD;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,OAAOC,OAAP,MAAoB,UAApB;AAEA,SAASC,4BAAT,QAA6C,aAA7C;;AAMA;AACA,OAAO,SAASC,iBAAT,GAA2C;AAChD,QAAMC,mBAAiC,GAAG,EAA1C;;AACA,OAAK,MAAMC,OAAX,IAAsBH,4BAAtB,EAAoD;AAClD,UAAMI,QAAQ,GAAG,IAAIN,SAAS,CAACO,eAAd,CAA8BR,mBAAmB,CAACM,OAAD,CAAjD,CAAjB;AAEAD,IAAAA,mBAAmB,CAACC,OAAD,CAAnB,GAA+B;AAC7BA,MAAAA,OAD6B;AAE7BC,MAAAA;AAF6B,KAA/B;AAID;;AAED,SAAOF,mBAAP;AACD;;AAED,MAAMI,QAAN,SAAuBX,OAAvB,CAA+B;AAC7BY,EAAAA,aAAa,GAAG;AACd;AACD;;AAEDC,EAAAA,SAAS,CAACC,GAAD,EAAcC,KAAd,EAA6BC,IAA7B,EAAsD;AAC7DZ,IAAAA,OAAO,CAACa,MAAR,CAAe;AACbC,MAAAA,QAAQ,EAAE,aADG;AAEbC,MAAAA,QAAQ,EAAG,GAAEL,GAAI,MAAKE,IAAK,EAFd;AAGbD,MAAAA,KAHa;AAIbK,MAAAA,KAAK,EAAE;AAJM,KAAf;AAMD;;AAZ4B;;AAe/BnB,eAAe,CAAC,IAAIU,QAAJ,EAAD,CAAf","sourcesContent":["import { AlphaRouterParams, IMetric, MetricLoggerUnit, setGlobalMetric } from '@uniswap/smart-order-router'\nimport { INFURA_NETWORK_URLS, SupportedChainId } from 'constants/chains'\nimport { providers } from 'ethers/lib/ethers'\nimport ReactGA from 'react-ga'\n\nimport { AUTO_ROUTER_SUPPORTED_CHAINS } from './constants'\n\nexport type Dependencies = {\n  [chainId in SupportedChainId]?: AlphaRouterParams\n}\n\n/** Minimal set of dependencies for the router to work locally. */\nexport function buildDependencies(): Dependencies {\n  const dependenciesByChain: Dependencies = {}\n  for (const chainId of AUTO_ROUTER_SUPPORTED_CHAINS) {\n    const provider = new providers.JsonRpcProvider(INFURA_NETWORK_URLS[chainId])\n\n    dependenciesByChain[chainId] = {\n      chainId,\n      provider,\n    }\n  }\n\n  return dependenciesByChain\n}\n\nclass GAMetric extends IMetric {\n  putDimensions() {\n    return\n  }\n\n  putMetric(key: string, value: number, unit?: MetricLoggerUnit) {\n    ReactGA.timing({\n      category: 'Routing API',\n      variable: `${key} | ${unit}`,\n      value,\n      label: 'client',\n    })\n  }\n}\n\nsetGlobalMetric(new GAMetric())\n"]},"metadata":{},"sourceType":"module"}