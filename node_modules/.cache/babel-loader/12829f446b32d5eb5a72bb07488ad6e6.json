{"ast":null,"code":"/**\n * Mnemonist FixedStack\n * =====================\n *\n * The fixed stack is a stack whose capacity is defined beforehand and that\n * cannot be exceeded. This class is really useful when combined with\n * byte arrays to save up some memory and avoid memory re-allocation, hence\n * speeding up computations.\n *\n * This has however a downside: you need to know the maximum size you stack\n * can have during your iteration (which is not too difficult to compute when\n * performing, say, a DFS on a balanced binary tree).\n */\nvar Iterator = require('obliterator/iterator'),\n    iterables = require('./utils/iterables.js');\n/**\n * FixedStack\n *\n * @constructor\n * @param {function} ArrayClass - Array class to use.\n * @param {number}   capacity   - Desired capacity.\n */\n\n\nfunction FixedStack(ArrayClass, capacity) {\n  if (arguments.length < 2) throw new Error('mnemonist/fixed-stack: expecting an Array class and a capacity.');\n  if (typeof capacity !== 'number' || capacity <= 0) throw new Error('mnemonist/fixed-stack: `capacity` should be a positive number.');\n  this.capacity = capacity;\n  this.ArrayClass = ArrayClass;\n  this.items = new this.ArrayClass(this.capacity);\n  this.clear();\n}\n/**\n * Method used to clear the stack.\n *\n * @return {undefined}\n */\n\n\nFixedStack.prototype.clear = function () {\n  // Properties\n  this.size = 0;\n};\n/**\n * Method used to add an item to the stack.\n *\n * @param  {any}    item - Item to add.\n * @return {number}\n */\n\n\nFixedStack.prototype.push = function (item) {\n  if (this.size === this.capacity) throw new Error('mnemonist/fixed-stack.push: stack capacity (' + this.capacity + ') exceeded!');\n  this.items[this.size++] = item;\n  return this.size;\n};\n/**\n * Method used to retrieve & remove the last item of the stack.\n *\n * @return {any}\n */\n\n\nFixedStack.prototype.pop = function () {\n  if (this.size === 0) return;\n  return this.items[--this.size];\n};\n/**\n * Method used to get the last item of the stack.\n *\n * @return {any}\n */\n\n\nFixedStack.prototype.peek = function () {\n  return this.items[this.size - 1];\n};\n/**\n * Method used to iterate over the stack.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\n\n\nFixedStack.prototype.forEach = function (callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  for (var i = 0, l = this.items.length; i < l; i++) callback.call(scope, this.items[l - i - 1], i, this);\n};\n/**\n * Method used to convert the stack to a JavaScript array.\n *\n * @return {array}\n */\n\n\nFixedStack.prototype.toArray = function () {\n  var array = new this.ArrayClass(this.size),\n      l = this.size - 1,\n      i = this.size;\n\n  while (i--) array[i] = this.items[l - i];\n\n  return array;\n};\n/**\n * Method used to create an iterator over a stack's values.\n *\n * @return {Iterator}\n */\n\n\nFixedStack.prototype.values = function () {\n  var items = this.items,\n      l = this.size,\n      i = 0;\n  return new Iterator(function () {\n    if (i >= l) return {\n      done: true\n    };\n    var value = items[l - i - 1];\n    i++;\n    return {\n      value: value,\n      done: false\n    };\n  });\n};\n/**\n * Method used to create an iterator over a stack's entries.\n *\n * @return {Iterator}\n */\n\n\nFixedStack.prototype.entries = function () {\n  var items = this.items,\n      l = this.size,\n      i = 0;\n  return new Iterator(function () {\n    if (i >= l) return {\n      done: true\n    };\n    var value = items[l - i - 1];\n    return {\n      value: [i++, value],\n      done: false\n    };\n  });\n};\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\n\n\nif (typeof Symbol !== 'undefined') FixedStack.prototype[Symbol.iterator] = FixedStack.prototype.values;\n/**\n * Convenience known methods.\n */\n\nFixedStack.prototype.toString = function () {\n  return this.toArray().join(',');\n};\n\nFixedStack.prototype.toJSON = function () {\n  return this.toArray();\n};\n\nFixedStack.prototype.inspect = function () {\n  var array = this.toArray();\n  array.type = this.ArrayClass.name;\n  array.capacity = this.capacity; // Trick so that node displays the name of the constructor\n\n  Object.defineProperty(array, 'constructor', {\n    value: FixedStack,\n    enumerable: false\n  });\n  return array;\n};\n\nif (typeof Symbol !== 'undefined') FixedStack.prototype[Symbol.for('nodejs.util.inspect.custom')] = FixedStack.prototype.inspect;\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a stack.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @param  {function} ArrayClass - Array class to use.\n * @param  {number}   capacity   - Desired capacity.\n * @return {FixedStack}\n */\n\nFixedStack.from = function (iterable, ArrayClass, capacity) {\n  if (arguments.length < 3) {\n    capacity = iterables.guessLength(iterable);\n    if (typeof capacity !== 'number') throw new Error('mnemonist/fixed-stack.from: could not guess iterable length. Please provide desired capacity as last argument.');\n  }\n\n  var stack = new FixedStack(ArrayClass, capacity);\n\n  if (iterables.isArrayLike(iterable)) {\n    var i, l;\n\n    for (i = 0, l = iterable.length; i < l; i++) stack.items[i] = iterable[i];\n\n    stack.size = l;\n    return stack;\n  }\n\n  iterables.forEach(iterable, function (value) {\n    stack.push(value);\n  });\n  return stack;\n};\n/**\n * Exporting.\n */\n\n\nmodule.exports = FixedStack;","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/node_modules/mnemonist/fixed-stack.js"],"names":["Iterator","require","iterables","FixedStack","ArrayClass","capacity","arguments","length","Error","items","clear","prototype","size","push","item","pop","peek","forEach","callback","scope","i","l","call","toArray","array","values","done","value","entries","Symbol","iterator","toString","join","toJSON","inspect","type","name","Object","defineProperty","enumerable","for","from","iterable","guessLength","stack","isArrayLike","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,sBAAD,CAAtB;AAAA,IACIC,SAAS,GAAGD,OAAO,CAAC,sBAAD,CADvB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,UAAT,CAAoBC,UAApB,EAAgCC,QAAhC,EAA0C;AAExC,MAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EACE,MAAM,IAAIC,KAAJ,CAAU,iEAAV,CAAN;AAEF,MAAI,OAAOH,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,IAAI,CAAhD,EACE,MAAM,IAAIG,KAAJ,CAAU,gEAAV,CAAN;AAEF,OAAKH,QAAL,GAAgBA,QAAhB;AACA,OAAKD,UAAL,GAAkBA,UAAlB;AACA,OAAKK,KAAL,GAAa,IAAI,KAAKL,UAAT,CAAoB,KAAKC,QAAzB,CAAb;AACA,OAAKK,KAAL;AACD;AAED;AACA;AACA;AACA;AACA;;;AACAP,UAAU,CAACQ,SAAX,CAAqBD,KAArB,GAA6B,YAAW;AAEtC;AACA,OAAKE,IAAL,GAAY,CAAZ;AACD,CAJD;AAMA;AACA;AACA;AACA;AACA;AACA;;;AACAT,UAAU,CAACQ,SAAX,CAAqBE,IAArB,GAA4B,UAASC,IAAT,EAAe;AACzC,MAAI,KAAKF,IAAL,KAAc,KAAKP,QAAvB,EACE,MAAM,IAAIG,KAAJ,CAAU,iDAAiD,KAAKH,QAAtD,GAAiE,aAA3E,CAAN;AAEF,OAAKI,KAAL,CAAW,KAAKG,IAAL,EAAX,IAA0BE,IAA1B;AACA,SAAO,KAAKF,IAAZ;AACD,CAND;AAQA;AACA;AACA;AACA;AACA;;;AACAT,UAAU,CAACQ,SAAX,CAAqBI,GAArB,GAA2B,YAAW;AACpC,MAAI,KAAKH,IAAL,KAAc,CAAlB,EACE;AAEF,SAAO,KAAKH,KAAL,CAAW,EAAE,KAAKG,IAAlB,CAAP;AACD,CALD;AAOA;AACA;AACA;AACA;AACA;;;AACAT,UAAU,CAACQ,SAAX,CAAqBK,IAArB,GAA4B,YAAW;AACrC,SAAO,KAAKP,KAAL,CAAW,KAAKG,IAAL,GAAY,CAAvB,CAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAT,UAAU,CAACQ,SAAX,CAAqBM,OAArB,GAA+B,UAASC,QAAT,EAAmBC,KAAnB,EAA0B;AACvDA,EAAAA,KAAK,GAAGb,SAAS,CAACC,MAAV,GAAmB,CAAnB,GAAuBY,KAAvB,GAA+B,IAAvC;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG,KAAKZ,KAAL,CAAWF,MAA/B,EAAuCa,CAAC,GAAGC,CAA3C,EAA8CD,CAAC,EAA/C,EACEF,QAAQ,CAACI,IAAT,CAAcH,KAAd,EAAqB,KAAKV,KAAL,CAAWY,CAAC,GAAGD,CAAJ,GAAQ,CAAnB,CAArB,EAA4CA,CAA5C,EAA+C,IAA/C;AACH,CALD;AAOA;AACA;AACA;AACA;AACA;;;AACAjB,UAAU,CAACQ,SAAX,CAAqBY,OAArB,GAA+B,YAAW;AACxC,MAAIC,KAAK,GAAG,IAAI,KAAKpB,UAAT,CAAoB,KAAKQ,IAAzB,CAAZ;AAAA,MACIS,CAAC,GAAG,KAAKT,IAAL,GAAY,CADpB;AAAA,MAEIQ,CAAC,GAAG,KAAKR,IAFb;;AAIA,SAAOQ,CAAC,EAAR,EACEI,KAAK,CAACJ,CAAD,CAAL,GAAW,KAAKX,KAAL,CAAWY,CAAC,GAAGD,CAAf,CAAX;;AAEF,SAAOI,KAAP;AACD,CATD;AAWA;AACA;AACA;AACA;AACA;;;AACArB,UAAU,CAACQ,SAAX,CAAqBc,MAArB,GAA8B,YAAW;AACvC,MAAIhB,KAAK,GAAG,KAAKA,KAAjB;AAAA,MACIY,CAAC,GAAG,KAAKT,IADb;AAAA,MAEIQ,CAAC,GAAG,CAFR;AAIA,SAAO,IAAIpB,QAAJ,CAAa,YAAW;AAC7B,QAAIoB,CAAC,IAAIC,CAAT,EACE,OAAO;AACLK,MAAAA,IAAI,EAAE;AADD,KAAP;AAIF,QAAIC,KAAK,GAAGlB,KAAK,CAACY,CAAC,GAAGD,CAAJ,GAAQ,CAAT,CAAjB;AACAA,IAAAA,CAAC;AAED,WAAO;AACLO,MAAAA,KAAK,EAAEA,KADF;AAELD,MAAAA,IAAI,EAAE;AAFD,KAAP;AAID,GAbM,CAAP;AAcD,CAnBD;AAqBA;AACA;AACA;AACA;AACA;;;AACAvB,UAAU,CAACQ,SAAX,CAAqBiB,OAArB,GAA+B,YAAW;AACxC,MAAInB,KAAK,GAAG,KAAKA,KAAjB;AAAA,MACIY,CAAC,GAAG,KAAKT,IADb;AAAA,MAEIQ,CAAC,GAAG,CAFR;AAIA,SAAO,IAAIpB,QAAJ,CAAa,YAAW;AAC7B,QAAIoB,CAAC,IAAIC,CAAT,EACE,OAAO;AACLK,MAAAA,IAAI,EAAE;AADD,KAAP;AAIF,QAAIC,KAAK,GAAGlB,KAAK,CAACY,CAAC,GAAGD,CAAJ,GAAQ,CAAT,CAAjB;AAEA,WAAO;AACLO,MAAAA,KAAK,EAAE,CAACP,CAAC,EAAF,EAAMO,KAAN,CADF;AAELD,MAAAA,IAAI,EAAE;AAFD,KAAP;AAID,GAZM,CAAP;AAaD,CAlBD;AAoBA;AACA;AACA;;;AACA,IAAI,OAAOG,MAAP,KAAkB,WAAtB,EACE1B,UAAU,CAACQ,SAAX,CAAqBkB,MAAM,CAACC,QAA5B,IAAwC3B,UAAU,CAACQ,SAAX,CAAqBc,MAA7D;AAGF;AACA;AACA;;AACAtB,UAAU,CAACQ,SAAX,CAAqBoB,QAArB,GAAgC,YAAW;AACzC,SAAO,KAAKR,OAAL,GAAeS,IAAf,CAAoB,GAApB,CAAP;AACD,CAFD;;AAIA7B,UAAU,CAACQ,SAAX,CAAqBsB,MAArB,GAA8B,YAAW;AACvC,SAAO,KAAKV,OAAL,EAAP;AACD,CAFD;;AAIApB,UAAU,CAACQ,SAAX,CAAqBuB,OAArB,GAA+B,YAAW;AACxC,MAAIV,KAAK,GAAG,KAAKD,OAAL,EAAZ;AAEAC,EAAAA,KAAK,CAACW,IAAN,GAAa,KAAK/B,UAAL,CAAgBgC,IAA7B;AACAZ,EAAAA,KAAK,CAACnB,QAAN,GAAiB,KAAKA,QAAtB,CAJwC,CAMxC;;AACAgC,EAAAA,MAAM,CAACC,cAAP,CAAsBd,KAAtB,EAA6B,aAA7B,EAA4C;AAC1CG,IAAAA,KAAK,EAAExB,UADmC;AAE1CoC,IAAAA,UAAU,EAAE;AAF8B,GAA5C;AAKA,SAAOf,KAAP;AACD,CAbD;;AAeA,IAAI,OAAOK,MAAP,KAAkB,WAAtB,EACE1B,UAAU,CAACQ,SAAX,CAAqBkB,MAAM,CAACW,GAAP,CAAW,4BAAX,CAArB,IAAiErC,UAAU,CAACQ,SAAX,CAAqBuB,OAAtF;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA/B,UAAU,CAACsC,IAAX,GAAkB,UAASC,QAAT,EAAmBtC,UAAnB,EAA+BC,QAA/B,EAAyC;AAEzD,MAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACxBF,IAAAA,QAAQ,GAAGH,SAAS,CAACyC,WAAV,CAAsBD,QAAtB,CAAX;AAEA,QAAI,OAAOrC,QAAP,KAAoB,QAAxB,EACE,MAAM,IAAIG,KAAJ,CAAU,gHAAV,CAAN;AACH;;AAED,MAAIoC,KAAK,GAAG,IAAIzC,UAAJ,CAAeC,UAAf,EAA2BC,QAA3B,CAAZ;;AAEA,MAAIH,SAAS,CAAC2C,WAAV,CAAsBH,QAAtB,CAAJ,EAAqC;AACnC,QAAItB,CAAJ,EAAOC,CAAP;;AAEA,SAAKD,CAAC,GAAG,CAAJ,EAAOC,CAAC,GAAGqB,QAAQ,CAACnC,MAAzB,EAAiCa,CAAC,GAAGC,CAArC,EAAwCD,CAAC,EAAzC,EACEwB,KAAK,CAACnC,KAAN,CAAYW,CAAZ,IAAiBsB,QAAQ,CAACtB,CAAD,CAAzB;;AAEFwB,IAAAA,KAAK,CAAChC,IAAN,GAAaS,CAAb;AAEA,WAAOuB,KAAP;AACD;;AAED1C,EAAAA,SAAS,CAACe,OAAV,CAAkByB,QAAlB,EAA4B,UAASf,KAAT,EAAgB;AAC1CiB,IAAAA,KAAK,CAAC/B,IAAN,CAAWc,KAAX;AACD,GAFD;AAIA,SAAOiB,KAAP;AACD,CA3BD;AA6BA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB5C,UAAjB","sourcesContent":["/**\n * Mnemonist FixedStack\n * =====================\n *\n * The fixed stack is a stack whose capacity is defined beforehand and that\n * cannot be exceeded. This class is really useful when combined with\n * byte arrays to save up some memory and avoid memory re-allocation, hence\n * speeding up computations.\n *\n * This has however a downside: you need to know the maximum size you stack\n * can have during your iteration (which is not too difficult to compute when\n * performing, say, a DFS on a balanced binary tree).\n */\nvar Iterator = require('obliterator/iterator'),\n    iterables = require('./utils/iterables.js');\n\n/**\n * FixedStack\n *\n * @constructor\n * @param {function} ArrayClass - Array class to use.\n * @param {number}   capacity   - Desired capacity.\n */\nfunction FixedStack(ArrayClass, capacity) {\n\n  if (arguments.length < 2)\n    throw new Error('mnemonist/fixed-stack: expecting an Array class and a capacity.');\n\n  if (typeof capacity !== 'number' || capacity <= 0)\n    throw new Error('mnemonist/fixed-stack: `capacity` should be a positive number.');\n\n  this.capacity = capacity;\n  this.ArrayClass = ArrayClass;\n  this.items = new this.ArrayClass(this.capacity);\n  this.clear();\n}\n\n/**\n * Method used to clear the stack.\n *\n * @return {undefined}\n */\nFixedStack.prototype.clear = function() {\n\n  // Properties\n  this.size = 0;\n};\n\n/**\n * Method used to add an item to the stack.\n *\n * @param  {any}    item - Item to add.\n * @return {number}\n */\nFixedStack.prototype.push = function(item) {\n  if (this.size === this.capacity)\n    throw new Error('mnemonist/fixed-stack.push: stack capacity (' + this.capacity + ') exceeded!');\n\n  this.items[this.size++] = item;\n  return this.size;\n};\n\n/**\n * Method used to retrieve & remove the last item of the stack.\n *\n * @return {any}\n */\nFixedStack.prototype.pop = function() {\n  if (this.size === 0)\n    return;\n\n  return this.items[--this.size];\n};\n\n/**\n * Method used to get the last item of the stack.\n *\n * @return {any}\n */\nFixedStack.prototype.peek = function() {\n  return this.items[this.size - 1];\n};\n\n/**\n * Method used to iterate over the stack.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nFixedStack.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  for (var i = 0, l = this.items.length; i < l; i++)\n    callback.call(scope, this.items[l - i - 1], i, this);\n};\n\n/**\n * Method used to convert the stack to a JavaScript array.\n *\n * @return {array}\n */\nFixedStack.prototype.toArray = function() {\n  var array = new this.ArrayClass(this.size),\n      l = this.size - 1,\n      i = this.size;\n\n  while (i--)\n    array[i] = this.items[l - i];\n\n  return array;\n};\n\n/**\n * Method used to create an iterator over a stack's values.\n *\n * @return {Iterator}\n */\nFixedStack.prototype.values = function() {\n  var items = this.items,\n      l = this.size,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {\n        done: true\n      };\n\n    var value = items[l - i - 1];\n    i++;\n\n    return {\n      value: value,\n      done: false\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over a stack's entries.\n *\n * @return {Iterator}\n */\nFixedStack.prototype.entries = function() {\n  var items = this.items,\n      l = this.size,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {\n        done: true\n      };\n\n    var value = items[l - i - 1];\n\n    return {\n      value: [i++, value],\n      done: false\n    };\n  });\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  FixedStack.prototype[Symbol.iterator] = FixedStack.prototype.values;\n\n\n/**\n * Convenience known methods.\n */\nFixedStack.prototype.toString = function() {\n  return this.toArray().join(',');\n};\n\nFixedStack.prototype.toJSON = function() {\n  return this.toArray();\n};\n\nFixedStack.prototype.inspect = function() {\n  var array = this.toArray();\n\n  array.type = this.ArrayClass.name;\n  array.capacity = this.capacity;\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: FixedStack,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  FixedStack.prototype[Symbol.for('nodejs.util.inspect.custom')] = FixedStack.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a stack.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @param  {function} ArrayClass - Array class to use.\n * @param  {number}   capacity   - Desired capacity.\n * @return {FixedStack}\n */\nFixedStack.from = function(iterable, ArrayClass, capacity) {\n\n  if (arguments.length < 3) {\n    capacity = iterables.guessLength(iterable);\n\n    if (typeof capacity !== 'number')\n      throw new Error('mnemonist/fixed-stack.from: could not guess iterable length. Please provide desired capacity as last argument.');\n  }\n\n  var stack = new FixedStack(ArrayClass, capacity);\n\n  if (iterables.isArrayLike(iterable)) {\n    var i, l;\n\n    for (i = 0, l = iterable.length; i < l; i++)\n      stack.items[i] = iterable[i];\n\n    stack.size = l;\n\n    return stack;\n  }\n\n  iterables.forEach(iterable, function(value) {\n    stack.push(value);\n  });\n\n  return stack;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = FixedStack;\n"]},"metadata":{},"sourceType":"script"}