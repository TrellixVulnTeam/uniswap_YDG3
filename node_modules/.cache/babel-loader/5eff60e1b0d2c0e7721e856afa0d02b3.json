{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport { setupListeners } from '@reduxjs/toolkit/query/react';\nimport { load, save } from 'redux-localstorage-simple';\nimport application from './application/reducer';\nimport burn from './burn/reducer';\nimport burnV3 from './burn/v3/reducer';\nimport { api as dataApi } from './data/slice';\nimport { updateVersion } from './global/actions';\nimport lists from './lists/reducer';\nimport logs from './logs/slice';\nimport mint from './mint/reducer';\nimport mintV3 from './mint/v3/reducer';\nimport { multicall } from './multicall/instance';\nimport { routingApi } from './routing/slice';\nimport swap from './swap/reducer';\nimport transactions from './transactions/reducer';\nimport user from './user/reducer';\nconst PERSISTED_KEYS = ['user', 'transactions', 'lists'];\nconst store = configureStore({\n  reducer: {\n    application,\n    user,\n    transactions,\n    swap,\n    mint,\n    mintV3,\n    burn,\n    burnV3,\n    multicall: multicall.reducer,\n    lists,\n    logs,\n    [dataApi.reducerPath]: dataApi.reducer,\n    [routingApi.reducerPath]: routingApi.reducer\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    thunk: true\n  }).concat(dataApi.middleware).concat(routingApi.middleware).concat(save({\n    states: PERSISTED_KEYS,\n    debounce: 1000\n  })),\n  preloadedState: load({\n    states: PERSISTED_KEYS,\n    disableWarnings: process.env.NODE_ENV === 'test'\n  })\n});\nstore.dispatch(updateVersion());\nsetupListeners(store.dispatch);\nexport default store;","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/state/index.ts"],"names":["configureStore","setupListeners","load","save","application","burn","burnV3","api","dataApi","updateVersion","lists","logs","mint","mintV3","multicall","routingApi","swap","transactions","user","PERSISTED_KEYS","store","reducer","reducerPath","middleware","getDefaultMiddleware","thunk","concat","states","debounce","preloadedState","disableWarnings","process","env","NODE_ENV","dispatch"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,SAASC,cAAT,QAA+B,8BAA/B;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,2BAA3B;AAEA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,GAAG,IAAIC,OAAhB,QAA+B,cAA/B;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,SAAT,QAA0B,sBAA1B;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,IAAP,MAAiB,gBAAjB;AAEA,MAAMC,cAAwB,GAAG,CAAC,MAAD,EAAS,cAAT,EAAyB,OAAzB,CAAjC;AAEA,MAAMC,KAAK,GAAGpB,cAAc,CAAC;AAC3BqB,EAAAA,OAAO,EAAE;AACPjB,IAAAA,WADO;AAEPc,IAAAA,IAFO;AAGPD,IAAAA,YAHO;AAIPD,IAAAA,IAJO;AAKPJ,IAAAA,IALO;AAMPC,IAAAA,MANO;AAOPR,IAAAA,IAPO;AAQPC,IAAAA,MARO;AASPQ,IAAAA,SAAS,EAAEA,SAAS,CAACO,OATd;AAUPX,IAAAA,KAVO;AAWPC,IAAAA,IAXO;AAYP,KAACH,OAAO,CAACc,WAAT,GAAuBd,OAAO,CAACa,OAZxB;AAaP,KAACN,UAAU,CAACO,WAAZ,GAA0BP,UAAU,CAACM;AAb9B,GADkB;AAgB3BE,EAAAA,UAAU,EAAGC,oBAAD,IACVA,oBAAoB,CAAC;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAAD,CAApB,CACGC,MADH,CACUlB,OAAO,CAACe,UADlB,EAEGG,MAFH,CAEUX,UAAU,CAACQ,UAFrB,EAGGG,MAHH,CAGUvB,IAAI,CAAC;AAAEwB,IAAAA,MAAM,EAAER,cAAV;AAA0BS,IAAAA,QAAQ,EAAE;AAApC,GAAD,CAHd,CAjByB;AAqB3BC,EAAAA,cAAc,EAAE3B,IAAI,CAAC;AAAEyB,IAAAA,MAAM,EAAER,cAAV;AAA0BW,IAAAA,eAAe,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB;AAApE,GAAD;AArBO,CAAD,CAA5B;AAwBAb,KAAK,CAACc,QAAN,CAAezB,aAAa,EAA5B;AAEAR,cAAc,CAACmB,KAAK,CAACc,QAAP,CAAd;AAEA,eAAed,KAAf","sourcesContent":["import { configureStore } from '@reduxjs/toolkit'\nimport { setupListeners } from '@reduxjs/toolkit/query/react'\nimport { load, save } from 'redux-localstorage-simple'\n\nimport application from './application/reducer'\nimport burn from './burn/reducer'\nimport burnV3 from './burn/v3/reducer'\nimport { api as dataApi } from './data/slice'\nimport { updateVersion } from './global/actions'\nimport lists from './lists/reducer'\nimport logs from './logs/slice'\nimport mint from './mint/reducer'\nimport mintV3 from './mint/v3/reducer'\nimport { multicall } from './multicall/instance'\nimport { routingApi } from './routing/slice'\nimport swap from './swap/reducer'\nimport transactions from './transactions/reducer'\nimport user from './user/reducer'\n\nconst PERSISTED_KEYS: string[] = ['user', 'transactions', 'lists']\n\nconst store = configureStore({\n  reducer: {\n    application,\n    user,\n    transactions,\n    swap,\n    mint,\n    mintV3,\n    burn,\n    burnV3,\n    multicall: multicall.reducer,\n    lists,\n    logs,\n    [dataApi.reducerPath]: dataApi.reducer,\n    [routingApi.reducerPath]: routingApi.reducer,\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({ thunk: true })\n      .concat(dataApi.middleware)\n      .concat(routingApi.middleware)\n      .concat(save({ states: PERSISTED_KEYS, debounce: 1000 })),\n  preloadedState: load({ states: PERSISTED_KEYS, disableWarnings: process.env.NODE_ENV === 'test' }),\n})\n\nstore.dispatch(updateVersion())\n\nsetupListeners(store.dispatch)\n\nexport default store\n\nexport type AppState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n"]},"metadata":{},"sourceType":"module"}