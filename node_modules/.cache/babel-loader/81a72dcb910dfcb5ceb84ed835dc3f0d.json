{"ast":null,"code":"var _ref,\n    _ref2,\n    _parseLocale2,\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { DEFAULT_LOCALE, SUPPORTED_LOCALES } from 'constants/locales';\nimport { useMemo } from 'react';\nimport store from 'state';\nimport { useUserLocale } from 'state/user/hooks';\nimport useParsedQueryString from './useParsedQueryString';\nimport { parsedQueryString } from './useParsedQueryString';\n/**\n * Given a locale string (e.g. from user agent), return the best match for corresponding SupportedLocale\n * @param maybeSupportedLocale the fuzzy locale identifier\n */\n\nfunction parseLocale(maybeSupportedLocale) {\n  if (typeof maybeSupportedLocale !== 'string') return undefined;\n  const lowerMaybeSupportedLocale = maybeSupportedLocale.toLowerCase();\n  return SUPPORTED_LOCALES.find(locale => locale.toLowerCase() === lowerMaybeSupportedLocale || locale.split('-')[0] === lowerMaybeSupportedLocale);\n}\n/**\n * Returns the supported locale read from the user agent (navigator)\n */\n\n\nexport function navigatorLocale() {\n  if (!navigator.language) return undefined;\n  const [language, region] = navigator.language.split('-');\n\n  if (region) {\n    var _parseLocale;\n\n    return (_parseLocale = parseLocale(`${language}-${region.toUpperCase()}`)) !== null && _parseLocale !== void 0 ? _parseLocale : parseLocale(language);\n  }\n\n  return parseLocale(language);\n}\n\nfunction storeLocale() {\n  var _store$getState$user$;\n\n  return (_store$getState$user$ = store.getState().user.userLocale) !== null && _store$getState$user$ !== void 0 ? _store$getState$user$ : undefined;\n}\n\nexport const initialLocale = (_ref = (_ref2 = (_parseLocale2 = parseLocale(parsedQueryString().lng)) !== null && _parseLocale2 !== void 0 ? _parseLocale2 : storeLocale()) !== null && _ref2 !== void 0 ? _ref2 : navigatorLocale()) !== null && _ref !== void 0 ? _ref : DEFAULT_LOCALE;\n\nfunction useUrlLocale() {\n  _s();\n\n  const parsed = useParsedQueryString();\n  return parseLocale(parsed.lng);\n}\n/**\n * Returns the currently active locale, from a combination of user agent, query string, and user settings stored in redux\n * Stores the query string locale in redux (if set) to persist across sessions\n */\n\n\n_s(useUrlLocale, \"MzBgORvAqJk0qNb8xJ4J0bE+Ge4=\", false, function () {\n  return [useParsedQueryString];\n});\n\nexport function useActiveLocale() {\n  _s2();\n\n  const urlLocale = useUrlLocale();\n  const userLocale = useUserLocale();\n  return useMemo(() => {\n    var _ref3, _ref4;\n\n    return (_ref3 = (_ref4 = urlLocale !== null && urlLocale !== void 0 ? urlLocale : userLocale) !== null && _ref4 !== void 0 ? _ref4 : navigatorLocale()) !== null && _ref3 !== void 0 ? _ref3 : DEFAULT_LOCALE;\n  }, [urlLocale, userLocale]);\n}\n\n_s2(useActiveLocale, \"CF/fsAADNqmTeWk1DqO9z1b7SVk=\", false, function () {\n  return [useUrlLocale, useUserLocale];\n});","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/hooks/useActiveLocale.ts"],"names":["DEFAULT_LOCALE","SUPPORTED_LOCALES","useMemo","store","useUserLocale","useParsedQueryString","parsedQueryString","parseLocale","maybeSupportedLocale","undefined","lowerMaybeSupportedLocale","toLowerCase","find","locale","split","navigatorLocale","navigator","language","region","toUpperCase","storeLocale","getState","user","userLocale","initialLocale","lng","useUrlLocale","parsed","useActiveLocale","urlLocale"],"mappings":";;;;;;AAAA,SAASA,cAAT,EAAyBC,iBAAzB,QAAmE,mBAAnE;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AAEA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,SAASC,iBAAT,QAAkC,wBAAlC;AAEA;AACA;AACA;AACA;;AACA,SAASC,WAAT,CAAqBC,oBAArB,EAAiF;AAC/E,MAAI,OAAOA,oBAAP,KAAgC,QAApC,EAA8C,OAAOC,SAAP;AAC9C,QAAMC,yBAAyB,GAAGF,oBAAoB,CAACG,WAArB,EAAlC;AACA,SAAOV,iBAAiB,CAACW,IAAlB,CACJC,MAAD,IAAYA,MAAM,CAACF,WAAP,OAAyBD,yBAAzB,IAAsDG,MAAM,CAACC,KAAP,CAAa,GAAb,EAAkB,CAAlB,MAAyBJ,yBADtF,CAAP;AAGD;AAED;AACA;AACA;;;AACA,OAAO,SAASK,eAAT,GAAwD;AAC7D,MAAI,CAACC,SAAS,CAACC,QAAf,EAAyB,OAAOR,SAAP;AAEzB,QAAM,CAACQ,QAAD,EAAWC,MAAX,IAAqBF,SAAS,CAACC,QAAV,CAAmBH,KAAnB,CAAyB,GAAzB,CAA3B;;AAEA,MAAII,MAAJ,EAAY;AAAA;;AACV,2BAAOX,WAAW,CAAE,GAAEU,QAAS,IAAGC,MAAM,CAACC,WAAP,EAAqB,EAArC,CAAlB,uDAA6DZ,WAAW,CAACU,QAAD,CAAxE;AACD;;AAED,SAAOV,WAAW,CAACU,QAAD,CAAlB;AACD;;AAED,SAASG,WAAT,GAAoD;AAAA;;AAClD,kCAAOjB,KAAK,CAACkB,QAAN,GAAiBC,IAAjB,CAAsBC,UAA7B,yEAA2Cd,SAA3C;AACD;;AAED,OAAO,MAAMe,aAAa,qCACxBjB,WAAW,CAACD,iBAAiB,GAAGmB,GAArB,CADa,yDACgBL,WAAW,EAD3B,yCACiCL,eAAe,EADhD,uCACsDf,cADzE;;AAGP,SAAS0B,YAAT,GAAwB;AAAA;;AACtB,QAAMC,MAAM,GAAGtB,oBAAoB,EAAnC;AACA,SAAOE,WAAW,CAACoB,MAAM,CAACF,GAAR,CAAlB;AACD;AAED;AACA;AACA;AACA;;;GARSC,Y;UACQrB,oB;;;AAQjB,OAAO,SAASuB,eAAT,GAA4C;AAAA;;AACjD,QAAMC,SAAS,GAAGH,YAAY,EAA9B;AACA,QAAMH,UAAU,GAAGnB,aAAa,EAAhC;AACA,SAAOF,OAAO,CAAC;AAAA;;AAAA,6BAAM2B,SAAN,aAAMA,SAAN,cAAMA,SAAN,GAAmBN,UAAnB,yCAAiCR,eAAe,EAAhD,yCAAsDf,cAAtD;AAAA,GAAD,EAAuE,CAAC6B,SAAD,EAAYN,UAAZ,CAAvE,CAAd;AACD;;IAJeK,e;UACIF,Y,EACCtB,a","sourcesContent":["import { DEFAULT_LOCALE, SUPPORTED_LOCALES, SupportedLocale } from 'constants/locales'\nimport { useMemo } from 'react'\nimport store from 'state'\nimport { useUserLocale } from 'state/user/hooks'\n\nimport useParsedQueryString from './useParsedQueryString'\nimport { parsedQueryString } from './useParsedQueryString'\n\n/**\n * Given a locale string (e.g. from user agent), return the best match for corresponding SupportedLocale\n * @param maybeSupportedLocale the fuzzy locale identifier\n */\nfunction parseLocale(maybeSupportedLocale: unknown): SupportedLocale | undefined {\n  if (typeof maybeSupportedLocale !== 'string') return undefined\n  const lowerMaybeSupportedLocale = maybeSupportedLocale.toLowerCase()\n  return SUPPORTED_LOCALES.find(\n    (locale) => locale.toLowerCase() === lowerMaybeSupportedLocale || locale.split('-')[0] === lowerMaybeSupportedLocale\n  )\n}\n\n/**\n * Returns the supported locale read from the user agent (navigator)\n */\nexport function navigatorLocale(): SupportedLocale | undefined {\n  if (!navigator.language) return undefined\n\n  const [language, region] = navigator.language.split('-')\n\n  if (region) {\n    return parseLocale(`${language}-${region.toUpperCase()}`) ?? parseLocale(language)\n  }\n\n  return parseLocale(language)\n}\n\nfunction storeLocale(): SupportedLocale | undefined {\n  return store.getState().user.userLocale ?? undefined\n}\n\nexport const initialLocale =\n  parseLocale(parsedQueryString().lng) ?? storeLocale() ?? navigatorLocale() ?? DEFAULT_LOCALE\n\nfunction useUrlLocale() {\n  const parsed = useParsedQueryString()\n  return parseLocale(parsed.lng)\n}\n\n/**\n * Returns the currently active locale, from a combination of user agent, query string, and user settings stored in redux\n * Stores the query string locale in redux (if set) to persist across sessions\n */\nexport function useActiveLocale(): SupportedLocale {\n  const urlLocale = useUrlLocale()\n  const userLocale = useUserLocale()\n  return useMemo(() => urlLocale ?? userLocale ?? navigatorLocale() ?? DEFAULT_LOCALE, [urlLocale, userLocale])\n}\n"]},"metadata":{},"sourceType":"module"}