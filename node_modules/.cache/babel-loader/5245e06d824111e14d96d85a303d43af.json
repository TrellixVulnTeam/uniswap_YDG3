{"ast":null,"code":"import { Protocol } from '@uniswap/router-sdk';\nimport { TradeType } from '@uniswap/sdk-core';\nimport { FeeAmount } from '@uniswap/v3-sdk';\nimport _ from 'lodash';\nimport { DAI_ARBITRUM, DAI_ARBITRUM_RINKEBY, DAI_MAINNET, DAI_OPTIMISM, DAI_OPTIMISTIC_KOVAN, DAI_POLYGON_MUMBAI, DAI_RINKEBY_1, DAI_RINKEBY_2, FEI_MAINNET, USDC_ARBITRUM, USDC_MAINNET, USDC_OPTIMISM, USDC_OPTIMISTIC_KOVAN, USDC_POLYGON, USDT_ARBITRUM, USDT_ARBITRUM_RINKEBY, USDT_MAINNET, USDT_OPTIMISM, USDT_OPTIMISTIC_KOVAN, WBTC_ARBITRUM, WBTC_MAINNET, WBTC_OPTIMISM, WBTC_OPTIMISTIC_KOVAN, WMATIC_POLYGON, WMATIC_POLYGON_MUMBAI } from '../../../providers/token-provider';\nimport { ChainId, WRAPPED_NATIVE_CURRENCY } from '../../../util';\nimport { parseFeeAmount, unparseFeeAmount } from '../../../util/amounts';\nimport { log } from '../../../util/log';\nimport { metric, MetricLoggerUnit } from '../../../util/metric';\nconst baseTokensByChain = {\n  [ChainId.MAINNET]: [USDC_MAINNET, USDT_MAINNET, WBTC_MAINNET, DAI_MAINNET, WRAPPED_NATIVE_CURRENCY[1], FEI_MAINNET],\n  [ChainId.RINKEBY]: [DAI_RINKEBY_1, DAI_RINKEBY_2],\n  [ChainId.OPTIMISM]: [DAI_OPTIMISM, USDC_OPTIMISM, USDT_OPTIMISM, WBTC_OPTIMISM],\n  [ChainId.OPTIMISTIC_KOVAN]: [DAI_OPTIMISTIC_KOVAN, USDC_OPTIMISTIC_KOVAN, WBTC_OPTIMISTIC_KOVAN, USDT_OPTIMISTIC_KOVAN],\n  [ChainId.ARBITRUM_ONE]: [DAI_ARBITRUM, USDC_ARBITRUM, WBTC_ARBITRUM, USDT_ARBITRUM],\n  [ChainId.ARBITRUM_RINKEBY]: [DAI_ARBITRUM_RINKEBY, USDT_ARBITRUM_RINKEBY],\n  [ChainId.POLYGON]: [USDC_POLYGON, WMATIC_POLYGON],\n  [ChainId.POLYGON_MUMBAI]: [DAI_POLYGON_MUMBAI, WMATIC_POLYGON_MUMBAI]\n};\nexport async function getV3CandidatePools({\n  tokenIn,\n  tokenOut,\n  routeType,\n  routingConfig,\n  subgraphProvider,\n  tokenProvider,\n  poolProvider,\n  blockedTokenListProvider,\n  chainId\n}) {\n  var _a, _b, _c, _d, _e;\n\n  const {\n    blockNumber,\n    v3PoolSelection: {\n      topN,\n      topNDirectSwaps,\n      topNTokenInOut,\n      topNSecondHop,\n      topNWithEachBaseToken,\n      topNWithBaseToken\n    }\n  } = routingConfig;\n  const tokenInAddress = tokenIn.address.toLowerCase();\n  const tokenOutAddress = tokenOut.address.toLowerCase();\n  const beforeSubgraphPools = Date.now();\n  const allPoolsRaw = await subgraphProvider.getPools(tokenIn, tokenOut, {\n    blockNumber\n  });\n  log.info({\n    samplePools: allPoolsRaw.slice(0, 3)\n  }, 'Got all pools from V3 subgraph provider');\n\n  const allPools = _.map(allPoolsRaw, pool => {\n    return { ...pool,\n      token0: { ...pool.token0,\n        id: pool.token0.id.toLowerCase()\n      },\n      token1: { ...pool.token1,\n        id: pool.token1.id.toLowerCase()\n      }\n    };\n  });\n\n  metric.putMetric('V3SubgraphPoolsLoad', Date.now() - beforeSubgraphPools, MetricLoggerUnit.Milliseconds); // Only consider pools where neither tokens are in the blocked token list.\n\n  let filteredPools = allPools;\n\n  if (blockedTokenListProvider) {\n    filteredPools = [];\n\n    for (const pool of allPools) {\n      const token0InBlocklist = await blockedTokenListProvider.getTokenByAddress(pool.token0.id);\n      const token1InBlocklist = await blockedTokenListProvider.getTokenByAddress(pool.token1.id);\n\n      if (token0InBlocklist || token1InBlocklist) {\n        continue;\n      }\n\n      filteredPools.push(pool);\n    }\n  }\n\n  const subgraphPoolsSorted = _(filteredPools).sortBy(tokenListPool => -tokenListPool.tvlUSD).value();\n\n  log.info(`After filtering blocked tokens went from ${allPools.length} to ${subgraphPoolsSorted.length}.`);\n  const poolAddressesSoFar = new Set();\n\n  const addToAddressSet = pools => {\n    _(pools).map(pool => pool.id).forEach(poolAddress => poolAddressesSoFar.add(poolAddress));\n  };\n\n  const baseTokens = (_a = baseTokensByChain[chainId]) !== null && _a !== void 0 ? _a : [];\n\n  const topByBaseWithTokenIn = _(baseTokens).flatMap(token => {\n    return _(subgraphPoolsSorted).filter(subgraphPool => {\n      const tokenAddress = token.address.toLowerCase();\n      return subgraphPool.token0.id == tokenAddress && subgraphPool.token1.id == tokenInAddress || subgraphPool.token1.id == tokenAddress && subgraphPool.token0.id == tokenInAddress;\n    }).sortBy(tokenListPool => -tokenListPool.tvlUSD).slice(0, topNWithEachBaseToken).value();\n  }).sortBy(tokenListPool => -tokenListPool.tvlUSD).slice(0, topNWithBaseToken).value();\n\n  const topByBaseWithTokenOut = _(baseTokens).flatMap(token => {\n    return _(subgraphPoolsSorted).filter(subgraphPool => {\n      const tokenAddress = token.address.toLowerCase();\n      return subgraphPool.token0.id == tokenAddress && subgraphPool.token1.id == tokenOutAddress || subgraphPool.token1.id == tokenAddress && subgraphPool.token0.id == tokenOutAddress;\n    }).sortBy(tokenListPool => -tokenListPool.tvlUSD).slice(0, topNWithEachBaseToken).value();\n  }).sortBy(tokenListPool => -tokenListPool.tvlUSD).slice(0, topNWithBaseToken).value();\n\n  let top2DirectSwapPool = _(subgraphPoolsSorted).filter(subgraphPool => {\n    return !poolAddressesSoFar.has(subgraphPool.id) && (subgraphPool.token0.id == tokenInAddress && subgraphPool.token1.id == tokenOutAddress || subgraphPool.token1.id == tokenInAddress && subgraphPool.token0.id == tokenOutAddress);\n  }).slice(0, topNDirectSwaps).value();\n\n  if (top2DirectSwapPool.length == 0 && topNDirectSwaps > 0) {\n    // If we requested direct swap pools but did not find any in the subgraph query.\n    // Optimistically add them into the query regardless. Invalid pools ones will be dropped anyway\n    // when we query the pool on-chain. Ensures that new pools for new pairs can be swapped on immediately.\n    top2DirectSwapPool = _.map([FeeAmount.HIGH, FeeAmount.MEDIUM, FeeAmount.LOW, FeeAmount.LOWEST], feeAmount => {\n      const {\n        token0,\n        token1,\n        poolAddress\n      } = poolProvider.getPoolAddress(tokenIn, tokenOut, feeAmount);\n      return {\n        id: poolAddress,\n        feeTier: unparseFeeAmount(feeAmount),\n        liquidity: '10000',\n        token0: {\n          id: token0.address\n        },\n        token1: {\n          id: token1.address\n        },\n        tvlETH: 10000,\n        tvlUSD: 10000\n      };\n    });\n  }\n\n  addToAddressSet(top2DirectSwapPool);\n  const wrappedNativeAddress = (_b = WRAPPED_NATIVE_CURRENCY[chainId]) === null || _b === void 0 ? void 0 : _b.address; // Main reason we need this is for gas estimates, only needed if token out is not native.\n  // We don't check the seen address set because if we've already added pools for getting native quotes\n  // theres no need to add more.\n\n  let top2EthQuoteTokenPool = [];\n\n  if (((_c = WRAPPED_NATIVE_CURRENCY[chainId]) === null || _c === void 0 ? void 0 : _c.symbol) == ((_d = WRAPPED_NATIVE_CURRENCY[ChainId.MAINNET]) === null || _d === void 0 ? void 0 : _d.symbol) && tokenOut.symbol != 'WETH' && tokenOut.symbol != 'WETH9' && tokenOut.symbol != 'ETH' || ((_e = WRAPPED_NATIVE_CURRENCY[chainId]) === null || _e === void 0 ? void 0 : _e.symbol) == WMATIC_POLYGON.symbol && tokenOut.symbol != 'MATIC' && tokenOut.symbol != 'WMATIC') {\n    top2EthQuoteTokenPool = _(subgraphPoolsSorted).filter(subgraphPool => {\n      if (routeType == TradeType.EXACT_INPUT) {\n        return subgraphPool.token0.id == wrappedNativeAddress && subgraphPool.token1.id == tokenOutAddress || subgraphPool.token1.id == wrappedNativeAddress && subgraphPool.token0.id == tokenOutAddress;\n      } else {\n        return subgraphPool.token0.id == wrappedNativeAddress && subgraphPool.token1.id == tokenInAddress || subgraphPool.token1.id == wrappedNativeAddress && subgraphPool.token0.id == tokenInAddress;\n      }\n    }).slice(0, 1).value();\n  }\n\n  addToAddressSet(top2EthQuoteTokenPool);\n\n  const topByTVL = _(subgraphPoolsSorted).filter(subgraphPool => {\n    return !poolAddressesSoFar.has(subgraphPool.id);\n  }).slice(0, topN).value();\n\n  addToAddressSet(topByTVL);\n\n  const topByTVLUsingTokenIn = _(subgraphPoolsSorted).filter(subgraphPool => {\n    return !poolAddressesSoFar.has(subgraphPool.id) && (subgraphPool.token0.id == tokenInAddress || subgraphPool.token1.id == tokenInAddress);\n  }).slice(0, topNTokenInOut).value();\n\n  addToAddressSet(topByTVLUsingTokenIn);\n\n  const topByTVLUsingTokenOut = _(subgraphPoolsSorted).filter(subgraphPool => {\n    return !poolAddressesSoFar.has(subgraphPool.id) && (subgraphPool.token0.id == tokenOutAddress || subgraphPool.token1.id == tokenOutAddress);\n  }).slice(0, topNTokenInOut).value();\n\n  addToAddressSet(topByTVLUsingTokenOut);\n\n  const topByTVLUsingTokenInSecondHops = _(topByTVLUsingTokenIn).map(subgraphPool => {\n    return tokenInAddress == subgraphPool.token0.id ? subgraphPool.token1.id : subgraphPool.token0.id;\n  }).flatMap(secondHopId => {\n    return _(subgraphPoolsSorted).filter(subgraphPool => {\n      return !poolAddressesSoFar.has(subgraphPool.id) && (subgraphPool.token0.id == secondHopId || subgraphPool.token1.id == secondHopId);\n    }).slice(0, topNSecondHop).value();\n  }).uniqBy(pool => pool.id).sortBy(tokenListPool => -tokenListPool.tvlUSD).slice(0, topNSecondHop).value();\n\n  addToAddressSet(topByTVLUsingTokenInSecondHops);\n\n  const topByTVLUsingTokenOutSecondHops = _(topByTVLUsingTokenOut).map(subgraphPool => {\n    return tokenOutAddress == subgraphPool.token0.id ? subgraphPool.token1.id : subgraphPool.token0.id;\n  }).flatMap(secondHopId => {\n    return _(subgraphPoolsSorted).filter(subgraphPool => {\n      return !poolAddressesSoFar.has(subgraphPool.id) && (subgraphPool.token0.id == secondHopId || subgraphPool.token1.id == secondHopId);\n    }).slice(0, topNSecondHop).value();\n  }).uniqBy(pool => pool.id).sortBy(tokenListPool => -tokenListPool.tvlUSD).slice(0, topNSecondHop).value();\n\n  addToAddressSet(topByTVLUsingTokenOutSecondHops);\n\n  const subgraphPools = _([...topByBaseWithTokenIn, ...topByBaseWithTokenOut, ...top2DirectSwapPool, ...top2EthQuoteTokenPool, ...topByTVL, ...topByTVLUsingTokenIn, ...topByTVLUsingTokenOut, ...topByTVLUsingTokenInSecondHops, ...topByTVLUsingTokenOutSecondHops]).compact().uniqBy(pool => pool.id).value();\n\n  const tokenAddresses = _(subgraphPools).flatMap(subgraphPool => [subgraphPool.token0.id, subgraphPool.token1.id]).compact().uniq().value();\n\n  log.info(`Getting the ${tokenAddresses.length} tokens within the ${subgraphPools.length} V3 pools we are considering`);\n  const tokenAccessor = await tokenProvider.getTokens(tokenAddresses, {\n    blockNumber\n  });\n\n  const printV3SubgraphPool = s => {\n    var _a, _b, _c, _d;\n\n    return `${(_b = (_a = tokenAccessor.getTokenByAddress(s.token0.id)) === null || _a === void 0 ? void 0 : _a.symbol) !== null && _b !== void 0 ? _b : s.token0.id}/${(_d = (_c = tokenAccessor.getTokenByAddress(s.token1.id)) === null || _c === void 0 ? void 0 : _c.symbol) !== null && _d !== void 0 ? _d : s.token1.id}/${s.feeTier}`;\n  };\n\n  log.info({\n    topByBaseWithTokenIn: topByBaseWithTokenIn.map(printV3SubgraphPool),\n    topByBaseWithTokenOut: topByBaseWithTokenOut.map(printV3SubgraphPool),\n    topByTVL: topByTVL.map(printV3SubgraphPool),\n    topByTVLUsingTokenIn: topByTVLUsingTokenIn.map(printV3SubgraphPool),\n    topByTVLUsingTokenOut: topByTVLUsingTokenOut.map(printV3SubgraphPool),\n    topByTVLUsingTokenInSecondHops: topByTVLUsingTokenInSecondHops.map(printV3SubgraphPool),\n    topByTVLUsingTokenOutSecondHops: topByTVLUsingTokenOutSecondHops.map(printV3SubgraphPool),\n    top2DirectSwap: top2DirectSwapPool.map(printV3SubgraphPool),\n    top2EthQuotePool: top2EthQuoteTokenPool.map(printV3SubgraphPool)\n  }, `V3 Candidate Pools`);\n\n  const tokenPairsRaw = _.map(subgraphPools, subgraphPool => {\n    const tokenA = tokenAccessor.getTokenByAddress(subgraphPool.token0.id);\n    const tokenB = tokenAccessor.getTokenByAddress(subgraphPool.token1.id);\n    let fee;\n\n    try {\n      fee = parseFeeAmount(subgraphPool.feeTier);\n    } catch (err) {\n      log.info({\n        subgraphPool\n      }, `Dropping candidate pool for ${subgraphPool.token0.id}/${subgraphPool.token1.id}/${subgraphPool.feeTier} because fee tier not supported`);\n      return undefined;\n    }\n\n    if (!tokenA || !tokenB) {\n      log.info(`Dropping candidate pool for ${subgraphPool.token0.id}/${subgraphPool.token1.id}/${fee} because ${tokenA ? subgraphPool.token1.id : subgraphPool.token0.id} not found by token provider`);\n      return undefined;\n    }\n\n    return [tokenA, tokenB, fee];\n  });\n\n  const tokenPairs = _.compact(tokenPairsRaw);\n\n  const beforePoolsLoad = Date.now();\n  const poolAccessor = await poolProvider.getPools(tokenPairs);\n  metric.putMetric('V3PoolsLoad', Date.now() - beforePoolsLoad, MetricLoggerUnit.Milliseconds);\n  const poolsBySelection = {\n    protocol: Protocol.V3,\n    selections: {\n      topByBaseWithTokenIn,\n      topByBaseWithTokenOut,\n      topByDirectSwapPool: top2DirectSwapPool,\n      topByEthQuoteTokenPool: top2EthQuoteTokenPool,\n      topByTVL,\n      topByTVLUsingTokenIn,\n      topByTVLUsingTokenOut,\n      topByTVLUsingTokenInSecondHops,\n      topByTVLUsingTokenOutSecondHops\n    }\n  };\n  return {\n    poolAccessor,\n    candidatePools: poolsBySelection\n  };\n}\nexport async function getV2CandidatePools({\n  tokenIn,\n  tokenOut,\n  routeType,\n  routingConfig,\n  subgraphProvider,\n  tokenProvider,\n  poolProvider,\n  blockedTokenListProvider,\n  chainId\n}) {\n  var _a;\n\n  const {\n    blockNumber,\n    v2PoolSelection: {\n      topN,\n      topNDirectSwaps,\n      topNTokenInOut,\n      topNSecondHop,\n      topNWithEachBaseToken,\n      topNWithBaseToken\n    }\n  } = routingConfig;\n  const tokenInAddress = tokenIn.address.toLowerCase();\n  const tokenOutAddress = tokenOut.address.toLowerCase();\n  const beforeSubgraphPools = Date.now();\n  const allPoolsRaw = await subgraphProvider.getPools(tokenIn, tokenOut, {\n    blockNumber\n  });\n\n  const allPools = _.map(allPoolsRaw, pool => {\n    return { ...pool,\n      token0: { ...pool.token0,\n        id: pool.token0.id.toLowerCase()\n      },\n      token1: { ...pool.token1,\n        id: pool.token1.id.toLowerCase()\n      }\n    };\n  });\n\n  metric.putMetric('V2SubgraphPoolsLoad', Date.now() - beforeSubgraphPools, MetricLoggerUnit.Milliseconds); // Only consider pools where neither tokens are in the blocked token list.\n\n  let filteredPools = allPools;\n\n  if (blockedTokenListProvider) {\n    filteredPools = [];\n\n    for (const pool of allPools) {\n      const token0InBlocklist = await blockedTokenListProvider.getTokenByAddress(pool.token0.id);\n      const token1InBlocklist = await blockedTokenListProvider.getTokenByAddress(pool.token1.id);\n\n      if (token0InBlocklist || token1InBlocklist) {\n        continue;\n      }\n\n      filteredPools.push(pool);\n    }\n  }\n\n  const subgraphPoolsSorted = _(filteredPools).sortBy(tokenListPool => -tokenListPool.reserve).value();\n\n  log.info(`After filtering blocked tokens went from ${allPools.length} to ${subgraphPoolsSorted.length}.`);\n  const poolAddressesSoFar = new Set();\n\n  const addToAddressSet = pools => {\n    _(pools).map(pool => pool.id).forEach(poolAddress => poolAddressesSoFar.add(poolAddress));\n  };\n\n  const baseTokens = (_a = baseTokensByChain[chainId]) !== null && _a !== void 0 ? _a : [];\n\n  const topByBaseWithTokenIn = _(baseTokens).flatMap(token => {\n    return _(subgraphPoolsSorted).filter(subgraphPool => {\n      const tokenAddress = token.address.toLowerCase();\n      return subgraphPool.token0.id == tokenAddress && subgraphPool.token1.id == tokenInAddress || subgraphPool.token1.id == tokenAddress && subgraphPool.token0.id == tokenInAddress;\n    }).sortBy(tokenListPool => -tokenListPool.reserve).slice(0, topNWithEachBaseToken).value();\n  }).sortBy(tokenListPool => -tokenListPool.reserve).slice(0, topNWithBaseToken).value();\n\n  const topByBaseWithTokenOut = _(baseTokens).flatMap(token => {\n    return _(subgraphPoolsSorted).filter(subgraphPool => {\n      const tokenAddress = token.address.toLowerCase();\n      return subgraphPool.token0.id == tokenAddress && subgraphPool.token1.id == tokenOutAddress || subgraphPool.token1.id == tokenAddress && subgraphPool.token0.id == tokenOutAddress;\n    }).sortBy(tokenListPool => -tokenListPool.reserve).slice(0, topNWithEachBaseToken).value();\n  }).sortBy(tokenListPool => -tokenListPool.reserve).slice(0, topNWithBaseToken).value(); // Always add the direct swap pool into the mix regardless of if it exists in the subgraph pool list.\n  // Ensures that new pools can be swapped on immediately, and that if a pool was filtered out of the\n  // subgraph query for some reason (e.g. trackedReserveETH was 0), then we still consider it.\n\n\n  let topByDirectSwapPool = [];\n\n  if (topNDirectSwaps != 0) {\n    const {\n      token0,\n      token1,\n      poolAddress\n    } = poolProvider.getPoolAddress(tokenIn, tokenOut);\n    topByDirectSwapPool = [{\n      id: poolAddress,\n      token0: {\n        id: token0.address\n      },\n      token1: {\n        id: token1.address\n      },\n      supply: 10000,\n      reserve: 10000 // Not used. Set to arbitrary number.\n\n    }];\n  }\n\n  addToAddressSet(topByDirectSwapPool);\n  const wethAddress = WRAPPED_NATIVE_CURRENCY[chainId].address; // Main reason we need this is for gas estimates, only needed if token out is not ETH.\n  // We don't check the seen address set because if we've already added pools for getting ETH quotes\n  // theres no need to add more.\n  // Note: we do not need to check other native currencies for the V2 Protocol\n\n  let topByEthQuoteTokenPool = [];\n\n  if (tokenOut.symbol != 'WETH' && tokenOut.symbol != 'WETH9' && tokenOut.symbol != 'ETH') {\n    topByEthQuoteTokenPool = _(subgraphPoolsSorted).filter(subgraphPool => {\n      if (routeType == TradeType.EXACT_INPUT) {\n        return subgraphPool.token0.id == wethAddress && subgraphPool.token1.id == tokenOutAddress || subgraphPool.token1.id == wethAddress && subgraphPool.token0.id == tokenOutAddress;\n      } else {\n        return subgraphPool.token0.id == wethAddress && subgraphPool.token1.id == tokenInAddress || subgraphPool.token1.id == wethAddress && subgraphPool.token0.id == tokenInAddress;\n      }\n    }).slice(0, 1).value();\n  }\n\n  addToAddressSet(topByEthQuoteTokenPool);\n\n  const topByTVL = _(subgraphPoolsSorted).filter(subgraphPool => {\n    return !poolAddressesSoFar.has(subgraphPool.id);\n  }).slice(0, topN).value();\n\n  addToAddressSet(topByTVL);\n\n  const topByTVLUsingTokenIn = _(subgraphPoolsSorted).filter(subgraphPool => {\n    return !poolAddressesSoFar.has(subgraphPool.id) && (subgraphPool.token0.id == tokenInAddress || subgraphPool.token1.id == tokenInAddress);\n  }).slice(0, topNTokenInOut).value();\n\n  addToAddressSet(topByTVLUsingTokenIn);\n\n  const topByTVLUsingTokenOut = _(subgraphPoolsSorted).filter(subgraphPool => {\n    return !poolAddressesSoFar.has(subgraphPool.id) && (subgraphPool.token0.id == tokenOutAddress || subgraphPool.token1.id == tokenOutAddress);\n  }).slice(0, topNTokenInOut).value();\n\n  addToAddressSet(topByTVLUsingTokenOut);\n\n  const topByTVLUsingTokenInSecondHops = _(topByTVLUsingTokenIn).map(subgraphPool => {\n    return tokenInAddress == subgraphPool.token0.id ? subgraphPool.token1.id : subgraphPool.token0.id;\n  }).flatMap(secondHopId => {\n    return _(subgraphPoolsSorted).filter(subgraphPool => {\n      return !poolAddressesSoFar.has(subgraphPool.id) && (subgraphPool.token0.id == secondHopId || subgraphPool.token1.id == secondHopId);\n    }).slice(0, topNSecondHop).value();\n  }).uniqBy(pool => pool.id).sortBy(tokenListPool => -tokenListPool.reserve).slice(0, topNSecondHop).value();\n\n  addToAddressSet(topByTVLUsingTokenInSecondHops);\n\n  const topByTVLUsingTokenOutSecondHops = _(topByTVLUsingTokenOut).map(subgraphPool => {\n    return tokenOutAddress == subgraphPool.token0.id ? subgraphPool.token1.id : subgraphPool.token0.id;\n  }).flatMap(secondHopId => {\n    return _(subgraphPoolsSorted).filter(subgraphPool => {\n      return !poolAddressesSoFar.has(subgraphPool.id) && (subgraphPool.token0.id == secondHopId || subgraphPool.token1.id == secondHopId);\n    }).slice(0, topNSecondHop).value();\n  }).uniqBy(pool => pool.id).sortBy(tokenListPool => -tokenListPool.reserve).slice(0, topNSecondHop).value();\n\n  addToAddressSet(topByTVLUsingTokenOutSecondHops);\n\n  const subgraphPools = _([...topByBaseWithTokenIn, ...topByBaseWithTokenOut, ...topByDirectSwapPool, ...topByEthQuoteTokenPool, ...topByTVL, ...topByTVLUsingTokenIn, ...topByTVLUsingTokenOut, ...topByTVLUsingTokenInSecondHops, ...topByTVLUsingTokenOutSecondHops]).compact().uniqBy(pool => pool.id).value();\n\n  const tokenAddresses = _(subgraphPools).flatMap(subgraphPool => [subgraphPool.token0.id, subgraphPool.token1.id]).compact().uniq().value();\n\n  log.info(`Getting the ${tokenAddresses.length} tokens within the ${subgraphPools.length} V2 pools we are considering`);\n  const tokenAccessor = await tokenProvider.getTokens(tokenAddresses, {\n    blockNumber\n  });\n\n  const printV2SubgraphPool = s => {\n    var _a, _b, _c, _d;\n\n    return `${(_b = (_a = tokenAccessor.getTokenByAddress(s.token0.id)) === null || _a === void 0 ? void 0 : _a.symbol) !== null && _b !== void 0 ? _b : s.token0.id}/${(_d = (_c = tokenAccessor.getTokenByAddress(s.token1.id)) === null || _c === void 0 ? void 0 : _c.symbol) !== null && _d !== void 0 ? _d : s.token1.id}`;\n  };\n\n  log.info({\n    topByBaseWithTokenIn: topByBaseWithTokenIn.map(printV2SubgraphPool),\n    topByBaseWithTokenOut: topByBaseWithTokenOut.map(printV2SubgraphPool),\n    topByTVL: topByTVL.map(printV2SubgraphPool),\n    topByTVLUsingTokenIn: topByTVLUsingTokenIn.map(printV2SubgraphPool),\n    topByTVLUsingTokenOut: topByTVLUsingTokenOut.map(printV2SubgraphPool),\n    topByTVLUsingTokenInSecondHops: topByTVLUsingTokenInSecondHops.map(printV2SubgraphPool),\n    topByTVLUsingTokenOutSecondHops: topByTVLUsingTokenOutSecondHops.map(printV2SubgraphPool),\n    top2DirectSwap: topByDirectSwapPool.map(printV2SubgraphPool),\n    top2EthQuotePool: topByEthQuoteTokenPool.map(printV2SubgraphPool)\n  }, `V2 Candidate pools`);\n\n  const tokenPairsRaw = _.map(subgraphPools, subgraphPool => {\n    const tokenA = tokenAccessor.getTokenByAddress(subgraphPool.token0.id);\n    const tokenB = tokenAccessor.getTokenByAddress(subgraphPool.token1.id);\n\n    if (!tokenA || !tokenB) {\n      log.info(`Dropping candidate pool for ${subgraphPool.token0.id}/${subgraphPool.token1.id}`);\n      return undefined;\n    }\n\n    return [tokenA, tokenB];\n  });\n\n  const tokenPairs = _.compact(tokenPairsRaw);\n\n  const beforePoolsLoad = Date.now();\n  const poolAccessor = await poolProvider.getPools(tokenPairs, {\n    blockNumber\n  });\n  metric.putMetric('V2PoolsLoad', Date.now() - beforePoolsLoad, MetricLoggerUnit.Milliseconds);\n  const poolsBySelection = {\n    protocol: Protocol.V2,\n    selections: {\n      topByBaseWithTokenIn,\n      topByBaseWithTokenOut,\n      topByDirectSwapPool,\n      topByEthQuoteTokenPool: topByEthQuoteTokenPool,\n      topByTVL,\n      topByTVLUsingTokenIn,\n      topByTVLUsingTokenOut,\n      topByTVLUsingTokenInSecondHops,\n      topByTVLUsingTokenOutSecondHops\n    }\n  };\n  return {\n    poolAccessor,\n    candidatePools: poolsBySelection\n  };\n}","map":{"version":3,"sources":["../../../../../../src/routers/alpha-router/functions/get-candidate-pools.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Protocol } from '@uniswap/router-sdk';\nimport { TradeType } from '@uniswap/sdk-core';\nimport { FeeAmount } from '@uniswap/v3-sdk';\nimport _ from 'lodash';\nimport { DAI_ARBITRUM, DAI_ARBITRUM_RINKEBY, DAI_MAINNET, DAI_OPTIMISM, DAI_OPTIMISTIC_KOVAN, DAI_POLYGON_MUMBAI, DAI_RINKEBY_1, DAI_RINKEBY_2, FEI_MAINNET, USDC_ARBITRUM, USDC_MAINNET, USDC_OPTIMISM, USDC_OPTIMISTIC_KOVAN, USDC_POLYGON, USDT_ARBITRUM, USDT_ARBITRUM_RINKEBY, USDT_MAINNET, USDT_OPTIMISM, USDT_OPTIMISTIC_KOVAN, WBTC_ARBITRUM, WBTC_MAINNET, WBTC_OPTIMISM, WBTC_OPTIMISTIC_KOVAN, WMATIC_POLYGON, WMATIC_POLYGON_MUMBAI, } from '../../../providers/token-provider';\nimport { ChainId, WRAPPED_NATIVE_CURRENCY } from '../../../util';\nimport { parseFeeAmount, unparseFeeAmount } from '../../../util/amounts';\nimport { log } from '../../../util/log';\nimport { metric, MetricLoggerUnit } from '../../../util/metric';\nconst baseTokensByChain = {\n    [ChainId.MAINNET]: [\n        USDC_MAINNET,\n        USDT_MAINNET,\n        WBTC_MAINNET,\n        DAI_MAINNET,\n        WRAPPED_NATIVE_CURRENCY[1],\n        FEI_MAINNET,\n    ],\n    [ChainId.RINKEBY]: [DAI_RINKEBY_1, DAI_RINKEBY_2],\n    [ChainId.OPTIMISM]: [\n        DAI_OPTIMISM,\n        USDC_OPTIMISM,\n        USDT_OPTIMISM,\n        WBTC_OPTIMISM,\n    ],\n    [ChainId.OPTIMISTIC_KOVAN]: [\n        DAI_OPTIMISTIC_KOVAN,\n        USDC_OPTIMISTIC_KOVAN,\n        WBTC_OPTIMISTIC_KOVAN,\n        USDT_OPTIMISTIC_KOVAN,\n    ],\n    [ChainId.ARBITRUM_ONE]: [\n        DAI_ARBITRUM,\n        USDC_ARBITRUM,\n        WBTC_ARBITRUM,\n        USDT_ARBITRUM,\n    ],\n    [ChainId.ARBITRUM_RINKEBY]: [DAI_ARBITRUM_RINKEBY, USDT_ARBITRUM_RINKEBY],\n    [ChainId.POLYGON]: [USDC_POLYGON, WMATIC_POLYGON],\n    [ChainId.POLYGON_MUMBAI]: [DAI_POLYGON_MUMBAI, WMATIC_POLYGON_MUMBAI],\n};\nexport async function getV3CandidatePools({ tokenIn, tokenOut, routeType, routingConfig, subgraphProvider, tokenProvider, poolProvider, blockedTokenListProvider, chainId, }) {\n    var _a, _b, _c, _d, _e;\n    const { blockNumber, v3PoolSelection: { topN, topNDirectSwaps, topNTokenInOut, topNSecondHop, topNWithEachBaseToken, topNWithBaseToken, }, } = routingConfig;\n    const tokenInAddress = tokenIn.address.toLowerCase();\n    const tokenOutAddress = tokenOut.address.toLowerCase();\n    const beforeSubgraphPools = Date.now();\n    const allPoolsRaw = await subgraphProvider.getPools(tokenIn, tokenOut, {\n        blockNumber,\n    });\n    log.info({ samplePools: allPoolsRaw.slice(0, 3) }, 'Got all pools from V3 subgraph provider');\n    const allPools = _.map(allPoolsRaw, (pool) => {\n        return {\n            ...pool,\n            token0: {\n                ...pool.token0,\n                id: pool.token0.id.toLowerCase(),\n            },\n            token1: {\n                ...pool.token1,\n                id: pool.token1.id.toLowerCase(),\n            },\n        };\n    });\n    metric.putMetric('V3SubgraphPoolsLoad', Date.now() - beforeSubgraphPools, MetricLoggerUnit.Milliseconds);\n    // Only consider pools where neither tokens are in the blocked token list.\n    let filteredPools = allPools;\n    if (blockedTokenListProvider) {\n        filteredPools = [];\n        for (const pool of allPools) {\n            const token0InBlocklist = await blockedTokenListProvider.getTokenByAddress(pool.token0.id);\n            const token1InBlocklist = await blockedTokenListProvider.getTokenByAddress(pool.token1.id);\n            if (token0InBlocklist || token1InBlocklist) {\n                continue;\n            }\n            filteredPools.push(pool);\n        }\n    }\n    const subgraphPoolsSorted = _(filteredPools)\n        .sortBy((tokenListPool) => -tokenListPool.tvlUSD)\n        .value();\n    log.info(`After filtering blocked tokens went from ${allPools.length} to ${subgraphPoolsSorted.length}.`);\n    const poolAddressesSoFar = new Set();\n    const addToAddressSet = (pools) => {\n        _(pools)\n            .map((pool) => pool.id)\n            .forEach((poolAddress) => poolAddressesSoFar.add(poolAddress));\n    };\n    const baseTokens = (_a = baseTokensByChain[chainId]) !== null && _a !== void 0 ? _a : [];\n    const topByBaseWithTokenIn = _(baseTokens)\n        .flatMap((token) => {\n        return _(subgraphPoolsSorted)\n            .filter((subgraphPool) => {\n            const tokenAddress = token.address.toLowerCase();\n            return ((subgraphPool.token0.id == tokenAddress &&\n                subgraphPool.token1.id == tokenInAddress) ||\n                (subgraphPool.token1.id == tokenAddress &&\n                    subgraphPool.token0.id == tokenInAddress));\n        })\n            .sortBy((tokenListPool) => -tokenListPool.tvlUSD)\n            .slice(0, topNWithEachBaseToken)\n            .value();\n    })\n        .sortBy((tokenListPool) => -tokenListPool.tvlUSD)\n        .slice(0, topNWithBaseToken)\n        .value();\n    const topByBaseWithTokenOut = _(baseTokens)\n        .flatMap((token) => {\n        return _(subgraphPoolsSorted)\n            .filter((subgraphPool) => {\n            const tokenAddress = token.address.toLowerCase();\n            return ((subgraphPool.token0.id == tokenAddress &&\n                subgraphPool.token1.id == tokenOutAddress) ||\n                (subgraphPool.token1.id == tokenAddress &&\n                    subgraphPool.token0.id == tokenOutAddress));\n        })\n            .sortBy((tokenListPool) => -tokenListPool.tvlUSD)\n            .slice(0, topNWithEachBaseToken)\n            .value();\n    })\n        .sortBy((tokenListPool) => -tokenListPool.tvlUSD)\n        .slice(0, topNWithBaseToken)\n        .value();\n    let top2DirectSwapPool = _(subgraphPoolsSorted)\n        .filter((subgraphPool) => {\n        return (!poolAddressesSoFar.has(subgraphPool.id) &&\n            ((subgraphPool.token0.id == tokenInAddress &&\n                subgraphPool.token1.id == tokenOutAddress) ||\n                (subgraphPool.token1.id == tokenInAddress &&\n                    subgraphPool.token0.id == tokenOutAddress)));\n    })\n        .slice(0, topNDirectSwaps)\n        .value();\n    if (top2DirectSwapPool.length == 0 && topNDirectSwaps > 0) {\n        // If we requested direct swap pools but did not find any in the subgraph query.\n        // Optimistically add them into the query regardless. Invalid pools ones will be dropped anyway\n        // when we query the pool on-chain. Ensures that new pools for new pairs can be swapped on immediately.\n        top2DirectSwapPool = _.map([FeeAmount.HIGH, FeeAmount.MEDIUM, FeeAmount.LOW, FeeAmount.LOWEST], (feeAmount) => {\n            const { token0, token1, poolAddress } = poolProvider.getPoolAddress(tokenIn, tokenOut, feeAmount);\n            return {\n                id: poolAddress,\n                feeTier: unparseFeeAmount(feeAmount),\n                liquidity: '10000',\n                token0: {\n                    id: token0.address,\n                },\n                token1: {\n                    id: token1.address,\n                },\n                tvlETH: 10000,\n                tvlUSD: 10000,\n            };\n        });\n    }\n    addToAddressSet(top2DirectSwapPool);\n    const wrappedNativeAddress = (_b = WRAPPED_NATIVE_CURRENCY[chainId]) === null || _b === void 0 ? void 0 : _b.address;\n    // Main reason we need this is for gas estimates, only needed if token out is not native.\n    // We don't check the seen address set because if we've already added pools for getting native quotes\n    // theres no need to add more.\n    let top2EthQuoteTokenPool = [];\n    if ((((_c = WRAPPED_NATIVE_CURRENCY[chainId]) === null || _c === void 0 ? void 0 : _c.symbol) ==\n        ((_d = WRAPPED_NATIVE_CURRENCY[ChainId.MAINNET]) === null || _d === void 0 ? void 0 : _d.symbol) &&\n        tokenOut.symbol != 'WETH' &&\n        tokenOut.symbol != 'WETH9' &&\n        tokenOut.symbol != 'ETH') ||\n        (((_e = WRAPPED_NATIVE_CURRENCY[chainId]) === null || _e === void 0 ? void 0 : _e.symbol) == WMATIC_POLYGON.symbol &&\n            tokenOut.symbol != 'MATIC' &&\n            tokenOut.symbol != 'WMATIC')) {\n        top2EthQuoteTokenPool = _(subgraphPoolsSorted)\n            .filter((subgraphPool) => {\n            if (routeType == TradeType.EXACT_INPUT) {\n                return ((subgraphPool.token0.id == wrappedNativeAddress &&\n                    subgraphPool.token1.id == tokenOutAddress) ||\n                    (subgraphPool.token1.id == wrappedNativeAddress &&\n                        subgraphPool.token0.id == tokenOutAddress));\n            }\n            else {\n                return ((subgraphPool.token0.id == wrappedNativeAddress &&\n                    subgraphPool.token1.id == tokenInAddress) ||\n                    (subgraphPool.token1.id == wrappedNativeAddress &&\n                        subgraphPool.token0.id == tokenInAddress));\n            }\n        })\n            .slice(0, 1)\n            .value();\n    }\n    addToAddressSet(top2EthQuoteTokenPool);\n    const topByTVL = _(subgraphPoolsSorted)\n        .filter((subgraphPool) => {\n        return !poolAddressesSoFar.has(subgraphPool.id);\n    })\n        .slice(0, topN)\n        .value();\n    addToAddressSet(topByTVL);\n    const topByTVLUsingTokenIn = _(subgraphPoolsSorted)\n        .filter((subgraphPool) => {\n        return (!poolAddressesSoFar.has(subgraphPool.id) &&\n            (subgraphPool.token0.id == tokenInAddress ||\n                subgraphPool.token1.id == tokenInAddress));\n    })\n        .slice(0, topNTokenInOut)\n        .value();\n    addToAddressSet(topByTVLUsingTokenIn);\n    const topByTVLUsingTokenOut = _(subgraphPoolsSorted)\n        .filter((subgraphPool) => {\n        return (!poolAddressesSoFar.has(subgraphPool.id) &&\n            (subgraphPool.token0.id == tokenOutAddress ||\n                subgraphPool.token1.id == tokenOutAddress));\n    })\n        .slice(0, topNTokenInOut)\n        .value();\n    addToAddressSet(topByTVLUsingTokenOut);\n    const topByTVLUsingTokenInSecondHops = _(topByTVLUsingTokenIn)\n        .map((subgraphPool) => {\n        return tokenInAddress == subgraphPool.token0.id\n            ? subgraphPool.token1.id\n            : subgraphPool.token0.id;\n    })\n        .flatMap((secondHopId) => {\n        return _(subgraphPoolsSorted)\n            .filter((subgraphPool) => {\n            return (!poolAddressesSoFar.has(subgraphPool.id) &&\n                (subgraphPool.token0.id == secondHopId ||\n                    subgraphPool.token1.id == secondHopId));\n        })\n            .slice(0, topNSecondHop)\n            .value();\n    })\n        .uniqBy((pool) => pool.id)\n        .sortBy((tokenListPool) => -tokenListPool.tvlUSD)\n        .slice(0, topNSecondHop)\n        .value();\n    addToAddressSet(topByTVLUsingTokenInSecondHops);\n    const topByTVLUsingTokenOutSecondHops = _(topByTVLUsingTokenOut)\n        .map((subgraphPool) => {\n        return tokenOutAddress == subgraphPool.token0.id\n            ? subgraphPool.token1.id\n            : subgraphPool.token0.id;\n    })\n        .flatMap((secondHopId) => {\n        return _(subgraphPoolsSorted)\n            .filter((subgraphPool) => {\n            return (!poolAddressesSoFar.has(subgraphPool.id) &&\n                (subgraphPool.token0.id == secondHopId ||\n                    subgraphPool.token1.id == secondHopId));\n        })\n            .slice(0, topNSecondHop)\n            .value();\n    })\n        .uniqBy((pool) => pool.id)\n        .sortBy((tokenListPool) => -tokenListPool.tvlUSD)\n        .slice(0, topNSecondHop)\n        .value();\n    addToAddressSet(topByTVLUsingTokenOutSecondHops);\n    const subgraphPools = _([\n        ...topByBaseWithTokenIn,\n        ...topByBaseWithTokenOut,\n        ...top2DirectSwapPool,\n        ...top2EthQuoteTokenPool,\n        ...topByTVL,\n        ...topByTVLUsingTokenIn,\n        ...topByTVLUsingTokenOut,\n        ...topByTVLUsingTokenInSecondHops,\n        ...topByTVLUsingTokenOutSecondHops,\n    ])\n        .compact()\n        .uniqBy((pool) => pool.id)\n        .value();\n    const tokenAddresses = _(subgraphPools)\n        .flatMap((subgraphPool) => [subgraphPool.token0.id, subgraphPool.token1.id])\n        .compact()\n        .uniq()\n        .value();\n    log.info(`Getting the ${tokenAddresses.length} tokens within the ${subgraphPools.length} V3 pools we are considering`);\n    const tokenAccessor = await tokenProvider.getTokens(tokenAddresses, {\n        blockNumber,\n    });\n    const printV3SubgraphPool = (s) => {\n        var _a, _b, _c, _d;\n        return `${(_b = (_a = tokenAccessor.getTokenByAddress(s.token0.id)) === null || _a === void 0 ? void 0 : _a.symbol) !== null && _b !== void 0 ? _b : s.token0.id}/${(_d = (_c = tokenAccessor.getTokenByAddress(s.token1.id)) === null || _c === void 0 ? void 0 : _c.symbol) !== null && _d !== void 0 ? _d : s.token1.id}/${s.feeTier}`;\n    };\n    log.info({\n        topByBaseWithTokenIn: topByBaseWithTokenIn.map(printV3SubgraphPool),\n        topByBaseWithTokenOut: topByBaseWithTokenOut.map(printV3SubgraphPool),\n        topByTVL: topByTVL.map(printV3SubgraphPool),\n        topByTVLUsingTokenIn: topByTVLUsingTokenIn.map(printV3SubgraphPool),\n        topByTVLUsingTokenOut: topByTVLUsingTokenOut.map(printV3SubgraphPool),\n        topByTVLUsingTokenInSecondHops: topByTVLUsingTokenInSecondHops.map(printV3SubgraphPool),\n        topByTVLUsingTokenOutSecondHops: topByTVLUsingTokenOutSecondHops.map(printV3SubgraphPool),\n        top2DirectSwap: top2DirectSwapPool.map(printV3SubgraphPool),\n        top2EthQuotePool: top2EthQuoteTokenPool.map(printV3SubgraphPool),\n    }, `V3 Candidate Pools`);\n    const tokenPairsRaw = _.map(subgraphPools, (subgraphPool) => {\n        const tokenA = tokenAccessor.getTokenByAddress(subgraphPool.token0.id);\n        const tokenB = tokenAccessor.getTokenByAddress(subgraphPool.token1.id);\n        let fee;\n        try {\n            fee = parseFeeAmount(subgraphPool.feeTier);\n        }\n        catch (err) {\n            log.info({ subgraphPool }, `Dropping candidate pool for ${subgraphPool.token0.id}/${subgraphPool.token1.id}/${subgraphPool.feeTier} because fee tier not supported`);\n            return undefined;\n        }\n        if (!tokenA || !tokenB) {\n            log.info(`Dropping candidate pool for ${subgraphPool.token0.id}/${subgraphPool.token1.id}/${fee} because ${tokenA ? subgraphPool.token1.id : subgraphPool.token0.id} not found by token provider`);\n            return undefined;\n        }\n        return [tokenA, tokenB, fee];\n    });\n    const tokenPairs = _.compact(tokenPairsRaw);\n    const beforePoolsLoad = Date.now();\n    const poolAccessor = await poolProvider.getPools(tokenPairs);\n    metric.putMetric('V3PoolsLoad', Date.now() - beforePoolsLoad, MetricLoggerUnit.Milliseconds);\n    const poolsBySelection = {\n        protocol: Protocol.V3,\n        selections: {\n            topByBaseWithTokenIn,\n            topByBaseWithTokenOut,\n            topByDirectSwapPool: top2DirectSwapPool,\n            topByEthQuoteTokenPool: top2EthQuoteTokenPool,\n            topByTVL,\n            topByTVLUsingTokenIn,\n            topByTVLUsingTokenOut,\n            topByTVLUsingTokenInSecondHops,\n            topByTVLUsingTokenOutSecondHops,\n        },\n    };\n    return { poolAccessor, candidatePools: poolsBySelection };\n}\nexport async function getV2CandidatePools({ tokenIn, tokenOut, routeType, routingConfig, subgraphProvider, tokenProvider, poolProvider, blockedTokenListProvider, chainId, }) {\n    var _a;\n    const { blockNumber, v2PoolSelection: { topN, topNDirectSwaps, topNTokenInOut, topNSecondHop, topNWithEachBaseToken, topNWithBaseToken, }, } = routingConfig;\n    const tokenInAddress = tokenIn.address.toLowerCase();\n    const tokenOutAddress = tokenOut.address.toLowerCase();\n    const beforeSubgraphPools = Date.now();\n    const allPoolsRaw = await subgraphProvider.getPools(tokenIn, tokenOut, {\n        blockNumber,\n    });\n    const allPools = _.map(allPoolsRaw, (pool) => {\n        return {\n            ...pool,\n            token0: {\n                ...pool.token0,\n                id: pool.token0.id.toLowerCase(),\n            },\n            token1: {\n                ...pool.token1,\n                id: pool.token1.id.toLowerCase(),\n            },\n        };\n    });\n    metric.putMetric('V2SubgraphPoolsLoad', Date.now() - beforeSubgraphPools, MetricLoggerUnit.Milliseconds);\n    // Only consider pools where neither tokens are in the blocked token list.\n    let filteredPools = allPools;\n    if (blockedTokenListProvider) {\n        filteredPools = [];\n        for (const pool of allPools) {\n            const token0InBlocklist = await blockedTokenListProvider.getTokenByAddress(pool.token0.id);\n            const token1InBlocklist = await blockedTokenListProvider.getTokenByAddress(pool.token1.id);\n            if (token0InBlocklist || token1InBlocklist) {\n                continue;\n            }\n            filteredPools.push(pool);\n        }\n    }\n    const subgraphPoolsSorted = _(filteredPools)\n        .sortBy((tokenListPool) => -tokenListPool.reserve)\n        .value();\n    log.info(`After filtering blocked tokens went from ${allPools.length} to ${subgraphPoolsSorted.length}.`);\n    const poolAddressesSoFar = new Set();\n    const addToAddressSet = (pools) => {\n        _(pools)\n            .map((pool) => pool.id)\n            .forEach((poolAddress) => poolAddressesSoFar.add(poolAddress));\n    };\n    const baseTokens = (_a = baseTokensByChain[chainId]) !== null && _a !== void 0 ? _a : [];\n    const topByBaseWithTokenIn = _(baseTokens)\n        .flatMap((token) => {\n        return _(subgraphPoolsSorted)\n            .filter((subgraphPool) => {\n            const tokenAddress = token.address.toLowerCase();\n            return ((subgraphPool.token0.id == tokenAddress &&\n                subgraphPool.token1.id == tokenInAddress) ||\n                (subgraphPool.token1.id == tokenAddress &&\n                    subgraphPool.token0.id == tokenInAddress));\n        })\n            .sortBy((tokenListPool) => -tokenListPool.reserve)\n            .slice(0, topNWithEachBaseToken)\n            .value();\n    })\n        .sortBy((tokenListPool) => -tokenListPool.reserve)\n        .slice(0, topNWithBaseToken)\n        .value();\n    const topByBaseWithTokenOut = _(baseTokens)\n        .flatMap((token) => {\n        return _(subgraphPoolsSorted)\n            .filter((subgraphPool) => {\n            const tokenAddress = token.address.toLowerCase();\n            return ((subgraphPool.token0.id == tokenAddress &&\n                subgraphPool.token1.id == tokenOutAddress) ||\n                (subgraphPool.token1.id == tokenAddress &&\n                    subgraphPool.token0.id == tokenOutAddress));\n        })\n            .sortBy((tokenListPool) => -tokenListPool.reserve)\n            .slice(0, topNWithEachBaseToken)\n            .value();\n    })\n        .sortBy((tokenListPool) => -tokenListPool.reserve)\n        .slice(0, topNWithBaseToken)\n        .value();\n    // Always add the direct swap pool into the mix regardless of if it exists in the subgraph pool list.\n    // Ensures that new pools can be swapped on immediately, and that if a pool was filtered out of the\n    // subgraph query for some reason (e.g. trackedReserveETH was 0), then we still consider it.\n    let topByDirectSwapPool = [];\n    if (topNDirectSwaps != 0) {\n        const { token0, token1, poolAddress } = poolProvider.getPoolAddress(tokenIn, tokenOut);\n        topByDirectSwapPool = [\n            {\n                id: poolAddress,\n                token0: {\n                    id: token0.address,\n                },\n                token1: {\n                    id: token1.address,\n                },\n                supply: 10000,\n                reserve: 10000, // Not used. Set to arbitrary number.\n            },\n        ];\n    }\n    addToAddressSet(topByDirectSwapPool);\n    const wethAddress = WRAPPED_NATIVE_CURRENCY[chainId].address;\n    // Main reason we need this is for gas estimates, only needed if token out is not ETH.\n    // We don't check the seen address set because if we've already added pools for getting ETH quotes\n    // theres no need to add more.\n    // Note: we do not need to check other native currencies for the V2 Protocol\n    let topByEthQuoteTokenPool = [];\n    if (tokenOut.symbol != 'WETH' &&\n        tokenOut.symbol != 'WETH9' &&\n        tokenOut.symbol != 'ETH') {\n        topByEthQuoteTokenPool = _(subgraphPoolsSorted)\n            .filter((subgraphPool) => {\n            if (routeType == TradeType.EXACT_INPUT) {\n                return ((subgraphPool.token0.id == wethAddress &&\n                    subgraphPool.token1.id == tokenOutAddress) ||\n                    (subgraphPool.token1.id == wethAddress &&\n                        subgraphPool.token0.id == tokenOutAddress));\n            }\n            else {\n                return ((subgraphPool.token0.id == wethAddress &&\n                    subgraphPool.token1.id == tokenInAddress) ||\n                    (subgraphPool.token1.id == wethAddress &&\n                        subgraphPool.token0.id == tokenInAddress));\n            }\n        })\n            .slice(0, 1)\n            .value();\n    }\n    addToAddressSet(topByEthQuoteTokenPool);\n    const topByTVL = _(subgraphPoolsSorted)\n        .filter((subgraphPool) => {\n        return !poolAddressesSoFar.has(subgraphPool.id);\n    })\n        .slice(0, topN)\n        .value();\n    addToAddressSet(topByTVL);\n    const topByTVLUsingTokenIn = _(subgraphPoolsSorted)\n        .filter((subgraphPool) => {\n        return (!poolAddressesSoFar.has(subgraphPool.id) &&\n            (subgraphPool.token0.id == tokenInAddress ||\n                subgraphPool.token1.id == tokenInAddress));\n    })\n        .slice(0, topNTokenInOut)\n        .value();\n    addToAddressSet(topByTVLUsingTokenIn);\n    const topByTVLUsingTokenOut = _(subgraphPoolsSorted)\n        .filter((subgraphPool) => {\n        return (!poolAddressesSoFar.has(subgraphPool.id) &&\n            (subgraphPool.token0.id == tokenOutAddress ||\n                subgraphPool.token1.id == tokenOutAddress));\n    })\n        .slice(0, topNTokenInOut)\n        .value();\n    addToAddressSet(topByTVLUsingTokenOut);\n    const topByTVLUsingTokenInSecondHops = _(topByTVLUsingTokenIn)\n        .map((subgraphPool) => {\n        return tokenInAddress == subgraphPool.token0.id\n            ? subgraphPool.token1.id\n            : subgraphPool.token0.id;\n    })\n        .flatMap((secondHopId) => {\n        return _(subgraphPoolsSorted)\n            .filter((subgraphPool) => {\n            return (!poolAddressesSoFar.has(subgraphPool.id) &&\n                (subgraphPool.token0.id == secondHopId ||\n                    subgraphPool.token1.id == secondHopId));\n        })\n            .slice(0, topNSecondHop)\n            .value();\n    })\n        .uniqBy((pool) => pool.id)\n        .sortBy((tokenListPool) => -tokenListPool.reserve)\n        .slice(0, topNSecondHop)\n        .value();\n    addToAddressSet(topByTVLUsingTokenInSecondHops);\n    const topByTVLUsingTokenOutSecondHops = _(topByTVLUsingTokenOut)\n        .map((subgraphPool) => {\n        return tokenOutAddress == subgraphPool.token0.id\n            ? subgraphPool.token1.id\n            : subgraphPool.token0.id;\n    })\n        .flatMap((secondHopId) => {\n        return _(subgraphPoolsSorted)\n            .filter((subgraphPool) => {\n            return (!poolAddressesSoFar.has(subgraphPool.id) &&\n                (subgraphPool.token0.id == secondHopId ||\n                    subgraphPool.token1.id == secondHopId));\n        })\n            .slice(0, topNSecondHop)\n            .value();\n    })\n        .uniqBy((pool) => pool.id)\n        .sortBy((tokenListPool) => -tokenListPool.reserve)\n        .slice(0, topNSecondHop)\n        .value();\n    addToAddressSet(topByTVLUsingTokenOutSecondHops);\n    const subgraphPools = _([\n        ...topByBaseWithTokenIn,\n        ...topByBaseWithTokenOut,\n        ...topByDirectSwapPool,\n        ...topByEthQuoteTokenPool,\n        ...topByTVL,\n        ...topByTVLUsingTokenIn,\n        ...topByTVLUsingTokenOut,\n        ...topByTVLUsingTokenInSecondHops,\n        ...topByTVLUsingTokenOutSecondHops,\n    ])\n        .compact()\n        .uniqBy((pool) => pool.id)\n        .value();\n    const tokenAddresses = _(subgraphPools)\n        .flatMap((subgraphPool) => [subgraphPool.token0.id, subgraphPool.token1.id])\n        .compact()\n        .uniq()\n        .value();\n    log.info(`Getting the ${tokenAddresses.length} tokens within the ${subgraphPools.length} V2 pools we are considering`);\n    const tokenAccessor = await tokenProvider.getTokens(tokenAddresses, {\n        blockNumber,\n    });\n    const printV2SubgraphPool = (s) => {\n        var _a, _b, _c, _d;\n        return `${(_b = (_a = tokenAccessor.getTokenByAddress(s.token0.id)) === null || _a === void 0 ? void 0 : _a.symbol) !== null && _b !== void 0 ? _b : s.token0.id}/${(_d = (_c = tokenAccessor.getTokenByAddress(s.token1.id)) === null || _c === void 0 ? void 0 : _c.symbol) !== null && _d !== void 0 ? _d : s.token1.id}`;\n    };\n    log.info({\n        topByBaseWithTokenIn: topByBaseWithTokenIn.map(printV2SubgraphPool),\n        topByBaseWithTokenOut: topByBaseWithTokenOut.map(printV2SubgraphPool),\n        topByTVL: topByTVL.map(printV2SubgraphPool),\n        topByTVLUsingTokenIn: topByTVLUsingTokenIn.map(printV2SubgraphPool),\n        topByTVLUsingTokenOut: topByTVLUsingTokenOut.map(printV2SubgraphPool),\n        topByTVLUsingTokenInSecondHops: topByTVLUsingTokenInSecondHops.map(printV2SubgraphPool),\n        topByTVLUsingTokenOutSecondHops: topByTVLUsingTokenOutSecondHops.map(printV2SubgraphPool),\n        top2DirectSwap: topByDirectSwapPool.map(printV2SubgraphPool),\n        top2EthQuotePool: topByEthQuoteTokenPool.map(printV2SubgraphPool),\n    }, `V2 Candidate pools`);\n    const tokenPairsRaw = _.map(subgraphPools, (subgraphPool) => {\n        const tokenA = tokenAccessor.getTokenByAddress(subgraphPool.token0.id);\n        const tokenB = tokenAccessor.getTokenByAddress(subgraphPool.token1.id);\n        if (!tokenA || !tokenB) {\n            log.info(`Dropping candidate pool for ${subgraphPool.token0.id}/${subgraphPool.token1.id}`);\n            return undefined;\n        }\n        return [tokenA, tokenB];\n    });\n    const tokenPairs = _.compact(tokenPairsRaw);\n    const beforePoolsLoad = Date.now();\n    const poolAccessor = await poolProvider.getPools(tokenPairs, { blockNumber });\n    metric.putMetric('V2PoolsLoad', Date.now() - beforePoolsLoad, MetricLoggerUnit.Milliseconds);\n    const poolsBySelection = {\n        protocol: Protocol.V2,\n        selections: {\n            topByBaseWithTokenIn,\n            topByBaseWithTokenOut,\n            topByDirectSwapPool,\n            topByEthQuoteTokenPool: topByEthQuoteTokenPool,\n            topByTVL,\n            topByTVLUsingTokenIn,\n            topByTVLUsingTokenOut,\n            topByTVLUsingTokenInSecondHops,\n            topByTVLUsingTokenOutSecondHops,\n        },\n    };\n    return { poolAccessor, candidatePools: poolsBySelection };\n}\n//# sourceMappingURL=data:application/json;base64,"]},"metadata":{},"sourceType":"module"}