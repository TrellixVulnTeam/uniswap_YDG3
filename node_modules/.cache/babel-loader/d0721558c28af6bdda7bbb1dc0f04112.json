{"ast":null,"code":"import { log, setGlobalLogger } from './log';\nexport var MetricLoggerUnit;\n\n(function (MetricLoggerUnit) {\n  MetricLoggerUnit[\"Seconds\"] = \"Seconds\";\n  MetricLoggerUnit[\"Microseconds\"] = \"Microseconds\";\n  MetricLoggerUnit[\"Milliseconds\"] = \"Milliseconds\";\n  MetricLoggerUnit[\"Bytes\"] = \"Bytes\";\n  MetricLoggerUnit[\"Kilobytes\"] = \"Kilobytes\";\n  MetricLoggerUnit[\"Megabytes\"] = \"Megabytes\";\n  MetricLoggerUnit[\"Gigabytes\"] = \"Gigabytes\";\n  MetricLoggerUnit[\"Terabytes\"] = \"Terabytes\";\n  MetricLoggerUnit[\"Bits\"] = \"Bits\";\n  MetricLoggerUnit[\"Kilobits\"] = \"Kilobits\";\n  MetricLoggerUnit[\"Megabits\"] = \"Megabits\";\n  MetricLoggerUnit[\"Gigabits\"] = \"Gigabits\";\n  MetricLoggerUnit[\"Terabits\"] = \"Terabits\";\n  MetricLoggerUnit[\"Percent\"] = \"Percent\";\n  MetricLoggerUnit[\"Count\"] = \"Count\";\n  MetricLoggerUnit[\"BytesPerSecond\"] = \"Bytes/Second\";\n  MetricLoggerUnit[\"KilobytesPerSecond\"] = \"Kilobytes/Second\";\n  MetricLoggerUnit[\"MegabytesPerSecond\"] = \"Megabytes/Second\";\n  MetricLoggerUnit[\"GigabytesPerSecond\"] = \"Gigabytes/Second\";\n  MetricLoggerUnit[\"TerabytesPerSecond\"] = \"Terabytes/Second\";\n  MetricLoggerUnit[\"BitsPerSecond\"] = \"Bits/Second\";\n  MetricLoggerUnit[\"KilobitsPerSecond\"] = \"Kilobits/Second\";\n  MetricLoggerUnit[\"MegabitsPerSecond\"] = \"Megabits/Second\";\n  MetricLoggerUnit[\"GigabitsPerSecond\"] = \"Gigabits/Second\";\n  MetricLoggerUnit[\"TerabitsPerSecond\"] = \"Terabits/Second\";\n  MetricLoggerUnit[\"CountPerSecond\"] = \"Count/Second\";\n  MetricLoggerUnit[\"None\"] = \"None\";\n})(MetricLoggerUnit || (MetricLoggerUnit = {}));\n\nexport class IMetric {}\nexport class MetricLogger extends IMetric {\n  constructor() {\n    super();\n  }\n\n  putDimensions(dimensions) {\n    setGlobalLogger(log.child(dimensions));\n  }\n\n  putMetric(key, value, unit) {\n    log.info({\n      key,\n      value,\n      unit\n    }, `[Metric]: ${key}: ${value} | ${unit ? unit : ''}`);\n  }\n\n}\nexport let metric = new MetricLogger();\nexport const setGlobalMetric = _metric => {\n  metric = _metric;\n};","map":{"version":3,"sources":["../../../../src/util/metric.ts"],"names":[],"mappings":"AAAA,SAAS,GAAT,EAAc,eAAd,QAAqC,OAArC;AAEA,OAAA,IAAY,gBAAZ;;AAAA,CAAA,UAAY,gBAAZ,EAA4B;AAC1B,EAAA,gBAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACA,EAAA,gBAAA,CAAA,cAAA,CAAA,GAAA,cAAA;AACA,EAAA,gBAAA,CAAA,cAAA,CAAA,GAAA,cAAA;AACA,EAAA,gBAAA,CAAA,OAAA,CAAA,GAAA,OAAA;AACA,EAAA,gBAAA,CAAA,WAAA,CAAA,GAAA,WAAA;AACA,EAAA,gBAAA,CAAA,WAAA,CAAA,GAAA,WAAA;AACA,EAAA,gBAAA,CAAA,WAAA,CAAA,GAAA,WAAA;AACA,EAAA,gBAAA,CAAA,WAAA,CAAA,GAAA,WAAA;AACA,EAAA,gBAAA,CAAA,MAAA,CAAA,GAAA,MAAA;AACA,EAAA,gBAAA,CAAA,UAAA,CAAA,GAAA,UAAA;AACA,EAAA,gBAAA,CAAA,UAAA,CAAA,GAAA,UAAA;AACA,EAAA,gBAAA,CAAA,UAAA,CAAA,GAAA,UAAA;AACA,EAAA,gBAAA,CAAA,UAAA,CAAA,GAAA,UAAA;AACA,EAAA,gBAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACA,EAAA,gBAAA,CAAA,OAAA,CAAA,GAAA,OAAA;AACA,EAAA,gBAAA,CAAA,gBAAA,CAAA,GAAA,cAAA;AACA,EAAA,gBAAA,CAAA,oBAAA,CAAA,GAAA,kBAAA;AACA,EAAA,gBAAA,CAAA,oBAAA,CAAA,GAAA,kBAAA;AACA,EAAA,gBAAA,CAAA,oBAAA,CAAA,GAAA,kBAAA;AACA,EAAA,gBAAA,CAAA,oBAAA,CAAA,GAAA,kBAAA;AACA,EAAA,gBAAA,CAAA,eAAA,CAAA,GAAA,aAAA;AACA,EAAA,gBAAA,CAAA,mBAAA,CAAA,GAAA,iBAAA;AACA,EAAA,gBAAA,CAAA,mBAAA,CAAA,GAAA,iBAAA;AACA,EAAA,gBAAA,CAAA,mBAAA,CAAA,GAAA,iBAAA;AACA,EAAA,gBAAA,CAAA,mBAAA,CAAA,GAAA,iBAAA;AACA,EAAA,gBAAA,CAAA,gBAAA,CAAA,GAAA,cAAA;AACA,EAAA,gBAAA,CAAA,MAAA,CAAA,GAAA,MAAA;AACD,CA5BD,EAAY,gBAAgB,KAAhB,gBAAgB,GAAA,EAAA,CAA5B;;AA8BA,OAAM,MAAgB,OAAhB,CAAuB;AAK7B,OAAM,MAAO,YAAP,SAA4B,OAA5B,CAAmC;AACvC,EAAA,WAAA,GAAA;AACE;AACD;;AAEM,EAAA,aAAa,CAAC,UAAD,EAAmC;AACrD,IAAA,eAAe,CAAC,GAAG,CAAC,KAAJ,CAAU,UAAV,CAAD,CAAf;AACD;;AAEM,EAAA,SAAS,CAAC,GAAD,EAAc,KAAd,EAA6B,IAA7B,EAAoD;AAClE,IAAA,GAAG,CAAC,IAAJ,CACE;AAAE,MAAA,GAAF;AAAO,MAAA,KAAP;AAAc,MAAA;AAAd,KADF,EAEE,aAAa,GAAG,KAAK,KAAK,MAAM,IAAI,GAAG,IAAH,GAAU,EAAE,EAFlD;AAID;;AAdsC;AAiBzC,OAAO,IAAI,MAAM,GAAY,IAAI,YAAJ,EAAtB;AAEP,OAAO,MAAM,eAAe,GAAI,OAAD,IAAqB;AAClD,EAAA,MAAM,GAAG,OAAT;AACD,CAFM","sourceRoot":"","sourcesContent":["import { log, setGlobalLogger } from './log';\nexport var MetricLoggerUnit;\n(function (MetricLoggerUnit) {\n    MetricLoggerUnit[\"Seconds\"] = \"Seconds\";\n    MetricLoggerUnit[\"Microseconds\"] = \"Microseconds\";\n    MetricLoggerUnit[\"Milliseconds\"] = \"Milliseconds\";\n    MetricLoggerUnit[\"Bytes\"] = \"Bytes\";\n    MetricLoggerUnit[\"Kilobytes\"] = \"Kilobytes\";\n    MetricLoggerUnit[\"Megabytes\"] = \"Megabytes\";\n    MetricLoggerUnit[\"Gigabytes\"] = \"Gigabytes\";\n    MetricLoggerUnit[\"Terabytes\"] = \"Terabytes\";\n    MetricLoggerUnit[\"Bits\"] = \"Bits\";\n    MetricLoggerUnit[\"Kilobits\"] = \"Kilobits\";\n    MetricLoggerUnit[\"Megabits\"] = \"Megabits\";\n    MetricLoggerUnit[\"Gigabits\"] = \"Gigabits\";\n    MetricLoggerUnit[\"Terabits\"] = \"Terabits\";\n    MetricLoggerUnit[\"Percent\"] = \"Percent\";\n    MetricLoggerUnit[\"Count\"] = \"Count\";\n    MetricLoggerUnit[\"BytesPerSecond\"] = \"Bytes/Second\";\n    MetricLoggerUnit[\"KilobytesPerSecond\"] = \"Kilobytes/Second\";\n    MetricLoggerUnit[\"MegabytesPerSecond\"] = \"Megabytes/Second\";\n    MetricLoggerUnit[\"GigabytesPerSecond\"] = \"Gigabytes/Second\";\n    MetricLoggerUnit[\"TerabytesPerSecond\"] = \"Terabytes/Second\";\n    MetricLoggerUnit[\"BitsPerSecond\"] = \"Bits/Second\";\n    MetricLoggerUnit[\"KilobitsPerSecond\"] = \"Kilobits/Second\";\n    MetricLoggerUnit[\"MegabitsPerSecond\"] = \"Megabits/Second\";\n    MetricLoggerUnit[\"GigabitsPerSecond\"] = \"Gigabits/Second\";\n    MetricLoggerUnit[\"TerabitsPerSecond\"] = \"Terabits/Second\";\n    MetricLoggerUnit[\"CountPerSecond\"] = \"Count/Second\";\n    MetricLoggerUnit[\"None\"] = \"None\";\n})(MetricLoggerUnit || (MetricLoggerUnit = {}));\nexport class IMetric {\n}\nexport class MetricLogger extends IMetric {\n    constructor() {\n        super();\n    }\n    putDimensions(dimensions) {\n        setGlobalLogger(log.child(dimensions));\n    }\n    putMetric(key, value, unit) {\n        log.info({ key, value, unit }, `[Metric]: ${key}: ${value} | ${unit ? unit : ''}`);\n    }\n}\nexport let metric = new MetricLogger();\nexport const setGlobalMetric = (_metric) => {\n    metric = _metric;\n};\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0cmljLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3V0aWwvbWV0cmljLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxHQUFHLEVBQUUsZUFBZSxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBRTdDLE1BQU0sQ0FBTixJQUFZLGdCQTRCWDtBQTVCRCxXQUFZLGdCQUFnQjtJQUMxQix1Q0FBbUIsQ0FBQTtJQUNuQixpREFBNkIsQ0FBQTtJQUM3QixpREFBNkIsQ0FBQTtJQUM3QixtQ0FBZSxDQUFBO0lBQ2YsMkNBQXVCLENBQUE7SUFDdkIsMkNBQXVCLENBQUE7SUFDdkIsMkNBQXVCLENBQUE7SUFDdkIsMkNBQXVCLENBQUE7SUFDdkIsaUNBQWEsQ0FBQTtJQUNiLHlDQUFxQixDQUFBO0lBQ3JCLHlDQUFxQixDQUFBO0lBQ3JCLHlDQUFxQixDQUFBO0lBQ3JCLHlDQUFxQixDQUFBO0lBQ3JCLHVDQUFtQixDQUFBO0lBQ25CLG1DQUFlLENBQUE7SUFDZixtREFBK0IsQ0FBQTtJQUMvQiwyREFBdUMsQ0FBQTtJQUN2QywyREFBdUMsQ0FBQTtJQUN2QywyREFBdUMsQ0FBQTtJQUN2QywyREFBdUMsQ0FBQTtJQUN2QyxpREFBNkIsQ0FBQTtJQUM3Qix5REFBcUMsQ0FBQTtJQUNyQyx5REFBcUMsQ0FBQTtJQUNyQyx5REFBcUMsQ0FBQTtJQUNyQyx5REFBcUMsQ0FBQTtJQUNyQyxtREFBK0IsQ0FBQTtJQUMvQixpQ0FBYSxDQUFBO0FBQ2YsQ0FBQyxFQTVCVyxnQkFBZ0IsS0FBaEIsZ0JBQWdCLFFBNEIzQjtBQUVELE1BQU0sT0FBZ0IsT0FBTztDQUc1QjtBQUVELE1BQU0sT0FBTyxZQUFhLFNBQVEsT0FBTztJQUN2QztRQUNFLEtBQUssRUFBRSxDQUFDO0lBQ1YsQ0FBQztJQUVNLGFBQWEsQ0FBQyxVQUFrQztRQUNyRCxlQUFlLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFTSxTQUFTLENBQUMsR0FBVyxFQUFFLEtBQWEsRUFBRSxJQUF1QjtRQUNsRSxHQUFHLENBQUMsSUFBSSxDQUNOLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsRUFDcEIsYUFBYSxHQUFHLEtBQUssS0FBSyxNQUFNLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FDbkQsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQUVELE1BQU0sQ0FBQyxJQUFJLE1BQU0sR0FBWSxJQUFJLFlBQVksRUFBRSxDQUFDO0FBRWhELE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxDQUFDLE9BQWdCLEVBQUUsRUFBRTtJQUNsRCxNQUFNLEdBQUcsT0FBTyxDQUFDO0FBQ25CLENBQUMsQ0FBQyJ9"]},"metadata":{},"sourceType":"module"}