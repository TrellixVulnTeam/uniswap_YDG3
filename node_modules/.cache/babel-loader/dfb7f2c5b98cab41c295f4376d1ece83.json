{"ast":null,"code":"import _objectSpread from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{createReducer}from'@reduxjs/toolkit';import{getVersionUpgrade,VersionUpgrade}from'@uniswap/token-lists';import{DEFAULT_ACTIVE_LIST_URLS}from'../../constants/lists';import{DEFAULT_LIST_OF_LISTS}from'../../constants/lists';import{updateVersion}from'../global/actions';import{acceptListUpdate,addList,disableList,enableList,fetchTokenList,removeList}from'./actions';var NEW_LIST_STATE={error:null,current:null,loadingRequestId:null,pendingUpdate:null};var initialState={lastInitializedDefaultListOfLists:DEFAULT_LIST_OF_LISTS,byUrl:_objectSpread({},DEFAULT_LIST_OF_LISTS.reduce(function(memo,listUrl){memo[listUrl]=NEW_LIST_STATE;return memo;},{})),activeListUrls:DEFAULT_ACTIVE_LIST_URLS};export default createReducer(initialState,function(builder){return builder.addCase(fetchTokenList.pending,function(state,_ref){var _state$byUrl$url$curr,_state$byUrl$url,_state$byUrl$url$pend,_state$byUrl$url2;var _ref$payload=_ref.payload,requestId=_ref$payload.requestId,url=_ref$payload.url;var current=(_state$byUrl$url$curr=(_state$byUrl$url=state.byUrl[url])===null||_state$byUrl$url===void 0?void 0:_state$byUrl$url.current)!==null&&_state$byUrl$url$curr!==void 0?_state$byUrl$url$curr:null;var pendingUpdate=(_state$byUrl$url$pend=(_state$byUrl$url2=state.byUrl[url])===null||_state$byUrl$url2===void 0?void 0:_state$byUrl$url2.pendingUpdate)!==null&&_state$byUrl$url$pend!==void 0?_state$byUrl$url$pend:null;state.byUrl[url]={current:current,pendingUpdate:pendingUpdate,loadingRequestId:requestId,error:null};}).addCase(fetchTokenList.fulfilled,function(state,_ref2){var _state$byUrl$url3,_state$byUrl$url4;var _ref2$payload=_ref2.payload,requestId=_ref2$payload.requestId,tokenList=_ref2$payload.tokenList,url=_ref2$payload.url;var current=(_state$byUrl$url3=state.byUrl[url])===null||_state$byUrl$url3===void 0?void 0:_state$byUrl$url3.current;var loadingRequestId=(_state$byUrl$url4=state.byUrl[url])===null||_state$byUrl$url4===void 0?void 0:_state$byUrl$url4.loadingRequestId;// no-op if update does nothing\nif(current){var upgradeType=getVersionUpgrade(current.version,tokenList.version);if(upgradeType===VersionUpgrade.NONE)return;if(loadingRequestId===null||loadingRequestId===requestId){state.byUrl[url]={current:current,pendingUpdate:tokenList,loadingRequestId:null,error:null};}}else{// activate if on default active\nif(DEFAULT_ACTIVE_LIST_URLS.includes(url)){var _state$activeListUrls;(_state$activeListUrls=state.activeListUrls)===null||_state$activeListUrls===void 0?void 0:_state$activeListUrls.push(url);}state.byUrl[url]={current:tokenList,pendingUpdate:null,loadingRequestId:null,error:null};}}).addCase(fetchTokenList.rejected,function(state,_ref3){var _state$byUrl$url5;var _ref3$payload=_ref3.payload,url=_ref3$payload.url,requestId=_ref3$payload.requestId,errorMessage=_ref3$payload.errorMessage;if(((_state$byUrl$url5=state.byUrl[url])===null||_state$byUrl$url5===void 0?void 0:_state$byUrl$url5.loadingRequestId)!==requestId){// no-op since it's not the latest request\nreturn;}state.byUrl[url]={current:state.byUrl[url].current?state.byUrl[url].current:null,pendingUpdate:null,loadingRequestId:null,error:errorMessage};}).addCase(addList,function(state,_ref4){var url=_ref4.payload;if(!state.byUrl[url]){state.byUrl[url]=NEW_LIST_STATE;}}).addCase(removeList,function(state,_ref5){var url=_ref5.payload;if(state.byUrl[url]){delete state.byUrl[url];}// remove list from active urls if needed\nif(state.activeListUrls&&state.activeListUrls.includes(url)){state.activeListUrls=state.activeListUrls.filter(function(u){return u!==url;});}}).addCase(enableList,function(state,_ref6){var url=_ref6.payload;if(!state.byUrl[url]){state.byUrl[url]=NEW_LIST_STATE;}if(state.activeListUrls&&!state.activeListUrls.includes(url)){state.activeListUrls.push(url);}if(!state.activeListUrls){state.activeListUrls=[url];}}).addCase(disableList,function(state,_ref7){var url=_ref7.payload;if(state.activeListUrls&&state.activeListUrls.includes(url)){state.activeListUrls=state.activeListUrls.filter(function(u){return u!==url;});}}).addCase(acceptListUpdate,function(state,_ref8){var _state$byUrl$url6;var url=_ref8.payload;if(!((_state$byUrl$url6=state.byUrl[url])===null||_state$byUrl$url6===void 0?void 0:_state$byUrl$url6.pendingUpdate)){throw new Error('accept list update called without pending update');}state.byUrl[url]=_objectSpread(_objectSpread({},state.byUrl[url]),{},{current:state.byUrl[url].pendingUpdate,pendingUpdate:null});}).addCase(updateVersion,function(state){// state loaded from localStorage, but new lists have never been initialized\nif(!state.lastInitializedDefaultListOfLists){state.byUrl=initialState.byUrl;state.activeListUrls=initialState.activeListUrls;}else if(state.lastInitializedDefaultListOfLists){var lastInitializedSet=state.lastInitializedDefaultListOfLists.reduce(function(s,l){return s.add(l);},new Set());var newListOfListsSet=DEFAULT_LIST_OF_LISTS.reduce(function(s,l){return s.add(l);},new Set());DEFAULT_LIST_OF_LISTS.forEach(function(listUrl){if(!lastInitializedSet.has(listUrl)){state.byUrl[listUrl]=NEW_LIST_STATE;}});state.lastInitializedDefaultListOfLists.forEach(function(listUrl){if(!newListOfListsSet.has(listUrl)){delete state.byUrl[listUrl];}});}state.lastInitializedDefaultListOfLists=DEFAULT_LIST_OF_LISTS;// if no active lists, activate defaults\nif(!state.activeListUrls){state.activeListUrls=DEFAULT_ACTIVE_LIST_URLS;// for each list on default list, initialize if needed\nDEFAULT_ACTIVE_LIST_URLS.map(function(listUrl){if(!state.byUrl[listUrl]){state.byUrl[listUrl]=NEW_LIST_STATE;}return true;});}});});","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/state/lists/reducer.ts"],"names":["createReducer","getVersionUpgrade","VersionUpgrade","DEFAULT_ACTIVE_LIST_URLS","DEFAULT_LIST_OF_LISTS","updateVersion","acceptListUpdate","addList","disableList","enableList","fetchTokenList","removeList","NEW_LIST_STATE","error","current","loadingRequestId","pendingUpdate","initialState","lastInitializedDefaultListOfLists","byUrl","reduce","memo","listUrl","activeListUrls","builder","addCase","pending","state","payload","requestId","url","fulfilled","tokenList","upgradeType","version","NONE","includes","push","rejected","errorMessage","filter","u","Error","lastInitializedSet","s","l","add","Set","newListOfListsSet","forEach","has","map"],"mappings":"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","sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\nimport { getVersionUpgrade, TokenList, VersionUpgrade } from '@uniswap/token-lists'\n\nimport { DEFAULT_ACTIVE_LIST_URLS } from '../../constants/lists'\nimport { DEFAULT_LIST_OF_LISTS } from '../../constants/lists'\nimport { updateVersion } from '../global/actions'\nimport { acceptListUpdate, addList, disableList, enableList, fetchTokenList, removeList } from './actions'\n\nexport interface ListsState {\n  readonly byUrl: {\n    readonly [url: string]: {\n      readonly current: TokenList | null\n      readonly pendingUpdate: TokenList | null\n      readonly loadingRequestId: string | null\n      readonly error: string | null\n    }\n  }\n  // this contains the default list of lists from the last time the updateVersion was called, i.e. the app was reloaded\n  readonly lastInitializedDefaultListOfLists?: string[]\n\n  // currently active lists\n  readonly activeListUrls: string[] | undefined\n}\n\ntype ListState = ListsState['byUrl'][string]\n\nconst NEW_LIST_STATE: ListState = {\n  error: null,\n  current: null,\n  loadingRequestId: null,\n  pendingUpdate: null,\n}\n\ntype Mutable<T> = { -readonly [P in keyof T]: T[P] extends ReadonlyArray<infer U> ? U[] : T[P] }\n\nconst initialState: ListsState = {\n  lastInitializedDefaultListOfLists: DEFAULT_LIST_OF_LISTS,\n  byUrl: {\n    ...DEFAULT_LIST_OF_LISTS.reduce<Mutable<ListsState['byUrl']>>((memo, listUrl) => {\n      memo[listUrl] = NEW_LIST_STATE\n      return memo\n    }, {}),\n  },\n  activeListUrls: DEFAULT_ACTIVE_LIST_URLS,\n}\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(fetchTokenList.pending, (state, { payload: { requestId, url } }) => {\n      const current = state.byUrl[url]?.current ?? null\n      const pendingUpdate = state.byUrl[url]?.pendingUpdate ?? null\n\n      state.byUrl[url] = {\n        current,\n        pendingUpdate,\n        loadingRequestId: requestId,\n        error: null,\n      }\n    })\n    .addCase(fetchTokenList.fulfilled, (state, { payload: { requestId, tokenList, url } }) => {\n      const current = state.byUrl[url]?.current\n      const loadingRequestId = state.byUrl[url]?.loadingRequestId\n\n      // no-op if update does nothing\n      if (current) {\n        const upgradeType = getVersionUpgrade(current.version, tokenList.version)\n\n        if (upgradeType === VersionUpgrade.NONE) return\n        if (loadingRequestId === null || loadingRequestId === requestId) {\n          state.byUrl[url] = {\n            current,\n            pendingUpdate: tokenList,\n            loadingRequestId: null,\n            error: null,\n          }\n        }\n      } else {\n        // activate if on default active\n        if (DEFAULT_ACTIVE_LIST_URLS.includes(url)) {\n          state.activeListUrls?.push(url)\n        }\n\n        state.byUrl[url] = {\n          current: tokenList,\n          pendingUpdate: null,\n          loadingRequestId: null,\n          error: null,\n        }\n      }\n    })\n    .addCase(fetchTokenList.rejected, (state, { payload: { url, requestId, errorMessage } }) => {\n      if (state.byUrl[url]?.loadingRequestId !== requestId) {\n        // no-op since it's not the latest request\n        return\n      }\n\n      state.byUrl[url] = {\n        current: state.byUrl[url].current ? state.byUrl[url].current : null,\n        pendingUpdate: null,\n        loadingRequestId: null,\n        error: errorMessage,\n      }\n    })\n    .addCase(addList, (state, { payload: url }) => {\n      if (!state.byUrl[url]) {\n        state.byUrl[url] = NEW_LIST_STATE\n      }\n    })\n    .addCase(removeList, (state, { payload: url }) => {\n      if (state.byUrl[url]) {\n        delete state.byUrl[url]\n      }\n      // remove list from active urls if needed\n      if (state.activeListUrls && state.activeListUrls.includes(url)) {\n        state.activeListUrls = state.activeListUrls.filter((u) => u !== url)\n      }\n    })\n    .addCase(enableList, (state, { payload: url }) => {\n      if (!state.byUrl[url]) {\n        state.byUrl[url] = NEW_LIST_STATE\n      }\n\n      if (state.activeListUrls && !state.activeListUrls.includes(url)) {\n        state.activeListUrls.push(url)\n      }\n\n      if (!state.activeListUrls) {\n        state.activeListUrls = [url]\n      }\n    })\n    .addCase(disableList, (state, { payload: url }) => {\n      if (state.activeListUrls && state.activeListUrls.includes(url)) {\n        state.activeListUrls = state.activeListUrls.filter((u) => u !== url)\n      }\n    })\n    .addCase(acceptListUpdate, (state, { payload: url }) => {\n      if (!state.byUrl[url]?.pendingUpdate) {\n        throw new Error('accept list update called without pending update')\n      }\n      state.byUrl[url] = {\n        ...state.byUrl[url],\n        current: state.byUrl[url].pendingUpdate,\n        pendingUpdate: null,\n      }\n    })\n    .addCase(updateVersion, (state) => {\n      // state loaded from localStorage, but new lists have never been initialized\n      if (!state.lastInitializedDefaultListOfLists) {\n        state.byUrl = initialState.byUrl\n        state.activeListUrls = initialState.activeListUrls\n      } else if (state.lastInitializedDefaultListOfLists) {\n        const lastInitializedSet = state.lastInitializedDefaultListOfLists.reduce<Set<string>>(\n          (s, l) => s.add(l),\n          new Set()\n        )\n        const newListOfListsSet = DEFAULT_LIST_OF_LISTS.reduce<Set<string>>((s, l) => s.add(l), new Set())\n\n        DEFAULT_LIST_OF_LISTS.forEach((listUrl) => {\n          if (!lastInitializedSet.has(listUrl)) {\n            state.byUrl[listUrl] = NEW_LIST_STATE\n          }\n        })\n\n        state.lastInitializedDefaultListOfLists.forEach((listUrl) => {\n          if (!newListOfListsSet.has(listUrl)) {\n            delete state.byUrl[listUrl]\n          }\n        })\n      }\n\n      state.lastInitializedDefaultListOfLists = DEFAULT_LIST_OF_LISTS\n\n      // if no active lists, activate defaults\n      if (!state.activeListUrls) {\n        state.activeListUrls = DEFAULT_ACTIVE_LIST_URLS\n\n        // for each list on default list, initialize if needed\n        DEFAULT_ACTIVE_LIST_URLS.map((listUrl: string) => {\n          if (!state.byUrl[listUrl]) {\n            state.byUrl[listUrl] = NEW_LIST_STATE\n          }\n          return true\n        })\n      }\n    })\n)\n"]},"metadata":{},"sourceType":"module"}