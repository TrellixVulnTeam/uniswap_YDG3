{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { splitSignature } from '@ethersproject/bytes';\nimport { Trade as V2Trade } from '@uniswap/v2-sdk';\nimport { Trade as V3Trade } from '@uniswap/v3-sdk';\nimport JSBI from 'jsbi';\nimport { useMemo, useState } from 'react';\nimport { SWAP_ROUTER_ADDRESSES, V3_ROUTER_ADDRESS } from '../constants/addresses';\nimport { DAI, UNI, USDC } from '../constants/tokens';\nimport { useSingleCallResult } from '../state/multicall/hooks';\nimport { useEIP2612Contract } from './useContract';\nimport useIsArgentWallet from './useIsArgentWallet';\nimport useTransactionDeadline from './useTransactionDeadline';\nimport { useActiveWeb3React } from './web3';\nvar PermitType; // 20 minutes to submit after signing\n\n(function (PermitType) {\n  PermitType[PermitType[\"AMOUNT\"] = 1] = \"AMOUNT\";\n  PermitType[PermitType[\"ALLOWED\"] = 2] = \"ALLOWED\";\n})(PermitType || (PermitType = {}));\n\nconst PERMIT_VALIDITY_BUFFER = 20 * 60;\n// todo: read this information from extensions on token lists or elsewhere (permit registry?)\nconst PERMITTABLE_TOKENS = {\n  1: {\n    [USDC.address]: {\n      type: PermitType.AMOUNT,\n      name: 'USD Coin',\n      version: '2'\n    },\n    [DAI.address]: {\n      type: PermitType.ALLOWED,\n      name: 'Dai Stablecoin',\n      version: '1'\n    },\n    [UNI[1].address]: {\n      type: PermitType.AMOUNT,\n      name: 'Uniswap'\n    }\n  },\n  4: {\n    '0xc7AD46e0b8a400Bb3C915120d284AafbA8fc4735': {\n      type: PermitType.ALLOWED,\n      name: 'Dai Stablecoin',\n      version: '1'\n    },\n    [UNI[4].address]: {\n      type: PermitType.AMOUNT,\n      name: 'Uniswap'\n    }\n  },\n  3: {\n    [UNI[3].address]: {\n      type: PermitType.AMOUNT,\n      name: 'Uniswap'\n    },\n    '0x07865c6E87B9F70255377e024ace6630C1Eaa37F': {\n      type: PermitType.AMOUNT,\n      name: 'USD Coin',\n      version: '2'\n    }\n  },\n  5: {\n    [UNI[5].address]: {\n      type: PermitType.AMOUNT,\n      name: 'Uniswap'\n    }\n  },\n  42: {\n    [UNI[42].address]: {\n      type: PermitType.AMOUNT,\n      name: 'Uniswap'\n    }\n  }\n};\nexport let UseERC20PermitState;\n\n(function (UseERC20PermitState) {\n  UseERC20PermitState[UseERC20PermitState[\"NOT_APPLICABLE\"] = 0] = \"NOT_APPLICABLE\";\n  UseERC20PermitState[UseERC20PermitState[\"LOADING\"] = 1] = \"LOADING\";\n  UseERC20PermitState[UseERC20PermitState[\"NOT_SIGNED\"] = 2] = \"NOT_SIGNED\";\n  UseERC20PermitState[UseERC20PermitState[\"SIGNED\"] = 3] = \"SIGNED\";\n})(UseERC20PermitState || (UseERC20PermitState = {}));\n\nconst EIP712_DOMAIN_TYPE = [{\n  name: 'name',\n  type: 'string'\n}, {\n  name: 'version',\n  type: 'string'\n}, {\n  name: 'chainId',\n  type: 'uint256'\n}, {\n  name: 'verifyingContract',\n  type: 'address'\n}];\nconst EIP712_DOMAIN_TYPE_NO_VERSION = [{\n  name: 'name',\n  type: 'string'\n}, {\n  name: 'chainId',\n  type: 'uint256'\n}, {\n  name: 'verifyingContract',\n  type: 'address'\n}];\nconst EIP2612_TYPE = [{\n  name: 'owner',\n  type: 'address'\n}, {\n  name: 'spender',\n  type: 'address'\n}, {\n  name: 'value',\n  type: 'uint256'\n}, {\n  name: 'nonce',\n  type: 'uint256'\n}, {\n  name: 'deadline',\n  type: 'uint256'\n}];\nconst PERMIT_ALLOWED_TYPE = [{\n  name: 'holder',\n  type: 'address'\n}, {\n  name: 'spender',\n  type: 'address'\n}, {\n  name: 'nonce',\n  type: 'uint256'\n}, {\n  name: 'expiry',\n  type: 'uint256'\n}, {\n  name: 'allowed',\n  type: 'bool'\n}];\n\nfunction useERC20Permit(currencyAmount, spender, overridePermitInfo) {\n  _s();\n\n  var _currencyAmount$curre, _PERMITTABLE_TOKENS$c;\n\n  const {\n    account,\n    chainId,\n    library\n  } = useActiveWeb3React();\n  const transactionDeadline = useTransactionDeadline();\n  const tokenAddress = (currencyAmount === null || currencyAmount === void 0 ? void 0 : (_currencyAmount$curre = currencyAmount.currency) === null || _currencyAmount$curre === void 0 ? void 0 : _currencyAmount$curre.isToken) ? currencyAmount.currency.address : undefined;\n  const eip2612Contract = useEIP2612Contract(tokenAddress);\n  const isArgentWallet = useIsArgentWallet();\n  const nonceInputs = useMemo(() => [account !== null && account !== void 0 ? account : undefined], [account]);\n  const tokenNonceState = useSingleCallResult(eip2612Contract, 'nonces', nonceInputs);\n  const permitInfo = overridePermitInfo !== null && overridePermitInfo !== void 0 ? overridePermitInfo : chainId && tokenAddress ? (_PERMITTABLE_TOKENS$c = PERMITTABLE_TOKENS[chainId]) === null || _PERMITTABLE_TOKENS$c === void 0 ? void 0 : _PERMITTABLE_TOKENS$c[tokenAddress] : undefined;\n  const [signatureData, setSignatureData] = useState(null);\n  return useMemo(() => {\n    var _tokenNonceState$resu, _tokenNonceState$resu2;\n\n    if (isArgentWallet || !currencyAmount || !eip2612Contract || !account || !chainId || !transactionDeadline || !library || !tokenNonceState.valid || !tokenAddress || !spender || !permitInfo) {\n      return {\n        state: UseERC20PermitState.NOT_APPLICABLE,\n        signatureData: null,\n        gatherPermitSignature: null\n      };\n    }\n\n    const nonceNumber = (_tokenNonceState$resu = tokenNonceState.result) === null || _tokenNonceState$resu === void 0 ? void 0 : (_tokenNonceState$resu2 = _tokenNonceState$resu[0]) === null || _tokenNonceState$resu2 === void 0 ? void 0 : _tokenNonceState$resu2.toNumber();\n\n    if (tokenNonceState.loading || typeof nonceNumber !== 'number') {\n      return {\n        state: UseERC20PermitState.LOADING,\n        signatureData: null,\n        gatherPermitSignature: null\n      };\n    }\n\n    const isSignatureDataValid = signatureData && signatureData.owner === account && signatureData.deadline >= transactionDeadline.toNumber() && signatureData.tokenAddress === tokenAddress && signatureData.nonce === nonceNumber && signatureData.spender === spender && ('allowed' in signatureData || JSBI.equal(JSBI.BigInt(signatureData.amount), currencyAmount.quotient));\n    return {\n      state: isSignatureDataValid ? UseERC20PermitState.SIGNED : UseERC20PermitState.NOT_SIGNED,\n      signatureData: isSignatureDataValid ? signatureData : null,\n      gatherPermitSignature: async function gatherPermitSignature() {\n        const allowed = permitInfo.type === PermitType.ALLOWED;\n        const signatureDeadline = transactionDeadline.toNumber() + PERMIT_VALIDITY_BUFFER;\n        const value = currencyAmount.quotient.toString();\n        const message = allowed ? {\n          holder: account,\n          spender,\n          allowed,\n          nonce: nonceNumber,\n          expiry: signatureDeadline\n        } : {\n          owner: account,\n          spender,\n          value,\n          nonce: nonceNumber,\n          deadline: signatureDeadline\n        };\n        const domain = permitInfo.version ? {\n          name: permitInfo.name,\n          version: permitInfo.version,\n          verifyingContract: tokenAddress,\n          chainId\n        } : {\n          name: permitInfo.name,\n          verifyingContract: tokenAddress,\n          chainId\n        };\n        const data = JSON.stringify({\n          types: {\n            EIP712Domain: permitInfo.version ? EIP712_DOMAIN_TYPE : EIP712_DOMAIN_TYPE_NO_VERSION,\n            Permit: allowed ? PERMIT_ALLOWED_TYPE : EIP2612_TYPE\n          },\n          domain,\n          primaryType: 'Permit',\n          message\n        });\n        return library.send('eth_signTypedData_v4', [account, data]).then(splitSignature).then(signature => {\n          setSignatureData({\n            v: signature.v,\n            r: signature.r,\n            s: signature.s,\n            deadline: signatureDeadline,\n            ...(allowed ? {\n              allowed\n            } : {\n              amount: value\n            }),\n            nonce: nonceNumber,\n            chainId,\n            owner: account,\n            spender,\n            tokenAddress,\n            permitType: permitInfo.type\n          });\n        });\n      }\n    };\n  }, [currencyAmount, eip2612Contract, account, chainId, isArgentWallet, transactionDeadline, library, tokenNonceState.loading, tokenNonceState.valid, tokenNonceState.result, tokenAddress, spender, permitInfo, signatureData]);\n}\n\n_s(useERC20Permit, \"afnY1ox0YIGwGj/CS3cX4M5o0Jw=\", false, function () {\n  return [useActiveWeb3React, useTransactionDeadline, useEIP2612Contract, useIsArgentWallet, useSingleCallResult];\n});\n\nconst REMOVE_V2_LIQUIDITY_PERMIT_INFO = {\n  version: '1',\n  name: 'Uniswap V2',\n  type: PermitType.AMOUNT\n};\nexport function useV2LiquidityTokenPermit(liquidityAmount, spender) {\n  _s2();\n\n  return useERC20Permit(liquidityAmount, spender, REMOVE_V2_LIQUIDITY_PERMIT_INFO);\n}\n\n_s2(useV2LiquidityTokenPermit, \"/JX9Y3JLTESoVA1HGnAf9/8HesY=\", false, function () {\n  return [useERC20Permit];\n});\n\nexport function useERC20PermitFromTrade(trade, allowedSlippage) {\n  _s3();\n\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const swapRouterAddress = chainId ? // v2 router does not support\n  trade instanceof V2Trade ? undefined : trade instanceof V3Trade ? V3_ROUTER_ADDRESS[chainId] : SWAP_ROUTER_ADDRESSES[chainId] : undefined;\n  const amountToApprove = useMemo(() => trade ? trade.maximumAmountIn(allowedSlippage) : undefined, [trade, allowedSlippage]);\n  return useERC20Permit(amountToApprove, swapRouterAddress, null);\n}\n\n_s3(useERC20PermitFromTrade, \"f92y0E3Ka44h6rurR1LTGf/AbQE=\", false, function () {\n  return [useActiveWeb3React, useERC20Permit];\n});","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/hooks/useERC20Permit.ts"],"names":["splitSignature","Trade","V2Trade","V3Trade","JSBI","useMemo","useState","SWAP_ROUTER_ADDRESSES","V3_ROUTER_ADDRESS","DAI","UNI","USDC","useSingleCallResult","useEIP2612Contract","useIsArgentWallet","useTransactionDeadline","useActiveWeb3React","PermitType","PERMIT_VALIDITY_BUFFER","PERMITTABLE_TOKENS","address","type","AMOUNT","name","version","ALLOWED","UseERC20PermitState","EIP712_DOMAIN_TYPE","EIP712_DOMAIN_TYPE_NO_VERSION","EIP2612_TYPE","PERMIT_ALLOWED_TYPE","useERC20Permit","currencyAmount","spender","overridePermitInfo","account","chainId","library","transactionDeadline","tokenAddress","currency","isToken","undefined","eip2612Contract","isArgentWallet","nonceInputs","tokenNonceState","permitInfo","signatureData","setSignatureData","valid","state","NOT_APPLICABLE","gatherPermitSignature","nonceNumber","result","toNumber","loading","LOADING","isSignatureDataValid","owner","deadline","nonce","equal","BigInt","amount","quotient","SIGNED","NOT_SIGNED","allowed","signatureDeadline","value","toString","message","holder","expiry","domain","verifyingContract","data","JSON","stringify","types","EIP712Domain","Permit","primaryType","send","then","signature","v","r","s","permitType","REMOVE_V2_LIQUIDITY_PERMIT_INFO","useV2LiquidityTokenPermit","liquidityAmount","useERC20PermitFromTrade","trade","allowedSlippage","swapRouterAddress","amountToApprove","maximumAmountIn"],"mappings":"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","sourcesContent":["import { splitSignature } from '@ethersproject/bytes'\nimport { Trade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Percent, Token, TradeType } from '@uniswap/sdk-core'\nimport { Trade as V2Trade } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade } from '@uniswap/v3-sdk'\nimport JSBI from 'jsbi'\nimport { useMemo, useState } from 'react'\n\nimport { SWAP_ROUTER_ADDRESSES, V3_ROUTER_ADDRESS } from '../constants/addresses'\nimport { DAI, UNI, USDC } from '../constants/tokens'\nimport { useSingleCallResult } from '../state/multicall/hooks'\nimport { useEIP2612Contract } from './useContract'\nimport useIsArgentWallet from './useIsArgentWallet'\nimport useTransactionDeadline from './useTransactionDeadline'\nimport { useActiveWeb3React } from './web3'\n\nenum PermitType {\n  AMOUNT = 1,\n  ALLOWED = 2,\n}\n\n// 20 minutes to submit after signing\nconst PERMIT_VALIDITY_BUFFER = 20 * 60\n\ninterface PermitInfo {\n  type: PermitType\n  name: string\n  // version is optional, and if omitted, will not be included in the domain\n  version?: string\n}\n\n// todo: read this information from extensions on token lists or elsewhere (permit registry?)\nconst PERMITTABLE_TOKENS: {\n  [chainId: number]: {\n    [checksummedTokenAddress: string]: PermitInfo\n  }\n} = {\n  1: {\n    [USDC.address]: { type: PermitType.AMOUNT, name: 'USD Coin', version: '2' },\n    [DAI.address]: { type: PermitType.ALLOWED, name: 'Dai Stablecoin', version: '1' },\n    [UNI[1].address]: { type: PermitType.AMOUNT, name: 'Uniswap' },\n  },\n  4: {\n    '0xc7AD46e0b8a400Bb3C915120d284AafbA8fc4735': { type: PermitType.ALLOWED, name: 'Dai Stablecoin', version: '1' },\n    [UNI[4].address]: { type: PermitType.AMOUNT, name: 'Uniswap' },\n  },\n  3: {\n    [UNI[3].address]: { type: PermitType.AMOUNT, name: 'Uniswap' },\n    '0x07865c6E87B9F70255377e024ace6630C1Eaa37F': { type: PermitType.AMOUNT, name: 'USD Coin', version: '2' },\n  },\n  5: {\n    [UNI[5].address]: { type: PermitType.AMOUNT, name: 'Uniswap' },\n  },\n  42: {\n    [UNI[42].address]: { type: PermitType.AMOUNT, name: 'Uniswap' },\n  },\n}\n\nexport enum UseERC20PermitState {\n  // returned for any reason, e.g. it is an argent wallet, or the currency does not support it\n  NOT_APPLICABLE,\n  LOADING,\n  NOT_SIGNED,\n  SIGNED,\n}\n\ninterface BaseSignatureData {\n  v: number\n  r: string\n  s: string\n  deadline: number\n  nonce: number\n  owner: string\n  spender: string\n  chainId: number\n  tokenAddress: string\n  permitType: PermitType\n}\n\ninterface StandardSignatureData extends BaseSignatureData {\n  amount: string\n}\n\ninterface AllowedSignatureData extends BaseSignatureData {\n  allowed: true\n}\n\nexport type SignatureData = StandardSignatureData | AllowedSignatureData\n\nconst EIP712_DOMAIN_TYPE = [\n  { name: 'name', type: 'string' },\n  { name: 'version', type: 'string' },\n  { name: 'chainId', type: 'uint256' },\n  { name: 'verifyingContract', type: 'address' },\n]\n\nconst EIP712_DOMAIN_TYPE_NO_VERSION = [\n  { name: 'name', type: 'string' },\n  { name: 'chainId', type: 'uint256' },\n  { name: 'verifyingContract', type: 'address' },\n]\n\nconst EIP2612_TYPE = [\n  { name: 'owner', type: 'address' },\n  { name: 'spender', type: 'address' },\n  { name: 'value', type: 'uint256' },\n  { name: 'nonce', type: 'uint256' },\n  { name: 'deadline', type: 'uint256' },\n]\n\nconst PERMIT_ALLOWED_TYPE = [\n  { name: 'holder', type: 'address' },\n  { name: 'spender', type: 'address' },\n  { name: 'nonce', type: 'uint256' },\n  { name: 'expiry', type: 'uint256' },\n  { name: 'allowed', type: 'bool' },\n]\n\nfunction useERC20Permit(\n  currencyAmount: CurrencyAmount<Currency> | null | undefined,\n  spender: string | null | undefined,\n  overridePermitInfo: PermitInfo | undefined | null\n): {\n  signatureData: SignatureData | null\n  state: UseERC20PermitState\n  gatherPermitSignature: null | (() => Promise<void>)\n} {\n  const { account, chainId, library } = useActiveWeb3React()\n  const transactionDeadline = useTransactionDeadline()\n  const tokenAddress = currencyAmount?.currency?.isToken ? currencyAmount.currency.address : undefined\n  const eip2612Contract = useEIP2612Contract(tokenAddress)\n  const isArgentWallet = useIsArgentWallet()\n  const nonceInputs = useMemo(() => [account ?? undefined], [account])\n  const tokenNonceState = useSingleCallResult(eip2612Contract, 'nonces', nonceInputs)\n  const permitInfo =\n    overridePermitInfo ?? (chainId && tokenAddress ? PERMITTABLE_TOKENS[chainId]?.[tokenAddress] : undefined)\n\n  const [signatureData, setSignatureData] = useState<SignatureData | null>(null)\n\n  return useMemo(() => {\n    if (\n      isArgentWallet ||\n      !currencyAmount ||\n      !eip2612Contract ||\n      !account ||\n      !chainId ||\n      !transactionDeadline ||\n      !library ||\n      !tokenNonceState.valid ||\n      !tokenAddress ||\n      !spender ||\n      !permitInfo\n    ) {\n      return {\n        state: UseERC20PermitState.NOT_APPLICABLE,\n        signatureData: null,\n        gatherPermitSignature: null,\n      }\n    }\n\n    const nonceNumber = tokenNonceState.result?.[0]?.toNumber()\n    if (tokenNonceState.loading || typeof nonceNumber !== 'number') {\n      return {\n        state: UseERC20PermitState.LOADING,\n        signatureData: null,\n        gatherPermitSignature: null,\n      }\n    }\n\n    const isSignatureDataValid =\n      signatureData &&\n      signatureData.owner === account &&\n      signatureData.deadline >= transactionDeadline.toNumber() &&\n      signatureData.tokenAddress === tokenAddress &&\n      signatureData.nonce === nonceNumber &&\n      signatureData.spender === spender &&\n      ('allowed' in signatureData || JSBI.equal(JSBI.BigInt(signatureData.amount), currencyAmount.quotient))\n\n    return {\n      state: isSignatureDataValid ? UseERC20PermitState.SIGNED : UseERC20PermitState.NOT_SIGNED,\n      signatureData: isSignatureDataValid ? signatureData : null,\n      gatherPermitSignature: async function gatherPermitSignature() {\n        const allowed = permitInfo.type === PermitType.ALLOWED\n        const signatureDeadline = transactionDeadline.toNumber() + PERMIT_VALIDITY_BUFFER\n        const value = currencyAmount.quotient.toString()\n\n        const message = allowed\n          ? {\n              holder: account,\n              spender,\n              allowed,\n              nonce: nonceNumber,\n              expiry: signatureDeadline,\n            }\n          : {\n              owner: account,\n              spender,\n              value,\n              nonce: nonceNumber,\n              deadline: signatureDeadline,\n            }\n        const domain = permitInfo.version\n          ? {\n              name: permitInfo.name,\n              version: permitInfo.version,\n              verifyingContract: tokenAddress,\n              chainId,\n            }\n          : {\n              name: permitInfo.name,\n              verifyingContract: tokenAddress,\n              chainId,\n            }\n        const data = JSON.stringify({\n          types: {\n            EIP712Domain: permitInfo.version ? EIP712_DOMAIN_TYPE : EIP712_DOMAIN_TYPE_NO_VERSION,\n            Permit: allowed ? PERMIT_ALLOWED_TYPE : EIP2612_TYPE,\n          },\n          domain,\n          primaryType: 'Permit',\n          message,\n        })\n\n        return library\n          .send('eth_signTypedData_v4', [account, data])\n          .then(splitSignature)\n          .then((signature) => {\n            setSignatureData({\n              v: signature.v,\n              r: signature.r,\n              s: signature.s,\n              deadline: signatureDeadline,\n              ...(allowed ? { allowed } : { amount: value }),\n              nonce: nonceNumber,\n              chainId,\n              owner: account,\n              spender,\n              tokenAddress,\n              permitType: permitInfo.type,\n            })\n          })\n      },\n    }\n  }, [\n    currencyAmount,\n    eip2612Contract,\n    account,\n    chainId,\n    isArgentWallet,\n    transactionDeadline,\n    library,\n    tokenNonceState.loading,\n    tokenNonceState.valid,\n    tokenNonceState.result,\n    tokenAddress,\n    spender,\n    permitInfo,\n    signatureData,\n  ])\n}\n\nconst REMOVE_V2_LIQUIDITY_PERMIT_INFO: PermitInfo = {\n  version: '1',\n  name: 'Uniswap V2',\n  type: PermitType.AMOUNT,\n}\n\nexport function useV2LiquidityTokenPermit(\n  liquidityAmount: CurrencyAmount<Token> | null | undefined,\n  spender: string | null | undefined\n) {\n  return useERC20Permit(liquidityAmount, spender, REMOVE_V2_LIQUIDITY_PERMIT_INFO)\n}\n\nexport function useERC20PermitFromTrade(\n  trade:\n    | V2Trade<Currency, Currency, TradeType>\n    | V3Trade<Currency, Currency, TradeType>\n    | Trade<Currency, Currency, TradeType>\n    | undefined,\n  allowedSlippage: Percent\n) {\n  const { chainId } = useActiveWeb3React()\n  const swapRouterAddress = chainId\n    ? // v2 router does not support\n      trade instanceof V2Trade\n      ? undefined\n      : trade instanceof V3Trade\n      ? V3_ROUTER_ADDRESS[chainId]\n      : SWAP_ROUTER_ADDRESSES[chainId]\n    : undefined\n  const amountToApprove = useMemo(\n    () => (trade ? trade.maximumAmountIn(allowedSlippage) : undefined),\n    [trade, allowedSlippage]\n  )\n\n  return useERC20Permit(amountToApprove, swapRouterAddress, null)\n}\n"]},"metadata":{},"sourceType":"module"}