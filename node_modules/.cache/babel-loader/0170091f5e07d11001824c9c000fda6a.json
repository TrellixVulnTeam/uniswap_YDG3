{"ast":null,"code":"import { ONE_HUNDRED_PERCENT, ZERO_PERCENT } from '../constants/misc'; // returns whether tradeB is better than tradeA by at least a threshold percentage amount\n// only used by v2 hooks\n\nexport function isTradeBetter(tradeA, tradeB, minimumDelta = ZERO_PERCENT) {\n  if (tradeA && !tradeB) return false;\n  if (tradeB && !tradeA) return true;\n  if (!tradeA || !tradeB) return undefined;\n\n  if (tradeA.tradeType !== tradeB.tradeType || !tradeA.inputAmount.currency.equals(tradeB.inputAmount.currency) || !tradeA.outputAmount.currency.equals(tradeB.outputAmount.currency)) {\n    throw new Error('Comparing incomparable trades');\n  }\n\n  if (minimumDelta.equalTo(ZERO_PERCENT)) {\n    return tradeA.executionPrice.lessThan(tradeB.executionPrice);\n  } else {\n    return tradeA.executionPrice.asFraction.multiply(minimumDelta.add(ONE_HUNDRED_PERCENT)).lessThan(tradeB.executionPrice);\n  }\n}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/utils/isTradeBetter.ts"],"names":["ONE_HUNDRED_PERCENT","ZERO_PERCENT","isTradeBetter","tradeA","tradeB","minimumDelta","undefined","tradeType","inputAmount","currency","equals","outputAmount","Error","equalTo","executionPrice","lessThan","asFraction","multiply","add"],"mappings":"AAGA,SAASA,mBAAT,EAA8BC,YAA9B,QAAkD,mBAAlD,C,CAEA;AACA;;AACA,OAAO,SAASC,aAAT,CACLC,MADK,EAELC,MAFK,EAGLC,YAAqB,GAAGJ,YAHnB,EAIgB;AACrB,MAAIE,MAAM,IAAI,CAACC,MAAf,EAAuB,OAAO,KAAP;AACvB,MAAIA,MAAM,IAAI,CAACD,MAAf,EAAuB,OAAO,IAAP;AACvB,MAAI,CAACA,MAAD,IAAW,CAACC,MAAhB,EAAwB,OAAOE,SAAP;;AAExB,MACEH,MAAM,CAACI,SAAP,KAAqBH,MAAM,CAACG,SAA5B,IACA,CAACJ,MAAM,CAACK,WAAP,CAAmBC,QAAnB,CAA4BC,MAA5B,CAAmCN,MAAM,CAACI,WAAP,CAAmBC,QAAtD,CADD,IAEA,CAACN,MAAM,CAACQ,YAAP,CAAoBF,QAApB,CAA6BC,MAA7B,CAAoCN,MAAM,CAACO,YAAP,CAAoBF,QAAxD,CAHH,EAIE;AACA,UAAM,IAAIG,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAED,MAAIP,YAAY,CAACQ,OAAb,CAAqBZ,YAArB,CAAJ,EAAwC;AACtC,WAAOE,MAAM,CAACW,cAAP,CAAsBC,QAAtB,CAA+BX,MAAM,CAACU,cAAtC,CAAP;AACD,GAFD,MAEO;AACL,WAAOX,MAAM,CAACW,cAAP,CAAsBE,UAAtB,CACJC,QADI,CACKZ,YAAY,CAACa,GAAb,CAAiBlB,mBAAjB,CADL,EAEJe,QAFI,CAEKX,MAAM,CAACU,cAFZ,CAAP;AAGD;AACF","sourcesContent":["import { Currency, Percent, TradeType } from '@uniswap/sdk-core'\nimport { Trade as V2Trade } from '@uniswap/v2-sdk'\n\nimport { ONE_HUNDRED_PERCENT, ZERO_PERCENT } from '../constants/misc'\n\n// returns whether tradeB is better than tradeA by at least a threshold percentage amount\n// only used by v2 hooks\nexport function isTradeBetter(\n  tradeA: V2Trade<Currency, Currency, TradeType> | undefined | null,\n  tradeB: V2Trade<Currency, Currency, TradeType> | undefined | null,\n  minimumDelta: Percent = ZERO_PERCENT\n): boolean | undefined {\n  if (tradeA && !tradeB) return false\n  if (tradeB && !tradeA) return true\n  if (!tradeA || !tradeB) return undefined\n\n  if (\n    tradeA.tradeType !== tradeB.tradeType ||\n    !tradeA.inputAmount.currency.equals(tradeB.inputAmount.currency) ||\n    !tradeA.outputAmount.currency.equals(tradeB.outputAmount.currency)\n  ) {\n    throw new Error('Comparing incomparable trades')\n  }\n\n  if (minimumDelta.equalTo(ZERO_PERCENT)) {\n    return tradeA.executionPrice.lessThan(tradeB.executionPrice)\n  } else {\n    return tradeA.executionPrice.asFraction\n      .multiply(minimumDelta.add(ONE_HUNDRED_PERCENT))\n      .lessThan(tradeB.executionPrice)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}