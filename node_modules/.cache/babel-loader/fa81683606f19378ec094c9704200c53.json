{"ast":null,"code":"import { BigNumber } from '@ethersproject/bignumber';\nimport { hexStripZeros } from '@ethersproject/bytes';\nimport { CHAIN_INFO } from 'constants/chains';\n// provider.request returns Promise<any>, but wallet_switchEthereumChain must return null or throw\n// see https://github.com/rekmarks/EIPs/blob/3326-create/EIPS/eip-3326.md for more info on wallet_switchEthereumChain\nexport async function switchToNetwork({\n  library,\n  chainId\n}) {\n  var _library$provider;\n\n  if (!(library === null || library === void 0 ? void 0 : (_library$provider = library.provider) === null || _library$provider === void 0 ? void 0 : _library$provider.request)) {\n    return;\n  }\n\n  const formattedChainId = hexStripZeros(BigNumber.from(chainId).toHexString());\n\n  try {\n    await library.provider.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{\n        chainId: formattedChainId\n      }]\n    });\n  } catch (error) {\n    // 4902 is the error code for attempting to switch to an unrecognized chainId\n    if (error.code === 4902) {\n      const info = CHAIN_INFO[chainId];\n      await library.provider.request({\n        method: 'wallet_addEthereumChain',\n        params: [{\n          chainId: formattedChainId,\n          chainName: info.label,\n          rpcUrls: [info.addNetworkInfo.rpcUrl],\n          nativeCurrency: info.addNetworkInfo.nativeCurrency,\n          blockExplorerUrls: [info.explorer]\n        }]\n      }); // metamask (only known implementer) automatically switches after a network is added\n      // the second call is done here because that behavior is not a part of the spec and cannot be relied upon in the future\n      // metamask's behavior when switching to the current network is just to return null (a no-op)\n\n      try {\n        await library.provider.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{\n            chainId: formattedChainId\n          }]\n        });\n      } catch (error) {\n        console.debug('Added network but could not switch chains', error);\n      }\n    } else {\n      throw error;\n    }\n  }\n}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/utils/switchToNetwork.ts"],"names":["BigNumber","hexStripZeros","CHAIN_INFO","switchToNetwork","library","chainId","provider","request","formattedChainId","from","toHexString","method","params","error","code","info","chainName","label","rpcUrls","addNetworkInfo","rpcUrl","nativeCurrency","blockExplorerUrls","explorer","console","debug"],"mappings":"AAAA,SAASA,SAAT,QAA0B,0BAA1B;AACA,SAASC,aAAT,QAA8B,sBAA9B;AAEA,SAASC,UAAT,QAA6C,kBAA7C;AAOA;AACA;AACA,OAAO,eAAeC,eAAf,CAA+B;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAA/B,EAAmG;AAAA;;AACxG,MAAI,EAACD,OAAD,aAACA,OAAD,4CAACA,OAAO,CAAEE,QAAV,sDAAC,kBAAmBC,OAApB,CAAJ,EAAiC;AAC/B;AACD;;AACD,QAAMC,gBAAgB,GAAGP,aAAa,CAACD,SAAS,CAACS,IAAV,CAAeJ,OAAf,EAAwBK,WAAxB,EAAD,CAAtC;;AACA,MAAI;AACF,UAAMN,OAAO,CAACE,QAAR,CAAiBC,OAAjB,CAAyB;AAC7BI,MAAAA,MAAM,EAAE,4BADqB;AAE7BC,MAAAA,MAAM,EAAE,CAAC;AAAEP,QAAAA,OAAO,EAAEG;AAAX,OAAD;AAFqB,KAAzB,CAAN;AAID,GALD,CAKE,OAAOK,KAAP,EAAc;AACd;AACA,QAAIA,KAAK,CAACC,IAAN,KAAe,IAAnB,EAAyB;AACvB,YAAMC,IAAI,GAAGb,UAAU,CAACG,OAAD,CAAvB;AAEA,YAAMD,OAAO,CAACE,QAAR,CAAiBC,OAAjB,CAAyB;AAC7BI,QAAAA,MAAM,EAAE,yBADqB;AAE7BC,QAAAA,MAAM,EAAE,CACN;AACEP,UAAAA,OAAO,EAAEG,gBADX;AAEEQ,UAAAA,SAAS,EAAED,IAAI,CAACE,KAFlB;AAGEC,UAAAA,OAAO,EAAE,CAACH,IAAI,CAACI,cAAL,CAAoBC,MAArB,CAHX;AAIEC,UAAAA,cAAc,EAAEN,IAAI,CAACI,cAAL,CAAoBE,cAJtC;AAKEC,UAAAA,iBAAiB,EAAE,CAACP,IAAI,CAACQ,QAAN;AALrB,SADM;AAFqB,OAAzB,CAAN,CAHuB,CAevB;AACA;AACA;;AACA,UAAI;AACF,cAAMnB,OAAO,CAACE,QAAR,CAAiBC,OAAjB,CAAyB;AAC7BI,UAAAA,MAAM,EAAE,4BADqB;AAE7BC,UAAAA,MAAM,EAAE,CAAC;AAAEP,YAAAA,OAAO,EAAEG;AAAX,WAAD;AAFqB,SAAzB,CAAN;AAID,OALD,CAKE,OAAOK,KAAP,EAAc;AACdW,QAAAA,OAAO,CAACC,KAAR,CAAc,2CAAd,EAA2DZ,KAA3D;AACD;AACF,KA1BD,MA0BO;AACL,YAAMA,KAAN;AACD;AACF;AACF","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\nimport { hexStripZeros } from '@ethersproject/bytes'\nimport { Web3Provider } from '@ethersproject/providers'\nimport { CHAIN_INFO, SupportedChainId } from 'constants/chains'\n\ninterface SwitchNetworkArguments {\n  library: Web3Provider\n  chainId: SupportedChainId\n}\n\n// provider.request returns Promise<any>, but wallet_switchEthereumChain must return null or throw\n// see https://github.com/rekmarks/EIPs/blob/3326-create/EIPS/eip-3326.md for more info on wallet_switchEthereumChain\nexport async function switchToNetwork({ library, chainId }: SwitchNetworkArguments): Promise<null | void> {\n  if (!library?.provider?.request) {\n    return\n  }\n  const formattedChainId = hexStripZeros(BigNumber.from(chainId).toHexString())\n  try {\n    await library.provider.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{ chainId: formattedChainId }],\n    })\n  } catch (error) {\n    // 4902 is the error code for attempting to switch to an unrecognized chainId\n    if (error.code === 4902) {\n      const info = CHAIN_INFO[chainId]\n\n      await library.provider.request({\n        method: 'wallet_addEthereumChain',\n        params: [\n          {\n            chainId: formattedChainId,\n            chainName: info.label,\n            rpcUrls: [info.addNetworkInfo.rpcUrl],\n            nativeCurrency: info.addNetworkInfo.nativeCurrency,\n            blockExplorerUrls: [info.explorer],\n          },\n        ],\n      })\n      // metamask (only known implementer) automatically switches after a network is added\n      // the second call is done here because that behavior is not a part of the spec and cannot be relied upon in the future\n      // metamask's behavior when switching to the current network is just to return null (a no-op)\n      try {\n        await library.provider.request({\n          method: 'wallet_switchEthereumChain',\n          params: [{ chainId: formattedChainId }],\n        })\n      } catch (error) {\n        console.debug('Added network but could not switch chains', error)\n      }\n    } else {\n      throw error\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}