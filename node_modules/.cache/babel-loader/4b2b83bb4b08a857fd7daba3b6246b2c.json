{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { useMemo } from 'react';\nimport { useSingleCallResult, useSingleContractMultipleData } from 'state/multicall/hooks';\nimport { useV3NFTPositionManagerContract } from './useContract';\n\nfunction useV3PositionsFromTokenIds(tokenIds) {\n  _s();\n\n  const positionManager = useV3NFTPositionManagerContract();\n  const inputs = useMemo(() => tokenIds ? tokenIds.map(tokenId => [BigNumber.from(tokenId)]) : [], [tokenIds]);\n  const results = useSingleContractMultipleData(positionManager, 'positions', inputs);\n  const loading = useMemo(() => results.some(({\n    loading\n  }) => loading), [results]);\n  const error = useMemo(() => results.some(({\n    error\n  }) => error), [results]);\n  const positions = useMemo(() => {\n    if (!loading && !error && tokenIds) {\n      return results.map((call, i) => {\n        const tokenId = tokenIds[i];\n        const result = call.result;\n        return {\n          tokenId,\n          fee: result.fee,\n          feeGrowthInside0LastX128: result.feeGrowthInside0LastX128,\n          feeGrowthInside1LastX128: result.feeGrowthInside1LastX128,\n          liquidity: result.liquidity,\n          nonce: result.nonce,\n          operator: result.operator,\n          tickLower: result.tickLower,\n          tickUpper: result.tickUpper,\n          token0: result.token0,\n          token1: result.token1,\n          tokensOwed0: result.tokensOwed0,\n          tokensOwed1: result.tokensOwed1\n        };\n      });\n    }\n\n    return undefined;\n  }, [loading, error, results, tokenIds]);\n  return {\n    loading,\n    positions: positions === null || positions === void 0 ? void 0 : positions.map((position, i) => ({ ...position,\n      tokenId: inputs[i][0]\n    }))\n  };\n}\n\n_s(useV3PositionsFromTokenIds, \"YRxTTsoT3bu74+lEuX8pfafu9C8=\", false, function () {\n  return [useV3NFTPositionManagerContract, useSingleContractMultipleData];\n});\n\nexport function useV3PositionFromTokenId(tokenId) {\n  _s2();\n\n  var _position$positions;\n\n  const position = useV3PositionsFromTokenIds(tokenId ? [tokenId] : undefined);\n  return {\n    loading: position.loading,\n    position: (_position$positions = position.positions) === null || _position$positions === void 0 ? void 0 : _position$positions[0]\n  };\n}\n\n_s2(useV3PositionFromTokenId, \"NkhzZcSxooTC76ciFtDPedpgZnk=\", false, function () {\n  return [useV3PositionsFromTokenIds];\n});\n\nexport function useV3Positions(account) {\n  _s3();\n\n  var _balanceResult$;\n\n  const positionManager = useV3NFTPositionManagerContract();\n  const {\n    loading: balanceLoading,\n    result: balanceResult\n  } = useSingleCallResult(positionManager, 'balanceOf', [account !== null && account !== void 0 ? account : undefined]); // we don't expect any account balance to ever exceed the bounds of max safe int\n\n  const accountBalance = balanceResult === null || balanceResult === void 0 ? void 0 : (_balanceResult$ = balanceResult[0]) === null || _balanceResult$ === void 0 ? void 0 : _balanceResult$.toNumber();\n  const tokenIdsArgs = useMemo(() => {\n    if (accountBalance && account) {\n      const tokenRequests = [];\n\n      for (let i = 0; i < accountBalance; i++) {\n        tokenRequests.push([account, i]);\n      }\n\n      return tokenRequests;\n    }\n\n    return [];\n  }, [account, accountBalance]);\n  const tokenIdResults = useSingleContractMultipleData(positionManager, 'tokenOfOwnerByIndex', tokenIdsArgs);\n  const someTokenIdsLoading = useMemo(() => tokenIdResults.some(({\n    loading\n  }) => loading), [tokenIdResults]);\n  const tokenIds = useMemo(() => {\n    if (account) {\n      return tokenIdResults.map(({\n        result\n      }) => result).filter(result => !!result).map(result => BigNumber.from(result[0]));\n    }\n\n    return [];\n  }, [account, tokenIdResults]);\n  const {\n    positions,\n    loading: positionsLoading\n  } = useV3PositionsFromTokenIds(tokenIds);\n  return {\n    loading: someTokenIdsLoading || balanceLoading || positionsLoading,\n    positions\n  };\n}\n\n_s3(useV3Positions, \"2DSrPpQkPaMxGmL0OCV/do6Pazw=\", false, function () {\n  return [useV3NFTPositionManagerContract, useSingleCallResult, useSingleContractMultipleData, useV3PositionsFromTokenIds];\n});","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/hooks/useV3Positions.ts"],"names":["BigNumber","useMemo","useSingleCallResult","useSingleContractMultipleData","useV3NFTPositionManagerContract","useV3PositionsFromTokenIds","tokenIds","positionManager","inputs","map","tokenId","from","results","loading","some","error","positions","call","i","result","fee","feeGrowthInside0LastX128","feeGrowthInside1LastX128","liquidity","nonce","operator","tickLower","tickUpper","token0","token1","tokensOwed0","tokensOwed1","undefined","position","useV3PositionFromTokenId","useV3Positions","account","balanceLoading","balanceResult","accountBalance","toNumber","tokenIdsArgs","tokenRequests","push","tokenIdResults","someTokenIdsLoading","filter","positionsLoading"],"mappings":"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","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\nimport { useMemo } from 'react'\nimport { CallStateResult, useSingleCallResult, useSingleContractMultipleData } from 'state/multicall/hooks'\nimport { PositionDetails } from 'types/position'\n\nimport { useV3NFTPositionManagerContract } from './useContract'\n\ninterface UseV3PositionsResults {\n  loading: boolean\n  positions: PositionDetails[] | undefined\n}\n\nfunction useV3PositionsFromTokenIds(tokenIds: BigNumber[] | undefined): UseV3PositionsResults {\n  const positionManager = useV3NFTPositionManagerContract()\n  const inputs = useMemo(() => (tokenIds ? tokenIds.map((tokenId) => [BigNumber.from(tokenId)]) : []), [tokenIds])\n  const results = useSingleContractMultipleData(positionManager, 'positions', inputs)\n\n  const loading = useMemo(() => results.some(({ loading }) => loading), [results])\n  const error = useMemo(() => results.some(({ error }) => error), [results])\n\n  const positions = useMemo(() => {\n    if (!loading && !error && tokenIds) {\n      return results.map((call, i) => {\n        const tokenId = tokenIds[i]\n        const result = call.result as CallStateResult\n        return {\n          tokenId,\n          fee: result.fee,\n          feeGrowthInside0LastX128: result.feeGrowthInside0LastX128,\n          feeGrowthInside1LastX128: result.feeGrowthInside1LastX128,\n          liquidity: result.liquidity,\n          nonce: result.nonce,\n          operator: result.operator,\n          tickLower: result.tickLower,\n          tickUpper: result.tickUpper,\n          token0: result.token0,\n          token1: result.token1,\n          tokensOwed0: result.tokensOwed0,\n          tokensOwed1: result.tokensOwed1,\n        }\n      })\n    }\n    return undefined\n  }, [loading, error, results, tokenIds])\n\n  return {\n    loading,\n    positions: positions?.map((position, i) => ({ ...position, tokenId: inputs[i][0] })),\n  }\n}\n\ninterface UseV3PositionResults {\n  loading: boolean\n  position: PositionDetails | undefined\n}\n\nexport function useV3PositionFromTokenId(tokenId: BigNumber | undefined): UseV3PositionResults {\n  const position = useV3PositionsFromTokenIds(tokenId ? [tokenId] : undefined)\n  return {\n    loading: position.loading,\n    position: position.positions?.[0],\n  }\n}\n\nexport function useV3Positions(account: string | null | undefined): UseV3PositionsResults {\n  const positionManager = useV3NFTPositionManagerContract()\n\n  const { loading: balanceLoading, result: balanceResult } = useSingleCallResult(positionManager, 'balanceOf', [\n    account ?? undefined,\n  ])\n\n  // we don't expect any account balance to ever exceed the bounds of max safe int\n  const accountBalance: number | undefined = balanceResult?.[0]?.toNumber()\n\n  const tokenIdsArgs = useMemo(() => {\n    if (accountBalance && account) {\n      const tokenRequests = []\n      for (let i = 0; i < accountBalance; i++) {\n        tokenRequests.push([account, i])\n      }\n      return tokenRequests\n    }\n    return []\n  }, [account, accountBalance])\n\n  const tokenIdResults = useSingleContractMultipleData(positionManager, 'tokenOfOwnerByIndex', tokenIdsArgs)\n  const someTokenIdsLoading = useMemo(() => tokenIdResults.some(({ loading }) => loading), [tokenIdResults])\n\n  const tokenIds = useMemo(() => {\n    if (account) {\n      return tokenIdResults\n        .map(({ result }) => result)\n        .filter((result): result is CallStateResult => !!result)\n        .map((result) => BigNumber.from(result[0]))\n    }\n    return []\n  }, [account, tokenIdResults])\n\n  const { positions, loading: positionsLoading } = useV3PositionsFromTokenIds(tokenIds)\n\n  return {\n    loading: someTokenIdsLoading || balanceLoading || positionsLoading,\n    positions,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}