{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nimport { safeNamehash } from 'utils/safeNamehash';\nimport { useSingleCallResult } from '../state/multicall/hooks';\nimport isZero from '../utils/isZero';\nimport { useENSRegistrarContract, useENSResolverContract } from './useContract';\n/**\n * Does a lookup for an ENS name to find its contenthash.\n */\n\nexport default function useENSContentHash(ensName) {\n  _s();\n\n  var _resolverAddressResul;\n\n  const ensNodeArgument = useMemo(() => [ensName === null ? undefined : safeNamehash(ensName)], [ensName]);\n  const registrarContract = useENSRegistrarContract(false);\n  const resolverAddressResult = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument);\n  const resolverAddress = (_resolverAddressResul = resolverAddressResult.result) === null || _resolverAddressResul === void 0 ? void 0 : _resolverAddressResul[0];\n  const resolverContract = useENSResolverContract(resolverAddress && isZero(resolverAddress) ? undefined : resolverAddress, false);\n  const contenthash = useSingleCallResult(resolverContract, 'contenthash', ensNodeArgument);\n  return useMemo(() => {\n    var _contenthash$result$, _contenthash$result;\n\n    return {\n      contenthash: (_contenthash$result$ = (_contenthash$result = contenthash.result) === null || _contenthash$result === void 0 ? void 0 : _contenthash$result[0]) !== null && _contenthash$result$ !== void 0 ? _contenthash$result$ : null,\n      loading: resolverAddressResult.loading || contenthash.loading\n    };\n  }, [contenthash.loading, contenthash.result, resolverAddressResult.loading]);\n}\n\n_s(useENSContentHash, \"I+V1fGeUOgOaW6bmxqnKA3nUcP0=\", false, function () {\n  return [useENSRegistrarContract, useSingleCallResult, useENSResolverContract, useSingleCallResult];\n});","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/hooks/useENSContentHash.ts"],"names":["useMemo","safeNamehash","useSingleCallResult","isZero","useENSRegistrarContract","useENSResolverContract","useENSContentHash","ensName","ensNodeArgument","undefined","registrarContract","resolverAddressResult","resolverAddress","result","resolverContract","contenthash","loading"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,YAAT,QAA6B,oBAA7B;AAEA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,uBAAT,EAAkCC,sBAAlC,QAAgE,eAAhE;AAEA;AACA;AACA;;AACA,eAAe,SAASC,iBAAT,CAA2BC,OAA3B,EAAsG;AAAA;;AAAA;;AACnH,QAAMC,eAAe,GAAGR,OAAO,CAAC,MAAM,CAACO,OAAO,KAAK,IAAZ,GAAmBE,SAAnB,GAA+BR,YAAY,CAACM,OAAD,CAA5C,CAAP,EAA+D,CAACA,OAAD,CAA/D,CAA/B;AACA,QAAMG,iBAAiB,GAAGN,uBAAuB,CAAC,KAAD,CAAjD;AACA,QAAMO,qBAAqB,GAAGT,mBAAmB,CAACQ,iBAAD,EAAoB,UAApB,EAAgCF,eAAhC,CAAjD;AACA,QAAMI,eAAe,4BAAGD,qBAAqB,CAACE,MAAzB,0DAAG,sBAA+B,CAA/B,CAAxB;AACA,QAAMC,gBAAgB,GAAGT,sBAAsB,CAC7CO,eAAe,IAAIT,MAAM,CAACS,eAAD,CAAzB,GAA6CH,SAA7C,GAAyDG,eADZ,EAE7C,KAF6C,CAA/C;AAIA,QAAMG,WAAW,GAAGb,mBAAmB,CAACY,gBAAD,EAAmB,aAAnB,EAAkCN,eAAlC,CAAvC;AAEA,SAAOR,OAAO,CACZ;AAAA;;AAAA,WAAO;AACLe,MAAAA,WAAW,iDAAEA,WAAW,CAACF,MAAd,wDAAE,oBAAqB,CAArB,CAAF,uEAA6B,IADnC;AAELG,MAAAA,OAAO,EAAEL,qBAAqB,CAACK,OAAtB,IAAiCD,WAAW,CAACC;AAFjD,KAAP;AAAA,GADY,EAKZ,CAACD,WAAW,CAACC,OAAb,EAAsBD,WAAW,CAACF,MAAlC,EAA0CF,qBAAqB,CAACK,OAAhE,CALY,CAAd;AAOD;;GAlBuBV,iB;UAEIF,uB,EACIF,mB,EAELG,sB,EAILH,mB","sourcesContent":["import { useMemo } from 'react'\nimport { safeNamehash } from 'utils/safeNamehash'\n\nimport { useSingleCallResult } from '../state/multicall/hooks'\nimport isZero from '../utils/isZero'\nimport { useENSRegistrarContract, useENSResolverContract } from './useContract'\n\n/**\n * Does a lookup for an ENS name to find its contenthash.\n */\nexport default function useENSContentHash(ensName?: string | null): { loading: boolean; contenthash: string | null } {\n  const ensNodeArgument = useMemo(() => [ensName === null ? undefined : safeNamehash(ensName)], [ensName])\n  const registrarContract = useENSRegistrarContract(false)\n  const resolverAddressResult = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument)\n  const resolverAddress = resolverAddressResult.result?.[0]\n  const resolverContract = useENSResolverContract(\n    resolverAddress && isZero(resolverAddress) ? undefined : resolverAddress,\n    false\n  )\n  const contenthash = useSingleCallResult(resolverContract, 'contenthash', ensNodeArgument)\n\n  return useMemo(\n    () => ({\n      contenthash: contenthash.result?.[0] ?? null,\n      loading: resolverAddressResult.loading || contenthash.loading,\n    }),\n    [contenthash.loading, contenthash.result, resolverAddressResult.loading]\n  )\n}\n"]},"metadata":{},"sourceType":"module"}