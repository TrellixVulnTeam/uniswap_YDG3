{"ast":null,"code":"import { SafeAppConnector } from '@gnosis.pm/safe-apps-web3-react';\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { PortisConnector } from '@web3-react/portis-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector';\nimport UNISWAP_LOGO_URL from \"../assets/svg/logo.svg\";\nimport { ALL_SUPPORTED_CHAIN_IDS, INFURA_NETWORK_URLS, SupportedChainId } from '../constants/chains';\nimport getLibrary from '../utils/getLibrary';\nimport { FortmaticConnector } from './Fortmatic';\nimport { NetworkConnector } from './NetworkConnector';\nconst FORMATIC_KEY = process.env.REACT_APP_FORTMATIC_KEY;\nconst PORTIS_ID = process.env.REACT_APP_PORTIS_ID;\nexport const network = new NetworkConnector({\n  urls: INFURA_NETWORK_URLS,\n  defaultChainId: 1\n});\nlet networkLibrary;\nexport function getNetworkLibrary() {\n  var _networkLibrary;\n\n  return networkLibrary = (_networkLibrary = networkLibrary) !== null && _networkLibrary !== void 0 ? _networkLibrary : getLibrary(network.provider);\n}\nexport const injected = new InjectedConnector({\n  supportedChainIds: ALL_SUPPORTED_CHAIN_IDS\n});\nexport const gnosisSafe = new SafeAppConnector();\nexport const walletconnect = new WalletConnectConnector({\n  supportedChainIds: ALL_SUPPORTED_CHAIN_IDS,\n  rpc: INFURA_NETWORK_URLS,\n  qrcode: true\n}); // mainnet only\n\nexport const fortmatic = new FortmaticConnector({\n  apiKey: FORMATIC_KEY !== null && FORMATIC_KEY !== void 0 ? FORMATIC_KEY : '',\n  chainId: 1\n}); // mainnet only\n\nexport const portis = new PortisConnector({\n  dAppId: PORTIS_ID !== null && PORTIS_ID !== void 0 ? PORTIS_ID : '',\n  networks: [1]\n}); // mainnet only\n\nexport const walletlink = new WalletLinkConnector({\n  url: INFURA_NETWORK_URLS[SupportedChainId.MAINNET],\n  appName: 'Uniswap',\n  appLogoUrl: UNISWAP_LOGO_URL,\n  supportedChainIds: [SupportedChainId.MAINNET]\n});","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/connectors/index.ts"],"names":["SafeAppConnector","InjectedConnector","PortisConnector","WalletConnectConnector","WalletLinkConnector","ALL_SUPPORTED_CHAIN_IDS","INFURA_NETWORK_URLS","SupportedChainId","getLibrary","FortmaticConnector","NetworkConnector","FORMATIC_KEY","process","env","REACT_APP_FORTMATIC_KEY","PORTIS_ID","REACT_APP_PORTIS_ID","network","urls","defaultChainId","networkLibrary","getNetworkLibrary","provider","injected","supportedChainIds","gnosisSafe","walletconnect","rpc","qrcode","fortmatic","apiKey","chainId","portis","dAppId","networks","walletlink","url","MAINNET","appName","appLogoUrl","UNISWAP_LOGO_URL"],"mappings":"AACA,SAASA,gBAAT,QAAiC,iCAAjC;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,eAAT,QAAgC,8BAAhC;AACA,SAASC,sBAAT,QAAuC,qCAAvC;AACA,SAASC,mBAAT,QAAoC,kCAApC;;AAGA,SAASC,uBAAT,EAAkCC,mBAAlC,EAAuDC,gBAAvD,QAA+E,qBAA/E;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,SAASC,kBAAT,QAAmC,aAAnC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AAEA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAR,CAAYC,uBAAjC;AACA,MAAMC,SAAS,GAAGH,OAAO,CAACC,GAAR,CAAYG,mBAA9B;AAEA,OAAO,MAAMC,OAAO,GAAG,IAAIP,gBAAJ,CAAqB;AAC1CQ,EAAAA,IAAI,EAAEZ,mBADoC;AAE1Ca,EAAAA,cAAc,EAAE;AAF0B,CAArB,CAAhB;AAKP,IAAIC,cAAJ;AACA,OAAO,SAASC,iBAAT,GAA2C;AAAA;;AAChD,SAAQD,cAAc,sBAAGA,cAAH,6DAAqBZ,UAAU,CAACS,OAAO,CAACK,QAAT,CAArD;AACD;AAED,OAAO,MAAMC,QAAQ,GAAG,IAAItB,iBAAJ,CAAsB;AAC5CuB,EAAAA,iBAAiB,EAAEnB;AADyB,CAAtB,CAAjB;AAIP,OAAO,MAAMoB,UAAU,GAAG,IAAIzB,gBAAJ,EAAnB;AAEP,OAAO,MAAM0B,aAAa,GAAG,IAAIvB,sBAAJ,CAA2B;AACtDqB,EAAAA,iBAAiB,EAAEnB,uBADmC;AAEtDsB,EAAAA,GAAG,EAAErB,mBAFiD;AAGtDsB,EAAAA,MAAM,EAAE;AAH8C,CAA3B,CAAtB,C,CAMP;;AACA,OAAO,MAAMC,SAAS,GAAG,IAAIpB,kBAAJ,CAAuB;AAC9CqB,EAAAA,MAAM,EAAEnB,YAAF,aAAEA,YAAF,cAAEA,YAAF,GAAkB,EADsB;AAE9CoB,EAAAA,OAAO,EAAE;AAFqC,CAAvB,CAAlB,C,CAKP;;AACA,OAAO,MAAMC,MAAM,GAAG,IAAI9B,eAAJ,CAAoB;AACxC+B,EAAAA,MAAM,EAAElB,SAAF,aAAEA,SAAF,cAAEA,SAAF,GAAe,EADmB;AAExCmB,EAAAA,QAAQ,EAAE,CAAC,CAAD;AAF8B,CAApB,CAAf,C,CAKP;;AACA,OAAO,MAAMC,UAAU,GAAG,IAAI/B,mBAAJ,CAAwB;AAChDgC,EAAAA,GAAG,EAAE9B,mBAAmB,CAACC,gBAAgB,CAAC8B,OAAlB,CADwB;AAEhDC,EAAAA,OAAO,EAAE,SAFuC;AAGhDC,EAAAA,UAAU,EAAEC,gBAHoC;AAIhDhB,EAAAA,iBAAiB,EAAE,CAACjB,gBAAgB,CAAC8B,OAAlB;AAJ6B,CAAxB,CAAnB","sourcesContent":["import { Web3Provider } from '@ethersproject/providers'\nimport { SafeAppConnector } from '@gnosis.pm/safe-apps-web3-react'\nimport { InjectedConnector } from '@web3-react/injected-connector'\nimport { PortisConnector } from '@web3-react/portis-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector'\n\nimport UNISWAP_LOGO_URL from '../assets/svg/logo.svg'\nimport { ALL_SUPPORTED_CHAIN_IDS, INFURA_NETWORK_URLS, SupportedChainId } from '../constants/chains'\nimport getLibrary from '../utils/getLibrary'\nimport { FortmaticConnector } from './Fortmatic'\nimport { NetworkConnector } from './NetworkConnector'\n\nconst FORMATIC_KEY = process.env.REACT_APP_FORTMATIC_KEY\nconst PORTIS_ID = process.env.REACT_APP_PORTIS_ID\n\nexport const network = new NetworkConnector({\n  urls: INFURA_NETWORK_URLS,\n  defaultChainId: 1,\n})\n\nlet networkLibrary: Web3Provider | undefined\nexport function getNetworkLibrary(): Web3Provider {\n  return (networkLibrary = networkLibrary ?? getLibrary(network.provider))\n}\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: ALL_SUPPORTED_CHAIN_IDS,\n})\n\nexport const gnosisSafe = new SafeAppConnector()\n\nexport const walletconnect = new WalletConnectConnector({\n  supportedChainIds: ALL_SUPPORTED_CHAIN_IDS,\n  rpc: INFURA_NETWORK_URLS,\n  qrcode: true,\n})\n\n// mainnet only\nexport const fortmatic = new FortmaticConnector({\n  apiKey: FORMATIC_KEY ?? '',\n  chainId: 1,\n})\n\n// mainnet only\nexport const portis = new PortisConnector({\n  dAppId: PORTIS_ID ?? '',\n  networks: [1],\n})\n\n// mainnet only\nexport const walletlink = new WalletLinkConnector({\n  url: INFURA_NETWORK_URLS[SupportedChainId.MAINNET],\n  appName: 'Uniswap',\n  appLogoUrl: UNISWAP_LOGO_URL,\n  supportedChainIds: [SupportedChainId.MAINNET],\n})\n"]},"metadata":{},"sourceType":"module"}