{"ast":null,"code":"import _slicedToArray from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useActiveWeb3React}from'hooks/web3';import{useCallback,useState}from'react';import{getTokenLogoURL}from'./../components/CurrencyLogo/index';export default function useAddTokenToMetamask(currencyToAdd){var _useActiveWeb3React=useActiveWeb3React(),library=_useActiveWeb3React.library;var token=currencyToAdd===null||currencyToAdd===void 0?void 0:currencyToAdd.wrapped;var _useState=useState(),_useState2=_slicedToArray(_useState,2),success=_useState2[0],setSuccess=_useState2[1];var addToken=useCallback(function(){if(library&&library.provider.isMetaMask&&library.provider.request&&token){library.provider.request({method:'wallet_watchAsset',params:{//@ts-ignore // need this for incorrect ethers provider type\ntype:'ERC20',options:{address:token.address,symbol:token.symbol,decimals:token.decimals,image:getTokenLogoURL(token.address)}}}).then(function(success){setSuccess(success);}).catch(function(){return setSuccess(false);});}else{setSuccess(false);}},[library,token]);return{addToken:addToken,success:success};}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/hooks/useAddTokenToMetamask.ts"],"names":["useActiveWeb3React","useCallback","useState","getTokenLogoURL","useAddTokenToMetamask","currencyToAdd","library","token","wrapped","success","setSuccess","addToken","provider","isMetaMask","request","method","params","type","options","address","symbol","decimals","image","then","catch"],"mappings":"+JACA,OAASA,kBAAT,KAAmC,YAAnC,CACA,OAASC,WAAT,CAAsBC,QAAtB,KAAsC,OAAtC,CAEA,OAASC,eAAT,KAAgC,oCAAhC,CAEA,cAAe,SAASC,CAAAA,qBAAT,CAA+BC,aAA/B,CAGb,CACA,wBAAoBL,kBAAkB,EAAtC,CAAQM,OAAR,qBAAQA,OAAR,CAEA,GAAMC,CAAAA,KAAwB,CAAGF,aAAH,SAAGA,aAAH,iBAAGA,aAAa,CAAEG,OAAhD,CAEA,cAA8BN,QAAQ,EAAtC,wCAAOO,OAAP,eAAgBC,UAAhB,eAEA,GAAMC,CAAAA,QAAQ,CAAGV,WAAW,CAAC,UAAM,CACjC,GAAIK,OAAO,EAAIA,OAAO,CAACM,QAAR,CAAiBC,UAA5B,EAA0CP,OAAO,CAACM,QAAR,CAAiBE,OAA3D,EAAsEP,KAA1E,CAAiF,CAC/ED,OAAO,CAACM,QAAR,CACGE,OADH,CACW,CACPC,MAAM,CAAE,mBADD,CAEPC,MAAM,CAAE,CACN;AACAC,IAAI,CAAE,OAFA,CAGNC,OAAO,CAAE,CACPC,OAAO,CAAEZ,KAAK,CAACY,OADR,CAEPC,MAAM,CAAEb,KAAK,CAACa,MAFP,CAGPC,QAAQ,CAAEd,KAAK,CAACc,QAHT,CAIPC,KAAK,CAAEnB,eAAe,CAACI,KAAK,CAACY,OAAP,CAJf,CAHH,CAFD,CADX,EAcGI,IAdH,CAcQ,SAACd,OAAD,CAAa,CACjBC,UAAU,CAACD,OAAD,CAAV,CACD,CAhBH,EAiBGe,KAjBH,CAiBS,iBAAMd,CAAAA,UAAU,CAAC,KAAD,CAAhB,EAjBT,EAkBD,CAnBD,IAmBO,CACLA,UAAU,CAAC,KAAD,CAAV,CACD,CACF,CAvB2B,CAuBzB,CAACJ,OAAD,CAAUC,KAAV,CAvByB,CAA5B,CAyBA,MAAO,CAAEI,QAAQ,CAARA,QAAF,CAAYF,OAAO,CAAPA,OAAZ,CAAP,CACD","sourcesContent":["import { Currency, Token } from '@uniswap/sdk-core'\nimport { useActiveWeb3React } from 'hooks/web3'\nimport { useCallback, useState } from 'react'\n\nimport { getTokenLogoURL } from './../components/CurrencyLogo/index'\n\nexport default function useAddTokenToMetamask(currencyToAdd: Currency | undefined): {\n  addToken: () => void\n  success: boolean | undefined\n} {\n  const { library } = useActiveWeb3React()\n\n  const token: Token | undefined = currencyToAdd?.wrapped\n\n  const [success, setSuccess] = useState<boolean | undefined>()\n\n  const addToken = useCallback(() => {\n    if (library && library.provider.isMetaMask && library.provider.request && token) {\n      library.provider\n        .request({\n          method: 'wallet_watchAsset',\n          params: {\n            //@ts-ignore // need this for incorrect ethers provider type\n            type: 'ERC20',\n            options: {\n              address: token.address,\n              symbol: token.symbol,\n              decimals: token.decimals,\n              image: getTokenLogoURL(token.address),\n            },\n          },\n        })\n        .then((success) => {\n          setSuccess(success)\n        })\n        .catch(() => setSuccess(false))\n    } else {\n      setSuccess(false)\n    }\n  }, [library, token])\n\n  return { addToken, success }\n}\n"]},"metadata":{},"sourceType":"module"}