{"ast":null,"code":"// a list of tokens by chain\nimport { Token } from '@uniswap/sdk-core';\nimport { SupportedChainId } from './chains';\nimport { AMPL, DAI, DAI_ARBITRUM_ONE, DAI_OPTIMISM, DAI_POLYGON, ETH2X_FLI, FEI, FRAX, FXS, nativeOnChain, renBTC, rETH2, sETH2, SWISE, TRIBE, USDC, USDC_ARBITRUM, USDC_OPTIMISM, USDC_POLYGON, USDT, USDT_ARBITRUM_ONE, USDT_OPTIMISM, USDT_POLYGON, WBTC, WBTC_ARBITRUM_ONE, WBTC_OPTIMISM, WBTC_POLYGON, WETH_POLYGON, WETH_POLYGON_MUMBAI, WRAPPED_NATIVE_CURRENCY } from './tokens';\nconst WRAPPED_NATIVE_CURRENCIES_ONLY = Object.fromEntries(_c2 = Object.entries(WRAPPED_NATIVE_CURRENCY).map(_c = ([key, value]) => [key, [value]])); // used to construct intermediary pairs for trading\n\n_c3 = WRAPPED_NATIVE_CURRENCIES_ONLY;\nexport const BASES_TO_CHECK_TRADES_AGAINST = { ...WRAPPED_NATIVE_CURRENCIES_ONLY,\n  [SupportedChainId.MAINNET]: [...WRAPPED_NATIVE_CURRENCIES_ONLY[SupportedChainId.MAINNET], DAI, USDC, USDT, WBTC],\n  [SupportedChainId.OPTIMISM]: [...WRAPPED_NATIVE_CURRENCIES_ONLY[SupportedChainId.OPTIMISM], DAI_OPTIMISM, USDT_OPTIMISM, WBTC_OPTIMISM],\n  [SupportedChainId.ARBITRUM_ONE]: [...WRAPPED_NATIVE_CURRENCIES_ONLY[SupportedChainId.ARBITRUM_ONE], DAI_ARBITRUM_ONE, USDT_ARBITRUM_ONE, WBTC_ARBITRUM_ONE],\n  [SupportedChainId.POLYGON]: [...WRAPPED_NATIVE_CURRENCIES_ONLY[SupportedChainId.POLYGON], DAI_POLYGON, USDC_POLYGON, USDT_POLYGON, WETH_POLYGON]\n};\nexport const ADDITIONAL_BASES = {\n  [SupportedChainId.MAINNET]: {\n    '0xF16E4d813f4DcfDe4c5b44f305c908742De84eF0': [ETH2X_FLI],\n    [rETH2.address]: [sETH2],\n    [SWISE.address]: [sETH2],\n    [FEI.address]: [TRIBE],\n    [TRIBE.address]: [FEI],\n    [FRAX.address]: [FXS],\n    [FXS.address]: [FRAX],\n    [WBTC.address]: [renBTC],\n    [renBTC.address]: [WBTC]\n  }\n};\n/**\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\n * tokens.\n */\n\nexport const CUSTOM_BASES = {\n  [SupportedChainId.MAINNET]: {\n    [AMPL.address]: [DAI, WRAPPED_NATIVE_CURRENCY[SupportedChainId.MAINNET]]\n  }\n};\n/**\n * Shows up in the currency select for swap and add liquidity\n */\n\nexport const COMMON_BASES = {\n  [SupportedChainId.MAINNET]: [nativeOnChain(SupportedChainId.MAINNET), DAI, USDC, USDT, WBTC, WRAPPED_NATIVE_CURRENCY[SupportedChainId.MAINNET]],\n  [SupportedChainId.ROPSTEN]: [nativeOnChain(SupportedChainId.ROPSTEN), WRAPPED_NATIVE_CURRENCY[SupportedChainId.ROPSTEN]],\n  [SupportedChainId.RINKEBY]: [nativeOnChain(SupportedChainId.RINKEBY), WRAPPED_NATIVE_CURRENCY[SupportedChainId.RINKEBY]],\n  [SupportedChainId.GOERLI]: [nativeOnChain(SupportedChainId.GOERLI), WRAPPED_NATIVE_CURRENCY[SupportedChainId.GOERLI]],\n  [SupportedChainId.KOVAN]: [nativeOnChain(SupportedChainId.KOVAN), WRAPPED_NATIVE_CURRENCY[SupportedChainId.KOVAN]],\n  [SupportedChainId.ARBITRUM_ONE]: [nativeOnChain(SupportedChainId.ARBITRUM_ONE), DAI_ARBITRUM_ONE, USDC_ARBITRUM, USDT_ARBITRUM_ONE, WBTC_ARBITRUM_ONE, WRAPPED_NATIVE_CURRENCY[SupportedChainId.ARBITRUM_ONE]],\n  [SupportedChainId.ARBITRUM_RINKEBY]: [nativeOnChain(SupportedChainId.ARBITRUM_RINKEBY), WRAPPED_NATIVE_CURRENCY[SupportedChainId.ARBITRUM_RINKEBY]],\n  [SupportedChainId.OPTIMISM]: [nativeOnChain(SupportedChainId.OPTIMISM), DAI_OPTIMISM, USDC_OPTIMISM, USDT_OPTIMISM, WBTC_OPTIMISM],\n  [SupportedChainId.OPTIMISTIC_KOVAN]: [nativeOnChain(SupportedChainId.OPTIMISTIC_KOVAN)],\n  [SupportedChainId.POLYGON]: [nativeOnChain(SupportedChainId.POLYGON), WETH_POLYGON, USDC_POLYGON, DAI_POLYGON, USDT_POLYGON, WBTC_POLYGON],\n  [SupportedChainId.POLYGON_MUMBAI]: [nativeOnChain(SupportedChainId.POLYGON_MUMBAI), WRAPPED_NATIVE_CURRENCY[SupportedChainId.POLYGON_MUMBAI], WETH_POLYGON_MUMBAI]\n}; // used to construct the list of all pairs we consider by default in the frontend\n\nexport const BASES_TO_TRACK_LIQUIDITY_FOR = { ...WRAPPED_NATIVE_CURRENCIES_ONLY,\n  [SupportedChainId.MAINNET]: [...WRAPPED_NATIVE_CURRENCIES_ONLY[SupportedChainId.MAINNET], DAI, USDC, USDT, WBTC]\n};\nexport const PINNED_PAIRS = {\n  [SupportedChainId.MAINNET]: [[new Token(SupportedChainId.MAINNET, '0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643', 8, 'cDAI', 'Compound Dai'), new Token(SupportedChainId.MAINNET, '0x39AA39c021dfbaE8faC545936693aC917d5E7563', 8, 'cUSDC', 'Compound USD Coin')], [USDC, USDT], [DAI, USDT]]\n};\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"WRAPPED_NATIVE_CURRENCIES_ONLY$Object.fromEntries$Object.entries(WRAPPED_NATIVE_CURRENCY).map\");\n$RefreshReg$(_c2, \"WRAPPED_NATIVE_CURRENCIES_ONLY$Object.fromEntries\");\n$RefreshReg$(_c3, \"WRAPPED_NATIVE_CURRENCIES_ONLY\");","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/constants/routing.ts"],"names":["Token","SupportedChainId","AMPL","DAI","DAI_ARBITRUM_ONE","DAI_OPTIMISM","DAI_POLYGON","ETH2X_FLI","FEI","FRAX","FXS","nativeOnChain","renBTC","rETH2","sETH2","SWISE","TRIBE","USDC","USDC_ARBITRUM","USDC_OPTIMISM","USDC_POLYGON","USDT","USDT_ARBITRUM_ONE","USDT_OPTIMISM","USDT_POLYGON","WBTC","WBTC_ARBITRUM_ONE","WBTC_OPTIMISM","WBTC_POLYGON","WETH_POLYGON","WETH_POLYGON_MUMBAI","WRAPPED_NATIVE_CURRENCY","WRAPPED_NATIVE_CURRENCIES_ONLY","Object","fromEntries","entries","map","key","value","BASES_TO_CHECK_TRADES_AGAINST","MAINNET","OPTIMISM","ARBITRUM_ONE","POLYGON","ADDITIONAL_BASES","address","CUSTOM_BASES","COMMON_BASES","ROPSTEN","RINKEBY","GOERLI","KOVAN","ARBITRUM_RINKEBY","OPTIMISTIC_KOVAN","POLYGON_MUMBAI","BASES_TO_TRACK_LIQUIDITY_FOR","PINNED_PAIRS"],"mappings":"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","sourcesContent":["// a list of tokens by chain\nimport { Currency, Token } from '@uniswap/sdk-core'\n\nimport { SupportedChainId } from './chains'\nimport {\n  AMPL,\n  DAI,\n  DAI_ARBITRUM_ONE,\n  DAI_OPTIMISM,\n  DAI_POLYGON,\n  ETH2X_FLI,\n  FEI,\n  FRAX,\n  FXS,\n  nativeOnChain,\n  renBTC,\n  rETH2,\n  sETH2,\n  SWISE,\n  TRIBE,\n  USDC,\n  USDC_ARBITRUM,\n  USDC_OPTIMISM,\n  USDC_POLYGON,\n  USDT,\n  USDT_ARBITRUM_ONE,\n  USDT_OPTIMISM,\n  USDT_POLYGON,\n  WBTC,\n  WBTC_ARBITRUM_ONE,\n  WBTC_OPTIMISM,\n  WBTC_POLYGON,\n  WETH_POLYGON,\n  WETH_POLYGON_MUMBAI,\n  WRAPPED_NATIVE_CURRENCY,\n} from './tokens'\n\ntype ChainTokenList = {\n  readonly [chainId: number]: Token[]\n}\n\ntype ChainCurrencyList = {\n  readonly [chainId: number]: Currency[]\n}\n\nconst WRAPPED_NATIVE_CURRENCIES_ONLY: ChainTokenList = Object.fromEntries(\n  Object.entries(WRAPPED_NATIVE_CURRENCY).map(([key, value]) => [key, [value]])\n)\n\n// used to construct intermediary pairs for trading\nexport const BASES_TO_CHECK_TRADES_AGAINST: ChainTokenList = {\n  ...WRAPPED_NATIVE_CURRENCIES_ONLY,\n  [SupportedChainId.MAINNET]: [...WRAPPED_NATIVE_CURRENCIES_ONLY[SupportedChainId.MAINNET], DAI, USDC, USDT, WBTC],\n  [SupportedChainId.OPTIMISM]: [\n    ...WRAPPED_NATIVE_CURRENCIES_ONLY[SupportedChainId.OPTIMISM],\n    DAI_OPTIMISM,\n    USDT_OPTIMISM,\n    WBTC_OPTIMISM,\n  ],\n  [SupportedChainId.ARBITRUM_ONE]: [\n    ...WRAPPED_NATIVE_CURRENCIES_ONLY[SupportedChainId.ARBITRUM_ONE],\n    DAI_ARBITRUM_ONE,\n    USDT_ARBITRUM_ONE,\n    WBTC_ARBITRUM_ONE,\n  ],\n  [SupportedChainId.POLYGON]: [\n    ...WRAPPED_NATIVE_CURRENCIES_ONLY[SupportedChainId.POLYGON],\n    DAI_POLYGON,\n    USDC_POLYGON,\n    USDT_POLYGON,\n    WETH_POLYGON,\n  ],\n}\nexport const ADDITIONAL_BASES: { [chainId: number]: { [tokenAddress: string]: Token[] } } = {\n  [SupportedChainId.MAINNET]: {\n    '0xF16E4d813f4DcfDe4c5b44f305c908742De84eF0': [ETH2X_FLI],\n    [rETH2.address]: [sETH2],\n    [SWISE.address]: [sETH2],\n    [FEI.address]: [TRIBE],\n    [TRIBE.address]: [FEI],\n    [FRAX.address]: [FXS],\n    [FXS.address]: [FRAX],\n    [WBTC.address]: [renBTC],\n    [renBTC.address]: [WBTC],\n  },\n}\n/**\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\n * tokens.\n */\nexport const CUSTOM_BASES: { [chainId: number]: { [tokenAddress: string]: Token[] } } = {\n  [SupportedChainId.MAINNET]: {\n    [AMPL.address]: [DAI, WRAPPED_NATIVE_CURRENCY[SupportedChainId.MAINNET]],\n  },\n}\n\n/**\n * Shows up in the currency select for swap and add liquidity\n */\nexport const COMMON_BASES: ChainCurrencyList = {\n  [SupportedChainId.MAINNET]: [\n    nativeOnChain(SupportedChainId.MAINNET),\n    DAI,\n    USDC,\n    USDT,\n    WBTC,\n    WRAPPED_NATIVE_CURRENCY[SupportedChainId.MAINNET],\n  ],\n  [SupportedChainId.ROPSTEN]: [\n    nativeOnChain(SupportedChainId.ROPSTEN),\n    WRAPPED_NATIVE_CURRENCY[SupportedChainId.ROPSTEN],\n  ],\n  [SupportedChainId.RINKEBY]: [\n    nativeOnChain(SupportedChainId.RINKEBY),\n    WRAPPED_NATIVE_CURRENCY[SupportedChainId.RINKEBY],\n  ],\n  [SupportedChainId.GOERLI]: [nativeOnChain(SupportedChainId.GOERLI), WRAPPED_NATIVE_CURRENCY[SupportedChainId.GOERLI]],\n  [SupportedChainId.KOVAN]: [nativeOnChain(SupportedChainId.KOVAN), WRAPPED_NATIVE_CURRENCY[SupportedChainId.KOVAN]],\n  [SupportedChainId.ARBITRUM_ONE]: [\n    nativeOnChain(SupportedChainId.ARBITRUM_ONE),\n    DAI_ARBITRUM_ONE,\n    USDC_ARBITRUM,\n    USDT_ARBITRUM_ONE,\n    WBTC_ARBITRUM_ONE,\n    WRAPPED_NATIVE_CURRENCY[SupportedChainId.ARBITRUM_ONE],\n  ],\n  [SupportedChainId.ARBITRUM_RINKEBY]: [\n    nativeOnChain(SupportedChainId.ARBITRUM_RINKEBY),\n    WRAPPED_NATIVE_CURRENCY[SupportedChainId.ARBITRUM_RINKEBY],\n  ],\n  [SupportedChainId.OPTIMISM]: [\n    nativeOnChain(SupportedChainId.OPTIMISM),\n    DAI_OPTIMISM,\n    USDC_OPTIMISM,\n    USDT_OPTIMISM,\n    WBTC_OPTIMISM,\n  ],\n  [SupportedChainId.OPTIMISTIC_KOVAN]: [nativeOnChain(SupportedChainId.OPTIMISTIC_KOVAN)],\n  [SupportedChainId.POLYGON]: [\n    nativeOnChain(SupportedChainId.POLYGON),\n    WETH_POLYGON,\n    USDC_POLYGON,\n    DAI_POLYGON,\n    USDT_POLYGON,\n    WBTC_POLYGON,\n  ],\n  [SupportedChainId.POLYGON_MUMBAI]: [\n    nativeOnChain(SupportedChainId.POLYGON_MUMBAI),\n    WRAPPED_NATIVE_CURRENCY[SupportedChainId.POLYGON_MUMBAI],\n    WETH_POLYGON_MUMBAI,\n  ],\n}\n\n// used to construct the list of all pairs we consider by default in the frontend\nexport const BASES_TO_TRACK_LIQUIDITY_FOR: ChainTokenList = {\n  ...WRAPPED_NATIVE_CURRENCIES_ONLY,\n  [SupportedChainId.MAINNET]: [...WRAPPED_NATIVE_CURRENCIES_ONLY[SupportedChainId.MAINNET], DAI, USDC, USDT, WBTC],\n}\nexport const PINNED_PAIRS: { readonly [chainId: number]: [Token, Token][] } = {\n  [SupportedChainId.MAINNET]: [\n    [\n      new Token(SupportedChainId.MAINNET, '0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643', 8, 'cDAI', 'Compound Dai'),\n      new Token(\n        SupportedChainId.MAINNET,\n        '0x39AA39c021dfbaE8faC545936693aC917d5E7563',\n        8,\n        'cUSDC',\n        'Compound USD Coin'\n      ),\n    ],\n    [USDC, USDT],\n    [DAI, USDT],\n  ],\n}\n"]},"metadata":{},"sourceType":"module"}