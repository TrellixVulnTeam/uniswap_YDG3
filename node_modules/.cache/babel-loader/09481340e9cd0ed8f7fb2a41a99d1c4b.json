{"ast":null,"code":"import _styled from \"styled-components\";\n\nvar _jsxFileName = \"/Users/safahi/Downloads/interface-4.30.1/src/components/claim/AddressClaimModal.tsx\",\n    _s = $RefreshSig$();\n\nimport { Trans } from \"@lingui/react\";\nimport { isAddress } from '@ethersproject/address';\nimport { useState } from 'react';\nimport { Text } from 'rebass';\nimport Circle from \"../../assets/images/blue-loader.svg\";\nimport tokenLogo from '../../assets/images/token-logo.png';\nimport useENS from '../../hooks/useENS';\nimport { useActiveWeb3React } from '../../hooks/web3';\nimport { useClaimCallback, useUserHasAvailableClaim, useUserUnclaimedAmount } from '../../state/claim/hooks';\nimport { useIsTransactionPending } from '../../state/transactions/hooks';\nimport { CloseIcon, CustomLightSpinner, ExternalLink, ThemedText, UniTokenAnimated } from '../../theme';\nimport { shortenAddress } from '../../utils';\nimport { ExplorerDataType, getExplorerLink } from '../../utils/getExplorerLink';\nimport AddressInputPanel from '../AddressInputPanel';\nimport { ButtonPrimary } from '../Button';\nimport { AutoColumn, ColumnCenter } from '../Column';\nimport Confetti from '../Confetti';\nimport { Break, CardSection, DataCard } from '../earn/styled';\nimport { CardBGImage, CardBGImageSmaller, CardNoise } from '../earn/styled';\nimport Modal from '../Modal';\nimport { RowBetween } from '../Row';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ContentWrapper = _styled(AutoColumn).withConfig({\n  displayName: \"AddressClaimModal__ContentWrapper\",\n  componentId: \"sc-1qxvqh4-0\"\n})([\"width:100%;\"]);\n\nconst ModalUpper = _styled(DataCard).withConfig({\n  displayName: \"AddressClaimModal__ModalUpper\",\n  componentId: \"sc-1qxvqh4-1\"\n})([\"box-shadow:0px 4px 10px rgba(0,0,0,0.1);background:radial-gradient(76.02% 75.41% at 1.84% 0%,#ff007a 0%,#021d43 100%);\"]);\n\nconst ConfirmOrLoadingWrapper = _styled.div.withConfig({\n  displayName: \"AddressClaimModal__ConfirmOrLoadingWrapper\",\n  componentId: \"sc-1qxvqh4-2\"\n})([\"width:100%;padding:24px;position:relative;background:\", \";\"], ({\n  activeBG\n}) => activeBG && 'radial-gradient(76.02% 75.41% at 1.84% 0%, rgba(255, 0, 122, 0.2) 0%, rgba(33, 114, 229, 0.2) 100%), #FFFFFF;');\n\nconst ConfirmedIcon = _styled(ColumnCenter).withConfig({\n  displayName: \"AddressClaimModal__ConfirmedIcon\",\n  componentId: \"sc-1qxvqh4-3\"\n})([\"padding:60px 0;\"]);\n\nexport default function AddressClaimModal({\n  isOpen,\n  onDismiss\n}) {\n  _s();\n\n  var _groupSeparator, _groupSeparator2;\n\n  const {\n    chainId\n  } = useActiveWeb3React(); // state for smart contract input\n\n  const [typed, setTyped] = useState('');\n\n  function handleRecipientType(val) {\n    setTyped(val);\n  } // monitor for third party recipient of claim\n\n\n  const {\n    address: parsedAddress\n  } = useENS(typed); // used for UI loading states\n\n  const [attempting, setAttempting] = useState(false); // monitor the status of the claim from contracts and txns\n\n  const {\n    claimCallback\n  } = useClaimCallback(parsedAddress);\n  const unclaimedAmount = useUserUnclaimedAmount(parsedAddress); // check if the user has something available\n\n  const hasAvailableClaim = useUserHasAvailableClaim(parsedAddress);\n  const [hash, setHash] = useState(); // monitor the status of the claim from contracts and txns\n\n  const claimPending = useIsTransactionPending(hash !== null && hash !== void 0 ? hash : '');\n  const claimConfirmed = hash && !claimPending; // use the hash to monitor this txn\n\n  function onClaim() {\n    setAttempting(true);\n    claimCallback().then(hash => {\n      setHash(hash);\n    }) // reset modal and log error\n    .catch(error => {\n      setAttempting(false);\n      console.log(error);\n    });\n  }\n\n  function wrappedOnDismiss() {\n    setAttempting(false);\n    setHash(undefined);\n    setTyped('');\n    onDismiss();\n  }\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    isOpen: isOpen,\n    onDismiss: wrappedOnDismiss,\n    maxHeight: 90,\n    children: [/*#__PURE__*/_jsxDEV(Confetti, {\n      start: Boolean(isOpen && claimConfirmed && attempting)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), !attempting && /*#__PURE__*/_jsxDEV(ContentWrapper, {\n      gap: \"lg\",\n      children: [/*#__PURE__*/_jsxDEV(ModalUpper, {\n        children: [/*#__PURE__*/_jsxDEV(CardBGImage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CardNoise, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CardSection, {\n          gap: \"md\",\n          children: [/*#__PURE__*/_jsxDEV(RowBetween, {\n            children: [/*#__PURE__*/_jsxDEV(ThemedText.White, {\n              fontWeight: 500,\n              children: /*#__PURE__*/_jsxDEV(Trans, {\n                id: \"Claim UNI Token\"\n              }, void 0, false, void 0, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(CloseIcon, {\n              onClick: wrappedOnDismiss,\n              style: {\n                zIndex: 99\n              },\n              stroke: \"white\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ThemedText.White, {\n            fontWeight: 700,\n            fontSize: 36,\n            children: /*#__PURE__*/_jsxDEV(Trans, {\n              id: \"{0} UNI\",\n              values: {\n                0: unclaimedAmount === null || unclaimedAmount === void 0 ? void 0 : unclaimedAmount.toFixed(0, (_groupSeparator = {\n                  groupSeparator: ','\n                }) !== null && _groupSeparator !== void 0 ? _groupSeparator : '-')\n              }\n            }, void 0, false, void 0, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Break, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AutoColumn, {\n        gap: \"md\",\n        style: {\n          padding: '1rem',\n          paddingTop: '0'\n        },\n        justify: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(ThemedText.SubHeader, {\n          fontWeight: 500,\n          children: /*#__PURE__*/_jsxDEV(Trans, {\n            id: \"Enter an address to trigger a UNI claim. If the address has any claimable UNI it will be sent to them on submission.\"\n          }, void 0, false, void 0, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(AddressInputPanel, {\n          value: typed,\n          onChange: handleRecipientType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this), parsedAddress && !hasAvailableClaim && /*#__PURE__*/_jsxDEV(ThemedText.Error, {\n          error: true,\n          children: /*#__PURE__*/_jsxDEV(Trans, {\n            id: \"Address has no available claim\"\n          }, void 0, false, void 0, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(ButtonPrimary, {\n          disabled: !isAddress(parsedAddress !== null && parsedAddress !== void 0 ? parsedAddress : '') || !hasAvailableClaim,\n          padding: \"16px 16px\",\n          width: \"100%\",\n          $borderRadius: \"12px\",\n          mt: \"1rem\",\n          onClick: onClaim,\n          children: /*#__PURE__*/_jsxDEV(Trans, {\n            id: \"Claim UNI\"\n          }, void 0, false, void 0, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this), (attempting || claimConfirmed) && /*#__PURE__*/_jsxDEV(ConfirmOrLoadingWrapper, {\n      activeBG: true,\n      children: [/*#__PURE__*/_jsxDEV(CardNoise, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CardBGImageSmaller, {\n        desaturate: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(RowBetween, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CloseIcon, {\n          onClick: wrappedOnDismiss,\n          style: {\n            zIndex: 99\n          },\n          stroke: \"black\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ConfirmedIcon, {\n        children: !claimConfirmed ? /*#__PURE__*/_jsxDEV(CustomLightSpinner, {\n          src: Circle,\n          alt: \"loader\",\n          size: '90px'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(UniTokenAnimated, {\n          width: \"72px\",\n          src: tokenLogo,\n          alt: \"UNI logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AutoColumn, {\n        gap: \"100px\",\n        justify: 'center',\n        children: [/*#__PURE__*/_jsxDEV(AutoColumn, {\n          gap: \"12px\",\n          justify: 'center',\n          children: [/*#__PURE__*/_jsxDEV(ThemedText.LargeHeader, {\n            fontWeight: 600,\n            color: \"black\",\n            children: claimConfirmed ? /*#__PURE__*/_jsxDEV(Trans, {\n              id: \"Claimed\"\n            }, void 0, false, void 0, this) : /*#__PURE__*/_jsxDEV(Trans, {\n              id: \"Claiming\"\n            }, void 0, false, void 0, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 15\n          }, this), !claimConfirmed && /*#__PURE__*/_jsxDEV(Text, {\n            fontSize: 36,\n            color: '#ff007a',\n            fontWeight: 800,\n            children: /*#__PURE__*/_jsxDEV(Trans, {\n              id: \"{0} UNI\",\n              values: {\n                0: unclaimedAmount === null || unclaimedAmount === void 0 ? void 0 : unclaimedAmount.toFixed(0, (_groupSeparator2 = {\n                  groupSeparator: ','\n                }) !== null && _groupSeparator2 !== void 0 ? _groupSeparator2 : '-')\n              }\n            }, void 0, false, void 0, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 17\n          }, this), parsedAddress && /*#__PURE__*/_jsxDEV(ThemedText.LargeHeader, {\n            fontWeight: 600,\n            color: \"black\",\n            children: /*#__PURE__*/_jsxDEV(Trans, {\n              id: \"for {0}\",\n              values: {\n                0: shortenAddress(parsedAddress)\n              }\n            }, void 0, false, void 0, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this), claimConfirmed && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(ThemedText.SubHeader, {\n            fontWeight: 500,\n            color: \"black\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              role: \"img\",\n              \"aria-label\": \"party-hat\",\n              children: [\"\\uD83C\\uDF89\", ' ']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Trans, {\n              id: \"Welcome to team Unicorn :)\"\n            }, void 0, false, void 0, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              role: \"img\",\n              \"aria-label\": \"party-hat\",\n              children: \"\\uD83C\\uDF89\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 17\n          }, this)\n        }, void 0, false), attempting && !hash && /*#__PURE__*/_jsxDEV(ThemedText.SubHeader, {\n          color: \"black\",\n          children: /*#__PURE__*/_jsxDEV(Trans, {\n            id: \"Confirm this transaction in your wallet\"\n          }, void 0, false, void 0, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 15\n        }, this), attempting && hash && !claimConfirmed && chainId && hash && /*#__PURE__*/_jsxDEV(ExternalLink, {\n          href: getExplorerLink(chainId, hash, ExplorerDataType.TRANSACTION),\n          style: {\n            zIndex: 99\n          },\n          children: /*#__PURE__*/_jsxDEV(Trans, {\n            id: \"View transaction on Explorer\"\n          }, void 0, false, void 0, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AddressClaimModal, \"IaMGanIKjl/NANTptNU1nX1HrWk=\", false, function () {\n  return [useActiveWeb3React, useENS, useClaimCallback, useUserUnclaimedAmount, useUserHasAvailableClaim, useIsTransactionPending];\n});\n\n_c = AddressClaimModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddressClaimModal\");","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/components/claim/AddressClaimModal.tsx"],"names":["isAddress","useState","Text","tokenLogo","useENS","useActiveWeb3React","useClaimCallback","useUserHasAvailableClaim","useUserUnclaimedAmount","useIsTransactionPending","CloseIcon","CustomLightSpinner","ExternalLink","ThemedText","UniTokenAnimated","shortenAddress","ExplorerDataType","getExplorerLink","AddressInputPanel","ButtonPrimary","AutoColumn","ColumnCenter","Confetti","Break","CardSection","DataCard","CardBGImage","CardBGImageSmaller","CardNoise","Modal","RowBetween","ContentWrapper","styled","ModalUpper","ConfirmOrLoadingWrapper","div","activeBG","ConfirmedIcon","AddressClaimModal","isOpen","onDismiss","chainId","typed","setTyped","handleRecipientType","val","address","parsedAddress","attempting","setAttempting","claimCallback","unclaimedAmount","hasAvailableClaim","hash","setHash","claimPending","claimConfirmed","onClaim","then","catch","error","console","log","wrappedOnDismiss","undefined","Boolean","zIndex","toFixed","groupSeparator","padding","paddingTop","Circle","TRANSACTION"],"mappings":"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","sourcesContent":["import { isAddress } from '@ethersproject/address'\nimport { Trans } from '@lingui/macro'\nimport { CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { useState } from 'react'\nimport { Text } from 'rebass'\nimport styled from 'styled-components/macro'\n\nimport Circle from '../../assets/images/blue-loader.svg'\nimport tokenLogo from '../../assets/images/token-logo.png'\nimport useENS from '../../hooks/useENS'\nimport { useActiveWeb3React } from '../../hooks/web3'\nimport { useClaimCallback, useUserHasAvailableClaim, useUserUnclaimedAmount } from '../../state/claim/hooks'\nimport { useIsTransactionPending } from '../../state/transactions/hooks'\nimport { CloseIcon, CustomLightSpinner, ExternalLink, ThemedText, UniTokenAnimated } from '../../theme'\nimport { shortenAddress } from '../../utils'\nimport { ExplorerDataType, getExplorerLink } from '../../utils/getExplorerLink'\nimport AddressInputPanel from '../AddressInputPanel'\nimport { ButtonPrimary } from '../Button'\nimport { AutoColumn, ColumnCenter } from '../Column'\nimport Confetti from '../Confetti'\nimport { Break, CardSection, DataCard } from '../earn/styled'\nimport { CardBGImage, CardBGImageSmaller, CardNoise } from '../earn/styled'\nimport Modal from '../Modal'\nimport { RowBetween } from '../Row'\n\nconst ContentWrapper = styled(AutoColumn)`\n  width: 100%;\n`\n\nconst ModalUpper = styled(DataCard)`\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\n  background: radial-gradient(76.02% 75.41% at 1.84% 0%, #ff007a 0%, #021d43 100%);\n`\n\nconst ConfirmOrLoadingWrapper = styled.div<{ activeBG: boolean }>`\n  width: 100%;\n  padding: 24px;\n  position: relative;\n  background: ${({ activeBG }) =>\n    activeBG &&\n    'radial-gradient(76.02% 75.41% at 1.84% 0%, rgba(255, 0, 122, 0.2) 0%, rgba(33, 114, 229, 0.2) 100%), #FFFFFF;'};\n`\n\nconst ConfirmedIcon = styled(ColumnCenter)`\n  padding: 60px 0;\n`\n\nexport default function AddressClaimModal({ isOpen, onDismiss }: { isOpen: boolean; onDismiss: () => void }) {\n  const { chainId } = useActiveWeb3React()\n\n  // state for smart contract input\n  const [typed, setTyped] = useState('')\n  function handleRecipientType(val: string) {\n    setTyped(val)\n  }\n\n  // monitor for third party recipient of claim\n  const { address: parsedAddress } = useENS(typed)\n\n  // used for UI loading states\n  const [attempting, setAttempting] = useState<boolean>(false)\n\n  // monitor the status of the claim from contracts and txns\n  const { claimCallback } = useClaimCallback(parsedAddress)\n  const unclaimedAmount: CurrencyAmount<Token> | undefined = useUserUnclaimedAmount(parsedAddress)\n\n  // check if the user has something available\n  const hasAvailableClaim = useUserHasAvailableClaim(parsedAddress)\n\n  const [hash, setHash] = useState<string | undefined>()\n\n  // monitor the status of the claim from contracts and txns\n  const claimPending = useIsTransactionPending(hash ?? '')\n  const claimConfirmed = hash && !claimPending\n\n  // use the hash to monitor this txn\n\n  function onClaim() {\n    setAttempting(true)\n    claimCallback()\n      .then((hash) => {\n        setHash(hash)\n      })\n      // reset modal and log error\n      .catch((error) => {\n        setAttempting(false)\n        console.log(error)\n      })\n  }\n\n  function wrappedOnDismiss() {\n    setAttempting(false)\n    setHash(undefined)\n    setTyped('')\n    onDismiss()\n  }\n\n  return (\n    <Modal isOpen={isOpen} onDismiss={wrappedOnDismiss} maxHeight={90}>\n      <Confetti start={Boolean(isOpen && claimConfirmed && attempting)} />\n      {!attempting && (\n        <ContentWrapper gap=\"lg\">\n          <ModalUpper>\n            <CardBGImage />\n            <CardNoise />\n            <CardSection gap=\"md\">\n              <RowBetween>\n                <ThemedText.White fontWeight={500}>\n                  <Trans>Claim UNI Token</Trans>\n                </ThemedText.White>\n                <CloseIcon onClick={wrappedOnDismiss} style={{ zIndex: 99 }} stroke=\"white\" />\n              </RowBetween>\n              <ThemedText.White fontWeight={700} fontSize={36}>\n                <Trans>{unclaimedAmount?.toFixed(0, { groupSeparator: ',' } ?? '-')} UNI</Trans>\n              </ThemedText.White>\n            </CardSection>\n            <Break />\n          </ModalUpper>\n          <AutoColumn gap=\"md\" style={{ padding: '1rem', paddingTop: '0' }} justify=\"center\">\n            <ThemedText.SubHeader fontWeight={500}>\n              <Trans>\n                Enter an address to trigger a UNI claim. If the address has any claimable UNI it will be sent to them on\n                submission.\n              </Trans>\n            </ThemedText.SubHeader>\n            <AddressInputPanel value={typed} onChange={handleRecipientType} />\n            {parsedAddress && !hasAvailableClaim && (\n              <ThemedText.Error error={true}>\n                <Trans>Address has no available claim</Trans>\n              </ThemedText.Error>\n            )}\n            <ButtonPrimary\n              disabled={!isAddress(parsedAddress ?? '') || !hasAvailableClaim}\n              padding=\"16px 16px\"\n              width=\"100%\"\n              $borderRadius=\"12px\"\n              mt=\"1rem\"\n              onClick={onClaim}\n            >\n              <Trans>Claim UNI</Trans>\n            </ButtonPrimary>\n          </AutoColumn>\n        </ContentWrapper>\n      )}\n      {(attempting || claimConfirmed) && (\n        <ConfirmOrLoadingWrapper activeBG={true}>\n          <CardNoise />\n          <CardBGImageSmaller desaturate />\n          <RowBetween>\n            <div />\n            <CloseIcon onClick={wrappedOnDismiss} style={{ zIndex: 99 }} stroke=\"black\" />\n          </RowBetween>\n          <ConfirmedIcon>\n            {!claimConfirmed ? (\n              <CustomLightSpinner src={Circle} alt=\"loader\" size={'90px'} />\n            ) : (\n              <UniTokenAnimated width=\"72px\" src={tokenLogo} alt=\"UNI logo\" />\n            )}\n          </ConfirmedIcon>\n          <AutoColumn gap=\"100px\" justify={'center'}>\n            <AutoColumn gap=\"12px\" justify={'center'}>\n              <ThemedText.LargeHeader fontWeight={600} color=\"black\">\n                {claimConfirmed ? <Trans>Claimed</Trans> : <Trans>Claiming</Trans>}\n              </ThemedText.LargeHeader>\n              {!claimConfirmed && (\n                <Text fontSize={36} color={'#ff007a'} fontWeight={800}>\n                  <Trans>{unclaimedAmount?.toFixed(0, { groupSeparator: ',' } ?? '-')} UNI</Trans>\n                </Text>\n              )}\n              {parsedAddress && (\n                <ThemedText.LargeHeader fontWeight={600} color=\"black\">\n                  <Trans>for {shortenAddress(parsedAddress)}</Trans>\n                </ThemedText.LargeHeader>\n              )}\n            </AutoColumn>\n            {claimConfirmed && (\n              <>\n                <ThemedText.SubHeader fontWeight={500} color=\"black\">\n                  <span role=\"img\" aria-label=\"party-hat\">\n                    🎉{' '}\n                  </span>\n                  <Trans>Welcome to team Unicorn :) </Trans>\n                  <span role=\"img\" aria-label=\"party-hat\">\n                    🎉\n                  </span>\n                </ThemedText.SubHeader>\n              </>\n            )}\n            {attempting && !hash && (\n              <ThemedText.SubHeader color=\"black\">\n                <Trans>Confirm this transaction in your wallet</Trans>\n              </ThemedText.SubHeader>\n            )}\n            {attempting && hash && !claimConfirmed && chainId && hash && (\n              <ExternalLink href={getExplorerLink(chainId, hash, ExplorerDataType.TRANSACTION)} style={{ zIndex: 99 }}>\n                <Trans>View transaction on Explorer</Trans>\n              </ExternalLink>\n            )}\n          </AutoColumn>\n        </ConfirmOrLoadingWrapper>\n      )}\n    </Modal>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}