{"ast":null,"code":"\"use strict\"; // Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WalletLinkConnection = void 0;\n\nconst rxjs_1 = require(\"rxjs\");\n\nconst operators_1 = require(\"rxjs/operators\");\n\nconst init_1 = require(\"../init\");\n\nconst Session_1 = require(\"../relay/Session\");\n\nconst types_1 = require(\"../types\");\n\nconst ClientMessage_1 = require(\"./ClientMessage\");\n\nconst RxWebSocket_1 = require(\"./RxWebSocket\");\n\nconst ServerMessage_1 = require(\"./ServerMessage\");\n\nconst HEARTBEAT_INTERVAL = 10000;\nconst REQUEST_TIMEOUT = 60000;\n/**\n * WalletLink Connection\n */\n\nclass WalletLinkConnection {\n  /**\n   * Constructor\n   * @param sessionId Session ID\n   * @param sessionKey Session Key\n   * @param serverUrl Walletlinkd RPC URL\n   * @param [WebSocketClass] Custom WebSocket implementation\n   */\n  constructor(sessionId, sessionKey, serverUrl, walletLinkAnalytics, WebSocketClass = WebSocket) {\n    this.sessionId = sessionId;\n    this.sessionKey = sessionKey;\n    this.subscriptions = new rxjs_1.Subscription();\n    this.destroyed = false;\n    this.lastHeartbeatResponse = 0;\n    this.nextReqId = types_1.IntNumber(1);\n    this.connectedSubject = new rxjs_1.BehaviorSubject(false);\n    this.linkedSubject = new rxjs_1.BehaviorSubject(false);\n    this.sessionConfigSubject = new rxjs_1.ReplaySubject(1);\n    const ws = new RxWebSocket_1.RxWebSocket(serverUrl + \"/rpc\", WebSocketClass);\n    this.ws = ws;\n    this.walletLinkAnalytics = walletLinkAnalytics; // attempt to reconnect every 5 seconds when disconnected\n\n    this.subscriptions.add(ws.connectionState$.pipe(operators_1.tap(state => this.walletLinkAnalytics.sendEvent(init_1.EVENTS.CONNECTED_STATE_CHANGE, {\n      state,\n      sessionIdHash: Session_1.Session.hash(sessionId)\n    })), // ignore initial DISCONNECTED state\n    operators_1.skip(1), // if DISCONNECTED and not destroyed\n    operators_1.filter(cs => cs === RxWebSocket_1.ConnectionState.DISCONNECTED && !this.destroyed), // wait 5 seconds\n    operators_1.delay(5000), // check whether it's destroyed again\n    operators_1.filter(_ => !this.destroyed), // reconnect\n    operators_1.flatMap(_ => ws.connect()), operators_1.retry()).subscribe()); // perform authentication upon connection\n\n    this.subscriptions.add(ws.connectionState$.pipe( // ignore initial DISCONNECTED and CONNECTING states\n    operators_1.skip(2), operators_1.switchMap(cs => rxjs_1.iif(() => cs === RxWebSocket_1.ConnectionState.CONNECTED, // if CONNECTED, authenticate, and then check link status\n    this.authenticate().pipe(operators_1.tap(_ => this.sendIsLinked()), operators_1.tap(_ => this.sendGetSessionConfig()), operators_1.map(_ => true)), // if not CONNECTED, emit false immediately\n    rxjs_1.of(false))), operators_1.distinctUntilChanged(), operators_1.catchError(_ => rxjs_1.of(false))).subscribe(connected => this.connectedSubject.next(connected))); // send heartbeat every n seconds while connected\n\n    this.subscriptions.add(ws.connectionState$.pipe( // ignore initial DISCONNECTED state\n    operators_1.skip(1), operators_1.switchMap(cs => rxjs_1.iif(() => cs === RxWebSocket_1.ConnectionState.CONNECTED, // if CONNECTED, start the heartbeat timer\n    rxjs_1.timer(0, HEARTBEAT_INTERVAL)))).subscribe(i => // first timer event updates lastHeartbeat timestamp\n    // subsequent calls send heartbeat message\n    i === 0 ? this.updateLastHeartbeat() : this.heartbeat())); // handle server's heartbeat responses\n\n    this.subscriptions.add(ws.incomingData$.pipe(operators_1.filter(m => m === \"h\")).subscribe(_ => this.updateLastHeartbeat())); // handle link status updates\n\n    this.subscriptions.add(ws.incomingJSONData$.pipe(operators_1.filter(m => [\"IsLinkedOK\", \"Linked\"].includes(m.type))).subscribe(m => {\n      const msg = m;\n      this.walletLinkAnalytics.sendEvent(init_1.EVENTS.LINKED, {\n        sessionIdHash: Session_1.Session.hash(sessionId),\n        linked: msg.linked,\n        type: m.type,\n        onlineGuests: msg.onlineGuests\n      });\n      this.linkedSubject.next(msg.linked || msg.onlineGuests > 0);\n    })); // handle session config updates\n\n    this.subscriptions.add(ws.incomingJSONData$.pipe(operators_1.filter(m => [\"GetSessionConfigOK\", \"SessionConfigUpdated\"].includes(m.type))).subscribe(m => {\n      const msg = m;\n      this.walletLinkAnalytics.sendEvent(init_1.EVENTS.SESSION_CONFIG_RECEIVED, {\n        sessionIdHash: Session_1.Session.hash(sessionId),\n        metadata_keys: msg && msg.metadata ? Object.keys(msg.metadata) : undefined\n      });\n      this.sessionConfigSubject.next({\n        webhookId: msg.webhookId,\n        webhookUrl: msg.webhookUrl,\n        metadata: msg.metadata\n      });\n    }));\n  }\n  /**\n   * Make a connection to the server\n   */\n\n\n  connect() {\n    if (this.destroyed) {\n      throw new Error(\"instance is destroyed\");\n    }\n\n    this.walletLinkAnalytics.sendEvent(init_1.EVENTS.STARTED_CONNECTING, {\n      sessionIdHash: Session_1.Session.hash(this.sessionId)\n    });\n    this.ws.connect().subscribe();\n  }\n  /**\n   * Terminate connection, and mark as destroyed. To reconnect, create a new\n   * instance of WalletLinkConnection\n   */\n\n\n  destroy() {\n    this.subscriptions.unsubscribe();\n    this.ws.disconnect();\n    this.walletLinkAnalytics.sendEvent(init_1.EVENTS.DISCONNECTED, {\n      sessionIdHash: Session_1.Session.hash(this.sessionId)\n    });\n    this.destroyed = true;\n  }\n\n  get isDestroyed() {\n    return this.destroyed;\n  }\n  /**\n   * Emit true if connected and authenticated, else false\n   * @returns an Observable\n   */\n\n\n  get connected$() {\n    return this.connectedSubject.asObservable();\n  }\n  /**\n   * Emit once connected\n   * @returns an Observable\n   */\n\n\n  get onceConnected$() {\n    return this.connected$.pipe(operators_1.filter(v => v), operators_1.take(1), operators_1.map(() => void 0));\n  }\n  /**\n   * Emit true if linked (a guest has joined before)\n   * @returns an Observable\n   */\n\n\n  get linked$() {\n    return this.linkedSubject.asObservable();\n  }\n  /**\n   * Emit once when linked\n   * @returns an Observable\n   */\n\n\n  get onceLinked$() {\n    return this.linked$.pipe(operators_1.filter(v => v), operators_1.take(1), operators_1.map(() => void 0));\n  }\n  /**\n   * Emit current session config if available, and subsequent updates\n   * @returns an Observable for the session config\n   */\n\n\n  get sessionConfig$() {\n    return this.sessionConfigSubject.asObservable();\n  }\n  /**\n   * Emit incoming Event messages\n   * @returns an Observable for the messages\n   */\n\n\n  get incomingEvent$() {\n    return this.ws.incomingJSONData$.pipe(operators_1.filter(m => {\n      if (m.type !== \"Event\") {\n        return false;\n      }\n\n      const sme = m;\n      return typeof sme.sessionId === \"string\" && typeof sme.eventId === \"string\" && typeof sme.event === \"string\" && typeof sme.data === \"string\";\n    }), operators_1.map(m => m));\n  }\n  /**\n   * Set session metadata in SessionConfig object\n   * @param key\n   * @param value\n   * @returns an Observable that completes when successful\n   */\n\n\n  setSessionMetadata(key, value) {\n    const message = ClientMessage_1.ClientMessageSetSessionConfig({\n      id: types_1.IntNumber(this.nextReqId++),\n      sessionId: this.sessionId,\n      metadata: {\n        [key]: value\n      }\n    });\n    return this.onceConnected$.pipe(operators_1.flatMap(_ => this.makeRequest(message)), operators_1.map(res => {\n      if (ServerMessage_1.isServerMessageFail(res)) {\n        throw new Error(res.error || \"failed to set session metadata\");\n      }\n    }));\n  }\n  /**\n   * Publish an event and emit event ID when successful\n   * @param event event name\n   * @param data event data\n   * @param callWebhook whether the webhook should be invoked\n   * @returns an Observable that emits event ID when successful\n   */\n\n\n  publishEvent(event, data, callWebhook = false) {\n    const message = ClientMessage_1.ClientMessagePublishEvent({\n      id: types_1.IntNumber(this.nextReqId++),\n      sessionId: this.sessionId,\n      event,\n      data,\n      callWebhook\n    });\n    return this.onceLinked$.pipe(operators_1.flatMap(_ => this.makeRequest(message)), operators_1.map(res => {\n      if (ServerMessage_1.isServerMessageFail(res)) {\n        throw new Error(res.error || \"failed to publish event\");\n      }\n\n      return res.eventId;\n    }));\n  }\n\n  sendData(message) {\n    this.ws.sendData(JSON.stringify(message));\n  }\n\n  updateLastHeartbeat() {\n    this.lastHeartbeatResponse = Date.now();\n  }\n\n  heartbeat() {\n    if (Date.now() - this.lastHeartbeatResponse > HEARTBEAT_INTERVAL * 2) {\n      this.ws.disconnect();\n      return;\n    }\n\n    try {\n      this.ws.sendData(\"h\");\n    } catch (_a) {}\n  }\n\n  makeRequest(message, timeout = REQUEST_TIMEOUT) {\n    const reqId = message.id;\n\n    try {\n      this.sendData(message);\n    } catch (err) {\n      return rxjs_1.throwError(err);\n    } // await server message with corresponding id\n\n\n    return this.ws.incomingJSONData$.pipe(operators_1.timeoutWith(timeout, rxjs_1.throwError(new Error(`request ${reqId} timed out`))), operators_1.filter(m => m.id === reqId), operators_1.take(1));\n  }\n\n  authenticate() {\n    const msg = ClientMessage_1.ClientMessageHostSession({\n      id: types_1.IntNumber(this.nextReqId++),\n      sessionId: this.sessionId,\n      sessionKey: this.sessionKey\n    });\n    return this.makeRequest(msg).pipe(operators_1.map(res => {\n      if (ServerMessage_1.isServerMessageFail(res)) {\n        throw new Error(res.error || \"failed to authentcate\");\n      }\n    }));\n  }\n\n  sendIsLinked() {\n    const msg = ClientMessage_1.ClientMessageIsLinked({\n      id: types_1.IntNumber(this.nextReqId++),\n      sessionId: this.sessionId\n    });\n    this.sendData(msg);\n  }\n\n  sendGetSessionConfig() {\n    const msg = ClientMessage_1.ClientMessageGetSessionConfig({\n      id: types_1.IntNumber(this.nextReqId++),\n      sessionId: this.sessionId\n    });\n    this.sendData(msg);\n  }\n\n}\n\nexports.WalletLinkConnection = WalletLinkConnection;","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/node_modules/walletlink/dist/connection/WalletLinkConnection.js"],"names":["Object","defineProperty","exports","value","WalletLinkConnection","rxjs_1","require","operators_1","init_1","Session_1","types_1","ClientMessage_1","RxWebSocket_1","ServerMessage_1","HEARTBEAT_INTERVAL","REQUEST_TIMEOUT","constructor","sessionId","sessionKey","serverUrl","walletLinkAnalytics","WebSocketClass","WebSocket","subscriptions","Subscription","destroyed","lastHeartbeatResponse","nextReqId","IntNumber","connectedSubject","BehaviorSubject","linkedSubject","sessionConfigSubject","ReplaySubject","ws","RxWebSocket","add","connectionState$","pipe","tap","state","sendEvent","EVENTS","CONNECTED_STATE_CHANGE","sessionIdHash","Session","hash","skip","filter","cs","ConnectionState","DISCONNECTED","delay","_","flatMap","connect","retry","subscribe","switchMap","iif","CONNECTED","authenticate","sendIsLinked","sendGetSessionConfig","map","of","distinctUntilChanged","catchError","connected","next","timer","i","updateLastHeartbeat","heartbeat","incomingData$","m","incomingJSONData$","includes","type","msg","LINKED","linked","onlineGuests","SESSION_CONFIG_RECEIVED","metadata_keys","metadata","keys","undefined","webhookId","webhookUrl","Error","STARTED_CONNECTING","destroy","unsubscribe","disconnect","isDestroyed","connected$","asObservable","onceConnected$","v","take","linked$","onceLinked$","sessionConfig$","incomingEvent$","sme","eventId","event","data","setSessionMetadata","key","message","ClientMessageSetSessionConfig","id","makeRequest","res","isServerMessageFail","error","publishEvent","callWebhook","ClientMessagePublishEvent","sendData","JSON","stringify","Date","now","_a","timeout","reqId","err","throwError","timeoutWith","ClientMessageHostSession","ClientMessageIsLinked","ClientMessageGetSessionConfig"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WalletLinkConnection = void 0;\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst init_1 = require(\"../init\");\nconst Session_1 = require(\"../relay/Session\");\nconst types_1 = require(\"../types\");\nconst ClientMessage_1 = require(\"./ClientMessage\");\nconst RxWebSocket_1 = require(\"./RxWebSocket\");\nconst ServerMessage_1 = require(\"./ServerMessage\");\nconst HEARTBEAT_INTERVAL = 10000;\nconst REQUEST_TIMEOUT = 60000;\n/**\n * WalletLink Connection\n */\nclass WalletLinkConnection {\n    /**\n     * Constructor\n     * @param sessionId Session ID\n     * @param sessionKey Session Key\n     * @param serverUrl Walletlinkd RPC URL\n     * @param [WebSocketClass] Custom WebSocket implementation\n     */\n    constructor(sessionId, sessionKey, serverUrl, walletLinkAnalytics, WebSocketClass = WebSocket) {\n        this.sessionId = sessionId;\n        this.sessionKey = sessionKey;\n        this.subscriptions = new rxjs_1.Subscription();\n        this.destroyed = false;\n        this.lastHeartbeatResponse = 0;\n        this.nextReqId = types_1.IntNumber(1);\n        this.connectedSubject = new rxjs_1.BehaviorSubject(false);\n        this.linkedSubject = new rxjs_1.BehaviorSubject(false);\n        this.sessionConfigSubject = new rxjs_1.ReplaySubject(1);\n        const ws = new RxWebSocket_1.RxWebSocket(serverUrl + \"/rpc\", WebSocketClass);\n        this.ws = ws;\n        this.walletLinkAnalytics = walletLinkAnalytics;\n        // attempt to reconnect every 5 seconds when disconnected\n        this.subscriptions.add(ws.connectionState$\n            .pipe(operators_1.tap(state => this.walletLinkAnalytics.sendEvent(init_1.EVENTS.CONNECTED_STATE_CHANGE, {\n            state,\n            sessionIdHash: Session_1.Session.hash(sessionId)\n        })), \n        // ignore initial DISCONNECTED state\n        operators_1.skip(1), \n        // if DISCONNECTED and not destroyed\n        operators_1.filter(cs => cs === RxWebSocket_1.ConnectionState.DISCONNECTED && !this.destroyed), \n        // wait 5 seconds\n        operators_1.delay(5000), \n        // check whether it's destroyed again\n        operators_1.filter(_ => !this.destroyed), \n        // reconnect\n        operators_1.flatMap(_ => ws.connect()), operators_1.retry())\n            .subscribe());\n        // perform authentication upon connection\n        this.subscriptions.add(ws.connectionState$\n            .pipe(\n        // ignore initial DISCONNECTED and CONNECTING states\n        operators_1.skip(2), operators_1.switchMap(cs => rxjs_1.iif(() => cs === RxWebSocket_1.ConnectionState.CONNECTED, \n        // if CONNECTED, authenticate, and then check link status\n        this.authenticate().pipe(operators_1.tap(_ => this.sendIsLinked()), operators_1.tap(_ => this.sendGetSessionConfig()), operators_1.map(_ => true)), \n        // if not CONNECTED, emit false immediately\n        rxjs_1.of(false))), operators_1.distinctUntilChanged(), operators_1.catchError(_ => rxjs_1.of(false)))\n            .subscribe(connected => this.connectedSubject.next(connected)));\n        // send heartbeat every n seconds while connected\n        this.subscriptions.add(ws.connectionState$\n            .pipe(\n        // ignore initial DISCONNECTED state\n        operators_1.skip(1), operators_1.switchMap(cs => rxjs_1.iif(() => cs === RxWebSocket_1.ConnectionState.CONNECTED, \n        // if CONNECTED, start the heartbeat timer\n        rxjs_1.timer(0, HEARTBEAT_INTERVAL))))\n            .subscribe(i => \n        // first timer event updates lastHeartbeat timestamp\n        // subsequent calls send heartbeat message\n        i === 0 ? this.updateLastHeartbeat() : this.heartbeat()));\n        // handle server's heartbeat responses\n        this.subscriptions.add(ws.incomingData$\n            .pipe(operators_1.filter(m => m === \"h\"))\n            .subscribe(_ => this.updateLastHeartbeat()));\n        // handle link status updates\n        this.subscriptions.add(ws.incomingJSONData$\n            .pipe(operators_1.filter(m => [\"IsLinkedOK\", \"Linked\"].includes(m.type)))\n            .subscribe(m => {\n            const msg = m;\n            this.walletLinkAnalytics.sendEvent(init_1.EVENTS.LINKED, {\n                sessionIdHash: Session_1.Session.hash(sessionId),\n                linked: msg.linked,\n                type: m.type,\n                onlineGuests: msg.onlineGuests\n            });\n            this.linkedSubject.next(msg.linked || msg.onlineGuests > 0);\n        }));\n        // handle session config updates\n        this.subscriptions.add(ws.incomingJSONData$\n            .pipe(operators_1.filter(m => [\"GetSessionConfigOK\", \"SessionConfigUpdated\"].includes(m.type)))\n            .subscribe(m => {\n            const msg = m;\n            this.walletLinkAnalytics.sendEvent(init_1.EVENTS.SESSION_CONFIG_RECEIVED, {\n                sessionIdHash: Session_1.Session.hash(sessionId),\n                metadata_keys: msg && msg.metadata ? Object.keys(msg.metadata) : undefined\n            });\n            this.sessionConfigSubject.next({\n                webhookId: msg.webhookId,\n                webhookUrl: msg.webhookUrl,\n                metadata: msg.metadata\n            });\n        }));\n    }\n    /**\n     * Make a connection to the server\n     */\n    connect() {\n        if (this.destroyed) {\n            throw new Error(\"instance is destroyed\");\n        }\n        this.walletLinkAnalytics.sendEvent(init_1.EVENTS.STARTED_CONNECTING, {\n            sessionIdHash: Session_1.Session.hash(this.sessionId)\n        });\n        this.ws.connect().subscribe();\n    }\n    /**\n     * Terminate connection, and mark as destroyed. To reconnect, create a new\n     * instance of WalletLinkConnection\n     */\n    destroy() {\n        this.subscriptions.unsubscribe();\n        this.ws.disconnect();\n        this.walletLinkAnalytics.sendEvent(init_1.EVENTS.DISCONNECTED, {\n            sessionIdHash: Session_1.Session.hash(this.sessionId)\n        });\n        this.destroyed = true;\n    }\n    get isDestroyed() {\n        return this.destroyed;\n    }\n    /**\n     * Emit true if connected and authenticated, else false\n     * @returns an Observable\n     */\n    get connected$() {\n        return this.connectedSubject.asObservable();\n    }\n    /**\n     * Emit once connected\n     * @returns an Observable\n     */\n    get onceConnected$() {\n        return this.connected$.pipe(operators_1.filter(v => v), operators_1.take(1), operators_1.map(() => void 0));\n    }\n    /**\n     * Emit true if linked (a guest has joined before)\n     * @returns an Observable\n     */\n    get linked$() {\n        return this.linkedSubject.asObservable();\n    }\n    /**\n     * Emit once when linked\n     * @returns an Observable\n     */\n    get onceLinked$() {\n        return this.linked$.pipe(operators_1.filter(v => v), operators_1.take(1), operators_1.map(() => void 0));\n    }\n    /**\n     * Emit current session config if available, and subsequent updates\n     * @returns an Observable for the session config\n     */\n    get sessionConfig$() {\n        return this.sessionConfigSubject.asObservable();\n    }\n    /**\n     * Emit incoming Event messages\n     * @returns an Observable for the messages\n     */\n    get incomingEvent$() {\n        return this.ws.incomingJSONData$.pipe(operators_1.filter(m => {\n            if (m.type !== \"Event\") {\n                return false;\n            }\n            const sme = m;\n            return (typeof sme.sessionId === \"string\" &&\n                typeof sme.eventId === \"string\" &&\n                typeof sme.event === \"string\" &&\n                typeof sme.data === \"string\");\n        }), operators_1.map(m => m));\n    }\n    /**\n     * Set session metadata in SessionConfig object\n     * @param key\n     * @param value\n     * @returns an Observable that completes when successful\n     */\n    setSessionMetadata(key, value) {\n        const message = ClientMessage_1.ClientMessageSetSessionConfig({\n            id: types_1.IntNumber(this.nextReqId++),\n            sessionId: this.sessionId,\n            metadata: { [key]: value }\n        });\n        return this.onceConnected$.pipe(operators_1.flatMap(_ => this.makeRequest(message)), operators_1.map(res => {\n            if (ServerMessage_1.isServerMessageFail(res)) {\n                throw new Error(res.error || \"failed to set session metadata\");\n            }\n        }));\n    }\n    /**\n     * Publish an event and emit event ID when successful\n     * @param event event name\n     * @param data event data\n     * @param callWebhook whether the webhook should be invoked\n     * @returns an Observable that emits event ID when successful\n     */\n    publishEvent(event, data, callWebhook = false) {\n        const message = ClientMessage_1.ClientMessagePublishEvent({\n            id: types_1.IntNumber(this.nextReqId++),\n            sessionId: this.sessionId,\n            event,\n            data,\n            callWebhook\n        });\n        return this.onceLinked$.pipe(operators_1.flatMap(_ => this.makeRequest(message)), operators_1.map(res => {\n            if (ServerMessage_1.isServerMessageFail(res)) {\n                throw new Error(res.error || \"failed to publish event\");\n            }\n            return res.eventId;\n        }));\n    }\n    sendData(message) {\n        this.ws.sendData(JSON.stringify(message));\n    }\n    updateLastHeartbeat() {\n        this.lastHeartbeatResponse = Date.now();\n    }\n    heartbeat() {\n        if (Date.now() - this.lastHeartbeatResponse > HEARTBEAT_INTERVAL * 2) {\n            this.ws.disconnect();\n            return;\n        }\n        try {\n            this.ws.sendData(\"h\");\n        }\n        catch (_a) { }\n    }\n    makeRequest(message, timeout = REQUEST_TIMEOUT) {\n        const reqId = message.id;\n        try {\n            this.sendData(message);\n        }\n        catch (err) {\n            return rxjs_1.throwError(err);\n        }\n        // await server message with corresponding id\n        return this.ws.incomingJSONData$.pipe(operators_1.timeoutWith(timeout, rxjs_1.throwError(new Error(`request ${reqId} timed out`))), operators_1.filter(m => m.id === reqId), operators_1.take(1));\n    }\n    authenticate() {\n        const msg = ClientMessage_1.ClientMessageHostSession({\n            id: types_1.IntNumber(this.nextReqId++),\n            sessionId: this.sessionId,\n            sessionKey: this.sessionKey\n        });\n        return this.makeRequest(msg).pipe(operators_1.map(res => {\n            if (ServerMessage_1.isServerMessageFail(res)) {\n                throw new Error(res.error || \"failed to authentcate\");\n            }\n        }));\n    }\n    sendIsLinked() {\n        const msg = ClientMessage_1.ClientMessageIsLinked({\n            id: types_1.IntNumber(this.nextReqId++),\n            sessionId: this.sessionId\n        });\n        this.sendData(msg);\n    }\n    sendGetSessionConfig() {\n        const msg = ClientMessage_1.ClientMessageGetSessionConfig({\n            id: types_1.IntNumber(this.nextReqId++),\n            sessionId: this.sessionId\n        });\n        this.sendData(msg);\n    }\n}\nexports.WalletLinkConnection = WalletLinkConnection;\n"]},"metadata":{},"sourceType":"script"}