{"ast":null,"code":"import { ApprovalState } from 'hooks/useApproveCallback';\nexport let SwapRouterVersion;\n/**\n * Returns the swap router that will result in the least amount of txs (less gas) for a given swap.\n * Heuristic:\n * - if trade contains a single v2-only trade & V2 SwapRouter is approved: use V2 SwapRouter\n * - if trade contains only v3 & V3 SwapRouter is approved: use V3 SwapRouter\n * - else: approve and use V2+V3 SwapRouter\n */\n\n(function (SwapRouterVersion) {\n  SwapRouterVersion[SwapRouterVersion[\"V2\"] = 0] = \"V2\";\n  SwapRouterVersion[SwapRouterVersion[\"V3\"] = 1] = \"V3\";\n  SwapRouterVersion[SwapRouterVersion[\"V2V3\"] = 2] = \"V2V3\";\n})(SwapRouterVersion || (SwapRouterVersion = {}));\n\nexport function getTxOptimizedSwapRouter({\n  onlyV2Routes,\n  onlyV3Routes,\n  tradeHasSplits,\n  approvalStates\n}) {\n  if ([approvalStates.v2, approvalStates.v3, approvalStates.v2V3].includes(ApprovalState.PENDING)) return undefined;\n  if (approvalStates.v2V3 === ApprovalState.APPROVED) return SwapRouterVersion.V2V3;\n  if (approvalStates.v2 === ApprovalState.APPROVED && onlyV2Routes && !tradeHasSplits) return SwapRouterVersion.V2;\n  if (approvalStates.v3 === ApprovalState.APPROVED && onlyV3Routes) return SwapRouterVersion.V3;\n  return SwapRouterVersion.V2V3;\n}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/utils/getTxOptimizedSwapRouter.ts"],"names":["ApprovalState","SwapRouterVersion","getTxOptimizedSwapRouter","onlyV2Routes","onlyV3Routes","tradeHasSplits","approvalStates","v2","v3","v2V3","includes","PENDING","undefined","APPROVED","V2V3","V2","V3"],"mappings":"AAAA,SAASA,aAAT,QAA8B,0BAA9B;AAEA,WAAYC,iBAAZ;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;WAZYA,iB;AAAAA,EAAAA,iB,CAAAA,iB;AAAAA,EAAAA,iB,CAAAA,iB;AAAAA,EAAAA,iB,CAAAA,iB;GAAAA,iB,KAAAA,iB;;AAaZ,OAAO,SAASC,wBAAT,CAAkC;AACvCC,EAAAA,YADuC;AAEvCC,EAAAA,YAFuC;AAGvCC,EAAAA,cAHuC;AAIvCC,EAAAA;AAJuC,CAAlC,EAU2B;AAChC,MAAI,CAACA,cAAc,CAACC,EAAhB,EAAoBD,cAAc,CAACE,EAAnC,EAAuCF,cAAc,CAACG,IAAtD,EAA4DC,QAA5D,CAAqEV,aAAa,CAACW,OAAnF,CAAJ,EAAiG,OAAOC,SAAP;AACjG,MAAIN,cAAc,CAACG,IAAf,KAAwBT,aAAa,CAACa,QAA1C,EAAoD,OAAOZ,iBAAiB,CAACa,IAAzB;AACpD,MAAIR,cAAc,CAACC,EAAf,KAAsBP,aAAa,CAACa,QAApC,IAAgDV,YAAhD,IAAgE,CAACE,cAArE,EAAqF,OAAOJ,iBAAiB,CAACc,EAAzB;AACrF,MAAIT,cAAc,CAACE,EAAf,KAAsBR,aAAa,CAACa,QAApC,IAAgDT,YAApD,EAAkE,OAAOH,iBAAiB,CAACe,EAAzB;AAClE,SAAOf,iBAAiB,CAACa,IAAzB;AACD","sourcesContent":["import { ApprovalState } from 'hooks/useApproveCallback'\n\nexport enum SwapRouterVersion {\n  V2,\n  V3,\n  V2V3,\n}\n\n/**\n * Returns the swap router that will result in the least amount of txs (less gas) for a given swap.\n * Heuristic:\n * - if trade contains a single v2-only trade & V2 SwapRouter is approved: use V2 SwapRouter\n * - if trade contains only v3 & V3 SwapRouter is approved: use V3 SwapRouter\n * - else: approve and use V2+V3 SwapRouter\n */\nexport function getTxOptimizedSwapRouter({\n  onlyV2Routes,\n  onlyV3Routes,\n  tradeHasSplits,\n  approvalStates,\n}: {\n  onlyV2Routes: boolean | undefined\n  onlyV3Routes: boolean | undefined\n  tradeHasSplits: boolean | undefined\n  approvalStates: { v2: ApprovalState; v3: ApprovalState; v2V3: ApprovalState }\n}): SwapRouterVersion | undefined {\n  if ([approvalStates.v2, approvalStates.v3, approvalStates.v2V3].includes(ApprovalState.PENDING)) return undefined\n  if (approvalStates.v2V3 === ApprovalState.APPROVED) return SwapRouterVersion.V2V3\n  if (approvalStates.v2 === ApprovalState.APPROVED && onlyV2Routes && !tradeHasSplits) return SwapRouterVersion.V2\n  if (approvalStates.v3 === ApprovalState.APPROVED && onlyV3Routes) return SwapRouterVersion.V3\n  return SwapRouterVersion.V2V3\n}\n"]},"metadata":{},"sourceType":"module"}