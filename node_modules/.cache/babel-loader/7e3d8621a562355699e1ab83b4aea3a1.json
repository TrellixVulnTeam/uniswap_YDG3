{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { SupportedChainId } from 'constants/chains';\nimport Vibrant from 'node-vibrant/lib/bundle';\nimport { shade } from 'polished';\nimport { useLayoutEffect, useState } from 'react';\nimport { WrappedTokenInfo } from 'state/lists/wrappedTokenInfo';\nimport uriToHttp from 'utils/uriToHttp';\nimport { hex } from 'wcag-contrast';\n\nfunction URIForEthToken(address) {\n  return `https://raw.githubusercontent.com/uniswap/assets/master/blockchains/ethereum/assets/${address}/logo.png`;\n}\n\n_c = URIForEthToken;\n\nasync function getColorFromToken(token) {\n  if (!(token instanceof WrappedTokenInfo)) {\n    return null;\n  }\n\n  const wrappedToken = token;\n  const {\n    address\n  } = wrappedToken;\n  let {\n    logoURI\n  } = wrappedToken;\n\n  if (!logoURI) {\n    if (token.chainId !== SupportedChainId.MAINNET) {\n      return null;\n    } else {\n      logoURI = URIForEthToken(address);\n    }\n  }\n\n  try {\n    return await getColorFromUriPath(logoURI);\n  } catch (e) {\n    if (logoURI === URIForEthToken(address)) {\n      return null;\n    }\n\n    try {\n      logoURI = URIForEthToken(address);\n      return await getColorFromUriPath(logoURI);\n    } catch (e) {}\n  }\n\n  return null;\n}\n\nasync function getColorFromUriPath(uri) {\n  const formattedPath = uriToHttp(uri)[0];\n  const palette = await Vibrant.from(formattedPath).getPalette();\n\n  if (!(palette === null || palette === void 0 ? void 0 : palette.Vibrant)) {\n    return null;\n  }\n\n  let detectedHex = palette.Vibrant.hex;\n  let AAscore = hex(detectedHex, '#FFF');\n\n  while (AAscore < 3) {\n    detectedHex = shade(0.005, detectedHex);\n    AAscore = hex(detectedHex, '#FFF');\n  }\n\n  return detectedHex;\n}\n\nexport function useColor(token) {\n  _s();\n\n  const [color, setColor] = useState('#2172E5');\n  useLayoutEffect(() => {\n    let stale = false;\n\n    if (token) {\n      getColorFromToken(token).then(tokenColor => {\n        if (!stale && tokenColor !== null) {\n          setColor(tokenColor);\n        }\n      });\n    }\n\n    return () => {\n      stale = true;\n      setColor('#2172E5');\n    };\n  }, [token]);\n  return color;\n}\n\n_s(useColor, \"CqcsdXcHHe8YLCjEUB+BxKSpNlQ=\");\n\nexport function useListColor(listImageUri) {\n  _s2();\n\n  const [color, setColor] = useState('#2172E5');\n  useLayoutEffect(() => {\n    let stale = false;\n\n    if (listImageUri) {\n      getColorFromUriPath(listImageUri).then(color => {\n        if (!stale && color !== null) {\n          setColor(color);\n        }\n      });\n    }\n\n    return () => {\n      stale = true;\n      setColor('#2172E5');\n    };\n  }, [listImageUri]);\n  return color;\n}\n\n_s2(useListColor, \"CqcsdXcHHe8YLCjEUB+BxKSpNlQ=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"URIForEthToken\");","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/hooks/useColor.ts"],"names":["SupportedChainId","Vibrant","shade","useLayoutEffect","useState","WrappedTokenInfo","uriToHttp","hex","URIForEthToken","address","getColorFromToken","token","wrappedToken","logoURI","chainId","MAINNET","getColorFromUriPath","e","uri","formattedPath","palette","from","getPalette","detectedHex","AAscore","useColor","color","setColor","stale","then","tokenColor","useListColor","listImageUri"],"mappings":"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","sourcesContent":["import { Token } from '@uniswap/sdk-core'\nimport { SupportedChainId } from 'constants/chains'\nimport Vibrant from 'node-vibrant/lib/bundle'\nimport { shade } from 'polished'\nimport { useLayoutEffect, useState } from 'react'\nimport { WrappedTokenInfo } from 'state/lists/wrappedTokenInfo'\nimport uriToHttp from 'utils/uriToHttp'\nimport { hex } from 'wcag-contrast'\n\nfunction URIForEthToken(address: string) {\n  return `https://raw.githubusercontent.com/uniswap/assets/master/blockchains/ethereum/assets/${address}/logo.png`\n}\n\nasync function getColorFromToken(token: Token): Promise<string | null> {\n  if (!(token instanceof WrappedTokenInfo)) {\n    return null\n  }\n\n  const wrappedToken = token as WrappedTokenInfo\n  const { address } = wrappedToken\n  let { logoURI } = wrappedToken\n  if (!logoURI) {\n    if (token.chainId !== SupportedChainId.MAINNET) {\n      return null\n    } else {\n      logoURI = URIForEthToken(address)\n    }\n  }\n\n  try {\n    return await getColorFromUriPath(logoURI)\n  } catch (e) {\n    if (logoURI === URIForEthToken(address)) {\n      return null\n    }\n\n    try {\n      logoURI = URIForEthToken(address)\n      return await getColorFromUriPath(logoURI)\n    } catch (e) {}\n  }\n\n  return null\n}\n\nasync function getColorFromUriPath(uri: string): Promise<string | null> {\n  const formattedPath = uriToHttp(uri)[0]\n\n  const palette = await Vibrant.from(formattedPath).getPalette()\n  if (!palette?.Vibrant) {\n    return null\n  }\n\n  let detectedHex = palette.Vibrant.hex\n  let AAscore = hex(detectedHex, '#FFF')\n  while (AAscore < 3) {\n    detectedHex = shade(0.005, detectedHex)\n    AAscore = hex(detectedHex, '#FFF')\n  }\n\n  return detectedHex\n}\n\nexport function useColor(token?: Token) {\n  const [color, setColor] = useState('#2172E5')\n\n  useLayoutEffect(() => {\n    let stale = false\n\n    if (token) {\n      getColorFromToken(token).then((tokenColor) => {\n        if (!stale && tokenColor !== null) {\n          setColor(tokenColor)\n        }\n      })\n    }\n\n    return () => {\n      stale = true\n      setColor('#2172E5')\n    }\n  }, [token])\n\n  return color\n}\n\nexport function useListColor(listImageUri?: string) {\n  const [color, setColor] = useState('#2172E5')\n\n  useLayoutEffect(() => {\n    let stale = false\n\n    if (listImageUri) {\n      getColorFromUriPath(listImageUri).then((color) => {\n        if (!stale && color !== null) {\n          setColor(color)\n        }\n      })\n    }\n\n    return () => {\n      stale = true\n      setColor('#2172E5')\n    }\n  }, [listImageUri])\n\n  return color\n}\n"]},"metadata":{},"sourceType":"module"}