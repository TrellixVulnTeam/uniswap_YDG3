{"ast":null,"code":"import{useActiveWeb3React}from'hooks/web3';import{useEffect}from'react';import ReactGA from'react-ga';import{getCLS,getFCP,getFID,getLCP}from'web-vitals';function reportWebVitals(_ref){var name=_ref.name,delta=_ref.delta,id=_ref.id;ReactGA.timing({category:'Web Vitals',variable:name,value:Math.round(name==='CLS'?delta*1000:delta),label:id});}// tracks web vitals and pageviews\nexport default function GoogleAnalyticsReporter(_ref2){var _ref2$location=_ref2.location,pathname=_ref2$location.pathname,search=_ref2$location.search;useEffect(function(){getFCP(reportWebVitals);getFID(reportWebVitals);getLCP(reportWebVitals);getCLS(reportWebVitals);},[]);var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId;useEffect(function(){// cd1 - custom dimension 1 - chainId\nReactGA.set({cd1:chainId!==null&&chainId!==void 0?chainId:0});},[chainId]);useEffect(function(){ReactGA.pageview(\"\".concat(pathname).concat(search));},[pathname,search]);return null;}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/components/analytics/GoogleAnalyticsReporter.tsx"],"names":["useActiveWeb3React","useEffect","ReactGA","getCLS","getFCP","getFID","getLCP","reportWebVitals","name","delta","id","timing","category","variable","value","Math","round","label","GoogleAnalyticsReporter","location","pathname","search","chainId","set","cd1","pageview"],"mappings":"AAAA,OAASA,kBAAT,KAAmC,YAAnC,CACA,OAASC,SAAT,KAA0B,OAA1B,CACA,MAAOC,CAAAA,OAAP,KAAoB,UAApB,CAEA,OAASC,MAAT,CAAiBC,MAAjB,CAAyBC,MAAzB,CAAiCC,MAAjC,KAAuD,YAAvD,CAEA,QAASC,CAAAA,eAAT,MAAsD,IAA3BC,CAAAA,IAA2B,MAA3BA,IAA2B,CAArBC,KAAqB,MAArBA,KAAqB,CAAdC,EAAc,MAAdA,EAAc,CACpDR,OAAO,CAACS,MAAR,CAAe,CACbC,QAAQ,CAAE,YADG,CAEbC,QAAQ,CAAEL,IAFG,CAGbM,KAAK,CAAEC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAK,KAAT,CAAiBC,KAAK,CAAG,IAAzB,CAAgCA,KAA3C,CAHM,CAIbQ,KAAK,CAAEP,EAJM,CAAf,EAMD,CAED;AACA,cAAe,SAASQ,CAAAA,uBAAT,OAAgG,0BAA7DC,QAA6D,CAAjDC,QAAiD,gBAAjDA,QAAiD,CAAvCC,MAAuC,gBAAvCA,MAAuC,CAC7GpB,SAAS,CAAC,UAAM,CACdG,MAAM,CAACG,eAAD,CAAN,CACAF,MAAM,CAACE,eAAD,CAAN,CACAD,MAAM,CAACC,eAAD,CAAN,CACAJ,MAAM,CAACI,eAAD,CAAN,CACD,CALQ,CAKN,EALM,CAAT,CAOA,wBAAoBP,kBAAkB,EAAtC,CAAQsB,OAAR,qBAAQA,OAAR,CACArB,SAAS,CAAC,UAAM,CACd;AACAC,OAAO,CAACqB,GAAR,CAAY,CAAEC,GAAG,CAAEF,OAAF,SAAEA,OAAF,UAAEA,OAAF,CAAa,CAAlB,CAAZ,EACD,CAHQ,CAGN,CAACA,OAAD,CAHM,CAAT,CAKArB,SAAS,CAAC,UAAM,CACdC,OAAO,CAACuB,QAAR,WAAoBL,QAApB,SAA+BC,MAA/B,GACD,CAFQ,CAEN,CAACD,QAAD,CAAWC,MAAX,CAFM,CAAT,CAGA,MAAO,KAAP,CACD","sourcesContent":["import { useActiveWeb3React } from 'hooks/web3'\nimport { useEffect } from 'react'\nimport ReactGA from 'react-ga'\nimport { RouteComponentProps } from 'react-router-dom'\nimport { getCLS, getFCP, getFID, getLCP, Metric } from 'web-vitals'\n\nfunction reportWebVitals({ name, delta, id }: Metric) {\n  ReactGA.timing({\n    category: 'Web Vitals',\n    variable: name,\n    value: Math.round(name === 'CLS' ? delta * 1000 : delta),\n    label: id,\n  })\n}\n\n// tracks web vitals and pageviews\nexport default function GoogleAnalyticsReporter({ location: { pathname, search } }: RouteComponentProps): null {\n  useEffect(() => {\n    getFCP(reportWebVitals)\n    getFID(reportWebVitals)\n    getLCP(reportWebVitals)\n    getCLS(reportWebVitals)\n  }, [])\n\n  const { chainId } = useActiveWeb3React()\n  useEffect(() => {\n    // cd1 - custom dimension 1 - chainId\n    ReactGA.set({ cd1: chainId ?? 0 })\n  }, [chainId])\n\n  useEffect(() => {\n    ReactGA.pageview(`${pathname}${search}`)\n  }, [pathname, search])\n  return null\n}\n"]},"metadata":{},"sourceType":"module"}