{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { initializeApp } from 'firebase/app';\nimport { getDatabase, push, ref } from 'firebase/database';\nimport { useCallback } from 'react';\nimport { TransactionType } from 'state/transactions/actions';\nimport { useActiveWeb3React } from './web3';\nconst SUPPORTED_TRANSACTION_TYPES = [TransactionType.ADD_LIQUIDITY_V2_POOL, TransactionType.ADD_LIQUIDITY_V3_POOL, TransactionType.CREATE_V3_POOL, TransactionType.REMOVE_LIQUIDITY_V3, TransactionType.SWAP];\nconst FIREBASE_API_KEY = process.env.REACT_APP_FIREBASE_KEY;\nconst firebaseEnabled = typeof FIREBASE_API_KEY !== 'undefined';\nif (firebaseEnabled) initializeFirebase();\n\nfunction useMonitoringEventCallback() {\n  _s();\n\n  const {\n    chainId\n  } = useActiveWeb3React();\n  return useCallback(async function log(type, {\n    transactionResponse,\n    walletAddress\n  }) {\n    if (!firebaseEnabled) return;\n    const db = getDatabase();\n\n    if (!walletAddress) {\n      console.debug('Wallet address required to log monitoring events.');\n      return;\n    }\n\n    try {\n      push(ref(db, 'trm'), {\n        chainId,\n        origin: window.location.origin,\n        timestamp: Date.now(),\n        tx: transactionResponse,\n        type,\n        walletAddress\n      });\n    } catch (e) {\n      console.debug('Error adding document: ', e);\n    }\n  }, [chainId]);\n}\n\n_s(useMonitoringEventCallback, \"EIApfCKW35FGZehQHTsQMgPWyAk=\", false, function () {\n  return [useActiveWeb3React];\n});\n\nexport function useTransactionMonitoringEventCallback() {\n  _s2();\n\n  const {\n    account\n  } = useActiveWeb3React();\n  const log = useMonitoringEventCallback();\n  return useCallback((info, transactionResponse) => {\n    if (SUPPORTED_TRANSACTION_TYPES.includes(info.type)) {\n      log(TransactionType[info.type], {\n        transactionResponse: (({\n          hash,\n          v,\n          r,\n          s\n        }) => ({\n          hash,\n          v,\n          r,\n          s\n        }))(transactionResponse),\n        walletAddress: account !== null && account !== void 0 ? account : undefined\n      });\n    }\n  }, [account, log]);\n}\n\n_s2(useTransactionMonitoringEventCallback, \"DwSMnQQdX2WVzQV40WD+/4AtiPw=\", false, function () {\n  return [useActiveWeb3React, useMonitoringEventCallback];\n});\n\nexport function useWalletConnectMonitoringEventCallback() {\n  _s3();\n\n  const log = useMonitoringEventCallback();\n  return useCallback(walletAddress => {\n    log('WALLET_CONNECTED', {\n      transactionResponse: {\n        hash: '',\n        r: '',\n        s: '',\n        v: -1\n      },\n      walletAddress\n    });\n  }, [log]);\n}\n\n_s3(useWalletConnectMonitoringEventCallback, \"SlTADXZXggvvNgg72V7tBpXi77E=\", false, function () {\n  return [useMonitoringEventCallback];\n});\n\nfunction initializeFirebase() {\n  initializeApp({\n    apiKey: process.env.REACT_APP_FIREBASE_KEY,\n    authDomain: 'interface-monitoring.firebaseapp.com',\n    databaseURL: 'https://interface-monitoring-default-rtdb.firebaseio.com',\n    projectId: 'interface-monitoring',\n    storageBucket: 'interface-monitoring.appspot.com',\n    messagingSenderId: '968187720053',\n    appId: '1:968187720053:web:acedf72dce629d470be33c'\n  });\n}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/hooks/useMonitoringEventCallback.ts"],"names":["initializeApp","getDatabase","push","ref","useCallback","TransactionType","useActiveWeb3React","SUPPORTED_TRANSACTION_TYPES","ADD_LIQUIDITY_V2_POOL","ADD_LIQUIDITY_V3_POOL","CREATE_V3_POOL","REMOVE_LIQUIDITY_V3","SWAP","FIREBASE_API_KEY","process","env","REACT_APP_FIREBASE_KEY","firebaseEnabled","initializeFirebase","useMonitoringEventCallback","chainId","log","type","transactionResponse","walletAddress","db","console","debug","origin","window","location","timestamp","Date","now","tx","e","useTransactionMonitoringEventCallback","account","info","includes","hash","v","r","s","undefined","useWalletConnectMonitoringEventCallback","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId"],"mappings":"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","sourcesContent":["import { TransactionResponse } from '@ethersproject/providers'\nimport { initializeApp } from 'firebase/app'\nimport { getDatabase, push, ref } from 'firebase/database'\nimport { useCallback } from 'react'\nimport { TransactionInfo, TransactionType } from 'state/transactions/actions'\n\nimport { useActiveWeb3React } from './web3'\n\ntype PartialTransactionResponse = Pick<TransactionResponse, 'hash' | 'v' | 'r' | 's'>\n\nconst SUPPORTED_TRANSACTION_TYPES = [\n  TransactionType.ADD_LIQUIDITY_V2_POOL,\n  TransactionType.ADD_LIQUIDITY_V3_POOL,\n  TransactionType.CREATE_V3_POOL,\n  TransactionType.REMOVE_LIQUIDITY_V3,\n  TransactionType.SWAP,\n]\n\nconst FIREBASE_API_KEY = process.env.REACT_APP_FIREBASE_KEY\nconst firebaseEnabled = typeof FIREBASE_API_KEY !== 'undefined'\nif (firebaseEnabled) initializeFirebase()\n\nfunction useMonitoringEventCallback() {\n  const { chainId } = useActiveWeb3React()\n\n  return useCallback(\n    async function log(\n      type: string,\n      {\n        transactionResponse,\n        walletAddress,\n      }: { transactionResponse: PartialTransactionResponse; walletAddress: string | undefined }\n    ) {\n      if (!firebaseEnabled) return\n\n      const db = getDatabase()\n\n      if (!walletAddress) {\n        console.debug('Wallet address required to log monitoring events.')\n        return\n      }\n      try {\n        push(ref(db, 'trm'), {\n          chainId,\n          origin: window.location.origin,\n          timestamp: Date.now(),\n          tx: transactionResponse,\n          type,\n          walletAddress,\n        })\n      } catch (e) {\n        console.debug('Error adding document: ', e)\n      }\n    },\n    [chainId]\n  )\n}\n\nexport function useTransactionMonitoringEventCallback() {\n  const { account } = useActiveWeb3React()\n  const log = useMonitoringEventCallback()\n\n  return useCallback(\n    (info: TransactionInfo, transactionResponse: TransactionResponse) => {\n      if (SUPPORTED_TRANSACTION_TYPES.includes(info.type)) {\n        log(TransactionType[info.type], {\n          transactionResponse: (({ hash, v, r, s }: PartialTransactionResponse) => ({ hash, v, r, s }))(\n            transactionResponse\n          ),\n          walletAddress: account ?? undefined,\n        })\n      }\n    },\n    [account, log]\n  )\n}\n\nexport function useWalletConnectMonitoringEventCallback() {\n  const log = useMonitoringEventCallback()\n\n  return useCallback(\n    (walletAddress) => {\n      log('WALLET_CONNECTED', { transactionResponse: { hash: '', r: '', s: '', v: -1 }, walletAddress })\n    },\n    [log]\n  )\n}\n\nfunction initializeFirebase() {\n  initializeApp({\n    apiKey: process.env.REACT_APP_FIREBASE_KEY,\n    authDomain: 'interface-monitoring.firebaseapp.com',\n    databaseURL: 'https://interface-monitoring-default-rtdb.firebaseio.com',\n    projectId: 'interface-monitoring',\n    storageBucket: 'interface-monitoring.appspot.com',\n    messagingSenderId: '968187720053',\n    appId: '1:968187720053:web:acedf72dce629d470be33c',\n  })\n}\n"]},"metadata":{},"sourceType":"module"}