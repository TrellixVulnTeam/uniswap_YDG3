{"ast":null,"code":"import { default as retry } from 'async-retry';\nimport Timeout from 'await-timeout';\nimport axios from 'axios';\nimport { log } from '../util/log';\n/**\n * Gets subgraph pools from a URI. The URI shoudl contain a JSON\n * stringified array of V2SubgraphPool objects or V3SubgraphPool\n * objects.\n *\n * @export\n * @class URISubgraphProvider\n * @template TSubgraphPool\n */\n\nexport class URISubgraphProvider {\n  constructor(chainId, uri, timeout = 6000, retries = 2) {\n    this.chainId = chainId;\n    this.uri = uri;\n    this.timeout = timeout;\n    this.retries = retries;\n  }\n\n  async getPools() {\n    log.info({\n      uri: this.uri\n    }, `About to get subgraph pools from URI ${this.uri}`);\n    let allPools = [];\n    await retry(async () => {\n      const timeout = new Timeout();\n      const timerPromise = timeout.set(this.timeout).then(() => {\n        throw new Error(`Timed out getting pools from subgraph: ${this.timeout}`);\n      });\n      let response;\n\n      try {\n        response = await Promise.race([axios.get(this.uri), timerPromise]);\n      } catch (err) {\n        throw err;\n      } finally {\n        timeout.clear();\n      }\n\n      const {\n        data: poolsBuffer,\n        status\n      } = response;\n\n      if (status != 200) {\n        log.error({\n          response\n        }, `Unabled to get pools from ${this.uri}.`);\n        throw new Error(`Unable to get pools from ${this.uri}`);\n      }\n\n      const pools = poolsBuffer;\n      log.info({\n        uri: this.uri,\n        chain: this.chainId\n      }, `Got subgraph pools from uri. Num: ${pools.length}`);\n      allPools = pools;\n    }, {\n      retries: this.retries,\n      onRetry: (err, retry) => {\n        log.info({\n          err\n        }, `Failed to get pools from uri ${this.uri}. Retry attempt: ${retry}`);\n      }\n    });\n    return allPools;\n  }\n\n}","map":{"version":3,"sources":["../../../../src/providers/uri-subgraph-provider.ts"],"names":[],"mappings":"AAAA,SAAS,OAAO,IAAI,KAApB,QAAiC,aAAjC;AACA,OAAO,OAAP,MAAoB,eAApB;AACA,OAAO,KAAP,MAAkB,OAAlB;AAEA,SAAS,GAAT,QAAoB,aAApB;AAIA;;;;;;;;AAQG;;AACH,OAAM,MAAO,mBAAP,CAA0B;AAG9B,EAAA,WAAA,CACU,OADV,EAEU,GAFV,EAGU,OAAA,GAAU,IAHpB,EAIU,OAAA,GAAU,CAJpB,EAIqB;AAHX,SAAA,OAAA,GAAA,OAAA;AACA,SAAA,GAAA,GAAA,GAAA;AACA,SAAA,OAAA,GAAA,OAAA;AACA,SAAA,OAAA,GAAA,OAAA;AACN;;AAEiB,QAAR,QAAQ,GAAA;AACnB,IAAA,GAAG,CAAC,IAAJ,CACE;AAAE,MAAA,GAAG,EAAE,KAAK;AAAZ,KADF,EAEE,wCAAwC,KAAK,GAAG,EAFlD;AAKA,QAAI,QAAQ,GAAoB,EAAhC;AAEA,UAAM,KAAK,CACT,YAAW;AACT,YAAM,OAAO,GAAG,IAAI,OAAJ,EAAhB;AACA,YAAM,YAAY,GAAG,OAAO,CAAC,GAAR,CAAY,KAAK,OAAjB,EAA0B,IAA1B,CAA+B,MAAK;AACvD,cAAM,IAAI,KAAJ,CACJ,0CAA0C,KAAK,OAAO,EADlD,CAAN;AAGD,OAJoB,CAArB;AAMA,UAAI,QAAJ;;AAEA,UAAI;AACF,QAAA,QAAQ,GAAG,MAAM,OAAO,CAAC,IAAR,CAAa,CAAC,KAAK,CAAC,GAAN,CAAU,KAAK,GAAf,CAAD,EAAsB,YAAtB,CAAb,CAAjB;AACD,OAFD,CAEE,OAAO,GAAP,EAAY;AACZ,cAAM,GAAN;AACD,OAJD,SAIU;AACR,QAAA,OAAO,CAAC,KAAR;AACD;;AAED,YAAM;AAAE,QAAA,IAAI,EAAE,WAAR;AAAqB,QAAA;AAArB,UAAgC,QAAtC;;AAEA,UAAI,MAAM,IAAI,GAAd,EAAmB;AACjB,QAAA,GAAG,CAAC,KAAJ,CAAU;AAAE,UAAA;AAAF,SAAV,EAAwB,6BAA6B,KAAK,GAAG,GAA7D;AAEA,cAAM,IAAI,KAAJ,CAAU,4BAA4B,KAAK,GAAG,EAA9C,CAAN;AACD;;AAED,YAAM,KAAK,GAAG,WAAd;AAEA,MAAA,GAAG,CAAC,IAAJ,CACE;AAAE,QAAA,GAAG,EAAE,KAAK,GAAZ;AAAiB,QAAA,KAAK,EAAE,KAAK;AAA7B,OADF,EAEE,qCAAqC,KAAK,CAAC,MAAM,EAFnD;AAKA,MAAA,QAAQ,GAAG,KAAX;AACD,KAnCQ,EAoCT;AACE,MAAA,OAAO,EAAE,KAAK,OADhB;AAEE,MAAA,OAAO,EAAE,CAAC,GAAD,EAAM,KAAN,KAAe;AACtB,QAAA,GAAG,CAAC,IAAJ,CACE;AAAE,UAAA;AAAF,SADF,EAEE,gCAAgC,KAAK,GAAG,oBAAoB,KAAK,EAFnE;AAID;AAPH,KApCS,CAAX;AA+CA,WAAO,QAAP;AACD;;AAlE6B","sourceRoot":"","sourcesContent":["import { default as retry } from 'async-retry';\nimport Timeout from 'await-timeout';\nimport axios from 'axios';\nimport { log } from '../util/log';\n/**\n * Gets subgraph pools from a URI. The URI shoudl contain a JSON\n * stringified array of V2SubgraphPool objects or V3SubgraphPool\n * objects.\n *\n * @export\n * @class URISubgraphProvider\n * @template TSubgraphPool\n */\nexport class URISubgraphProvider {\n    constructor(chainId, uri, timeout = 6000, retries = 2) {\n        this.chainId = chainId;\n        this.uri = uri;\n        this.timeout = timeout;\n        this.retries = retries;\n    }\n    async getPools() {\n        log.info({ uri: this.uri }, `About to get subgraph pools from URI ${this.uri}`);\n        let allPools = [];\n        await retry(async () => {\n            const timeout = new Timeout();\n            const timerPromise = timeout.set(this.timeout).then(() => {\n                throw new Error(`Timed out getting pools from subgraph: ${this.timeout}`);\n            });\n            let response;\n            try {\n                response = await Promise.race([axios.get(this.uri), timerPromise]);\n            }\n            catch (err) {\n                throw err;\n            }\n            finally {\n                timeout.clear();\n            }\n            const { data: poolsBuffer, status } = response;\n            if (status != 200) {\n                log.error({ response }, `Unabled to get pools from ${this.uri}.`);\n                throw new Error(`Unable to get pools from ${this.uri}`);\n            }\n            const pools = poolsBuffer;\n            log.info({ uri: this.uri, chain: this.chainId }, `Got subgraph pools from uri. Num: ${pools.length}`);\n            allPools = pools;\n        }, {\n            retries: this.retries,\n            onRetry: (err, retry) => {\n                log.info({ err }, `Failed to get pools from uri ${this.uri}. Retry attempt: ${retry}`);\n            },\n        });\n        return allPools;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJpLXN1YmdyYXBoLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3Byb3ZpZGVycy91cmktc3ViZ3JhcGgtcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sSUFBSSxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDL0MsT0FBTyxPQUFPLE1BQU0sZUFBZSxDQUFDO0FBQ3BDLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUUxQixPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBSWxDOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxPQUFPLG1CQUFtQjtJQUc5QixZQUNVLE9BQWdCLEVBQ2hCLEdBQVcsRUFDWCxVQUFVLElBQUksRUFDZCxVQUFVLENBQUM7UUFIWCxZQUFPLEdBQVAsT0FBTyxDQUFTO1FBQ2hCLFFBQUcsR0FBSCxHQUFHLENBQVE7UUFDWCxZQUFPLEdBQVAsT0FBTyxDQUFPO1FBQ2QsWUFBTyxHQUFQLE9BQU8sQ0FBSTtJQUNsQixDQUFDO0lBRUcsS0FBSyxDQUFDLFFBQVE7UUFDbkIsR0FBRyxDQUFDLElBQUksQ0FDTixFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQ2pCLHdDQUF3QyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQ25ELENBQUM7UUFFRixJQUFJLFFBQVEsR0FBb0IsRUFBRSxDQUFDO1FBRW5DLE1BQU0sS0FBSyxDQUNULEtBQUssSUFBSSxFQUFFO1lBQ1QsTUFBTSxPQUFPLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztZQUM5QixNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO2dCQUN2RCxNQUFNLElBQUksS0FBSyxDQUNiLDBDQUEwQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQ3pELENBQUM7WUFDSixDQUFDLENBQUMsQ0FBQztZQUVILElBQUksUUFBUSxDQUFDO1lBRWIsSUFBSTtnQkFDRixRQUFRLEdBQUcsTUFBTSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQzthQUNwRTtZQUFDLE9BQU8sR0FBRyxFQUFFO2dCQUNaLE1BQU0sR0FBRyxDQUFDO2FBQ1g7b0JBQVM7Z0JBQ1IsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO2FBQ2pCO1lBRUQsTUFBTSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDO1lBRS9DLElBQUksTUFBTSxJQUFJLEdBQUcsRUFBRTtnQkFDakIsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLDZCQUE2QixJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztnQkFFbEUsTUFBTSxJQUFJLEtBQUssQ0FBQyw0QkFBNEIsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7YUFDekQ7WUFFRCxNQUFNLEtBQUssR0FBRyxXQUE4QixDQUFDO1lBRTdDLEdBQUcsQ0FBQyxJQUFJLENBQ04sRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUN0QyxxQ0FBcUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUNwRCxDQUFDO1lBRUYsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUNuQixDQUFDLEVBQ0Q7WUFDRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87WUFDckIsT0FBTyxFQUFFLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFO2dCQUN0QixHQUFHLENBQUMsSUFBSSxDQUNOLEVBQUUsR0FBRyxFQUFFLEVBQ1AsZ0NBQWdDLElBQUksQ0FBQyxHQUFHLG9CQUFvQixLQUFLLEVBQUUsQ0FDcEUsQ0FBQztZQUNKLENBQUM7U0FDRixDQUNGLENBQUM7UUFFRixPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0NBQ0YifQ=="]},"metadata":{},"sourceType":"module"}