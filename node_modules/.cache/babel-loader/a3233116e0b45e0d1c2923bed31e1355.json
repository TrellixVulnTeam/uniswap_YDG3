{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useMemo } from 'react';\nimport { useActiveWeb3React } from '../../hooks/web3';\nimport { useBlockNumber } from '../application/hooks';\nimport { useAppDispatch, useAppSelector } from '../hooks';\nimport { fetchedLogs, fetchedLogsError, fetchingLogs } from './slice';\nimport { keyToFilter } from './utils';\nexport default function Updater() {\n  _s();\n\n  const dispatch = useAppDispatch();\n  const state = useAppSelector(state => state.logs);\n  const {\n    chainId,\n    library\n  } = useActiveWeb3React();\n  const blockNumber = useBlockNumber();\n  const filtersNeedFetch = useMemo(() => {\n    if (!chainId || typeof blockNumber !== 'number') return [];\n    const active = state[chainId];\n    if (!active) return [];\n    return Object.keys(active).filter(key => {\n      const {\n        fetchingBlockNumber,\n        results,\n        listeners\n      } = active[key];\n      if (listeners === 0) return false;\n      if (typeof fetchingBlockNumber === 'number' && fetchingBlockNumber >= blockNumber) return false;\n      if (results && typeof results.blockNumber === 'number' && results.blockNumber >= blockNumber) return false;\n      return true;\n    }).map(key => keyToFilter(key));\n  }, [blockNumber, chainId, state]);\n  useEffect(() => {\n    if (!library || !chainId || typeof blockNumber !== 'number' || filtersNeedFetch.length === 0) return;\n    dispatch(fetchingLogs({\n      chainId,\n      filters: filtersNeedFetch,\n      blockNumber\n    }));\n    filtersNeedFetch.forEach(filter => {\n      library.getLogs({ ...filter,\n        fromBlock: 0,\n        toBlock: blockNumber\n      }).then(logs => {\n        dispatch(fetchedLogs({\n          chainId,\n          filter,\n          results: {\n            logs,\n            blockNumber\n          }\n        }));\n      }).catch(error => {\n        console.error('Failed to get logs', filter, error);\n        dispatch(fetchedLogsError({\n          chainId,\n          filter,\n          blockNumber\n        }));\n      });\n    });\n  }, [blockNumber, chainId, dispatch, filtersNeedFetch, library]);\n  return null;\n}\n\n_s(Updater, \"YVPNlSUFxtrJmOWfCaOtmOLc3Kc=\", false, function () {\n  return [useAppDispatch, useAppSelector, useActiveWeb3React, useBlockNumber];\n});\n\n_c = Updater;\n\nvar _c;\n\n$RefreshReg$(_c, \"Updater\");","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/state/logs/updater.ts"],"names":["useEffect","useMemo","useActiveWeb3React","useBlockNumber","useAppDispatch","useAppSelector","fetchedLogs","fetchedLogsError","fetchingLogs","keyToFilter","Updater","dispatch","state","logs","chainId","library","blockNumber","filtersNeedFetch","active","Object","keys","filter","key","fetchingBlockNumber","results","listeners","map","length","filters","forEach","getLogs","fromBlock","toBlock","then","catch","error","console"],"mappings":"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","sourcesContent":["import { useEffect, useMemo } from 'react'\n\nimport { useActiveWeb3React } from '../../hooks/web3'\nimport { useBlockNumber } from '../application/hooks'\nimport { useAppDispatch, useAppSelector } from '../hooks'\nimport { fetchedLogs, fetchedLogsError, fetchingLogs } from './slice'\nimport { EventFilter, keyToFilter } from './utils'\n\nexport default function Updater(): null {\n  const dispatch = useAppDispatch()\n  const state = useAppSelector((state) => state.logs)\n  const { chainId, library } = useActiveWeb3React()\n\n  const blockNumber = useBlockNumber()\n\n  const filtersNeedFetch: EventFilter[] = useMemo(() => {\n    if (!chainId || typeof blockNumber !== 'number') return []\n\n    const active = state[chainId]\n    if (!active) return []\n\n    return Object.keys(active)\n      .filter((key) => {\n        const { fetchingBlockNumber, results, listeners } = active[key]\n        if (listeners === 0) return false\n        if (typeof fetchingBlockNumber === 'number' && fetchingBlockNumber >= blockNumber) return false\n        if (results && typeof results.blockNumber === 'number' && results.blockNumber >= blockNumber) return false\n        return true\n      })\n      .map((key) => keyToFilter(key))\n  }, [blockNumber, chainId, state])\n\n  useEffect(() => {\n    if (!library || !chainId || typeof blockNumber !== 'number' || filtersNeedFetch.length === 0) return\n\n    dispatch(fetchingLogs({ chainId, filters: filtersNeedFetch, blockNumber }))\n    filtersNeedFetch.forEach((filter) => {\n      library\n        .getLogs({\n          ...filter,\n          fromBlock: 0,\n          toBlock: blockNumber,\n        })\n        .then((logs) => {\n          dispatch(\n            fetchedLogs({\n              chainId,\n              filter,\n              results: { logs, blockNumber },\n            })\n          )\n        })\n        .catch((error) => {\n          console.error('Failed to get logs', filter, error)\n          dispatch(\n            fetchedLogsError({\n              chainId,\n              filter,\n              blockNumber,\n            })\n          )\n        })\n    })\n  }, [blockNumber, chainId, dispatch, filtersNeedFetch, library])\n\n  return null\n}\n"]},"metadata":{},"sourceType":"module"}