{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { usePoolActiveLiquidity } from 'hooks/usePoolTickData';\nimport { useCallback, useMemo } from 'react';\nexport function useDensityChartData({\n  currencyA,\n  currencyB,\n  feeAmount\n}) {\n  _s();\n\n  const {\n    isLoading,\n    isUninitialized,\n    isError,\n    error,\n    data\n  } = usePoolActiveLiquidity(currencyA, currencyB, feeAmount);\n  const formatData = useCallback(() => {\n    if (!(data === null || data === void 0 ? void 0 : data.length)) {\n      return undefined;\n    }\n\n    const newData = [];\n\n    for (let i = 0; i < data.length; i++) {\n      const t = data[i];\n      const chartEntry = {\n        activeLiquidity: parseFloat(t.liquidityActive.toString()),\n        price0: parseFloat(t.price0)\n      };\n\n      if (chartEntry.activeLiquidity > 0) {\n        newData.push(chartEntry);\n      }\n    }\n\n    return newData;\n  }, [data]);\n  return useMemo(() => {\n    return {\n      isLoading,\n      isUninitialized,\n      isError,\n      error,\n      formattedData: !isLoading && !isUninitialized ? formatData() : undefined\n    };\n  }, [isLoading, isUninitialized, isError, error, formatData]);\n}\n\n_s(useDensityChartData, \"nXLGPCsx5USblYqRaxDOzdLtip8=\", false, function () {\n  return [usePoolActiveLiquidity];\n});","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/components/LiquidityChartRangeInput/hooks.ts"],"names":["usePoolActiveLiquidity","useCallback","useMemo","useDensityChartData","currencyA","currencyB","feeAmount","isLoading","isUninitialized","isError","error","data","formatData","length","undefined","newData","i","t","chartEntry","activeLiquidity","parseFloat","liquidityActive","toString","price0","push","formattedData"],"mappings":";;AAEA,SAASA,sBAAT,QAAuC,uBAAvC;AAEA,SAASC,WAAT,EAAsBC,OAAtB,QAAqC,OAArC;AASA,OAAO,SAASC,mBAAT,CAA6B;AAClCC,EAAAA,SADkC;AAElCC,EAAAA,SAFkC;AAGlCC,EAAAA;AAHkC,CAA7B,EAQJ;AAAA;;AACD,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,eAAb;AAA8BC,IAAAA,OAA9B;AAAuCC,IAAAA,KAAvC;AAA8CC,IAAAA;AAA9C,MAAuDX,sBAAsB,CAACI,SAAD,EAAYC,SAAZ,EAAuBC,SAAvB,CAAnF;AAEA,QAAMM,UAAU,GAAGX,WAAW,CAAC,MAAM;AACnC,QAAI,EAACU,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEE,MAAP,CAAJ,EAAmB;AACjB,aAAOC,SAAP;AACD;;AAED,UAAMC,OAAqB,GAAG,EAA9B;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAAI,CAACE,MAAzB,EAAiCG,CAAC,EAAlC,EAAsC;AACpC,YAAMC,CAAgB,GAAGN,IAAI,CAACK,CAAD,CAA7B;AAEA,YAAME,UAAU,GAAG;AACjBC,QAAAA,eAAe,EAAEC,UAAU,CAACH,CAAC,CAACI,eAAF,CAAkBC,QAAlB,EAAD,CADV;AAEjBC,QAAAA,MAAM,EAAEH,UAAU,CAACH,CAAC,CAACM,MAAH;AAFD,OAAnB;;AAKA,UAAIL,UAAU,CAACC,eAAX,GAA6B,CAAjC,EAAoC;AAClCJ,QAAAA,OAAO,CAACS,IAAR,CAAaN,UAAb;AACD;AACF;;AAED,WAAOH,OAAP;AACD,GArB6B,EAqB3B,CAACJ,IAAD,CArB2B,CAA9B;AAuBA,SAAOT,OAAO,CAAC,MAAM;AACnB,WAAO;AACLK,MAAAA,SADK;AAELC,MAAAA,eAFK;AAGLC,MAAAA,OAHK;AAILC,MAAAA,KAJK;AAKLe,MAAAA,aAAa,EAAE,CAAClB,SAAD,IAAc,CAACC,eAAf,GAAiCI,UAAU,EAA3C,GAAgDE;AAL1D,KAAP;AAOD,GARa,EAQX,CAACP,SAAD,EAAYC,eAAZ,EAA6BC,OAA7B,EAAsCC,KAAtC,EAA6CE,UAA7C,CARW,CAAd;AASD;;GA3CeT,mB;UAS+CH,sB","sourcesContent":["import { Currency } from '@uniswap/sdk-core'\nimport { FeeAmount } from '@uniswap/v3-sdk'\nimport { usePoolActiveLiquidity } from 'hooks/usePoolTickData'\nimport JSBI from 'jsbi'\nimport { useCallback, useMemo } from 'react'\n\nimport { ChartEntry } from './types'\n\nexport interface TickProcessed {\n  liquidityActive: JSBI\n  price0: string\n}\n\nexport function useDensityChartData({\n  currencyA,\n  currencyB,\n  feeAmount,\n}: {\n  currencyA: Currency | undefined\n  currencyB: Currency | undefined\n  feeAmount: FeeAmount | undefined\n}) {\n  const { isLoading, isUninitialized, isError, error, data } = usePoolActiveLiquidity(currencyA, currencyB, feeAmount)\n\n  const formatData = useCallback(() => {\n    if (!data?.length) {\n      return undefined\n    }\n\n    const newData: ChartEntry[] = []\n\n    for (let i = 0; i < data.length; i++) {\n      const t: TickProcessed = data[i]\n\n      const chartEntry = {\n        activeLiquidity: parseFloat(t.liquidityActive.toString()),\n        price0: parseFloat(t.price0),\n      }\n\n      if (chartEntry.activeLiquidity > 0) {\n        newData.push(chartEntry)\n      }\n    }\n\n    return newData\n  }, [data])\n\n  return useMemo(() => {\n    return {\n      isLoading,\n      isUninitialized,\n      isError,\n      error,\n      formattedData: !isLoading && !isUninitialized ? formatData() : undefined,\n    }\n  }, [isLoading, isUninitialized, isError, error, formatData])\n}\n"]},"metadata":{},"sourceType":"module"}