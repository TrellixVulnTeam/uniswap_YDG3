{"ast":null,"code":"import _styled from\"styled-components\";import{Trans}from\"@lingui/react\";import{AutoColumn}from'components/Column';import{LoadingOpacityContainer}from'components/Loader/styled';import{RowFixed}from'components/Row';import{MouseoverTooltipContent}from'components/Tooltip';import ReactGA from'react-ga';import{ThemedText}from'theme';import{ReactComponent as GasIcon}from\"@svgr/webpack?-svgo,+titleProp,+ref!../../assets/images/gas-icon.svg\";import{SupportedChainId}from'../../constants/chains';import{ResponsiveTooltipContainer}from'./styleds';import SwapRoute from'./SwapRoute';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var GasWrapper=_styled(RowFixed).withConfig({componentId:\"sc-qnhalc-0\"})([\"border-radius:8px;padding:4px 6px;height:24px;color:\",\";background-color:\",\";font-size:14px;font-weight:500;user-select:none;\"],function(_ref){var theme=_ref.theme;return theme.text3;},function(_ref2){var theme=_ref2.theme;return theme.bg1;});var StyledGasIcon=_styled(GasIcon).withConfig({componentId:\"sc-qnhalc-1\"})([\"margin-right:4px;height:14px;& > *{stroke:\",\";}\"],function(_ref3){var theme=_ref3.theme;return theme.text3;});export var SUPPORTED_GAS_ESTIMATE_CHAIN_IDS=[SupportedChainId.MAINNET,SupportedChainId.POLYGON];export default function GasEstimateBadge(_ref4){var _trade$gasUseEstimate;var trade=_ref4.trade,loading=_ref4.loading,showRoute=_ref4.showRoute,disableHover=_ref4.disableHover;var formattedGasPriceString=(trade===null||trade===void 0?void 0:trade.gasUseEstimateUSD)?trade.gasUseEstimateUSD.toFixed(2)==='0.00'?'<$0.01':'$'+trade.gasUseEstimateUSD.toFixed(2):undefined;return/*#__PURE__*/_jsx(MouseoverTooltipContent,{wrap:false,disableHover:disableHover,content:loading?null:/*#__PURE__*/_jsx(ResponsiveTooltipContainer,{origin:\"top right\",style:{padding:showRoute?'0':'12px',border:'none',borderRadius:showRoute?'16px':'12px',maxWidth:'400px'},children:showRoute?trade?/*#__PURE__*/_jsx(SwapRoute,{trade:trade,syncing:loading,fixedOpen:showRoute}):null:/*#__PURE__*/_jsxs(AutoColumn,{gap:\"4px\",justify:\"center\",children:[/*#__PURE__*/_jsx(ThemedText.Main,{fontSize:\"12px\",textAlign:\"center\",children:/*#__PURE__*/_jsx(Trans,{id:\"Estimated network fee\"})}),/*#__PURE__*/_jsx(ThemedText.Body,{textAlign:\"center\",fontWeight:500,style:{userSelect:'none'},children:/*#__PURE__*/_jsx(Trans,{id:\"${0}\",values:{0:trade===null||trade===void 0?void 0:(_trade$gasUseEstimate=trade.gasUseEstimateUSD)===null||_trade$gasUseEstimate===void 0?void 0:_trade$gasUseEstimate.toFixed(2)}})}),/*#__PURE__*/_jsx(ThemedText.Main,{fontSize:\"10px\",textAlign:\"center\",maxWidth:\"140px\",color:\"text3\",children:/*#__PURE__*/_jsx(Trans,{id:\"Estimate may differ due to your wallet gas settings\"})})]})}),placement:\"bottom\",onOpen:function onOpen(){return ReactGA.event({category:'Gas',action:'Gas Details Tooltip Open'});},children:/*#__PURE__*/_jsx(LoadingOpacityContainer,{$loading:loading,children:/*#__PURE__*/_jsxs(GasWrapper,{children:[/*#__PURE__*/_jsx(StyledGasIcon,{}),formattedGasPriceString!==null&&formattedGasPriceString!==void 0?formattedGasPriceString:null]})})});}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/components/swap/GasEstimateBadge.tsx"],"names":["AutoColumn","LoadingOpacityContainer","RowFixed","MouseoverTooltipContent","ReactGA","ThemedText","SupportedChainId","ResponsiveTooltipContainer","SwapRoute","GasWrapper","styled","theme","text3","bg1","StyledGasIcon","GasIcon","SUPPORTED_GAS_ESTIMATE_CHAIN_IDS","MAINNET","POLYGON","GasEstimateBadge","trade","loading","showRoute","disableHover","formattedGasPriceString","gasUseEstimateUSD","toFixed","undefined","padding","border","borderRadius","maxWidth","userSelect","event","category","action"],"mappings":"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","sourcesContent":["import { Trans } from '@lingui/macro'\nimport { Currency, TradeType } from '@uniswap/sdk-core'\nimport { AutoColumn } from 'components/Column'\nimport { LoadingOpacityContainer } from 'components/Loader/styled'\nimport { RowFixed } from 'components/Row'\nimport { MouseoverTooltipContent } from 'components/Tooltip'\nimport ReactGA from 'react-ga'\nimport { InterfaceTrade } from 'state/routing/types'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme'\n\nimport { ReactComponent as GasIcon } from '../../assets/images/gas-icon.svg'\nimport { SupportedChainId } from '../../constants/chains'\nimport { ResponsiveTooltipContainer } from './styleds'\nimport SwapRoute from './SwapRoute'\n\nconst GasWrapper = styled(RowFixed)`\n  border-radius: 8px;\n  padding: 4px 6px;\n  height: 24px;\n  color: ${({ theme }) => theme.text3};\n  background-color: ${({ theme }) => theme.bg1};\n  font-size: 14px;\n  font-weight: 500;\n  user-select: none;\n`\nconst StyledGasIcon = styled(GasIcon)`\n  margin-right: 4px;\n  height: 14px;\n  & > * {\n    stroke: ${({ theme }) => theme.text3};\n  }\n`\n\nexport const SUPPORTED_GAS_ESTIMATE_CHAIN_IDS = [SupportedChainId.MAINNET, SupportedChainId.POLYGON]\n\nexport default function GasEstimateBadge({\n  trade,\n  loading,\n  showRoute,\n  disableHover,\n}: {\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined | null // dollar amount in active chain's stablecoin\n  loading: boolean\n  showRoute?: boolean // show route instead of gas estimation summary\n  disableHover?: boolean\n}) {\n  const formattedGasPriceString = trade?.gasUseEstimateUSD\n    ? trade.gasUseEstimateUSD.toFixed(2) === '0.00'\n      ? '<$0.01'\n      : '$' + trade.gasUseEstimateUSD.toFixed(2)\n    : undefined\n\n  return (\n    <MouseoverTooltipContent\n      wrap={false}\n      disableHover={disableHover}\n      content={\n        loading ? null : (\n          <ResponsiveTooltipContainer\n            origin=\"top right\"\n            style={{\n              padding: showRoute ? '0' : '12px',\n              border: 'none',\n              borderRadius: showRoute ? '16px' : '12px',\n              maxWidth: '400px',\n            }}\n          >\n            {showRoute ? (\n              trade ? (\n                <SwapRoute trade={trade} syncing={loading} fixedOpen={showRoute} />\n              ) : null\n            ) : (\n              <AutoColumn gap=\"4px\" justify=\"center\">\n                <ThemedText.Main fontSize=\"12px\" textAlign=\"center\">\n                  <Trans>Estimated network fee</Trans>\n                </ThemedText.Main>\n                <ThemedText.Body textAlign=\"center\" fontWeight={500} style={{ userSelect: 'none' }}>\n                  <Trans>${trade?.gasUseEstimateUSD?.toFixed(2)}</Trans>\n                </ThemedText.Body>\n                <ThemedText.Main fontSize=\"10px\" textAlign=\"center\" maxWidth=\"140px\" color=\"text3\">\n                  <Trans>Estimate may differ due to your wallet gas settings</Trans>\n                </ThemedText.Main>\n              </AutoColumn>\n            )}\n          </ResponsiveTooltipContainer>\n        )\n      }\n      placement=\"bottom\"\n      onOpen={() =>\n        ReactGA.event({\n          category: 'Gas',\n          action: 'Gas Details Tooltip Open',\n        })\n      }\n    >\n      <LoadingOpacityContainer $loading={loading}>\n        <GasWrapper>\n          <StyledGasIcon />\n          {formattedGasPriceString ?? null}\n        </GasWrapper>\n      </LoadingOpacityContainer>\n    </MouseoverTooltipContent>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}