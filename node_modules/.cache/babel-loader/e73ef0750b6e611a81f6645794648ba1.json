{"ast":null,"code":"import _classCallCheck from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import _createForOfIteratorHelper from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import{IMetric,setGlobalMetric}from'@uniswap/smart-order-router';import{INFURA_NETWORK_URLS}from'constants/chains';import{providers}from'ethers/lib/ethers';import ReactGA from'react-ga';import{AUTO_ROUTER_SUPPORTED_CHAINS}from'./constants';/** Minimal set of dependencies for the router to work locally. */export function buildDependencies(){var dependenciesByChain={};var _iterator=_createForOfIteratorHelper(AUTO_ROUTER_SUPPORTED_CHAINS),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var chainId=_step.value;var provider=new providers.JsonRpcProvider(INFURA_NETWORK_URLS[chainId]);dependenciesByChain[chainId]={chainId:chainId,provider:provider};}}catch(err){_iterator.e(err);}finally{_iterator.f();}return dependenciesByChain;}var GAMetric=/*#__PURE__*/function(_IMetric){_inherits(GAMetric,_IMetric);var _super=_createSuper(GAMetric);function GAMetric(){_classCallCheck(this,GAMetric);return _super.apply(this,arguments);}_createClass(GAMetric,[{key:\"putDimensions\",value:function putDimensions(){return;}},{key:\"putMetric\",value:function putMetric(key,value,unit){ReactGA.timing({category:'Routing API',variable:\"\".concat(key,\" | \").concat(unit),value:value,label:'client'});}}]);return GAMetric;}(IMetric);setGlobalMetric(new GAMetric());","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/state/routing/clientSideSmartOrderRouter/dependencies.ts"],"names":["IMetric","setGlobalMetric","INFURA_NETWORK_URLS","providers","ReactGA","AUTO_ROUTER_SUPPORTED_CHAINS","buildDependencies","dependenciesByChain","chainId","provider","JsonRpcProvider","GAMetric","key","value","unit","timing","category","variable","label"],"mappings":"myBAAA,OAA4BA,OAA5B,CAAuDC,eAAvD,KAA8E,6BAA9E,CACA,OAASC,mBAAT,KAAsD,kBAAtD,CACA,OAASC,SAAT,KAA0B,mBAA1B,CACA,MAAOC,CAAAA,OAAP,KAAoB,UAApB,CAEA,OAASC,4BAAT,KAA6C,aAA7C,CAMA,kEACA,MAAO,SAASC,CAAAA,iBAAT,EAA2C,CAChD,GAAMC,CAAAA,mBAAiC,CAAG,EAA1C,CADgD,yCAE1BF,4BAF0B,YAEhD,+CAAoD,IAAzCG,CAAAA,OAAyC,aAClD,GAAMC,CAAAA,QAAQ,CAAG,GAAIN,CAAAA,SAAS,CAACO,eAAd,CAA8BR,mBAAmB,CAACM,OAAD,CAAjD,CAAjB,CAEAD,mBAAmB,CAACC,OAAD,CAAnB,CAA+B,CAC7BA,OAAO,CAAPA,OAD6B,CAE7BC,QAAQ,CAARA,QAF6B,CAA/B,CAID,CAT+C,qDAWhD,MAAOF,CAAAA,mBAAP,CACD,C,GAEKI,CAAAA,Q,0OACJ,wBAAgB,CACd,OACD,C,yBAED,mBAAUC,GAAV,CAAuBC,KAAvB,CAAsCC,IAAtC,CAA+D,CAC7DV,OAAO,CAACW,MAAR,CAAe,CACbC,QAAQ,CAAE,aADG,CAEbC,QAAQ,WAAKL,GAAL,eAAcE,IAAd,CAFK,CAGbD,KAAK,CAALA,KAHa,CAIbK,KAAK,CAAE,QAJM,CAAf,EAMD,C,sBAZoBlB,O,EAevBC,eAAe,CAAC,GAAIU,CAAAA,QAAJ,EAAD,CAAf","sourcesContent":["import { AlphaRouterParams, IMetric, MetricLoggerUnit, setGlobalMetric } from '@uniswap/smart-order-router'\nimport { INFURA_NETWORK_URLS, SupportedChainId } from 'constants/chains'\nimport { providers } from 'ethers/lib/ethers'\nimport ReactGA from 'react-ga'\n\nimport { AUTO_ROUTER_SUPPORTED_CHAINS } from './constants'\n\nexport type Dependencies = {\n  [chainId in SupportedChainId]?: AlphaRouterParams\n}\n\n/** Minimal set of dependencies for the router to work locally. */\nexport function buildDependencies(): Dependencies {\n  const dependenciesByChain: Dependencies = {}\n  for (const chainId of AUTO_ROUTER_SUPPORTED_CHAINS) {\n    const provider = new providers.JsonRpcProvider(INFURA_NETWORK_URLS[chainId])\n\n    dependenciesByChain[chainId] = {\n      chainId,\n      provider,\n    }\n  }\n\n  return dependenciesByChain\n}\n\nclass GAMetric extends IMetric {\n  putDimensions() {\n    return\n  }\n\n  putMetric(key: string, value: number, unit?: MetricLoggerUnit) {\n    ReactGA.timing({\n      category: 'Routing API',\n      variable: `${key} | ${unit}`,\n      value,\n      label: 'client',\n    })\n  }\n}\n\nsetGlobalMetric(new GAMetric())\n"]},"metadata":{},"sourceType":"module"}