{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { namehash } from '@ethersproject/hash';\nimport { useMemo } from 'react';\nimport { useSingleCallResult } from '../state/multicall/hooks';\nimport { isAddress } from '../utils';\nimport isZero from '../utils/isZero';\nimport { useENSRegistrarContract, useENSResolverContract } from './useContract';\nimport useDebounce from './useDebounce';\n/**\n * Does a reverse lookup for an address to find its ENS name.\n * Note this is not the same as looking up an ENS name to find an address.\n */\n\nexport default function useENSName(address) {\n  _s();\n\n  var _resolverAddress$resu;\n\n  const debouncedAddress = useDebounce(address, 200);\n  const ensNodeArgument = useMemo(() => {\n    if (!debouncedAddress || !isAddress(debouncedAddress)) return [undefined];\n    return [namehash(`${debouncedAddress.toLowerCase().substr(2)}.addr.reverse`)];\n  }, [debouncedAddress]);\n  const registrarContract = useENSRegistrarContract(false);\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument);\n  const resolverAddressResult = (_resolverAddress$resu = resolverAddress.result) === null || _resolverAddress$resu === void 0 ? void 0 : _resolverAddress$resu[0];\n  const resolverContract = useENSResolverContract(resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined, false);\n  const name = useSingleCallResult(resolverContract, 'name', ensNodeArgument);\n  const changed = debouncedAddress !== address;\n  return useMemo(() => {\n    var _name$result$, _name$result;\n\n    return {\n      ENSName: changed ? null : (_name$result$ = (_name$result = name.result) === null || _name$result === void 0 ? void 0 : _name$result[0]) !== null && _name$result$ !== void 0 ? _name$result$ : null,\n      loading: changed || resolverAddress.loading || name.loading\n    };\n  }, [changed, name.loading, name.result, resolverAddress.loading]);\n}\n\n_s(useENSName, \"Ed6WJGIdY3UCgdYyGmMCnC7EIwI=\", false, function () {\n  return [useDebounce, useENSRegistrarContract, useSingleCallResult, useENSResolverContract, useSingleCallResult];\n});","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/hooks/useENSName.ts"],"names":["namehash","useMemo","useSingleCallResult","isAddress","isZero","useENSRegistrarContract","useENSResolverContract","useDebounce","useENSName","address","debouncedAddress","ensNodeArgument","undefined","toLowerCase","substr","registrarContract","resolverAddress","resolverAddressResult","result","resolverContract","name","changed","ENSName","loading"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,qBAAzB;AACA,SAASC,OAAT,QAAwB,OAAxB;AAEA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,SAAT,QAA0B,UAA1B;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,uBAAT,EAAkCC,sBAAlC,QAAgE,eAAhE;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA;AACA;AACA;AACA;;AACA,eAAe,SAASC,UAAT,CAAoBC,OAApB,EAAoF;AAAA;;AAAA;;AACjG,QAAMC,gBAAgB,GAAGH,WAAW,CAACE,OAAD,EAAU,GAAV,CAApC;AACA,QAAME,eAAe,GAAGV,OAAO,CAAC,MAAM;AACpC,QAAI,CAACS,gBAAD,IAAqB,CAACP,SAAS,CAACO,gBAAD,CAAnC,EAAuD,OAAO,CAACE,SAAD,CAAP;AACvD,WAAO,CAACZ,QAAQ,CAAE,GAAEU,gBAAgB,CAACG,WAAjB,GAA+BC,MAA/B,CAAsC,CAAtC,CAAyC,eAA7C,CAAT,CAAP;AACD,GAH8B,EAG5B,CAACJ,gBAAD,CAH4B,CAA/B;AAIA,QAAMK,iBAAiB,GAAGV,uBAAuB,CAAC,KAAD,CAAjD;AACA,QAAMW,eAAe,GAAGd,mBAAmB,CAACa,iBAAD,EAAoB,UAApB,EAAgCJ,eAAhC,CAA3C;AACA,QAAMM,qBAAqB,4BAAGD,eAAe,CAACE,MAAnB,0DAAG,sBAAyB,CAAzB,CAA9B;AACA,QAAMC,gBAAgB,GAAGb,sBAAsB,CAC7CW,qBAAqB,IAAI,CAACb,MAAM,CAACa,qBAAD,CAAhC,GAA0DA,qBAA1D,GAAkFL,SADrC,EAE7C,KAF6C,CAA/C;AAIA,QAAMQ,IAAI,GAAGlB,mBAAmB,CAACiB,gBAAD,EAAmB,MAAnB,EAA2BR,eAA3B,CAAhC;AAEA,QAAMU,OAAO,GAAGX,gBAAgB,KAAKD,OAArC;AACA,SAAOR,OAAO,CACZ;AAAA;;AAAA,WAAO;AACLqB,MAAAA,OAAO,EAAED,OAAO,GAAG,IAAH,oCAAUD,IAAI,CAACF,MAAf,iDAAU,aAAc,CAAd,CAAV,yDAA8B,IADzC;AAELK,MAAAA,OAAO,EAAEF,OAAO,IAAIL,eAAe,CAACO,OAA3B,IAAsCH,IAAI,CAACG;AAF/C,KAAP;AAAA,GADY,EAKZ,CAACF,OAAD,EAAUD,IAAI,CAACG,OAAf,EAAwBH,IAAI,CAACF,MAA7B,EAAqCF,eAAe,CAACO,OAArD,CALY,CAAd;AAOD;;GAvBuBf,U;UACGD,W,EAKCF,uB,EACFH,mB,EAECI,sB,EAIZJ,mB","sourcesContent":["import { namehash } from '@ethersproject/hash'\nimport { useMemo } from 'react'\n\nimport { useSingleCallResult } from '../state/multicall/hooks'\nimport { isAddress } from '../utils'\nimport isZero from '../utils/isZero'\nimport { useENSRegistrarContract, useENSResolverContract } from './useContract'\nimport useDebounce from './useDebounce'\n\n/**\n * Does a reverse lookup for an address to find its ENS name.\n * Note this is not the same as looking up an ENS name to find an address.\n */\nexport default function useENSName(address?: string): { ENSName: string | null; loading: boolean } {\n  const debouncedAddress = useDebounce(address, 200)\n  const ensNodeArgument = useMemo(() => {\n    if (!debouncedAddress || !isAddress(debouncedAddress)) return [undefined]\n    return [namehash(`${debouncedAddress.toLowerCase().substr(2)}.addr.reverse`)]\n  }, [debouncedAddress])\n  const registrarContract = useENSRegistrarContract(false)\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument)\n  const resolverAddressResult = resolverAddress.result?.[0]\n  const resolverContract = useENSResolverContract(\n    resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined,\n    false\n  )\n  const name = useSingleCallResult(resolverContract, 'name', ensNodeArgument)\n\n  const changed = debouncedAddress !== address\n  return useMemo(\n    () => ({\n      ENSName: changed ? null : name.result?.[0] ?? null,\n      loading: changed || resolverAddress.loading || name.loading,\n    }),\n    [changed, name.loading, name.result, resolverAddress.loading]\n  )\n}\n"]},"metadata":{},"sourceType":"module"}