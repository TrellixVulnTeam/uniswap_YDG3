{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { Trans } from \"@lingui/react\";\nimport { CurrencyAmount, Percent } from '@uniswap/sdk-core';\nimport JSBI from 'jsbi';\nimport { useCallback } from 'react';\nimport { useAppDispatch, useAppSelector } from 'state/hooks';\nimport { useTotalSupply } from '../../hooks/useTotalSupply';\nimport { useV2Pair } from '../../hooks/useV2Pairs';\nimport { useActiveWeb3React } from '../../hooks/web3';\nimport { tryParseAmount } from '../swap/hooks';\nimport { useTokenBalances } from '../wallet/hooks';\nimport { Field, typeInput } from './actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function useBurnState() {\n  _s();\n\n  return useAppSelector(state => state.burn);\n}\n\n_s(useBurnState, \"bRaY7Fsh/GrWHjZMhGvF04Z7BZI=\", false, function () {\n  return [useAppSelector];\n});\n\nexport function useDerivedBurnInfo(currencyA, currencyB) {\n  _s2();\n\n  var _pair$liquidityToken$, _pair$liquidityToken;\n\n  const {\n    account\n  } = useActiveWeb3React();\n  const {\n    independentField,\n    typedValue\n  } = useBurnState(); // pair + totalsupply\n\n  const [, pair] = useV2Pair(currencyA, currencyB); // balances\n\n  const relevantTokenBalances = useTokenBalances(account !== null && account !== void 0 ? account : undefined, [pair === null || pair === void 0 ? void 0 : pair.liquidityToken]);\n  const userLiquidity = relevantTokenBalances === null || relevantTokenBalances === void 0 ? void 0 : relevantTokenBalances[(_pair$liquidityToken$ = pair === null || pair === void 0 ? void 0 : (_pair$liquidityToken = pair.liquidityToken) === null || _pair$liquidityToken === void 0 ? void 0 : _pair$liquidityToken.address) !== null && _pair$liquidityToken$ !== void 0 ? _pair$liquidityToken$ : ''];\n  const [tokenA, tokenB] = [currencyA === null || currencyA === void 0 ? void 0 : currencyA.wrapped, currencyB === null || currencyB === void 0 ? void 0 : currencyB.wrapped];\n  const tokens = {\n    [Field.CURRENCY_A]: tokenA,\n    [Field.CURRENCY_B]: tokenB,\n    [Field.LIQUIDITY]: pair === null || pair === void 0 ? void 0 : pair.liquidityToken\n  }; // liquidity values\n\n  const totalSupply = useTotalSupply(pair === null || pair === void 0 ? void 0 : pair.liquidityToken);\n  const liquidityValueA = pair && totalSupply && userLiquidity && tokenA && // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n  JSBI.greaterThanOrEqual(totalSupply.quotient, userLiquidity.quotient) ? CurrencyAmount.fromRawAmount(tokenA, pair.getLiquidityValue(tokenA, totalSupply, userLiquidity, false).quotient) : undefined;\n  const liquidityValueB = pair && totalSupply && userLiquidity && tokenB && // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n  JSBI.greaterThanOrEqual(totalSupply.quotient, userLiquidity.quotient) ? CurrencyAmount.fromRawAmount(tokenB, pair.getLiquidityValue(tokenB, totalSupply, userLiquidity, false).quotient) : undefined;\n  const liquidityValues = {\n    [Field.CURRENCY_A]: liquidityValueA,\n    [Field.CURRENCY_B]: liquidityValueB\n  };\n  let percentToRemove = new Percent('0', '100'); // user specified a %\n\n  if (independentField === Field.LIQUIDITY_PERCENT) {\n    percentToRemove = new Percent(typedValue, '100');\n  } // user specified a specific amount of liquidity tokens\n  else if (independentField === Field.LIQUIDITY) {\n    if (pair === null || pair === void 0 ? void 0 : pair.liquidityToken) {\n      const independentAmount = tryParseAmount(typedValue, pair.liquidityToken);\n\n      if (independentAmount && userLiquidity && !independentAmount.greaterThan(userLiquidity)) {\n        percentToRemove = new Percent(independentAmount.quotient, userLiquidity.quotient);\n      }\n    }\n  } // user specified a specific amount of token a or b\n  else {\n    if (tokens[independentField]) {\n      const independentAmount = tryParseAmount(typedValue, tokens[independentField]);\n      const liquidityValue = liquidityValues[independentField];\n\n      if (independentAmount && liquidityValue && !independentAmount.greaterThan(liquidityValue)) {\n        percentToRemove = new Percent(independentAmount.quotient, liquidityValue.quotient);\n      }\n    }\n  }\n\n  const parsedAmounts = {\n    [Field.LIQUIDITY_PERCENT]: percentToRemove,\n    [Field.LIQUIDITY]: userLiquidity && percentToRemove && percentToRemove.greaterThan('0') ? CurrencyAmount.fromRawAmount(userLiquidity.currency, percentToRemove.multiply(userLiquidity.quotient).quotient) : undefined,\n    [Field.CURRENCY_A]: tokenA && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueA ? CurrencyAmount.fromRawAmount(tokenA, percentToRemove.multiply(liquidityValueA.quotient).quotient) : undefined,\n    [Field.CURRENCY_B]: tokenB && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueB ? CurrencyAmount.fromRawAmount(tokenB, percentToRemove.multiply(liquidityValueB.quotient).quotient) : undefined\n  };\n  let error;\n\n  if (!account) {\n    error = /*#__PURE__*/_jsxDEV(Trans, {\n      id: \"Connect Wallet\"\n    }, void 0, false, void 0, this);\n  }\n\n  if (!parsedAmounts[Field.LIQUIDITY] || !parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    var _error;\n\n    error = (_error = error) !== null && _error !== void 0 ? _error : /*#__PURE__*/_jsxDEV(Trans, {\n      id: \"Enter an amount\"\n    }, void 0, false, void 0, this);\n  }\n\n  return {\n    pair,\n    parsedAmounts,\n    error\n  };\n}\n\n_s2(useDerivedBurnInfo, \"TKYa5IHtL6GRPxUndwh/Ns8vIqw=\", false, function () {\n  return [useActiveWeb3React, useBurnState, useV2Pair, useTokenBalances, useTotalSupply];\n});\n\nexport function useBurnActionHandlers() {\n  _s3();\n\n  const dispatch = useAppDispatch();\n  const onUserInput = useCallback((field, typedValue) => {\n    dispatch(typeInput({\n      field,\n      typedValue\n    }));\n  }, [dispatch]);\n  return {\n    onUserInput\n  };\n}\n\n_s3(useBurnActionHandlers, \"r/x3H4MiKpsB+LnefuuwydAEap8=\", false, function () {\n  return [useAppDispatch];\n});","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/state/burn/hooks.tsx"],"names":["CurrencyAmount","Percent","JSBI","useCallback","useAppDispatch","useAppSelector","useTotalSupply","useV2Pair","useActiveWeb3React","tryParseAmount","useTokenBalances","Field","typeInput","useBurnState","state","burn","useDerivedBurnInfo","currencyA","currencyB","account","independentField","typedValue","pair","relevantTokenBalances","undefined","liquidityToken","userLiquidity","address","tokenA","tokenB","wrapped","tokens","CURRENCY_A","CURRENCY_B","LIQUIDITY","totalSupply","liquidityValueA","greaterThanOrEqual","quotient","fromRawAmount","getLiquidityValue","liquidityValueB","liquidityValues","percentToRemove","LIQUIDITY_PERCENT","independentAmount","greaterThan","liquidityValue","parsedAmounts","currency","multiply","error","useBurnActionHandlers","dispatch","onUserInput","field"],"mappings":"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","sourcesContent":["import { Trans } from '@lingui/macro'\nimport { Currency, CurrencyAmount, Percent, Token } from '@uniswap/sdk-core'\nimport { Pair } from '@uniswap/v2-sdk'\nimport JSBI from 'jsbi'\nimport { ReactNode, useCallback } from 'react'\nimport { useAppDispatch, useAppSelector } from 'state/hooks'\n\nimport { useTotalSupply } from '../../hooks/useTotalSupply'\nimport { useV2Pair } from '../../hooks/useV2Pairs'\nimport { useActiveWeb3React } from '../../hooks/web3'\nimport { AppState } from '../index'\nimport { tryParseAmount } from '../swap/hooks'\nimport { useTokenBalances } from '../wallet/hooks'\nimport { Field, typeInput } from './actions'\n\nexport function useBurnState(): AppState['burn'] {\n  return useAppSelector((state) => state.burn)\n}\n\nexport function useDerivedBurnInfo(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined\n): {\n  pair?: Pair | null\n  parsedAmounts: {\n    [Field.LIQUIDITY_PERCENT]: Percent\n    [Field.LIQUIDITY]?: CurrencyAmount<Token>\n    [Field.CURRENCY_A]?: CurrencyAmount<Currency>\n    [Field.CURRENCY_B]?: CurrencyAmount<Currency>\n  }\n  error?: ReactNode\n} {\n  const { account } = useActiveWeb3React()\n\n  const { independentField, typedValue } = useBurnState()\n\n  // pair + totalsupply\n  const [, pair] = useV2Pair(currencyA, currencyB)\n\n  // balances\n  const relevantTokenBalances = useTokenBalances(account ?? undefined, [pair?.liquidityToken])\n  const userLiquidity: undefined | CurrencyAmount<Token> = relevantTokenBalances?.[pair?.liquidityToken?.address ?? '']\n\n  const [tokenA, tokenB] = [currencyA?.wrapped, currencyB?.wrapped]\n  const tokens = {\n    [Field.CURRENCY_A]: tokenA,\n    [Field.CURRENCY_B]: tokenB,\n    [Field.LIQUIDITY]: pair?.liquidityToken,\n  }\n\n  // liquidity values\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\n  const liquidityValueA =\n    pair &&\n    totalSupply &&\n    userLiquidity &&\n    tokenA &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalSupply.quotient, userLiquidity.quotient)\n      ? CurrencyAmount.fromRawAmount(tokenA, pair.getLiquidityValue(tokenA, totalSupply, userLiquidity, false).quotient)\n      : undefined\n  const liquidityValueB =\n    pair &&\n    totalSupply &&\n    userLiquidity &&\n    tokenB &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalSupply.quotient, userLiquidity.quotient)\n      ? CurrencyAmount.fromRawAmount(tokenB, pair.getLiquidityValue(tokenB, totalSupply, userLiquidity, false).quotient)\n      : undefined\n  const liquidityValues: { [Field.CURRENCY_A]?: CurrencyAmount<Token>; [Field.CURRENCY_B]?: CurrencyAmount<Token> } = {\n    [Field.CURRENCY_A]: liquidityValueA,\n    [Field.CURRENCY_B]: liquidityValueB,\n  }\n\n  let percentToRemove: Percent = new Percent('0', '100')\n  // user specified a %\n  if (independentField === Field.LIQUIDITY_PERCENT) {\n    percentToRemove = new Percent(typedValue, '100')\n  }\n  // user specified a specific amount of liquidity tokens\n  else if (independentField === Field.LIQUIDITY) {\n    if (pair?.liquidityToken) {\n      const independentAmount = tryParseAmount(typedValue, pair.liquidityToken)\n      if (independentAmount && userLiquidity && !independentAmount.greaterThan(userLiquidity)) {\n        percentToRemove = new Percent(independentAmount.quotient, userLiquidity.quotient)\n      }\n    }\n  }\n  // user specified a specific amount of token a or b\n  else {\n    if (tokens[independentField]) {\n      const independentAmount = tryParseAmount(typedValue, tokens[independentField])\n      const liquidityValue = liquidityValues[independentField]\n      if (independentAmount && liquidityValue && !independentAmount.greaterThan(liquidityValue)) {\n        percentToRemove = new Percent(independentAmount.quotient, liquidityValue.quotient)\n      }\n    }\n  }\n\n  const parsedAmounts: {\n    [Field.LIQUIDITY_PERCENT]: Percent\n    [Field.LIQUIDITY]?: CurrencyAmount<Token>\n    [Field.CURRENCY_A]?: CurrencyAmount<Currency>\n    [Field.CURRENCY_B]?: CurrencyAmount<Currency>\n  } = {\n    [Field.LIQUIDITY_PERCENT]: percentToRemove,\n    [Field.LIQUIDITY]:\n      userLiquidity && percentToRemove && percentToRemove.greaterThan('0')\n        ? CurrencyAmount.fromRawAmount(\n            userLiquidity.currency,\n            percentToRemove.multiply(userLiquidity.quotient).quotient\n          )\n        : undefined,\n    [Field.CURRENCY_A]:\n      tokenA && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueA\n        ? CurrencyAmount.fromRawAmount(tokenA, percentToRemove.multiply(liquidityValueA.quotient).quotient)\n        : undefined,\n    [Field.CURRENCY_B]:\n      tokenB && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueB\n        ? CurrencyAmount.fromRawAmount(tokenB, percentToRemove.multiply(liquidityValueB.quotient).quotient)\n        : undefined,\n  }\n\n  let error: ReactNode | undefined\n  if (!account) {\n    error = <Trans>Connect Wallet</Trans>\n  }\n\n  if (!parsedAmounts[Field.LIQUIDITY] || !parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    error = error ?? <Trans>Enter an amount</Trans>\n  }\n\n  return { pair, parsedAmounts, error }\n}\n\nexport function useBurnActionHandlers(): {\n  onUserInput: (field: Field, typedValue: string) => void\n} {\n  const dispatch = useAppDispatch()\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue }))\n    },\n    [dispatch]\n  )\n\n  return {\n    onUserInput,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}