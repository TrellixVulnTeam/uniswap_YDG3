{"ast":null,"code":"/**\n * Mnemonist Queue\n * ================\n *\n * Queue implementation based on the ideas of Queue.js that seems to beat\n * a LinkedList one in performance.\n */\nvar Iterator = require('obliterator/iterator'),\n    forEach = require('obliterator/foreach');\n/**\n * Queue\n *\n * @constructor\n */\n\n\nfunction Queue() {\n  this.clear();\n}\n/**\n * Method used to clear the queue.\n *\n * @return {undefined}\n */\n\n\nQueue.prototype.clear = function () {\n  // Properties\n  this.items = [];\n  this.offset = 0;\n  this.size = 0;\n};\n/**\n * Method used to add an item to the queue.\n *\n * @param  {any}    item - Item to enqueue.\n * @return {number}\n */\n\n\nQueue.prototype.enqueue = function (item) {\n  this.items.push(item);\n  return ++this.size;\n};\n/**\n * Method used to retrieve & remove the first item of the queue.\n *\n * @return {any}\n */\n\n\nQueue.prototype.dequeue = function () {\n  if (!this.size) return;\n  var item = this.items[this.offset];\n\n  if (++this.offset * 2 >= this.items.length) {\n    this.items = this.items.slice(this.offset);\n    this.offset = 0;\n  }\n\n  this.size--;\n  return item;\n};\n/**\n * Method used to retrieve the first item of the queue.\n *\n * @return {any}\n */\n\n\nQueue.prototype.peek = function () {\n  if (!this.size) return;\n  return this.items[this.offset];\n};\n/**\n * Method used to iterate over the queue.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\n\n\nQueue.prototype.forEach = function (callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  for (var i = this.offset, j = 0, l = this.items.length; i < l; i++, j++) callback.call(scope, this.items[i], j, this);\n};\n/*\n * Method used to convert the queue to a JavaScript array.\n *\n * @return {array}\n */\n\n\nQueue.prototype.toArray = function () {\n  return this.items.slice(this.offset);\n};\n/**\n * Method used to create an iterator over a queue's values.\n *\n * @return {Iterator}\n */\n\n\nQueue.prototype.values = function () {\n  var items = this.items,\n      i = this.offset;\n  return new Iterator(function () {\n    if (i >= items.length) return {\n      done: true\n    };\n    var value = items[i];\n    i++;\n    return {\n      value: value,\n      done: false\n    };\n  });\n};\n/**\n * Method used to create an iterator over a queue's entries.\n *\n * @return {Iterator}\n */\n\n\nQueue.prototype.entries = function () {\n  var items = this.items,\n      i = this.offset,\n      j = 0;\n  return new Iterator(function () {\n    if (i >= items.length) return {\n      done: true\n    };\n    var value = items[i];\n    i++;\n    return {\n      value: [j++, value],\n      done: false\n    };\n  });\n};\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\n\n\nif (typeof Symbol !== 'undefined') Queue.prototype[Symbol.iterator] = Queue.prototype.values;\n/**\n * Convenience known methods.\n */\n\nQueue.prototype.toString = function () {\n  return this.toArray().join(',');\n};\n\nQueue.prototype.toJSON = function () {\n  return this.toArray();\n};\n\nQueue.prototype.inspect = function () {\n  var array = this.toArray(); // Trick so that node displays the name of the constructor\n\n  Object.defineProperty(array, 'constructor', {\n    value: Queue,\n    enumerable: false\n  });\n  return array;\n};\n\nif (typeof Symbol !== 'undefined') Queue.prototype[Symbol.for('nodejs.util.inspect.custom')] = Queue.prototype.inspect;\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a queue.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @return {Queue}\n */\n\nQueue.from = function (iterable) {\n  var queue = new Queue();\n  forEach(iterable, function (value) {\n    queue.enqueue(value);\n  });\n  return queue;\n};\n/**\n * Static @.of function taking an arbitrary number of arguments & converting it\n * into a queue.\n *\n * @param  {...any} args\n * @return {Queue}\n */\n\n\nQueue.of = function () {\n  return Queue.from(arguments);\n};\n/**\n * Exporting.\n */\n\n\nmodule.exports = Queue;","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/node_modules/mnemonist/queue.js"],"names":["Iterator","require","forEach","Queue","clear","prototype","items","offset","size","enqueue","item","push","dequeue","length","slice","peek","callback","scope","arguments","i","j","l","call","toArray","values","done","value","entries","Symbol","iterator","toString","join","toJSON","inspect","array","Object","defineProperty","enumerable","for","from","iterable","queue","of","module","exports"],"mappings":"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","sourcesContent":["/**\n * Mnemonist Queue\n * ================\n *\n * Queue implementation based on the ideas of Queue.js that seems to beat\n * a LinkedList one in performance.\n */\nvar Iterator = require('obliterator/iterator'),\n    forEach = require('obliterator/foreach');\n\n/**\n * Queue\n *\n * @constructor\n */\nfunction Queue() {\n  this.clear();\n}\n\n/**\n * Method used to clear the queue.\n *\n * @return {undefined}\n */\nQueue.prototype.clear = function() {\n\n  // Properties\n  this.items = [];\n  this.offset = 0;\n  this.size = 0;\n};\n\n/**\n * Method used to add an item to the queue.\n *\n * @param  {any}    item - Item to enqueue.\n * @return {number}\n */\nQueue.prototype.enqueue = function(item) {\n\n  this.items.push(item);\n  return ++this.size;\n};\n\n/**\n * Method used to retrieve & remove the first item of the queue.\n *\n * @return {any}\n */\nQueue.prototype.dequeue = function() {\n  if (!this.size)\n    return;\n\n  var item = this.items[this.offset];\n\n  if (++this.offset * 2 >= this.items.length) {\n    this.items = this.items.slice(this.offset);\n    this.offset = 0;\n  }\n\n  this.size--;\n\n  return item;\n};\n\n/**\n * Method used to retrieve the first item of the queue.\n *\n * @return {any}\n */\nQueue.prototype.peek = function() {\n  if (!this.size)\n    return;\n\n  return this.items[this.offset];\n};\n\n/**\n * Method used to iterate over the queue.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nQueue.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  for (var i = this.offset, j = 0, l = this.items.length; i < l; i++, j++)\n    callback.call(scope, this.items[i], j, this);\n};\n\n/*\n * Method used to convert the queue to a JavaScript array.\n *\n * @return {array}\n */\nQueue.prototype.toArray = function() {\n  return this.items.slice(this.offset);\n};\n\n/**\n * Method used to create an iterator over a queue's values.\n *\n * @return {Iterator}\n */\nQueue.prototype.values = function() {\n  var items = this.items,\n      i = this.offset;\n\n  return new Iterator(function() {\n    if (i >= items.length)\n      return {\n        done: true\n      };\n\n    var value = items[i];\n    i++;\n\n    return {\n      value: value,\n      done: false\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over a queue's entries.\n *\n * @return {Iterator}\n */\nQueue.prototype.entries = function() {\n  var items = this.items,\n      i = this.offset,\n      j = 0;\n\n  return new Iterator(function() {\n    if (i >= items.length)\n      return {\n        done: true\n      };\n\n    var value = items[i];\n    i++;\n\n    return {\n      value: [j++, value],\n      done: false\n    };\n  });\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  Queue.prototype[Symbol.iterator] = Queue.prototype.values;\n\n/**\n * Convenience known methods.\n */\nQueue.prototype.toString = function() {\n  return this.toArray().join(',');\n};\n\nQueue.prototype.toJSON = function() {\n  return this.toArray();\n};\n\nQueue.prototype.inspect = function() {\n  var array = this.toArray();\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: Queue,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  Queue.prototype[Symbol.for('nodejs.util.inspect.custom')] = Queue.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a queue.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @return {Queue}\n */\nQueue.from = function(iterable) {\n  var queue = new Queue();\n\n  forEach(iterable, function(value) {\n    queue.enqueue(value);\n  });\n\n  return queue;\n};\n\n/**\n * Static @.of function taking an arbitrary number of arguments & converting it\n * into a queue.\n *\n * @param  {...any} args\n * @return {Queue}\n */\nQueue.of = function() {\n  return Queue.from(arguments);\n};\n\n/**\n * Exporting.\n */\nmodule.exports = Queue;\n"]},"metadata":{},"sourceType":"script"}