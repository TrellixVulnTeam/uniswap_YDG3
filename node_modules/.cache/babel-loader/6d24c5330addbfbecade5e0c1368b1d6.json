{"ast":null,"code":"/**\n * Mnemonist Binary Search Helpers\n * ================================\n *\n * Typical binary search functions.\n */\n\n/**\n * Function returning the index of the search value in the array or `-1` if\n * not found.\n *\n * @param  {array} array - Haystack.\n * @param  {any}   value - Needle.\n * @return {number}\n */\nexports.search = function (array, value, lo, hi) {\n  var mid = 0;\n  lo = typeof lo !== 'undefined' ? lo : 0;\n  hi = typeof hi !== 'undefined' ? hi : array.length;\n  hi--;\n  var current;\n\n  while (lo <= hi) {\n    mid = lo + hi >>> 1;\n    current = array[mid];\n\n    if (current > value) {\n      hi = ~-mid;\n    } else if (current < value) {\n      lo = -~mid;\n    } else {\n      return mid;\n    }\n  }\n\n  return -1;\n};\n/**\n * Same as above, but can use a custom comparator function.\n *\n * @param  {function} comparator - Custom comparator function.\n * @param  {array}    array      - Haystack.\n * @param  {any}      value      - Needle.\n * @return {number}\n */\n\n\nexports.searchWithComparator = function (comparator, array, value) {\n  var mid = 0,\n      lo = 0,\n      hi = ~-array.length,\n      comparison;\n\n  while (lo <= hi) {\n    mid = lo + hi >>> 1;\n    comparison = comparator(array[mid], value);\n\n    if (comparison > 0) {\n      hi = ~-mid;\n    } else if (comparison < 0) {\n      lo = -~mid;\n    } else {\n      return mid;\n    }\n  }\n\n  return -1;\n};\n/**\n * Function returning the lower bound of the given value in the array.\n *\n * @param  {array}  array - Haystack.\n * @param  {any}    value - Needle.\n * @param  {number} [lo] - Start index.\n * @param  {numner} [hi] - End index.\n * @return {number}\n */\n\n\nexports.lowerBound = function (array, value, lo, hi) {\n  var mid = 0;\n  lo = typeof lo !== 'undefined' ? lo : 0;\n  hi = typeof hi !== 'undefined' ? hi : array.length;\n\n  while (lo < hi) {\n    mid = lo + hi >>> 1;\n\n    if (value <= array[mid]) {\n      hi = mid;\n    } else {\n      lo = -~mid;\n    }\n  }\n\n  return lo;\n};\n/**\n * Same as above, but can use a custom comparator function.\n *\n * @param  {function} comparator - Custom comparator function.\n * @param  {array}    array      - Haystack.\n * @param  {any}      value      - Needle.\n * @return {number}\n */\n\n\nexports.lowerBoundWithComparator = function (comparator, array, value) {\n  var mid = 0,\n      lo = 0,\n      hi = array.length;\n\n  while (lo < hi) {\n    mid = lo + hi >>> 1;\n\n    if (comparator(value, array[mid]) <= 0) {\n      hi = mid;\n    } else {\n      lo = -~mid;\n    }\n  }\n\n  return lo;\n};\n/**\n * Same as above, but can work on sorted indices.\n *\n * @param  {array}    array - Haystack.\n * @param  {array}    array - Indices.\n * @param  {any}      value - Needle.\n * @return {number}\n */\n\n\nexports.lowerBoundIndices = function (array, indices, value, lo, hi) {\n  var mid = 0;\n  lo = typeof lo !== 'undefined' ? lo : 0;\n  hi = typeof hi !== 'undefined' ? hi : array.length;\n\n  while (lo < hi) {\n    mid = lo + hi >>> 1;\n\n    if (value <= array[indices[mid]]) {\n      hi = mid;\n    } else {\n      lo = -~mid;\n    }\n  }\n\n  return lo;\n};\n/**\n * Function returning the upper bound of the given value in the array.\n *\n * @param  {array}  array - Haystack.\n * @param  {any}    value - Needle.\n * @param  {number} [lo] - Start index.\n * @param  {numner} [hi] - End index.\n * @return {number}\n */\n\n\nexports.upperBound = function (array, value, lo, hi) {\n  var mid = 0;\n  lo = typeof lo !== 'undefined' ? lo : 0;\n  hi = typeof hi !== 'undefined' ? hi : array.length;\n\n  while (lo < hi) {\n    mid = lo + hi >>> 1;\n\n    if (value >= array[mid]) {\n      lo = -~mid;\n    } else {\n      hi = mid;\n    }\n  }\n\n  return lo;\n};\n/**\n * Same as above, but can use a custom comparator function.\n *\n * @param  {function} comparator - Custom comparator function.\n * @param  {array}    array      - Haystack.\n * @param  {any}      value      - Needle.\n * @return {number}\n */\n\n\nexports.upperBoundWithComparator = function (comparator, array, value) {\n  var mid = 0,\n      lo = 0,\n      hi = array.length;\n\n  while (lo < hi) {\n    mid = lo + hi >>> 1;\n\n    if (comparator(value, array[mid]) >= 0) {\n      lo = -~mid;\n    } else {\n      hi = mid;\n    }\n  }\n\n  return lo;\n};","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/node_modules/mnemonist/utils/binary-search.js"],"names":["exports","search","array","value","lo","hi","mid","length","current","searchWithComparator","comparator","comparison","lowerBound","lowerBoundWithComparator","lowerBoundIndices","indices","upperBound","upperBoundWithComparator"],"mappings":"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","sourcesContent":["/**\n * Mnemonist Binary Search Helpers\n * ================================\n *\n * Typical binary search functions.\n */\n\n/**\n * Function returning the index of the search value in the array or `-1` if\n * not found.\n *\n * @param  {array} array - Haystack.\n * @param  {any}   value - Needle.\n * @return {number}\n */\nexports.search = function(array, value, lo, hi) {\n  var mid = 0;\n\n  lo = typeof lo !== 'undefined' ? lo : 0;\n  hi = typeof hi !== 'undefined' ? hi : array.length;\n\n  hi--;\n\n  var current;\n\n  while (lo <= hi) {\n    mid = (lo + hi) >>> 1;\n\n    current = array[mid];\n\n    if (current > value) {\n      hi = ~-mid;\n    }\n    else if (current < value) {\n      lo = -~mid;\n    }\n    else {\n      return mid;\n    }\n  }\n\n  return -1;\n};\n\n/**\n * Same as above, but can use a custom comparator function.\n *\n * @param  {function} comparator - Custom comparator function.\n * @param  {array}    array      - Haystack.\n * @param  {any}      value      - Needle.\n * @return {number}\n */\nexports.searchWithComparator = function(comparator, array, value) {\n  var mid = 0,\n      lo = 0,\n      hi = ~-array.length,\n      comparison;\n\n  while (lo <= hi) {\n    mid = (lo + hi) >>> 1;\n\n    comparison = comparator(array[mid], value);\n\n    if (comparison > 0) {\n      hi = ~-mid;\n    }\n    else if (comparison < 0) {\n      lo = -~mid;\n    }\n    else {\n      return mid;\n    }\n  }\n\n  return -1;\n};\n\n/**\n * Function returning the lower bound of the given value in the array.\n *\n * @param  {array}  array - Haystack.\n * @param  {any}    value - Needle.\n * @param  {number} [lo] - Start index.\n * @param  {numner} [hi] - End index.\n * @return {number}\n */\nexports.lowerBound = function(array, value, lo, hi) {\n  var mid = 0;\n\n  lo = typeof lo !== 'undefined' ? lo : 0;\n  hi = typeof hi !== 'undefined' ? hi : array.length;\n\n  while (lo < hi) {\n    mid = (lo + hi) >>> 1;\n\n    if (value <= array[mid]) {\n      hi = mid;\n    }\n    else {\n      lo = -~mid;\n    }\n  }\n\n  return lo;\n};\n\n/**\n * Same as above, but can use a custom comparator function.\n *\n * @param  {function} comparator - Custom comparator function.\n * @param  {array}    array      - Haystack.\n * @param  {any}      value      - Needle.\n * @return {number}\n */\nexports.lowerBoundWithComparator = function(comparator, array, value) {\n  var mid = 0,\n      lo = 0,\n      hi = array.length;\n\n  while (lo < hi) {\n    mid = (lo + hi) >>> 1;\n\n    if (comparator(value, array[mid]) <= 0) {\n      hi = mid;\n    }\n    else {\n      lo = -~mid;\n    }\n  }\n\n  return lo;\n};\n\n/**\n * Same as above, but can work on sorted indices.\n *\n * @param  {array}    array - Haystack.\n * @param  {array}    array - Indices.\n * @param  {any}      value - Needle.\n * @return {number}\n */\nexports.lowerBoundIndices = function(array, indices, value, lo, hi) {\n  var mid = 0;\n\n  lo = typeof lo !== 'undefined' ? lo : 0;\n  hi = typeof hi !== 'undefined' ? hi : array.length;\n\n  while (lo < hi) {\n    mid = (lo + hi) >>> 1;\n\n    if (value <= array[indices[mid]]) {\n      hi = mid;\n    }\n    else {\n      lo = -~mid;\n    }\n  }\n\n  return lo;\n};\n\n/**\n * Function returning the upper bound of the given value in the array.\n *\n * @param  {array}  array - Haystack.\n * @param  {any}    value - Needle.\n * @param  {number} [lo] - Start index.\n * @param  {numner} [hi] - End index.\n * @return {number}\n */\nexports.upperBound = function(array, value, lo, hi) {\n  var mid = 0;\n\n  lo = typeof lo !== 'undefined' ? lo : 0;\n  hi = typeof hi !== 'undefined' ? hi : array.length;\n\n  while (lo < hi) {\n    mid = (lo + hi) >>> 1;\n\n    if (value >= array[mid]) {\n      lo = -~mid;\n    }\n    else {\n      hi = mid;\n    }\n  }\n\n  return lo;\n};\n\n/**\n * Same as above, but can use a custom comparator function.\n *\n * @param  {function} comparator - Custom comparator function.\n * @param  {array}    array      - Haystack.\n * @param  {any}      value      - Needle.\n * @return {number}\n */\nexports.upperBoundWithComparator = function(comparator, array, value) {\n  var mid = 0,\n      lo = 0,\n      hi = array.length;\n\n  while (lo < hi) {\n    mid = (lo + hi) >>> 1;\n\n    if (comparator(value, array[mid]) >= 0) {\n      lo = -~mid;\n    }\n    else {\n      hi = mid;\n    }\n  }\n\n  return lo;\n};\n"]},"metadata":{},"sourceType":"script"}