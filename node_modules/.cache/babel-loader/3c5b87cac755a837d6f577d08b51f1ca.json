{"ast":null,"code":"import _regeneratorRuntime from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{CurrencyAmount,Token,TradeType}from'@uniswap/sdk-core';import{AlphaRouter}from'@uniswap/smart-order-router';import JSBI from'jsbi';import{transformSwapRouteToGetQuoteResult}from'utils/transformSwapRouteToGetQuoteResult';import{buildDependencies}from'./dependencies';var routerParamsByChain=buildDependencies();export function getQuote(_x,_x2){return _getQuote.apply(this,arguments);}function _getQuote(){_getQuote=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref,alphaRouterConfig){var type,chainId,tokenIn,tokenOut,amountRaw,params,router,currencyIn,currencyOut,baseCurrency,quoteCurrency,amount,swapRoute;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:type=_ref.type,chainId=_ref.chainId,tokenIn=_ref.tokenIn,tokenOut=_ref.tokenOut,amountRaw=_ref.amount;params=routerParamsByChain[chainId];if(params){_context.next=4;break;}throw new Error('Router dependencies not initialized.');case 4:router=new AlphaRouter(params);currencyIn=new Token(tokenIn.chainId,tokenIn.address,tokenIn.decimals,tokenIn.symbol);currencyOut=new Token(tokenOut.chainId,tokenOut.address,tokenOut.decimals,tokenOut.symbol);baseCurrency=type==='exactIn'?currencyIn:currencyOut;quoteCurrency=type==='exactIn'?currencyOut:currencyIn;amount=CurrencyAmount.fromRawAmount(baseCurrency,JSBI.BigInt(amountRaw));_context.next=12;return router.route(amount,quoteCurrency,type==='exactIn'?TradeType.EXACT_INPUT:TradeType.EXACT_OUTPUT,/*swapConfig=*/undefined,alphaRouterConfig);case 12:swapRoute=_context.sent;if(swapRoute){_context.next=15;break;}throw new Error('Failed to generate client side quote');case 15:return _context.abrupt(\"return\",{data:transformSwapRouteToGetQuoteResult(type,amount,swapRoute)});case 16:case\"end\":return _context.stop();}}},_callee);}));return _getQuote.apply(this,arguments);}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/state/routing/clientSideSmartOrderRouter/index.ts"],"names":["CurrencyAmount","Token","TradeType","AlphaRouter","JSBI","transformSwapRouteToGetQuoteResult","buildDependencies","routerParamsByChain","getQuote","alphaRouterConfig","type","chainId","tokenIn","tokenOut","amountRaw","amount","params","Error","router","currencyIn","address","decimals","symbol","currencyOut","baseCurrency","quoteCurrency","fromRawAmount","BigInt","route","EXACT_INPUT","EXACT_OUTPUT","undefined","swapRoute","data"],"mappings":"2TAAA,OAAoBA,cAApB,CAAoCC,KAApC,CAA2CC,SAA3C,KAA4D,mBAA5D,CACA,OAASC,WAAT,KAAwD,6BAAxD,CACA,MAAOC,CAAAA,IAAP,KAAiB,MAAjB,CAEA,OAASC,kCAAT,KAAmD,0CAAnD,CAEA,OAASC,iBAAT,KAAkC,gBAAlC,CAEA,GAAMC,CAAAA,mBAAmB,CAAGD,iBAAiB,EAA7C,CAEA,eAAsBE,CAAAA,QAAtB,iD,uFAAO,sBAcLC,iBAdK,+OAEHC,IAFG,MAEHA,IAFG,CAGHC,OAHG,MAGHA,OAHG,CAIHC,OAJG,MAIHA,OAJG,CAKHC,QALG,MAKHA,QALG,CAMKC,SANL,MAMHC,MANG,CAgBCC,MAhBD,CAgBUT,mBAAmB,CAACI,OAAD,CAhB7B,IAiBAK,MAjBA,8BAkBG,IAAIC,CAAAA,KAAJ,CAAU,sCAAV,CAlBH,QAqBCC,MArBD,CAqBU,GAAIf,CAAAA,WAAJ,CAAgBa,MAAhB,CArBV,CAuBCG,UAvBD,CAuBc,GAAIlB,CAAAA,KAAJ,CAAUW,OAAO,CAACD,OAAlB,CAA2BC,OAAO,CAACQ,OAAnC,CAA4CR,OAAO,CAACS,QAApD,CAA8DT,OAAO,CAACU,MAAtE,CAvBd,CAwBCC,WAxBD,CAwBe,GAAItB,CAAAA,KAAJ,CAAUY,QAAQ,CAACF,OAAnB,CAA4BE,QAAQ,CAACO,OAArC,CAA8CP,QAAQ,CAACQ,QAAvD,CAAiER,QAAQ,CAACS,MAA1E,CAxBf,CA0BCE,YA1BD,CA0BgBd,IAAI,GAAK,SAAT,CAAqBS,UAArB,CAAkCI,WA1BlD,CA2BCE,aA3BD,CA2BiBf,IAAI,GAAK,SAAT,CAAqBa,WAArB,CAAmCJ,UA3BpD,CA4BCJ,MA5BD,CA4BUf,cAAc,CAAC0B,aAAf,CAA6BF,YAA7B,CAA2CpB,IAAI,CAACuB,MAAL,CAAYb,SAAZ,CAA3C,CA5BV,wBA8BmBI,CAAAA,MAAM,CAACU,KAAP,CACtBb,MADsB,CAEtBU,aAFsB,CAGtBf,IAAI,GAAK,SAAT,CAAqBR,SAAS,CAAC2B,WAA/B,CAA6C3B,SAAS,CAAC4B,YAHjC,CAItB,eAAgBC,SAJM,CAKtBtB,iBALsB,CA9BnB,SA8BCuB,SA9BD,kBAsCAA,SAtCA,+BAsCiB,IAAIf,CAAAA,KAAJ,CAAU,sCAAV,CAtCjB,yCAwCE,CAAEgB,IAAI,CAAE5B,kCAAkC,CAACK,IAAD,CAAOK,MAAP,CAAeiB,SAAf,CAA1C,CAxCF,yD","sourcesContent":["import { BigintIsh, CurrencyAmount, Token, TradeType } from '@uniswap/sdk-core'\nimport { AlphaRouter, AlphaRouterConfig, ChainId } from '@uniswap/smart-order-router'\nimport JSBI from 'jsbi'\nimport { GetQuoteResult } from 'state/routing/types'\nimport { transformSwapRouteToGetQuoteResult } from 'utils/transformSwapRouteToGetQuoteResult'\n\nimport { buildDependencies } from './dependencies'\n\nconst routerParamsByChain = buildDependencies()\n\nexport async function getQuote(\n  {\n    type,\n    chainId,\n    tokenIn,\n    tokenOut,\n    amount: amountRaw,\n  }: {\n    type: 'exactIn' | 'exactOut'\n    chainId: ChainId\n    tokenIn: { address: string; chainId: number; decimals: number; symbol?: string }\n    tokenOut: { address: string; chainId: number; decimals: number; symbol?: string }\n    amount: BigintIsh\n  },\n  alphaRouterConfig: Partial<AlphaRouterConfig>\n): Promise<{ data: GetQuoteResult; error?: unknown }> {\n  const params = routerParamsByChain[chainId]\n  if (!params) {\n    throw new Error('Router dependencies not initialized.')\n  }\n\n  const router = new AlphaRouter(params)\n\n  const currencyIn = new Token(tokenIn.chainId, tokenIn.address, tokenIn.decimals, tokenIn.symbol)\n  const currencyOut = new Token(tokenOut.chainId, tokenOut.address, tokenOut.decimals, tokenOut.symbol)\n\n  const baseCurrency = type === 'exactIn' ? currencyIn : currencyOut\n  const quoteCurrency = type === 'exactIn' ? currencyOut : currencyIn\n  const amount = CurrencyAmount.fromRawAmount(baseCurrency, JSBI.BigInt(amountRaw))\n\n  const swapRoute = await router.route(\n    amount,\n    quoteCurrency,\n    type === 'exactIn' ? TradeType.EXACT_INPUT : TradeType.EXACT_OUTPUT,\n    /*swapConfig=*/ undefined,\n    alphaRouterConfig\n  )\n\n  if (!swapRoute) throw new Error('Failed to generate client side quote')\n\n  return { data: transformSwapRouteToGetQuoteResult(type, amount, swapRoute) }\n}\n"]},"metadata":{},"sourceType":"module"}