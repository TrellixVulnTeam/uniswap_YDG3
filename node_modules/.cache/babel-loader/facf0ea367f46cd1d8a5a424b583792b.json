{"ast":null,"code":"import _defineProperty from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _toConsumableArray from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";var _objectSpread2,_SupportedChainId$MAI,_COMMON_BASES;// a list of tokens by chain\nimport{Token}from'@uniswap/sdk-core';import{SupportedChainId}from'./chains';import{AMPL,DAI,DAI_ARBITRUM_ONE,DAI_OPTIMISM,DAI_POLYGON,ETH2X_FLI,FEI,FRAX,FXS,nativeOnChain,renBTC,rETH2,sETH2,SWISE,TRIBE,USDC,USDC_ARBITRUM,USDC_OPTIMISM,USDC_POLYGON,USDT,USDT_ARBITRUM_ONE,USDT_OPTIMISM,USDT_POLYGON,WBTC,WBTC_ARBITRUM_ONE,WBTC_OPTIMISM,WBTC_POLYGON,WETH_POLYGON,WETH_POLYGON_MUMBAI,WRAPPED_NATIVE_CURRENCY}from'./tokens';var WRAPPED_NATIVE_CURRENCIES_ONLY=Object.fromEntries(Object.entries(WRAPPED_NATIVE_CURRENCY).map(function(_ref){var _ref2=_slicedToArray(_ref,2),key=_ref2[0],value=_ref2[1];return[key,[value]];}));// used to construct intermediary pairs for trading\nexport var BASES_TO_CHECK_TRADES_AGAINST=_objectSpread(_objectSpread({},WRAPPED_NATIVE_CURRENCIES_ONLY),{},(_objectSpread2={},_defineProperty(_objectSpread2,SupportedChainId.MAINNET,[].concat(_toConsumableArray(WRAPPED_NATIVE_CURRENCIES_ONLY[SupportedChainId.MAINNET]),[DAI,USDC,USDT,WBTC])),_defineProperty(_objectSpread2,SupportedChainId.OPTIMISM,[].concat(_toConsumableArray(WRAPPED_NATIVE_CURRENCIES_ONLY[SupportedChainId.OPTIMISM]),[DAI_OPTIMISM,USDT_OPTIMISM,WBTC_OPTIMISM])),_defineProperty(_objectSpread2,SupportedChainId.ARBITRUM_ONE,[].concat(_toConsumableArray(WRAPPED_NATIVE_CURRENCIES_ONLY[SupportedChainId.ARBITRUM_ONE]),[DAI_ARBITRUM_ONE,USDT_ARBITRUM_ONE,WBTC_ARBITRUM_ONE])),_defineProperty(_objectSpread2,SupportedChainId.POLYGON,[].concat(_toConsumableArray(WRAPPED_NATIVE_CURRENCIES_ONLY[SupportedChainId.POLYGON]),[DAI_POLYGON,USDC_POLYGON,USDT_POLYGON,WETH_POLYGON])),_objectSpread2));export var ADDITIONAL_BASES=_defineProperty({},SupportedChainId.MAINNET,(_SupportedChainId$MAI={'0xF16E4d813f4DcfDe4c5b44f305c908742De84eF0':[ETH2X_FLI]},_defineProperty(_SupportedChainId$MAI,rETH2.address,[sETH2]),_defineProperty(_SupportedChainId$MAI,SWISE.address,[sETH2]),_defineProperty(_SupportedChainId$MAI,FEI.address,[TRIBE]),_defineProperty(_SupportedChainId$MAI,TRIBE.address,[FEI]),_defineProperty(_SupportedChainId$MAI,FRAX.address,[FXS]),_defineProperty(_SupportedChainId$MAI,FXS.address,[FRAX]),_defineProperty(_SupportedChainId$MAI,WBTC.address,[renBTC]),_defineProperty(_SupportedChainId$MAI,renBTC.address,[WBTC]),_SupportedChainId$MAI));/**\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\n * tokens.\n */export var CUSTOM_BASES=_defineProperty({},SupportedChainId.MAINNET,_defineProperty({},AMPL.address,[DAI,WRAPPED_NATIVE_CURRENCY[SupportedChainId.MAINNET]]));/**\n * Shows up in the currency select for swap and add liquidity\n */export var COMMON_BASES=(_COMMON_BASES={},_defineProperty(_COMMON_BASES,SupportedChainId.MAINNET,[nativeOnChain(SupportedChainId.MAINNET),DAI,USDC,USDT,WBTC,WRAPPED_NATIVE_CURRENCY[SupportedChainId.MAINNET]]),_defineProperty(_COMMON_BASES,SupportedChainId.ROPSTEN,[nativeOnChain(SupportedChainId.ROPSTEN),WRAPPED_NATIVE_CURRENCY[SupportedChainId.ROPSTEN]]),_defineProperty(_COMMON_BASES,SupportedChainId.RINKEBY,[nativeOnChain(SupportedChainId.RINKEBY),WRAPPED_NATIVE_CURRENCY[SupportedChainId.RINKEBY]]),_defineProperty(_COMMON_BASES,SupportedChainId.GOERLI,[nativeOnChain(SupportedChainId.GOERLI),WRAPPED_NATIVE_CURRENCY[SupportedChainId.GOERLI]]),_defineProperty(_COMMON_BASES,SupportedChainId.KOVAN,[nativeOnChain(SupportedChainId.KOVAN),WRAPPED_NATIVE_CURRENCY[SupportedChainId.KOVAN]]),_defineProperty(_COMMON_BASES,SupportedChainId.ARBITRUM_ONE,[nativeOnChain(SupportedChainId.ARBITRUM_ONE),DAI_ARBITRUM_ONE,USDC_ARBITRUM,USDT_ARBITRUM_ONE,WBTC_ARBITRUM_ONE,WRAPPED_NATIVE_CURRENCY[SupportedChainId.ARBITRUM_ONE]]),_defineProperty(_COMMON_BASES,SupportedChainId.ARBITRUM_RINKEBY,[nativeOnChain(SupportedChainId.ARBITRUM_RINKEBY),WRAPPED_NATIVE_CURRENCY[SupportedChainId.ARBITRUM_RINKEBY]]),_defineProperty(_COMMON_BASES,SupportedChainId.OPTIMISM,[nativeOnChain(SupportedChainId.OPTIMISM),DAI_OPTIMISM,USDC_OPTIMISM,USDT_OPTIMISM,WBTC_OPTIMISM]),_defineProperty(_COMMON_BASES,SupportedChainId.OPTIMISTIC_KOVAN,[nativeOnChain(SupportedChainId.OPTIMISTIC_KOVAN)]),_defineProperty(_COMMON_BASES,SupportedChainId.POLYGON,[nativeOnChain(SupportedChainId.POLYGON),WETH_POLYGON,USDC_POLYGON,DAI_POLYGON,USDT_POLYGON,WBTC_POLYGON]),_defineProperty(_COMMON_BASES,SupportedChainId.POLYGON_MUMBAI,[nativeOnChain(SupportedChainId.POLYGON_MUMBAI),WRAPPED_NATIVE_CURRENCY[SupportedChainId.POLYGON_MUMBAI],WETH_POLYGON_MUMBAI]),_COMMON_BASES);// used to construct the list of all pairs we consider by default in the frontend\nexport var BASES_TO_TRACK_LIQUIDITY_FOR=_objectSpread(_objectSpread({},WRAPPED_NATIVE_CURRENCIES_ONLY),{},_defineProperty({},SupportedChainId.MAINNET,[].concat(_toConsumableArray(WRAPPED_NATIVE_CURRENCIES_ONLY[SupportedChainId.MAINNET]),[DAI,USDC,USDT,WBTC])));export var PINNED_PAIRS=_defineProperty({},SupportedChainId.MAINNET,[[new Token(SupportedChainId.MAINNET,'0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643',8,'cDAI','Compound Dai'),new Token(SupportedChainId.MAINNET,'0x39AA39c021dfbaE8faC545936693aC917d5E7563',8,'cUSDC','Compound USD Coin')],[USDC,USDT],[DAI,USDT]]);","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/constants/routing.ts"],"names":["Token","SupportedChainId","AMPL","DAI","DAI_ARBITRUM_ONE","DAI_OPTIMISM","DAI_POLYGON","ETH2X_FLI","FEI","FRAX","FXS","nativeOnChain","renBTC","rETH2","sETH2","SWISE","TRIBE","USDC","USDC_ARBITRUM","USDC_OPTIMISM","USDC_POLYGON","USDT","USDT_ARBITRUM_ONE","USDT_OPTIMISM","USDT_POLYGON","WBTC","WBTC_ARBITRUM_ONE","WBTC_OPTIMISM","WBTC_POLYGON","WETH_POLYGON","WETH_POLYGON_MUMBAI","WRAPPED_NATIVE_CURRENCY","WRAPPED_NATIVE_CURRENCIES_ONLY","Object","fromEntries","entries","map","key","value","BASES_TO_CHECK_TRADES_AGAINST","MAINNET","OPTIMISM","ARBITRUM_ONE","POLYGON","ADDITIONAL_BASES","address","CUSTOM_BASES","COMMON_BASES","ROPSTEN","RINKEBY","GOERLI","KOVAN","ARBITRUM_RINKEBY","OPTIMISTIC_KOVAN","POLYGON_MUMBAI","BASES_TO_TRACK_LIQUIDITY_FOR","PINNED_PAIRS"],"mappings":"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","sourcesContent":["// a list of tokens by chain\nimport { Currency, Token } from '@uniswap/sdk-core'\n\nimport { SupportedChainId } from './chains'\nimport {\n  AMPL,\n  DAI,\n  DAI_ARBITRUM_ONE,\n  DAI_OPTIMISM,\n  DAI_POLYGON,\n  ETH2X_FLI,\n  FEI,\n  FRAX,\n  FXS,\n  nativeOnChain,\n  renBTC,\n  rETH2,\n  sETH2,\n  SWISE,\n  TRIBE,\n  USDC,\n  USDC_ARBITRUM,\n  USDC_OPTIMISM,\n  USDC_POLYGON,\n  USDT,\n  USDT_ARBITRUM_ONE,\n  USDT_OPTIMISM,\n  USDT_POLYGON,\n  WBTC,\n  WBTC_ARBITRUM_ONE,\n  WBTC_OPTIMISM,\n  WBTC_POLYGON,\n  WETH_POLYGON,\n  WETH_POLYGON_MUMBAI,\n  WRAPPED_NATIVE_CURRENCY,\n} from './tokens'\n\ntype ChainTokenList = {\n  readonly [chainId: number]: Token[]\n}\n\ntype ChainCurrencyList = {\n  readonly [chainId: number]: Currency[]\n}\n\nconst WRAPPED_NATIVE_CURRENCIES_ONLY: ChainTokenList = Object.fromEntries(\n  Object.entries(WRAPPED_NATIVE_CURRENCY).map(([key, value]) => [key, [value]])\n)\n\n// used to construct intermediary pairs for trading\nexport const BASES_TO_CHECK_TRADES_AGAINST: ChainTokenList = {\n  ...WRAPPED_NATIVE_CURRENCIES_ONLY,\n  [SupportedChainId.MAINNET]: [...WRAPPED_NATIVE_CURRENCIES_ONLY[SupportedChainId.MAINNET], DAI, USDC, USDT, WBTC],\n  [SupportedChainId.OPTIMISM]: [\n    ...WRAPPED_NATIVE_CURRENCIES_ONLY[SupportedChainId.OPTIMISM],\n    DAI_OPTIMISM,\n    USDT_OPTIMISM,\n    WBTC_OPTIMISM,\n  ],\n  [SupportedChainId.ARBITRUM_ONE]: [\n    ...WRAPPED_NATIVE_CURRENCIES_ONLY[SupportedChainId.ARBITRUM_ONE],\n    DAI_ARBITRUM_ONE,\n    USDT_ARBITRUM_ONE,\n    WBTC_ARBITRUM_ONE,\n  ],\n  [SupportedChainId.POLYGON]: [\n    ...WRAPPED_NATIVE_CURRENCIES_ONLY[SupportedChainId.POLYGON],\n    DAI_POLYGON,\n    USDC_POLYGON,\n    USDT_POLYGON,\n    WETH_POLYGON,\n  ],\n}\nexport const ADDITIONAL_BASES: { [chainId: number]: { [tokenAddress: string]: Token[] } } = {\n  [SupportedChainId.MAINNET]: {\n    '0xF16E4d813f4DcfDe4c5b44f305c908742De84eF0': [ETH2X_FLI],\n    [rETH2.address]: [sETH2],\n    [SWISE.address]: [sETH2],\n    [FEI.address]: [TRIBE],\n    [TRIBE.address]: [FEI],\n    [FRAX.address]: [FXS],\n    [FXS.address]: [FRAX],\n    [WBTC.address]: [renBTC],\n    [renBTC.address]: [WBTC],\n  },\n}\n/**\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\n * tokens.\n */\nexport const CUSTOM_BASES: { [chainId: number]: { [tokenAddress: string]: Token[] } } = {\n  [SupportedChainId.MAINNET]: {\n    [AMPL.address]: [DAI, WRAPPED_NATIVE_CURRENCY[SupportedChainId.MAINNET]],\n  },\n}\n\n/**\n * Shows up in the currency select for swap and add liquidity\n */\nexport const COMMON_BASES: ChainCurrencyList = {\n  [SupportedChainId.MAINNET]: [\n    nativeOnChain(SupportedChainId.MAINNET),\n    DAI,\n    USDC,\n    USDT,\n    WBTC,\n    WRAPPED_NATIVE_CURRENCY[SupportedChainId.MAINNET],\n  ],\n  [SupportedChainId.ROPSTEN]: [\n    nativeOnChain(SupportedChainId.ROPSTEN),\n    WRAPPED_NATIVE_CURRENCY[SupportedChainId.ROPSTEN],\n  ],\n  [SupportedChainId.RINKEBY]: [\n    nativeOnChain(SupportedChainId.RINKEBY),\n    WRAPPED_NATIVE_CURRENCY[SupportedChainId.RINKEBY],\n  ],\n  [SupportedChainId.GOERLI]: [nativeOnChain(SupportedChainId.GOERLI), WRAPPED_NATIVE_CURRENCY[SupportedChainId.GOERLI]],\n  [SupportedChainId.KOVAN]: [nativeOnChain(SupportedChainId.KOVAN), WRAPPED_NATIVE_CURRENCY[SupportedChainId.KOVAN]],\n  [SupportedChainId.ARBITRUM_ONE]: [\n    nativeOnChain(SupportedChainId.ARBITRUM_ONE),\n    DAI_ARBITRUM_ONE,\n    USDC_ARBITRUM,\n    USDT_ARBITRUM_ONE,\n    WBTC_ARBITRUM_ONE,\n    WRAPPED_NATIVE_CURRENCY[SupportedChainId.ARBITRUM_ONE],\n  ],\n  [SupportedChainId.ARBITRUM_RINKEBY]: [\n    nativeOnChain(SupportedChainId.ARBITRUM_RINKEBY),\n    WRAPPED_NATIVE_CURRENCY[SupportedChainId.ARBITRUM_RINKEBY],\n  ],\n  [SupportedChainId.OPTIMISM]: [\n    nativeOnChain(SupportedChainId.OPTIMISM),\n    DAI_OPTIMISM,\n    USDC_OPTIMISM,\n    USDT_OPTIMISM,\n    WBTC_OPTIMISM,\n  ],\n  [SupportedChainId.OPTIMISTIC_KOVAN]: [nativeOnChain(SupportedChainId.OPTIMISTIC_KOVAN)],\n  [SupportedChainId.POLYGON]: [\n    nativeOnChain(SupportedChainId.POLYGON),\n    WETH_POLYGON,\n    USDC_POLYGON,\n    DAI_POLYGON,\n    USDT_POLYGON,\n    WBTC_POLYGON,\n  ],\n  [SupportedChainId.POLYGON_MUMBAI]: [\n    nativeOnChain(SupportedChainId.POLYGON_MUMBAI),\n    WRAPPED_NATIVE_CURRENCY[SupportedChainId.POLYGON_MUMBAI],\n    WETH_POLYGON_MUMBAI,\n  ],\n}\n\n// used to construct the list of all pairs we consider by default in the frontend\nexport const BASES_TO_TRACK_LIQUIDITY_FOR: ChainTokenList = {\n  ...WRAPPED_NATIVE_CURRENCIES_ONLY,\n  [SupportedChainId.MAINNET]: [...WRAPPED_NATIVE_CURRENCIES_ONLY[SupportedChainId.MAINNET], DAI, USDC, USDT, WBTC],\n}\nexport const PINNED_PAIRS: { readonly [chainId: number]: [Token, Token][] } = {\n  [SupportedChainId.MAINNET]: [\n    [\n      new Token(SupportedChainId.MAINNET, '0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643', 8, 'cDAI', 'Compound Dai'),\n      new Token(\n        SupportedChainId.MAINNET,\n        '0x39AA39c021dfbaE8faC545936693aC917d5E7563',\n        8,\n        'cUSDC',\n        'Compound USD Coin'\n      ),\n    ],\n    [USDC, USDT],\n    [DAI, USDT],\n  ],\n}\n"]},"metadata":{},"sourceType":"module"}