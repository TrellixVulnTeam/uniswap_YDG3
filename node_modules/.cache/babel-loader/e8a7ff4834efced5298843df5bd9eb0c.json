{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useActiveWeb3React } from 'hooks/web3';\nimport { useMemo } from 'react';\nimport { useCombinedActiveList } from 'state/lists/hooks';\n/**\n * Returns a WrappedTokenInfo from the active token lists when possible,\n * or the passed token otherwise. */\n\nexport function useTokenInfoFromActiveList(currency) {\n  _s();\n\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const activeList = useCombinedActiveList();\n  return useMemo(() => {\n    if (!chainId) return;\n    if (currency.isNative) return currency;\n\n    try {\n      return activeList[chainId][currency.wrapped.address].token;\n    } catch (e) {\n      return currency;\n    }\n  }, [activeList, chainId, currency]);\n}\n\n_s(useTokenInfoFromActiveList, \"AB9pxfUNIL7ca5nj7lzuByGytBE=\", false, function () {\n  return [useActiveWeb3React, useCombinedActiveList];\n});","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/hooks/useTokenInfoFromActiveList.ts"],"names":["useActiveWeb3React","useMemo","useCombinedActiveList","useTokenInfoFromActiveList","currency","chainId","activeList","isNative","wrapped","address","token","e"],"mappings":";;AACA,SAASA,kBAAT,QAAmC,YAAnC;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,qBAAT,QAAsC,mBAAtC;AAEA;AACA;AACA;;AACA,OAAO,SAASC,0BAAT,CAAoCC,QAApC,EAAwD;AAAA;;AAC7D,QAAM;AAAEC,IAAAA;AAAF,MAAcL,kBAAkB,EAAtC;AACA,QAAMM,UAAU,GAAGJ,qBAAqB,EAAxC;AAEA,SAAOD,OAAO,CAAC,MAAM;AACnB,QAAI,CAACI,OAAL,EAAc;AACd,QAAID,QAAQ,CAACG,QAAb,EAAuB,OAAOH,QAAP;;AAEvB,QAAI;AACF,aAAOE,UAAU,CAACD,OAAD,CAAV,CAAoBD,QAAQ,CAACI,OAAT,CAAiBC,OAArC,EAA8CC,KAArD;AACD,KAFD,CAEE,OAAOC,CAAP,EAAU;AACV,aAAOP,QAAP;AACD;AACF,GATa,EASX,CAACE,UAAD,EAAaD,OAAb,EAAsBD,QAAtB,CATW,CAAd;AAUD;;GAdeD,0B;UACMH,kB,EACDE,qB","sourcesContent":["import { Currency } from '@uniswap/sdk-core'\nimport { useActiveWeb3React } from 'hooks/web3'\nimport { useMemo } from 'react'\nimport { useCombinedActiveList } from 'state/lists/hooks'\n\n/**\n * Returns a WrappedTokenInfo from the active token lists when possible,\n * or the passed token otherwise. */\nexport function useTokenInfoFromActiveList(currency: Currency) {\n  const { chainId } = useActiveWeb3React()\n  const activeList = useCombinedActiveList()\n\n  return useMemo(() => {\n    if (!chainId) return\n    if (currency.isNative) return currency\n\n    try {\n      return activeList[chainId][currency.wrapped.address].token\n    } catch (e) {\n      return currency\n    }\n  }, [activeList, chainId, currency])\n}\n"]},"metadata":{},"sourceType":"module"}