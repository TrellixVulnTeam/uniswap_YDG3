{"ast":null,"code":"import _styled from \"styled-components\";\nvar _jsxFileName = \"/Users/safahi/Downloads/interface-4.30.1/src/components/NumericalInput/index.tsx\";\nimport React from 'react';\nimport { escapeRegExp } from '../../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst StyledInput = _styled.input.withConfig({\n  displayName: \"NumericalInput__StyledInput\",\n  componentId: \"sc-1x3stf0-0\"\n})([\"color:\", \";width:0;position:relative;font-weight:500;outline:none;border:none;flex:1 1 auto;background-color:\", \";font-size:\", \";text-align:\", \";white-space:nowrap;overflow:hidden;text-overflow:ellipsis;padding:0px;-webkit-appearance:textfield;text-align:right;::-webkit-search-decoration{-webkit-appearance:none;}[type='number']{-moz-appearance:textfield;}::-webkit-outer-spin-button,::-webkit-inner-spin-button{-webkit-appearance:none;}::placeholder{color:\", \";}\"], ({\n  error,\n  theme\n}) => error ? theme.red1 : theme.text1, ({\n  theme\n}) => theme.bg1, ({\n  fontSize\n}) => fontSize !== null && fontSize !== void 0 ? fontSize : '28px', ({\n  align\n}) => align && align, ({\n  theme\n}) => theme.text4);\n\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`); // match escaped \".\" characters via in a non-capturing group\n\nexport const Input = /*#__PURE__*/React.memo(_c = function InnerInput({\n  value,\n  onUserInput,\n  placeholder,\n  prependSymbol,\n  ...rest\n}) {\n  const enforcer = nextUserInput => {\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      onUserInput(nextUserInput);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledInput, { ...rest,\n    value: prependSymbol && value ? prependSymbol + value : value,\n    onChange: event => {\n      if (prependSymbol) {\n        const value = event.target.value; // cut off prepended symbol\n\n        const formattedValue = value.toString().includes(prependSymbol) ? value.toString().slice(1, value.toString().length + 1) : value; // replace commas with periods, because uniswap exclusively uses period as the decimal separator\n\n        enforcer(formattedValue.replace(/,/g, '.'));\n      } else {\n        enforcer(event.target.value.replace(/,/g, '.'));\n      }\n    } // universal input options\n    ,\n    inputMode: \"decimal\",\n    autoComplete: \"off\",\n    autoCorrect: \"off\" // text-specific options\n    ,\n    type: \"text\",\n    pattern: \"^[0-9]*[.,]?[0-9]*$\",\n    placeholder: placeholder || '0.0',\n    minLength: 1,\n    maxLength: 79,\n    spellCheck: \"false\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n});\n_c2 = Input;\nexport default Input; // const inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Input$React.memo\");\n$RefreshReg$(_c2, \"Input\");","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/components/NumericalInput/index.tsx"],"names":["React","escapeRegExp","StyledInput","styled","input","error","theme","red1","text1","bg1","fontSize","align","text4","inputRegex","RegExp","Input","memo","InnerInput","value","onUserInput","placeholder","prependSymbol","rest","enforcer","nextUserInput","test","event","target","formattedValue","toString","includes","slice","length","replace"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SAASC,YAAT,QAA6B,aAA7B;;;AAEA,MAAMC,WAAW,GAAGC,OAAM,CAACC,KAAV;AAAA;AAAA;AAAA,ydACN,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAuBD,KAAK,GAAGC,KAAK,CAACC,IAAT,GAAgBD,KAAK,CAACE,KAD5C,EAQK,CAAC;AAAEF,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACG,GAR1B,EASF,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkBA,QAAlB,aAAkBA,QAAlB,cAAkBA,QAAlB,GAA8B,MAT5B,EAUD,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAeA,KAAK,IAAIA,KAVvB,EAgCJ,CAAC;AAAEL,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACM,KAhCjB,CAAjB;;AAoCA,MAAMC,UAAU,GAAGC,MAAM,CAAE,wBAAF,CAAzB,C,CAAoD;;AAEpD,OAAO,MAAMC,KAAK,gBAAGf,KAAK,CAACgB,IAAN,MAAW,SAASC,UAAT,CAAoB;AAClDC,EAAAA,KADkD;AAElDC,EAAAA,WAFkD;AAGlDC,EAAAA,WAHkD;AAIlDC,EAAAA,aAJkD;AAKlD,KAAGC;AAL+C,CAApB,EAawC;AACtE,QAAMC,QAAQ,GAAIC,aAAD,IAA2B;AAC1C,QAAIA,aAAa,KAAK,EAAlB,IAAwBX,UAAU,CAACY,IAAX,CAAgBxB,YAAY,CAACuB,aAAD,CAA5B,CAA5B,EAA0E;AACxEL,MAAAA,WAAW,CAACK,aAAD,CAAX;AACD;AACF,GAJD;;AAMA,sBACE,QAAC,WAAD,OACMF,IADN;AAEE,IAAA,KAAK,EAAED,aAAa,IAAIH,KAAjB,GAAyBG,aAAa,GAAGH,KAAzC,GAAiDA,KAF1D;AAGE,IAAA,QAAQ,EAAGQ,KAAD,IAAW;AACnB,UAAIL,aAAJ,EAAmB;AACjB,cAAMH,KAAK,GAAGQ,KAAK,CAACC,MAAN,CAAaT,KAA3B,CADiB,CAGjB;;AACA,cAAMU,cAAc,GAAGV,KAAK,CAACW,QAAN,GAAiBC,QAAjB,CAA0BT,aAA1B,IACnBH,KAAK,CAACW,QAAN,GAAiBE,KAAjB,CAAuB,CAAvB,EAA0Bb,KAAK,CAACW,QAAN,GAAiBG,MAAjB,GAA0B,CAApD,CADmB,GAEnBd,KAFJ,CAJiB,CAQjB;;AACAK,QAAAA,QAAQ,CAACK,cAAc,CAACK,OAAf,CAAuB,IAAvB,EAA6B,GAA7B,CAAD,CAAR;AACD,OAVD,MAUO;AACLV,QAAAA,QAAQ,CAACG,KAAK,CAACC,MAAN,CAAaT,KAAb,CAAmBe,OAAnB,CAA2B,IAA3B,EAAiC,GAAjC,CAAD,CAAR;AACD;AACF,KAjBH,CAkBE;AAlBF;AAmBE,IAAA,SAAS,EAAC,SAnBZ;AAoBE,IAAA,YAAY,EAAC,KApBf;AAqBE,IAAA,WAAW,EAAC,KArBd,CAsBE;AAtBF;AAuBE,IAAA,IAAI,EAAC,MAvBP;AAwBE,IAAA,OAAO,EAAC,qBAxBV;AAyBE,IAAA,WAAW,EAAEb,WAAW,IAAI,KAzB9B;AA0BE,IAAA,SAAS,EAAE,CA1Bb;AA2BE,IAAA,SAAS,EAAE,EA3Bb;AA4BE,IAAA,UAAU,EAAC;AA5Bb;AAAA;AAAA;AAAA;AAAA,UADF;AAgCD,CApDoB,CAAd;MAAML,K;AAsDb,eAAeA,KAAf,C,CAEA","sourcesContent":["import React from 'react'\nimport styled from 'styled-components/macro'\n\nimport { escapeRegExp } from '../../utils'\n\nconst StyledInput = styled.input<{ error?: boolean; fontSize?: string; align?: string }>`\n  color: ${({ error, theme }) => (error ? theme.red1 : theme.text1)};\n  width: 0;\n  position: relative;\n  font-weight: 500;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  background-color: ${({ theme }) => theme.bg1};\n  font-size: ${({ fontSize }) => fontSize ?? '28px'};\n  text-align: ${({ align }) => align && align};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding: 0px;\n  -webkit-appearance: textfield;\n  text-align: right;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  [type='number'] {\n    -moz-appearance: textfield;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  ::placeholder {\n    color: ${({ theme }) => theme.text4};\n  }\n`\n\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n\nexport const Input = React.memo(function InnerInput({\n  value,\n  onUserInput,\n  placeholder,\n  prependSymbol,\n  ...rest\n}: {\n  value: string | number\n  onUserInput: (input: string) => void\n  error?: boolean\n  fontSize?: string\n  align?: 'right' | 'left'\n  prependSymbol?: string | undefined\n} & Omit<React.HTMLProps<HTMLInputElement>, 'ref' | 'onChange' | 'as'>) {\n  const enforcer = (nextUserInput: string) => {\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      onUserInput(nextUserInput)\n    }\n  }\n\n  return (\n    <StyledInput\n      {...rest}\n      value={prependSymbol && value ? prependSymbol + value : value}\n      onChange={(event) => {\n        if (prependSymbol) {\n          const value = event.target.value\n\n          // cut off prepended symbol\n          const formattedValue = value.toString().includes(prependSymbol)\n            ? value.toString().slice(1, value.toString().length + 1)\n            : value\n\n          // replace commas with periods, because uniswap exclusively uses period as the decimal separator\n          enforcer(formattedValue.replace(/,/g, '.'))\n        } else {\n          enforcer(event.target.value.replace(/,/g, '.'))\n        }\n      }}\n      // universal input options\n      inputMode=\"decimal\"\n      autoComplete=\"off\"\n      autoCorrect=\"off\"\n      // text-specific options\n      type=\"text\"\n      pattern=\"^[0-9]*[.,]?[0-9]*$\"\n      placeholder={placeholder || '0.0'}\n      minLength={1}\n      maxLength={79}\n      spellCheck=\"false\"\n    />\n  )\n})\n\nexport default Input\n\n// const inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n"]},"metadata":{},"sourceType":"module"}