{"ast":null,"code":"import _slicedToArray from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _defineProperty from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";var _QUOTE_GAS_OVERRIDES;import{CurrencyAmount,TradeType}from'@uniswap/sdk-core';import{SwapQuoter}from'@uniswap/v3-sdk';import{SupportedChainId}from'constants/chains';import JSBI from'jsbi';import{useMemo}from'react';import{InterfaceTrade,TradeState}from'state/routing/types';import{useSingleContractWithCallData}from'../state/multicall/hooks';import{useAllV3Routes}from'./useAllV3Routes';import{useV3Quoter}from'./useContract';import{useActiveWeb3React}from'./web3';var QUOTE_GAS_OVERRIDES=(_QUOTE_GAS_OVERRIDES={},_defineProperty(_QUOTE_GAS_OVERRIDES,SupportedChainId.ARBITRUM_ONE,25000000),_defineProperty(_QUOTE_GAS_OVERRIDES,SupportedChainId.ARBITRUM_RINKEBY,25000000),_QUOTE_GAS_OVERRIDES);var DEFAULT_GAS_QUOTE=2000000;/**\n * Returns the best v3 trade for a desired swap\n * @param tradeType whether the swap is an exact in/out\n * @param amountSpecified the exact amount to swap in/out\n * @param otherCurrency the desired output/payment currency\n */export function useClientSideV3Trade(tradeType,amountSpecified,otherCurrency){var _QUOTE_GAS_OVERRIDES$;var _useMemo=useMemo(function(){return tradeType===TradeType.EXACT_INPUT?[amountSpecified===null||amountSpecified===void 0?void 0:amountSpecified.currency,otherCurrency]:[otherCurrency,amountSpecified===null||amountSpecified===void 0?void 0:amountSpecified.currency];},[tradeType,amountSpecified,otherCurrency]),_useMemo2=_slicedToArray(_useMemo,2),currencyIn=_useMemo2[0],currencyOut=_useMemo2[1];var _useAllV3Routes=useAllV3Routes(currencyIn,currencyOut),routes=_useAllV3Routes.routes,routesLoading=_useAllV3Routes.loading;var quoter=useV3Quoter();var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId;var quotesResults=useSingleContractWithCallData(quoter,amountSpecified?routes.map(function(route){return SwapQuoter.quoteCallParameters(route,amountSpecified,tradeType).calldata;}):[],{gasRequired:chainId?(_QUOTE_GAS_OVERRIDES$=QUOTE_GAS_OVERRIDES[chainId])!==null&&_QUOTE_GAS_OVERRIDES$!==void 0?_QUOTE_GAS_OVERRIDES$:DEFAULT_GAS_QUOTE:undefined});return useMemo(function(){if(!amountSpecified||!currencyIn||!currencyOut||quotesResults.some(function(_ref){var valid=_ref.valid;return!valid;})||(tradeType===TradeType.EXACT_INPUT?amountSpecified.currency.equals(currencyOut):amountSpecified.currency.equals(currencyIn))){return{state:TradeState.INVALID,trade:undefined};}if(routesLoading||quotesResults.some(function(_ref2){var loading=_ref2.loading;return loading;})){return{state:TradeState.LOADING,trade:undefined};}var _quotesResults$reduce=quotesResults.reduce(function(currentBest,_ref3,i){var result=_ref3.result;if(!result)return currentBest;// overwrite the current best if it's not defined or if this route is better\n// overwrite the current best if it's not defined or if this route is better\nif(tradeType===TradeType.EXACT_INPUT){var _amountOut=CurrencyAmount.fromRawAmount(currencyOut,result.amountOut.toString());if(currentBest.amountOut===null||JSBI.lessThan(currentBest.amountOut.quotient,_amountOut.quotient)){return{bestRoute:routes[i],amountIn:amountSpecified,amountOut:_amountOut};}}else{var _amountIn=CurrencyAmount.fromRawAmount(currencyIn,result.amountIn.toString());if(currentBest.amountIn===null||JSBI.greaterThan(currentBest.amountIn.quotient,_amountIn.quotient)){return{bestRoute:routes[i],amountIn:_amountIn,amountOut:amountSpecified};}}return currentBest;},{bestRoute:null,amountIn:null,amountOut:null}),bestRoute=_quotesResults$reduce.bestRoute,amountIn=_quotesResults$reduce.amountIn,amountOut=_quotesResults$reduce.amountOut;if(!bestRoute||!amountIn||!amountOut){return{state:TradeState.NO_ROUTE_FOUND,trade:undefined};}return{state:TradeState.VALID,trade:new InterfaceTrade({v2Routes:[],v3Routes:[{routev3:bestRoute,inputAmount:amountIn,outputAmount:amountOut}],tradeType:tradeType})};},[amountSpecified,currencyIn,currencyOut,quotesResults,routes,routesLoading,tradeType]);}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/hooks/useClientSideV3Trade.ts"],"names":["CurrencyAmount","TradeType","SwapQuoter","SupportedChainId","JSBI","useMemo","InterfaceTrade","TradeState","useSingleContractWithCallData","useAllV3Routes","useV3Quoter","useActiveWeb3React","QUOTE_GAS_OVERRIDES","ARBITRUM_ONE","ARBITRUM_RINKEBY","DEFAULT_GAS_QUOTE","useClientSideV3Trade","tradeType","amountSpecified","otherCurrency","EXACT_INPUT","currency","currencyIn","currencyOut","routes","routesLoading","loading","quoter","chainId","quotesResults","map","route","quoteCallParameters","calldata","gasRequired","undefined","some","valid","equals","state","INVALID","trade","LOADING","reduce","currentBest","i","result","amountOut","fromRawAmount","toString","lessThan","quotient","bestRoute","amountIn","greaterThan","NO_ROUTE_FOUND","VALID","v2Routes","v3Routes","routev3","inputAmount","outputAmount"],"mappings":"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","sourcesContent":["import { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { Route, SwapQuoter } from '@uniswap/v3-sdk'\nimport { SupportedChainId } from 'constants/chains'\nimport JSBI from 'jsbi'\nimport { useMemo } from 'react'\nimport { InterfaceTrade, TradeState } from 'state/routing/types'\n\nimport { useSingleContractWithCallData } from '../state/multicall/hooks'\nimport { useAllV3Routes } from './useAllV3Routes'\nimport { useV3Quoter } from './useContract'\nimport { useActiveWeb3React } from './web3'\n\nconst QUOTE_GAS_OVERRIDES: { [chainId: number]: number } = {\n  [SupportedChainId.ARBITRUM_ONE]: 25_000_000,\n  [SupportedChainId.ARBITRUM_RINKEBY]: 25_000_000,\n}\n\nconst DEFAULT_GAS_QUOTE = 2_000_000\n\n/**\n * Returns the best v3 trade for a desired swap\n * @param tradeType whether the swap is an exact in/out\n * @param amountSpecified the exact amount to swap in/out\n * @param otherCurrency the desired output/payment currency\n */\nexport function useClientSideV3Trade<TTradeType extends TradeType>(\n  tradeType: TTradeType,\n  amountSpecified?: CurrencyAmount<Currency>,\n  otherCurrency?: Currency\n): { state: TradeState; trade: InterfaceTrade<Currency, Currency, TTradeType> | undefined } {\n  const [currencyIn, currencyOut] = useMemo(\n    () =>\n      tradeType === TradeType.EXACT_INPUT\n        ? [amountSpecified?.currency, otherCurrency]\n        : [otherCurrency, amountSpecified?.currency],\n    [tradeType, amountSpecified, otherCurrency]\n  )\n  const { routes, loading: routesLoading } = useAllV3Routes(currencyIn, currencyOut)\n\n  const quoter = useV3Quoter()\n  const { chainId } = useActiveWeb3React()\n  const quotesResults = useSingleContractWithCallData(\n    quoter,\n    amountSpecified\n      ? routes.map((route) => SwapQuoter.quoteCallParameters(route, amountSpecified, tradeType).calldata)\n      : [],\n    {\n      gasRequired: chainId ? QUOTE_GAS_OVERRIDES[chainId] ?? DEFAULT_GAS_QUOTE : undefined,\n    }\n  )\n\n  return useMemo(() => {\n    if (\n      !amountSpecified ||\n      !currencyIn ||\n      !currencyOut ||\n      quotesResults.some(({ valid }) => !valid) ||\n      // skip when tokens are the same\n      (tradeType === TradeType.EXACT_INPUT\n        ? amountSpecified.currency.equals(currencyOut)\n        : amountSpecified.currency.equals(currencyIn))\n    ) {\n      return {\n        state: TradeState.INVALID,\n        trade: undefined,\n      }\n    }\n\n    if (routesLoading || quotesResults.some(({ loading }) => loading)) {\n      return {\n        state: TradeState.LOADING,\n        trade: undefined,\n      }\n    }\n\n    const { bestRoute, amountIn, amountOut } = quotesResults.reduce(\n      (\n        currentBest: {\n          bestRoute: Route<Currency, Currency> | null\n          amountIn: CurrencyAmount<Currency> | null\n          amountOut: CurrencyAmount<Currency> | null\n        },\n        { result },\n        i\n      ) => {\n        if (!result) return currentBest\n\n        // overwrite the current best if it's not defined or if this route is better\n        if (tradeType === TradeType.EXACT_INPUT) {\n          const amountOut = CurrencyAmount.fromRawAmount(currencyOut, result.amountOut.toString())\n          if (currentBest.amountOut === null || JSBI.lessThan(currentBest.amountOut.quotient, amountOut.quotient)) {\n            return {\n              bestRoute: routes[i],\n              amountIn: amountSpecified,\n              amountOut,\n            }\n          }\n        } else {\n          const amountIn = CurrencyAmount.fromRawAmount(currencyIn, result.amountIn.toString())\n          if (currentBest.amountIn === null || JSBI.greaterThan(currentBest.amountIn.quotient, amountIn.quotient)) {\n            return {\n              bestRoute: routes[i],\n              amountIn,\n              amountOut: amountSpecified,\n            }\n          }\n        }\n\n        return currentBest\n      },\n      {\n        bestRoute: null,\n        amountIn: null,\n        amountOut: null,\n      }\n    )\n\n    if (!bestRoute || !amountIn || !amountOut) {\n      return {\n        state: TradeState.NO_ROUTE_FOUND,\n        trade: undefined,\n      }\n    }\n\n    return {\n      state: TradeState.VALID,\n      trade: new InterfaceTrade({\n        v2Routes: [],\n        v3Routes: [\n          {\n            routev3: bestRoute,\n            inputAmount: amountIn,\n            outputAmount: amountOut,\n          },\n        ],\n        tradeType,\n      }),\n    }\n  }, [amountSpecified, currencyIn, currencyOut, quotesResults, routes, routesLoading, tradeType])\n}\n"]},"metadata":{},"sourceType":"module"}