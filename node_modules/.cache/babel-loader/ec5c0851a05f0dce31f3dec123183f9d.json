{"ast":null,"code":"import _styled from\"styled-components\";import{Trans}from\"@lingui/react\";import{useWeb3React}from'@web3-react/core';import{useEffect}from'react';import{network}from'../../connectors';import{NetworkContextName}from'../../constants/misc';import{useEagerConnect,useInactiveListener}from'../../hooks/web3';import{jsx as _jsx}from\"react/jsx-runtime\";var MessageWrapper=_styled.div.withConfig({componentId:\"sc-1bdulxg-0\"})([\"display:flex;align-items:center;justify-content:center;height:20rem;\"]);var Message=_styled.h2.withConfig({componentId:\"sc-1bdulxg-1\"})([\"color:\",\";\"],function(_ref){var theme=_ref.theme;return theme.secondary1;});export default function Web3ReactManager(_ref2){var children=_ref2.children;var _useWeb3React=useWeb3React(),active=_useWeb3React.active;var _useWeb3React2=useWeb3React(NetworkContextName),networkActive=_useWeb3React2.active,networkError=_useWeb3React2.error,activateNetwork=_useWeb3React2.activate;// try to eagerly connect to an injected provider, if it exists and has granted access already\nvar triedEager=useEagerConnect();// after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\nuseEffect(function(){if(triedEager&&!networkActive&&!networkError&&!active){activateNetwork(network);}},[triedEager,networkActive,networkError,activateNetwork,active]);// when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\nuseInactiveListener(!triedEager);// if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\nif(triedEager&&!active&&networkError){return/*#__PURE__*/_jsx(MessageWrapper,{children:/*#__PURE__*/_jsx(Message,{children:/*#__PURE__*/_jsx(Trans,{id:\"Oops! An unknown error occurred. Please refresh the page, or visit from another browser or device.\"})})});}return children;}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/components/Web3ReactManager/index.tsx"],"names":["useWeb3React","useEffect","network","NetworkContextName","useEagerConnect","useInactiveListener","MessageWrapper","styled","div","Message","h2","theme","secondary1","Web3ReactManager","children","active","networkActive","networkError","error","activateNetwork","activate","triedEager"],"mappings":"wEACA,OAASA,YAAT,KAA6B,kBAA7B,CACA,OAASC,SAAT,KAA0B,OAA1B,CAGA,OAASC,OAAT,KAAwB,kBAAxB,CACA,OAASC,kBAAT,KAAmC,sBAAnC,CACA,OAASC,eAAT,CAA0BC,mBAA1B,KAAqD,kBAArD,C,2CAEA,GAAMC,CAAAA,cAAc,CAAGC,OAAM,CAACC,GAAV,mHAApB,CAOA,GAAMC,CAAAA,OAAO,CAAGF,OAAM,CAACG,EAAV,yDACF,kBAAGC,CAAAA,KAAH,MAAGA,KAAH,OAAeA,CAAAA,KAAK,CAACC,UAArB,EADE,CAAb,CAIA,cAAe,SAASC,CAAAA,gBAAT,OAAmE,IAAvCC,CAAAA,QAAuC,OAAvCA,QAAuC,CAChF,kBAAmBd,YAAY,EAA/B,CAAQe,MAAR,eAAQA,MAAR,CACA,mBAAkFf,YAAY,CAACG,kBAAD,CAA9F,CAAgBa,aAAhB,gBAAQD,MAAR,CAAsCE,YAAtC,gBAA+BC,KAA/B,CAA8DC,eAA9D,gBAAoDC,QAApD,CAEA;AACA,GAAMC,CAAAA,UAAU,CAAGjB,eAAe,EAAlC,CAEA;AACAH,SAAS,CAAC,UAAM,CACd,GAAIoB,UAAU,EAAI,CAACL,aAAf,EAAgC,CAACC,YAAjC,EAAiD,CAACF,MAAtD,CAA8D,CAC5DI,eAAe,CAACjB,OAAD,CAAf,CACD,CACF,CAJQ,CAIN,CAACmB,UAAD,CAAaL,aAAb,CAA4BC,YAA5B,CAA0CE,eAA1C,CAA2DJ,MAA3D,CAJM,CAAT,CAMA;AACAV,mBAAmB,CAAC,CAACgB,UAAF,CAAnB,CAEA;AACA,GAAIA,UAAU,EAAI,CAACN,MAAf,EAAyBE,YAA7B,CAA2C,CACzC,mBACE,KAAC,cAAD,wBACE,KAAC,OAAD,wBACE,qHADF,EADF,EADF,CASD,CAED,MAAOH,CAAAA,QAAP,CACD","sourcesContent":["import { Trans } from '@lingui/macro'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect } from 'react'\nimport styled from 'styled-components/macro'\n\nimport { network } from '../../connectors'\nimport { NetworkContextName } from '../../constants/misc'\nimport { useEagerConnect, useInactiveListener } from '../../hooks/web3'\n\nconst MessageWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 20rem;\n`\n\nconst Message = styled.h2`\n  color: ${({ theme }) => theme.secondary1};\n`\n\nexport default function Web3ReactManager({ children }: { children: JSX.Element }) {\n  const { active } = useWeb3React()\n  const { active: networkActive, error: networkError, activate: activateNetwork } = useWeb3React(NetworkContextName)\n\n  // try to eagerly connect to an injected provider, if it exists and has granted access already\n  const triedEager = useEagerConnect()\n\n  // after eagerly trying injected, if the network connect ever isn't active or in an error state, activate itd\n  useEffect(() => {\n    if (triedEager && !networkActive && !networkError && !active) {\n      activateNetwork(network)\n    }\n  }, [triedEager, networkActive, networkError, activateNetwork, active])\n\n  // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n  useInactiveListener(!triedEager)\n\n  // if the account context isn't active, and there's an error on the network context, it's an irrecoverable error\n  if (triedEager && !active && networkError) {\n    return (\n      <MessageWrapper>\n        <Message>\n          <Trans>\n            Oops! An unknown error occurred. Please refresh the page, or visit from another browser or device.\n          </Trans>\n        </Message>\n      </MessageWrapper>\n    )\n  }\n\n  return children\n}\n"]},"metadata":{},"sourceType":"module"}