{"ast":null,"code":"import _slicedToArray from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";var _ref,_ref2,_parseLocale2;import{DEFAULT_LOCALE,SUPPORTED_LOCALES}from'constants/locales';import{useMemo}from'react';import store from'state';import{useUserLocale}from'state/user/hooks';import useParsedQueryString from'./useParsedQueryString';import{parsedQueryString}from'./useParsedQueryString';/**\n * Given a locale string (e.g. from user agent), return the best match for corresponding SupportedLocale\n * @param maybeSupportedLocale the fuzzy locale identifier\n */function parseLocale(maybeSupportedLocale){if(typeof maybeSupportedLocale!=='string')return undefined;var lowerMaybeSupportedLocale=maybeSupportedLocale.toLowerCase();return SUPPORTED_LOCALES.find(function(locale){return locale.toLowerCase()===lowerMaybeSupportedLocale||locale.split('-')[0]===lowerMaybeSupportedLocale;});}/**\n * Returns the supported locale read from the user agent (navigator)\n */export function navigatorLocale(){if(!navigator.language)return undefined;var _navigator$language$s=navigator.language.split('-'),_navigator$language$s2=_slicedToArray(_navigator$language$s,2),language=_navigator$language$s2[0],region=_navigator$language$s2[1];if(region){var _parseLocale;return(_parseLocale=parseLocale(\"\".concat(language,\"-\").concat(region.toUpperCase())))!==null&&_parseLocale!==void 0?_parseLocale:parseLocale(language);}return parseLocale(language);}function storeLocale(){var _store$getState$user$;return(_store$getState$user$=store.getState().user.userLocale)!==null&&_store$getState$user$!==void 0?_store$getState$user$:undefined;}export var initialLocale=(_ref=(_ref2=(_parseLocale2=parseLocale(parsedQueryString().lng))!==null&&_parseLocale2!==void 0?_parseLocale2:storeLocale())!==null&&_ref2!==void 0?_ref2:navigatorLocale())!==null&&_ref!==void 0?_ref:DEFAULT_LOCALE;function useUrlLocale(){var parsed=useParsedQueryString();return parseLocale(parsed.lng);}/**\n * Returns the currently active locale, from a combination of user agent, query string, and user settings stored in redux\n * Stores the query string locale in redux (if set) to persist across sessions\n */export function useActiveLocale(){var urlLocale=useUrlLocale();var userLocale=useUserLocale();return useMemo(function(){var _ref3,_ref4;return(_ref3=(_ref4=urlLocale!==null&&urlLocale!==void 0?urlLocale:userLocale)!==null&&_ref4!==void 0?_ref4:navigatorLocale())!==null&&_ref3!==void 0?_ref3:DEFAULT_LOCALE;},[urlLocale,userLocale]);}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/hooks/useActiveLocale.ts"],"names":["DEFAULT_LOCALE","SUPPORTED_LOCALES","useMemo","store","useUserLocale","useParsedQueryString","parsedQueryString","parseLocale","maybeSupportedLocale","undefined","lowerMaybeSupportedLocale","toLowerCase","find","locale","split","navigatorLocale","navigator","language","region","toUpperCase","storeLocale","getState","user","userLocale","initialLocale","lng","useUrlLocale","parsed","useActiveLocale","urlLocale"],"mappings":"4LAAA,OAASA,cAAT,CAAyBC,iBAAzB,KAAmE,mBAAnE,CACA,OAASC,OAAT,KAAwB,OAAxB,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,aAAT,KAA8B,kBAA9B,CAEA,MAAOC,CAAAA,oBAAP,KAAiC,wBAAjC,CACA,OAASC,iBAAT,KAAkC,wBAAlC,CAEA;AACA;AACA;AACA,GACA,QAASC,CAAAA,WAAT,CAAqBC,oBAArB,CAAiF,CAC/E,GAAI,MAAOA,CAAAA,oBAAP,GAAgC,QAApC,CAA8C,MAAOC,CAAAA,SAAP,CAC9C,GAAMC,CAAAA,yBAAyB,CAAGF,oBAAoB,CAACG,WAArB,EAAlC,CACA,MAAOV,CAAAA,iBAAiB,CAACW,IAAlB,CACL,SAACC,MAAD,QAAYA,CAAAA,MAAM,CAACF,WAAP,KAAyBD,yBAAzB,EAAsDG,MAAM,CAACC,KAAP,CAAa,GAAb,EAAkB,CAAlB,IAAyBJ,yBAA3F,EADK,CAAP,CAGD,CAED;AACA;AACA,GACA,MAAO,SAASK,CAAAA,eAAT,EAAwD,CAC7D,GAAI,CAACC,SAAS,CAACC,QAAf,CAAyB,MAAOR,CAAAA,SAAP,CAEzB,0BAA2BO,SAAS,CAACC,QAAV,CAAmBH,KAAnB,CAAyB,GAAzB,CAA3B,gEAAOG,QAAP,2BAAiBC,MAAjB,2BAEA,GAAIA,MAAJ,CAAY,kBACV,oBAAOX,WAAW,WAAIU,QAAJ,aAAgBC,MAAM,CAACC,WAAP,EAAhB,EAAlB,6CAA6DZ,WAAW,CAACU,QAAD,CAAxE,CACD,CAED,MAAOV,CAAAA,WAAW,CAACU,QAAD,CAAlB,CACD,CAED,QAASG,CAAAA,WAAT,EAAoD,2BAClD,6BAAOjB,KAAK,CAACkB,QAAN,GAAiBC,IAAjB,CAAsBC,UAA7B,+DAA2Cd,SAA3C,CACD,CAED,MAAO,IAAMe,CAAAA,aAAa,6BACxBjB,WAAW,CAACD,iBAAiB,GAAGmB,GAArB,CADa,+CACgBL,WAAW,EAD3B,+BACiCL,eAAe,EADhD,6BACsDf,cADzE,CAGP,QAAS0B,CAAAA,YAAT,EAAwB,CACtB,GAAMC,CAAAA,MAAM,CAAGtB,oBAAoB,EAAnC,CACA,MAAOE,CAAAA,WAAW,CAACoB,MAAM,CAACF,GAAR,CAAlB,CACD,CAED;AACA;AACA;AACA,GACA,MAAO,SAASG,CAAAA,eAAT,EAA4C,CACjD,GAAMC,CAAAA,SAAS,CAAGH,YAAY,EAA9B,CACA,GAAMH,CAAAA,UAAU,CAAGnB,aAAa,EAAhC,CACA,MAAOF,CAAAA,OAAO,CAAC,+CAAM2B,SAAN,SAAMA,SAAN,UAAMA,SAAN,CAAmBN,UAAnB,+BAAiCR,eAAe,EAAhD,+BAAsDf,cAAtD,EAAD,CAAuE,CAAC6B,SAAD,CAAYN,UAAZ,CAAvE,CAAd,CACD","sourcesContent":["import { DEFAULT_LOCALE, SUPPORTED_LOCALES, SupportedLocale } from 'constants/locales'\nimport { useMemo } from 'react'\nimport store from 'state'\nimport { useUserLocale } from 'state/user/hooks'\n\nimport useParsedQueryString from './useParsedQueryString'\nimport { parsedQueryString } from './useParsedQueryString'\n\n/**\n * Given a locale string (e.g. from user agent), return the best match for corresponding SupportedLocale\n * @param maybeSupportedLocale the fuzzy locale identifier\n */\nfunction parseLocale(maybeSupportedLocale: unknown): SupportedLocale | undefined {\n  if (typeof maybeSupportedLocale !== 'string') return undefined\n  const lowerMaybeSupportedLocale = maybeSupportedLocale.toLowerCase()\n  return SUPPORTED_LOCALES.find(\n    (locale) => locale.toLowerCase() === lowerMaybeSupportedLocale || locale.split('-')[0] === lowerMaybeSupportedLocale\n  )\n}\n\n/**\n * Returns the supported locale read from the user agent (navigator)\n */\nexport function navigatorLocale(): SupportedLocale | undefined {\n  if (!navigator.language) return undefined\n\n  const [language, region] = navigator.language.split('-')\n\n  if (region) {\n    return parseLocale(`${language}-${region.toUpperCase()}`) ?? parseLocale(language)\n  }\n\n  return parseLocale(language)\n}\n\nfunction storeLocale(): SupportedLocale | undefined {\n  return store.getState().user.userLocale ?? undefined\n}\n\nexport const initialLocale =\n  parseLocale(parsedQueryString().lng) ?? storeLocale() ?? navigatorLocale() ?? DEFAULT_LOCALE\n\nfunction useUrlLocale() {\n  const parsed = useParsedQueryString()\n  return parseLocale(parsed.lng)\n}\n\n/**\n * Returns the currently active locale, from a combination of user agent, query string, and user settings stored in redux\n * Stores the query string locale in redux (if set) to persist across sessions\n */\nexport function useActiveLocale(): SupportedLocale {\n  const urlLocale = useUrlLocale()\n  const userLocale = useUserLocale()\n  return useMemo(() => urlLocale ?? userLocale ?? navigatorLocale() ?? DEFAULT_LOCALE, [urlLocale, userLocale])\n}\n"]},"metadata":{},"sourceType":"module"}