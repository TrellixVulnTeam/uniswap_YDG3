{"ast":null,"code":"import _objectSpread from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _regeneratorRuntime from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _SUBGRAPH_URL_BY_CHAI, _templateObject;\n\nimport { default as retry } from 'async-retry';\nimport Timeout from 'await-timeout';\nimport { gql, GraphQLClient } from 'graphql-request';\nimport _ from 'lodash';\nimport { ChainId } from '../../util/chains';\nimport { log } from '../../util/log';\nvar SUBGRAPH_URL_BY_CHAIN = (_SUBGRAPH_URL_BY_CHAI = {}, _defineProperty(_SUBGRAPH_URL_BY_CHAI, ChainId.MAINNET, 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswapv2'), _defineProperty(_SUBGRAPH_URL_BY_CHAI, ChainId.RINKEBY, 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-v2-rinkeby'), _SUBGRAPH_URL_BY_CHAI);\nvar threshold = 0.025;\nvar PAGE_SIZE = 1000; // 1k is max possible query size from subgraph.\n\nexport var V2SubgraphProvider = /*#__PURE__*/function () {\n  function V2SubgraphProvider(chainId) {\n    var retries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n    var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 360000;\n    var rollback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n    _classCallCheck(this, V2SubgraphProvider);\n\n    this.chainId = chainId;\n    this.retries = retries;\n    this.timeout = timeout;\n    this.rollback = rollback;\n    var subgraphUrl = SUBGRAPH_URL_BY_CHAIN[this.chainId];\n\n    if (!subgraphUrl) {\n      throw new Error(\"No subgraph url for chain id: \".concat(this.chainId));\n    }\n\n    this.client = new GraphQLClient(subgraphUrl);\n  }\n\n  _createClass(V2SubgraphProvider, [{\n    key: \"getPools\",\n    value: function () {\n      var _getPools = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_tokenIn, _tokenOut, providerConfig) {\n        var _this = this;\n\n        var blockNumber, query2, pools, FEI, poolsSanitized;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber)) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                _context4.next = 3;\n                return providerConfig.blockNumber;\n\n              case 3:\n                _context4.t0 = _context4.sent;\n                _context4.next = 7;\n                break;\n\n              case 6:\n                _context4.t0 = undefined;\n\n              case 7:\n                blockNumber = _context4.t0;\n                // Due to limitations with the Subgraph API this is the only way to parameterize the query.\n                query2 = gql(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n      query getPools($pageSize: Int!, $id: String) {\\n        pairs(\\n          first: $pageSize\\n          \", \"\\n          where: { id_gt: $id }\\n        ) {\\n          id\\n          token0 { id, symbol }\\n          token1 { id, symbol }\\n          totalSupply\\n          reserveETH\\n          trackedReserveETH\\n        }\\n      }\\n    \"])), blockNumber ? \"block: { number: \".concat(blockNumber, \" }\") : \"\");\n                pools = [];\n                log.info(\"Getting V2 pools from the subgraph with page size \".concat(PAGE_SIZE).concat((providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber) ? \" as of block \".concat(providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber) : '', \".\"));\n                _context4.next = 13;\n                return retry( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n                  var timeout, getPools, getPoolsPromise, timerPromise;\n                  return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                    while (1) {\n                      switch (_context3.prev = _context3.next) {\n                        case 0:\n                          timeout = new Timeout();\n\n                          getPools = /*#__PURE__*/function () {\n                            var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                              var lastId, pairs, pairsPage;\n                              return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                                while (1) {\n                                  switch (_context2.prev = _context2.next) {\n                                    case 0:\n                                      lastId = '';\n                                      pairs = [];\n                                      pairsPage = [];\n\n                                    case 3:\n                                      _context2.next = 5;\n                                      return retry( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                                        var poolsResult;\n                                        return _regeneratorRuntime.wrap(function _callee$(_context) {\n                                          while (1) {\n                                            switch (_context.prev = _context.next) {\n                                              case 0:\n                                                _context.next = 2;\n                                                return _this.client.request(query2, {\n                                                  pageSize: PAGE_SIZE,\n                                                  id: lastId\n                                                });\n\n                                              case 2:\n                                                poolsResult = _context.sent;\n                                                pairsPage = poolsResult.pairs;\n                                                pairs = pairs.concat(pairsPage);\n                                                lastId = pairs[pairs.length - 1].id;\n\n                                              case 6:\n                                              case \"end\":\n                                                return _context.stop();\n                                            }\n                                          }\n                                        }, _callee);\n                                      })), {\n                                        retries: _this.retries,\n                                        onRetry: function onRetry(err, retry) {\n                                          pools = [];\n                                          log.info({\n                                            err: err\n                                          }, \"Failed request for page of pools from subgraph. Retry attempt: \".concat(retry));\n                                        }\n                                      });\n\n                                    case 5:\n                                      if (pairsPage.length > 0) {\n                                        _context2.next = 3;\n                                        break;\n                                      }\n\n                                    case 6:\n                                      return _context2.abrupt(\"return\", pairs);\n\n                                    case 7:\n                                    case \"end\":\n                                      return _context2.stop();\n                                  }\n                                }\n                              }, _callee2);\n                            }));\n\n                            return function getPools() {\n                              return _ref2.apply(this, arguments);\n                            };\n                          }();\n\n                          _context3.prev = 2;\n                          getPoolsPromise = getPools();\n                          timerPromise = timeout.set(_this.timeout).then(function () {\n                            throw new Error(\"Timed out getting pools from subgraph: \".concat(_this.timeout));\n                          });\n                          _context3.next = 7;\n                          return Promise.race([getPoolsPromise, timerPromise]);\n\n                        case 7:\n                          pools = _context3.sent;\n                          return _context3.abrupt(\"return\");\n\n                        case 11:\n                          _context3.prev = 11;\n                          _context3.t0 = _context3[\"catch\"](2);\n                          throw _context3.t0;\n\n                        case 14:\n                          _context3.prev = 14;\n                          timeout.clear();\n                          return _context3.finish(14);\n\n                        case 17:\n                        case \"end\":\n                          return _context3.stop();\n                      }\n                    }\n                  }, _callee3, null, [[2, 11, 14, 17]]);\n                })), {\n                  retries: this.retries,\n                  onRetry: function onRetry(err, retry) {\n                    if (_this.rollback && blockNumber && _.includes(err.message, 'indexed up to')) {\n                      blockNumber = blockNumber - 10;\n                      log.info(\"Detected subgraph indexing error. Rolled back block number to: \".concat(blockNumber));\n                    }\n\n                    pools = [];\n                    log.info({\n                      err: err\n                    }, \"Failed to get pools from subgraph. Retry attempt: \".concat(retry));\n                  }\n                });\n\n              case 13:\n                // Filter pools that have tracked reserve ETH less than threshold.\n                // trackedReserveETH filters pools that do not involve a pool from this allowlist:\n                // https://github.com/Uniswap/v2-subgraph/blob/7c82235cad7aee4cfce8ea82f0030af3d224833e/src/mappings/pricing.ts#L43\n                // Which helps filter pools with manipulated prices/liquidity.\n                // TODO: Remove. Temporary fix to ensure tokens without trackedReserveETH are in the list.\n                FEI = '0x956f47f50a910163d8bf957cf5846d573e7f87ca';\n                poolsSanitized = pools.filter(function (pool) {\n                  return pool.token0.id == FEI || pool.token1.id == FEI || parseFloat(pool.trackedReserveETH) > threshold;\n                }).map(function (pool) {\n                  return _objectSpread(_objectSpread({}, pool), {}, {\n                    id: pool.id.toLowerCase(),\n                    token0: {\n                      id: pool.token0.id.toLowerCase()\n                    },\n                    token1: {\n                      id: pool.token1.id.toLowerCase()\n                    },\n                    supply: parseFloat(pool.totalSupply),\n                    reserve: parseFloat(pool.trackedReserveETH)\n                  });\n                });\n                log.info(\"Got \".concat(pools.length, \" V2 pools from the subgraph. \").concat(poolsSanitized.length, \" after filtering\"));\n                return _context4.abrupt(\"return\", poolsSanitized);\n\n              case 17:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getPools(_x, _x2, _x3) {\n        return _getPools.apply(this, arguments);\n      }\n\n      return getPools;\n    }()\n  }]);\n\n  return V2SubgraphProvider;\n}();","map":{"version":3,"sources":["../../../../../src/providers/v2/subgraph-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { default as retry } from 'async-retry';\nimport Timeout from 'await-timeout';\nimport { gql, GraphQLClient } from 'graphql-request';\nimport _ from 'lodash';\nimport { ChainId } from '../../util/chains';\nimport { log } from '../../util/log';\nconst SUBGRAPH_URL_BY_CHAIN = {\n    [ChainId.MAINNET]: 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswapv2',\n    [ChainId.RINKEBY]: 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-v2-rinkeby',\n};\nconst threshold = 0.025;\nconst PAGE_SIZE = 1000; // 1k is max possible query size from subgraph.\nexport class V2SubgraphProvider {\n    constructor(chainId, retries = 2, timeout = 360000, rollback = true) {\n        this.chainId = chainId;\n        this.retries = retries;\n        this.timeout = timeout;\n        this.rollback = rollback;\n        const subgraphUrl = SUBGRAPH_URL_BY_CHAIN[this.chainId];\n        if (!subgraphUrl) {\n            throw new Error(`No subgraph url for chain id: ${this.chainId}`);\n        }\n        this.client = new GraphQLClient(subgraphUrl);\n    }\n    async getPools(_tokenIn, _tokenOut, providerConfig) {\n        let blockNumber = (providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber)\n            ? await providerConfig.blockNumber\n            : undefined;\n        // Due to limitations with the Subgraph API this is the only way to parameterize the query.\n        const query2 = gql `\n      query getPools($pageSize: Int!, $id: String) {\n        pairs(\n          first: $pageSize\n          ${blockNumber ? `block: { number: ${blockNumber} }` : ``}\n          where: { id_gt: $id }\n        ) {\n          id\n          token0 { id, symbol }\n          token1 { id, symbol }\n          totalSupply\n          reserveETH\n          trackedReserveETH\n        }\n      }\n    `;\n        let pools = [];\n        log.info(`Getting V2 pools from the subgraph with page size ${PAGE_SIZE}${(providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber)\n            ? ` as of block ${providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber}`\n            : ''}.`);\n        await retry(async () => {\n            const timeout = new Timeout();\n            const getPools = async () => {\n                let lastId = '';\n                let pairs = [];\n                let pairsPage = [];\n                do {\n                    await retry(async () => {\n                        const poolsResult = await this.client.request(query2, {\n                            pageSize: PAGE_SIZE,\n                            id: lastId,\n                        });\n                        pairsPage = poolsResult.pairs;\n                        pairs = pairs.concat(pairsPage);\n                        lastId = pairs[pairs.length - 1].id;\n                    }, {\n                        retries: this.retries,\n                        onRetry: (err, retry) => {\n                            pools = [];\n                            log.info({ err }, `Failed request for page of pools from subgraph. Retry attempt: ${retry}`);\n                        },\n                    });\n                } while (pairsPage.length > 0);\n                return pairs;\n            };\n            try {\n                const getPoolsPromise = getPools();\n                const timerPromise = timeout.set(this.timeout).then(() => {\n                    throw new Error(`Timed out getting pools from subgraph: ${this.timeout}`);\n                });\n                pools = await Promise.race([getPoolsPromise, timerPromise]);\n                return;\n            }\n            catch (err) {\n                throw err;\n            }\n            finally {\n                timeout.clear();\n            }\n        }, {\n            retries: this.retries,\n            onRetry: (err, retry) => {\n                if (this.rollback &&\n                    blockNumber &&\n                    _.includes(err.message, 'indexed up to')) {\n                    blockNumber = blockNumber - 10;\n                    log.info(`Detected subgraph indexing error. Rolled back block number to: ${blockNumber}`);\n                }\n                pools = [];\n                log.info({ err }, `Failed to get pools from subgraph. Retry attempt: ${retry}`);\n            },\n        });\n        // Filter pools that have tracked reserve ETH less than threshold.\n        // trackedReserveETH filters pools that do not involve a pool from this allowlist:\n        // https://github.com/Uniswap/v2-subgraph/blob/7c82235cad7aee4cfce8ea82f0030af3d224833e/src/mappings/pricing.ts#L43\n        // Which helps filter pools with manipulated prices/liquidity.\n        // TODO: Remove. Temporary fix to ensure tokens without trackedReserveETH are in the list.\n        const FEI = '0x956f47f50a910163d8bf957cf5846d573e7f87ca';\n        const poolsSanitized = pools\n            .filter((pool) => {\n            return (pool.token0.id == FEI ||\n                pool.token1.id == FEI ||\n                parseFloat(pool.trackedReserveETH) > threshold);\n        })\n            .map((pool) => {\n            return {\n                ...pool,\n                id: pool.id.toLowerCase(),\n                token0: {\n                    id: pool.token0.id.toLowerCase(),\n                },\n                token1: {\n                    id: pool.token1.id.toLowerCase(),\n                },\n                supply: parseFloat(pool.totalSupply),\n                reserve: parseFloat(pool.trackedReserveETH),\n            };\n        });\n        log.info(`Got ${pools.length} V2 pools from the subgraph. ${poolsSanitized.length} after filtering`);\n        return poolsSanitized;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViZ3JhcGgtcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvcHJvdmlkZXJzL3YyL3N1YmdyYXBoLXByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxPQUFPLElBQUksS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQy9DLE9BQU8sT0FBTyxNQUFNLGVBQWUsQ0FBQztBQUNwQyxPQUFPLEVBQUUsR0FBRyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3JELE9BQU8sQ0FBQyxNQUFNLFFBQVEsQ0FBQztBQUN2QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDNUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBOEJyQyxNQUFNLHFCQUFxQixHQUFzQztJQUMvRCxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFDZiw2REFBNkQ7SUFDL0QsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQ2Ysc0VBQXNFO0NBQ3pFLENBQUM7QUFFRixNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUM7QUFFeEIsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUMsK0NBQStDO0FBZ0J2RSxNQUFNLE9BQU8sa0JBQWtCO0lBRzdCLFlBQ1UsT0FBZ0IsRUFDaEIsVUFBVSxDQUFDLEVBQ1gsVUFBVSxNQUFNLEVBQ2hCLFdBQVcsSUFBSTtRQUhmLFlBQU8sR0FBUCxPQUFPLENBQVM7UUFDaEIsWUFBTyxHQUFQLE9BQU8sQ0FBSTtRQUNYLFlBQU8sR0FBUCxPQUFPLENBQVM7UUFDaEIsYUFBUSxHQUFSLFFBQVEsQ0FBTztRQUV2QixNQUFNLFdBQVcsR0FBRyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNoQixNQUFNLElBQUksS0FBSyxDQUFDLGlDQUFp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"]},"metadata":{},"sourceType":"module"}