{"ast":null,"code":"import _toConsumableArray from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _regeneratorRuntime from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport DEFAULT_TOKEN_LIST from '@uniswap/default-token-list';\nimport { Protocol, SwapRouter, Trade } from '@uniswap/router-sdk';\nimport { Fraction, TradeType } from '@uniswap/sdk-core';\nimport { Route as V2RouteRaw } from '@uniswap/v2-sdk';\nimport { Pool, Position, Route as V3RouteRaw, SqrtPriceMath, TickMath } from '@uniswap/v3-sdk';\nimport { BigNumber, providers } from 'ethers';\nimport JSBI from 'jsbi';\nimport _ from 'lodash';\nimport NodeCache from 'node-cache';\nimport { V3HeuristicGasModelFactory } from '.';\nimport { CachingGasStationProvider, CachingTokenProviderWithFallback, CachingV2SubgraphProvider, CachingV3PoolProvider, CachingV3SubgraphProvider, EIP1559GasPriceProvider, ETHGasStationInfoProvider, LegacyGasPriceProvider, NodeJSCache, OnChainGasPriceProvider, StaticV2SubgraphProvider, StaticV3SubgraphProvider, SwapRouterProvider, UniswapMulticallProvider, URISubgraphProvider, V2QuoteProvider, V2SubgraphProviderWithFallBacks, V3SubgraphProviderWithFallBacks } from '../../providers';\nimport { CachingTokenListProvider } from '../../providers/caching-token-list-provider';\nimport { TokenProvider } from '../../providers/token-provider';\nimport { V2PoolProvider } from '../../providers/v2/pool-provider';\nimport { V3PoolProvider } from '../../providers/v3/pool-provider';\nimport { V3QuoteProvider } from '../../providers/v3/quote-provider';\nimport { CurrencyAmount } from '../../util/amounts';\nimport { ChainId, ID_TO_CHAIN_ID, ID_TO_NETWORK_NAME } from '../../util/chains';\nimport { log } from '../../util/log';\nimport { metric, MetricLoggerUnit } from '../../util/metric';\nimport { routeToString } from '../../util/routes';\nimport { UNSUPPORTED_TOKENS } from '../../util/unsupported-tokens';\nimport { SwapToRatioStatus } from '../router';\nimport { DEFAULT_ROUTING_CONFIG_BY_CHAIN, ETH_GAS_STATION_API_URL } from './config';\nimport { V2RouteWithValidQuote, V3RouteWithValidQuote } from './entities/route-with-valid-quote';\nimport { getBestSwapRoute } from './functions/best-swap-route';\nimport { calculateRatioAmountIn } from './functions/calculate-ratio-amount-in';\nimport { computeAllV2Routes, computeAllV3Routes } from './functions/compute-all-routes';\nimport { getV2CandidatePools, getV3CandidatePools } from './functions/get-candidate-pools';\nimport { V2HeuristicGasModelFactory } from './gas-models/v2/v2-heuristic-gas-model';\nexport var AlphaRouter = /*#__PURE__*/function () {\n  function AlphaRouter(_ref) {\n    var chainId = _ref.chainId,\n        provider = _ref.provider,\n        multicall2Provider = _ref.multicall2Provider,\n        v3PoolProvider = _ref.v3PoolProvider,\n        v3QuoteProvider = _ref.v3QuoteProvider,\n        v2PoolProvider = _ref.v2PoolProvider,\n        v2QuoteProvider = _ref.v2QuoteProvider,\n        v2SubgraphProvider = _ref.v2SubgraphProvider,\n        tokenProvider = _ref.tokenProvider,\n        blockedTokenListProvider = _ref.blockedTokenListProvider,\n        v3SubgraphProvider = _ref.v3SubgraphProvider,\n        gasPriceProvider = _ref.gasPriceProvider,\n        v3GasModelFactory = _ref.v3GasModelFactory,\n        v2GasModelFactory = _ref.v2GasModelFactory,\n        swapRouterProvider = _ref.swapRouterProvider;\n\n    _classCallCheck(this, AlphaRouter);\n\n    this.chainId = chainId;\n    this.provider = provider;\n    this.multicall2Provider = multicall2Provider !== null && multicall2Provider !== void 0 ? multicall2Provider : new UniswapMulticallProvider(chainId, provider, 375000);\n    this.v3PoolProvider = v3PoolProvider !== null && v3PoolProvider !== void 0 ? v3PoolProvider : new CachingV3PoolProvider(this.chainId, new V3PoolProvider(ID_TO_CHAIN_ID(chainId), this.multicall2Provider), new NodeJSCache(new NodeCache({\n      stdTTL: 360,\n      useClones: false\n    })));\n\n    if (v3QuoteProvider) {\n      this.v3QuoteProvider = v3QuoteProvider;\n    } else {\n      switch (chainId) {\n        case ChainId.OPTIMISM:\n        case ChainId.OPTIMISTIC_KOVAN:\n          this.v3QuoteProvider = new V3QuoteProvider(chainId, provider, this.multicall2Provider, {\n            retries: 2,\n            minTimeout: 100,\n            maxTimeout: 1000\n          }, {\n            multicallChunk: 110,\n            gasLimitPerCall: 1200000,\n            quoteMinSuccessRate: 0.1\n          }, {\n            gasLimitOverride: 3000000,\n            multicallChunk: 45\n          }, {\n            gasLimitOverride: 3000000,\n            multicallChunk: 45\n          }, {\n            baseBlockOffset: -10,\n            rollback: {\n              enabled: true,\n              attemptsBeforeRollback: 1,\n              rollbackBlockOffset: -10\n            }\n          });\n          break;\n\n        case ChainId.ARBITRUM_ONE:\n        case ChainId.ARBITRUM_RINKEBY:\n          this.v3QuoteProvider = new V3QuoteProvider(chainId, provider, this.multicall2Provider, {\n            retries: 2,\n            minTimeout: 100,\n            maxTimeout: 1000\n          }, {\n            multicallChunk: 10,\n            gasLimitPerCall: 12000000,\n            quoteMinSuccessRate: 0.1\n          }, {\n            gasLimitOverride: 30000000,\n            multicallChunk: 6\n          }, {\n            gasLimitOverride: 30000000,\n            multicallChunk: 6\n          });\n          break;\n\n        default:\n          this.v3QuoteProvider = new V3QuoteProvider(chainId, provider, this.multicall2Provider, {\n            retries: 2,\n            minTimeout: 100,\n            maxTimeout: 1000\n          }, {\n            multicallChunk: 210,\n            gasLimitPerCall: 705000,\n            quoteMinSuccessRate: 0.15\n          }, {\n            gasLimitOverride: 2000000,\n            multicallChunk: 70\n          });\n          break;\n      }\n    }\n\n    this.v2PoolProvider = v2PoolProvider !== null && v2PoolProvider !== void 0 ? v2PoolProvider : new V2PoolProvider(chainId, this.multicall2Provider);\n    this.v2QuoteProvider = v2QuoteProvider !== null && v2QuoteProvider !== void 0 ? v2QuoteProvider : new V2QuoteProvider();\n    this.blockedTokenListProvider = blockedTokenListProvider !== null && blockedTokenListProvider !== void 0 ? blockedTokenListProvider : new CachingTokenListProvider(chainId, UNSUPPORTED_TOKENS, new NodeJSCache(new NodeCache({\n      stdTTL: 3600,\n      useClones: false\n    })));\n    this.tokenProvider = tokenProvider !== null && tokenProvider !== void 0 ? tokenProvider : new CachingTokenProviderWithFallback(chainId, new NodeJSCache(new NodeCache({\n      stdTTL: 3600,\n      useClones: false\n    })), new CachingTokenListProvider(chainId, DEFAULT_TOKEN_LIST, new NodeJSCache(new NodeCache({\n      stdTTL: 3600,\n      useClones: false\n    }))), new TokenProvider(chainId, this.multicall2Provider));\n    var chainName = ID_TO_NETWORK_NAME(chainId); // ipfs urls in the following format: `https://cloudflare-ipfs.com/ipns/api.uniswap.org/v1/pools/${protocol}/${chainName}.json`;\n\n    if (v2SubgraphProvider) {\n      this.v2SubgraphProvider = v2SubgraphProvider;\n    } else {\n      this.v2SubgraphProvider = new V2SubgraphProviderWithFallBacks([new CachingV2SubgraphProvider(chainId, new URISubgraphProvider(chainId, \"https://cloudflare-ipfs.com/ipns/api.uniswap.org/v1/pools/v2/\".concat(chainName, \".json\"), undefined, 0), new NodeJSCache(new NodeCache({\n        stdTTL: 300,\n        useClones: false\n      }))), new StaticV2SubgraphProvider(chainId)]);\n    }\n\n    if (v3SubgraphProvider) {\n      this.v3SubgraphProvider = v3SubgraphProvider;\n    } else {\n      this.v3SubgraphProvider = new V3SubgraphProviderWithFallBacks([new CachingV3SubgraphProvider(chainId, new URISubgraphProvider(chainId, \"https://cloudflare-ipfs.com/ipns/api.uniswap.org/v1/pools/v3/\".concat(chainName, \".json\"), undefined, 0), new NodeJSCache(new NodeCache({\n        stdTTL: 300,\n        useClones: false\n      }))), new StaticV3SubgraphProvider(chainId, this.v3PoolProvider)]);\n    }\n\n    this.gasPriceProvider = gasPriceProvider !== null && gasPriceProvider !== void 0 ? gasPriceProvider : new CachingGasStationProvider(chainId, this.provider instanceof providers.JsonRpcProvider ? new OnChainGasPriceProvider(chainId, new EIP1559GasPriceProvider(this.provider), new LegacyGasPriceProvider(this.provider)) : new ETHGasStationInfoProvider(ETH_GAS_STATION_API_URL), new NodeJSCache(new NodeCache({\n      stdTTL: 15,\n      useClones: false\n    })));\n    this.v3GasModelFactory = v3GasModelFactory !== null && v3GasModelFactory !== void 0 ? v3GasModelFactory : new V3HeuristicGasModelFactory();\n    this.v2GasModelFactory = v2GasModelFactory !== null && v2GasModelFactory !== void 0 ? v2GasModelFactory : new V2HeuristicGasModelFactory();\n    this.swapRouterProvider = swapRouterProvider !== null && swapRouterProvider !== void 0 ? swapRouterProvider : new SwapRouterProvider(this.multicall2Provider);\n  }\n\n  _createClass(AlphaRouter, [{\n    key: \"routeToRatio\",\n    value: function () {\n      var _routeToRatio = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(token0Balance, token1Balance, position, swapAndAddConfig, swapAndAddOptions) {\n        var _this = this;\n\n        var routingConfig,\n            _ref2,\n            preSwapOptimalRatio,\n            zeroForOne,\n            _ref3,\n            _ref4,\n            inputBalance,\n            outputBalance,\n            optimalRatio,\n            postSwapTargetPool,\n            exchangeRate,\n            swap,\n            ratioAchieved,\n            n,\n            _loop,\n            _ret,\n            methodParameters,\n            _args2 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                routingConfig = _args2.length > 5 && _args2[5] !== undefined ? _args2[5] : DEFAULT_ROUTING_CONFIG_BY_CHAIN(this.chainId);\n\n                if (token1Balance.currency.wrapped.sortsBefore(token0Balance.currency.wrapped)) {\n                  _ref2 = [token1Balance, token0Balance];\n                  token0Balance = _ref2[0];\n                  token1Balance = _ref2[1];\n                }\n\n                preSwapOptimalRatio = this.calculateOptimalRatio(position, position.pool.sqrtRatioX96, true); // set up parameters according to which token will be swapped\n\n                if (position.pool.tickCurrent > position.tickUpper) {\n                  zeroForOne = true;\n                } else if (position.pool.tickCurrent < position.tickLower) {\n                  zeroForOne = false;\n                } else {\n                  zeroForOne = new Fraction(token0Balance.quotient, token1Balance.quotient).greaterThan(preSwapOptimalRatio);\n                  if (!zeroForOne) preSwapOptimalRatio = preSwapOptimalRatio.invert();\n                }\n\n                _ref3 = zeroForOne ? [token0Balance, token1Balance] : [token1Balance, token0Balance], _ref4 = _slicedToArray(_ref3, 2), inputBalance = _ref4[0], outputBalance = _ref4[1];\n                optimalRatio = preSwapOptimalRatio;\n                postSwapTargetPool = position.pool;\n                exchangeRate = zeroForOne ? position.pool.token0Price : position.pool.token1Price;\n                swap = null;\n                ratioAchieved = false;\n                n = 0; // iterate until we find a swap with a sufficient ratio or return null\n\n                _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n                  var amountToSwap, inputBalanceUpdated, outputBalanceUpdated, newRatio, targetPoolPriceUpdate;\n                  return _regeneratorRuntime.wrap(function _loop$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          n++;\n\n                          if (!(n > swapAndAddConfig.maxIterations)) {\n                            _context.next = 4;\n                            break;\n                          }\n\n                          log.info('max iterations exceeded');\n                          return _context.abrupt(\"return\", {\n                            v: {\n                              status: SwapToRatioStatus.NO_ROUTE_FOUND,\n                              error: 'max iterations exceeded'\n                            }\n                          });\n\n                        case 4:\n                          amountToSwap = calculateRatioAmountIn(optimalRatio, exchangeRate, inputBalance, outputBalance);\n\n                          if (!amountToSwap.equalTo(0)) {\n                            _context.next = 8;\n                            break;\n                          }\n\n                          log.info(\"no swap needed\");\n                          return _context.abrupt(\"return\", {\n                            v: {\n                              status: SwapToRatioStatus.NO_SWAP_NEEDED\n                            }\n                          });\n\n                        case 8:\n                          _context.next = 10;\n                          return _this.route(amountToSwap, outputBalance.currency, TradeType.EXACT_INPUT, undefined, _objectSpread(_objectSpread(_objectSpread({}, DEFAULT_ROUTING_CONFIG_BY_CHAIN(_this.chainId)), routingConfig), {}, {\n                            protocols: [Protocol.V3, Protocol.V2]\n                          }));\n\n                        case 10:\n                          swap = _context.sent;\n\n                          if (swap) {\n                            _context.next = 13;\n                            break;\n                          }\n\n                          return _context.abrupt(\"return\", {\n                            v: {\n                              status: SwapToRatioStatus.NO_ROUTE_FOUND,\n                              error: 'no route found'\n                            }\n                          });\n\n                        case 13:\n                          inputBalanceUpdated = inputBalance.subtract(swap.trade.inputAmount);\n                          outputBalanceUpdated = outputBalance.add(swap.trade.outputAmount);\n                          newRatio = inputBalanceUpdated.divide(outputBalanceUpdated);\n                          targetPoolPriceUpdate = void 0;\n                          swap.route.forEach(function (route) {\n                            if (route.protocol == Protocol.V3) {\n                              var v3Route = route;\n                              v3Route.route.pools.forEach(function (pool, i) {\n                                if (pool.token0.equals(position.pool.token0) && pool.token1.equals(position.pool.token1) && pool.fee == position.pool.fee) {\n                                  targetPoolPriceUpdate = JSBI.BigInt(v3Route.sqrtPriceX96AfterList[i].toString());\n                                  optimalRatio = _this.calculateOptimalRatio(position, JSBI.BigInt(targetPoolPriceUpdate.toString()), zeroForOne);\n                                }\n                              });\n                            }\n                          });\n\n                          if (!targetPoolPriceUpdate) {\n                            optimalRatio = preSwapOptimalRatio;\n                          }\n\n                          ratioAchieved = newRatio.equalTo(optimalRatio) || _this.absoluteValue(newRatio.asFraction.divide(optimalRatio).subtract(1)).lessThan(swapAndAddConfig.ratioErrorTolerance);\n\n                          if (ratioAchieved && targetPoolPriceUpdate) {\n                            postSwapTargetPool = new Pool(position.pool.token0, position.pool.token1, position.pool.fee, targetPoolPriceUpdate, position.pool.liquidity, TickMath.getTickAtSqrtRatio(targetPoolPriceUpdate), position.pool.tickDataProvider);\n                          }\n\n                          exchangeRate = swap.trade.outputAmount.divide(swap.trade.inputAmount);\n                          log.info({\n                            optimalRatio: optimalRatio.asFraction.toFixed(18),\n                            newRatio: newRatio.asFraction.toFixed(18),\n                            ratioErrorTolerance: swapAndAddConfig.ratioErrorTolerance.toFixed(18),\n                            iterationN: n.toString()\n                          });\n\n                        case 23:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _loop);\n                });\n\n              case 12:\n                if (ratioAchieved) {\n                  _context2.next = 19;\n                  break;\n                }\n\n                return _context2.delegateYield(_loop(), \"t0\", 14);\n\n              case 14:\n                _ret = _context2.t0;\n\n                if (!(typeof _ret === \"object\")) {\n                  _context2.next = 17;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", _ret.v);\n\n              case 17:\n                _context2.next = 12;\n                break;\n\n              case 19:\n                if (swap) {\n                  _context2.next = 21;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", {\n                  status: SwapToRatioStatus.NO_ROUTE_FOUND,\n                  error: 'no route found'\n                });\n\n              case 21:\n                if (!swapAndAddOptions) {\n                  _context2.next = 25;\n                  break;\n                }\n\n                _context2.next = 24;\n                return this.buildSwapAndAddMethodParameters(swap.trade, swapAndAddOptions, {\n                  initialBalanceTokenIn: inputBalance,\n                  initialBalanceTokenOut: outputBalance,\n                  preLiquidityPosition: position\n                });\n\n              case 24:\n                methodParameters = _context2.sent;\n\n              case 25:\n                return _context2.abrupt(\"return\", {\n                  status: SwapToRatioStatus.SUCCESS,\n                  result: _objectSpread(_objectSpread({}, swap), {}, {\n                    methodParameters: methodParameters,\n                    optimalRatio: optimalRatio,\n                    postSwapTargetPool: postSwapTargetPool\n                  })\n                });\n\n              case 26:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function routeToRatio(_x, _x2, _x3, _x4, _x5) {\n        return _routeToRatio.apply(this, arguments);\n      }\n\n      return routeToRatio;\n    }()\n    /**\n     * @inheritdoc IRouter\n     */\n\n  }, {\n    key: \"route\",\n    value: function () {\n      var _route = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(amount, quoteCurrency, tradeType, swapConfig) {\n        var partialRoutingConfig,\n            _a,\n            blockNumber,\n            routingConfig,\n            protocols,\n            currencyIn,\n            currencyOut,\n            tokenIn,\n            tokenOut,\n            _this$getAmountDistri,\n            _this$getAmountDistri2,\n            percents,\n            amounts,\n            beforeGas,\n            _yield$this$gasPriceP,\n            gasPriceWei,\n            quoteToken,\n            quotePromises,\n            protocolsSet,\n            routesWithValidQuotesByProtocol,\n            allRoutesWithValidQuotes,\n            allCandidatePools,\n            _iterator,\n            _step,\n            _step$value,\n            routesWithValidQuotes,\n            candidatePools,\n            beforeBestSwap,\n            swapRouteRaw,\n            quote,\n            quoteGasAdjusted,\n            estimatedGasUsed,\n            routeAmounts,\n            estimatedGasUsedQuoteToken,\n            estimatedGasUsedUSD,\n            trade,\n            methodParameters,\n            _args3 = arguments;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                partialRoutingConfig = _args3.length > 4 && _args3[4] !== undefined ? _args3[4] : {};\n                metric.putMetric(\"QuoteRequestedForChain\".concat(this.chainId), 1, MetricLoggerUnit.Count); // Get a block number to specify in all our calls. Ensures data we fetch from chain is\n                // from the same block.\n\n                blockNumber = (_a = partialRoutingConfig.blockNumber) !== null && _a !== void 0 ? _a : this.provider.getBlockNumber();\n                routingConfig = _.merge({}, DEFAULT_ROUTING_CONFIG_BY_CHAIN(this.chainId), partialRoutingConfig, {\n                  blockNumber: blockNumber\n                });\n                protocols = routingConfig.protocols;\n                currencyIn = tradeType == TradeType.EXACT_INPUT ? amount.currency : quoteCurrency;\n                currencyOut = tradeType == TradeType.EXACT_INPUT ? quoteCurrency : amount.currency;\n                tokenIn = currencyIn.wrapped;\n                tokenOut = currencyOut.wrapped; // Generate our distribution of amounts, i.e. fractions of the input amount.\n                // We will get quotes for fractions of the input amount for different routes, then\n                // combine to generate split routes.\n\n                _this$getAmountDistri = this.getAmountDistribution(amount, routingConfig), _this$getAmountDistri2 = _slicedToArray(_this$getAmountDistri, 2), percents = _this$getAmountDistri2[0], amounts = _this$getAmountDistri2[1]; // Get an estimate of the gas price to use when estimating gas cost of different routes.\n\n                beforeGas = Date.now();\n                _context3.next = 13;\n                return this.gasPriceProvider.getGasPrice();\n\n              case 13:\n                _yield$this$gasPriceP = _context3.sent;\n                gasPriceWei = _yield$this$gasPriceP.gasPriceWei;\n                metric.putMetric('GasPriceLoad', Date.now() - beforeGas, MetricLoggerUnit.Milliseconds);\n                quoteToken = quoteCurrency.wrapped;\n                quotePromises = [];\n                protocolsSet = new Set(protocols !== null && protocols !== void 0 ? protocols : []);\n\n                if (protocolsSet.size == 0 || protocolsSet.has(Protocol.V2) && protocolsSet.has(Protocol.V3)) {\n                  log.info({\n                    protocols: protocols,\n                    tradeType: tradeType\n                  }, 'Routing across all protocols');\n                  quotePromises.push(this.getV3Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, gasPriceWei, tradeType, routingConfig));\n                  quotePromises.push(this.getV2Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, gasPriceWei, tradeType, routingConfig));\n                } else {\n                  if (protocolsSet.has(Protocol.V3)) {\n                    log.info({\n                      protocols: protocols,\n                      swapType: tradeType\n                    }, 'Routing across V3');\n                    quotePromises.push(this.getV3Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, gasPriceWei, tradeType, routingConfig));\n                  }\n\n                  if (protocolsSet.has(Protocol.V2)) {\n                    log.info({\n                      protocols: protocols,\n                      swapType: tradeType\n                    }, 'Routing across V2');\n                    quotePromises.push(this.getV2Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, gasPriceWei, tradeType, routingConfig));\n                  }\n                }\n\n                _context3.next = 22;\n                return Promise.all(quotePromises);\n\n              case 22:\n                routesWithValidQuotesByProtocol = _context3.sent;\n                allRoutesWithValidQuotes = [];\n                allCandidatePools = [];\n                _iterator = _createForOfIteratorHelper(routesWithValidQuotesByProtocol);\n\n                try {\n                  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                    _step$value = _step.value, routesWithValidQuotes = _step$value.routesWithValidQuotes, candidatePools = _step$value.candidatePools;\n                    allRoutesWithValidQuotes = [].concat(_toConsumableArray(allRoutesWithValidQuotes), _toConsumableArray(routesWithValidQuotes));\n                    allCandidatePools = [].concat(_toConsumableArray(allCandidatePools), [candidatePools]);\n                  }\n                } catch (err) {\n                  _iterator.e(err);\n                } finally {\n                  _iterator.f();\n                }\n\n                if (!(allRoutesWithValidQuotes.length == 0)) {\n                  _context3.next = 30;\n                  break;\n                }\n\n                log.info({\n                  allRoutesWithValidQuotes: allRoutesWithValidQuotes\n                }, 'Received no valid quotes');\n                return _context3.abrupt(\"return\", null);\n\n              case 30:\n                // Given all the quotes for all the amounts for all the routes, find the best combination.\n                beforeBestSwap = Date.now();\n                swapRouteRaw = getBestSwapRoute(amount, percents, allRoutesWithValidQuotes, tradeType, this.chainId, routingConfig);\n\n                if (swapRouteRaw) {\n                  _context3.next = 34;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", null);\n\n              case 34:\n                quote = swapRouteRaw.quote, quoteGasAdjusted = swapRouteRaw.quoteGasAdjusted, estimatedGasUsed = swapRouteRaw.estimatedGasUsed, routeAmounts = swapRouteRaw.routes, estimatedGasUsedQuoteToken = swapRouteRaw.estimatedGasUsedQuoteToken, estimatedGasUsedUSD = swapRouteRaw.estimatedGasUsedUSD; // Build Trade object that represents the optimal swap.\n\n                trade = this.buildTrade(currencyIn, currencyOut, tradeType, routeAmounts);\n\n                // If user provided recipient, deadline etc. we also generate the calldata required to execute\n                // the swap and return it too.\n                if (swapConfig) {\n                  methodParameters = this.buildSwapMethodParameters(trade, swapConfig);\n                }\n\n                metric.putMetric('FindBestSwapRoute', Date.now() - beforeBestSwap, MetricLoggerUnit.Milliseconds);\n                metric.putMetric(\"QuoteFoundForChain\".concat(this.chainId), 1, MetricLoggerUnit.Count);\n                this.emitPoolSelectionMetrics(swapRouteRaw, allCandidatePools);\n                _context3.t0 = quote;\n                _context3.t1 = quoteGasAdjusted;\n                _context3.t2 = estimatedGasUsed;\n                _context3.t3 = estimatedGasUsedQuoteToken;\n                _context3.t4 = estimatedGasUsedUSD;\n                _context3.t5 = gasPriceWei;\n                _context3.t6 = routeAmounts;\n                _context3.t7 = trade;\n                _context3.t8 = methodParameters;\n                _context3.t9 = BigNumber;\n                _context3.next = 52;\n                return blockNumber;\n\n              case 52:\n                _context3.t10 = _context3.sent;\n                _context3.t11 = _context3.t9.from.call(_context3.t9, _context3.t10);\n                return _context3.abrupt(\"return\", {\n                  quote: _context3.t0,\n                  quoteGasAdjusted: _context3.t1,\n                  estimatedGasUsed: _context3.t2,\n                  estimatedGasUsedQuoteToken: _context3.t3,\n                  estimatedGasUsedUSD: _context3.t4,\n                  gasPriceWei: _context3.t5,\n                  route: _context3.t6,\n                  trade: _context3.t7,\n                  methodParameters: _context3.t8,\n                  blockNumber: _context3.t11\n                });\n\n              case 55:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function route(_x6, _x7, _x8, _x9) {\n        return _route.apply(this, arguments);\n      }\n\n      return route;\n    }()\n  }, {\n    key: \"getV3Quotes\",\n    value: function () {\n      var _getV3Quotes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(tokenIn, tokenOut, amounts, percents, quoteToken, gasPriceWei, swapType, routingConfig) {\n        var _yield$getV3Candidate, poolAccessor, candidatePools, pools, maxSwapsPerPath, routes, quoteFn, beforeQuotes, _yield$quoteFn, routesWithQuotes, gasModel, routesWithValidQuotes, _iterator2, _step2, routeWithQuote, _routeWithQuote, route, quotes, i, percent, amountQuote, quote, amount, sqrtPriceX96AfterList, initializedTicksCrossedList, gasEstimate, routeWithValidQuote;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                log.info('Starting to get V3 quotes'); // Fetch all the pools that we will consider routing via. There are thousands\n                // of pools, so we filter them to a set of candidate pools that we expect will\n                // result in good prices.\n\n                _context4.next = 3;\n                return getV3CandidatePools({\n                  tokenIn: tokenIn,\n                  tokenOut: tokenOut,\n                  tokenProvider: this.tokenProvider,\n                  blockedTokenListProvider: this.blockedTokenListProvider,\n                  poolProvider: this.v3PoolProvider,\n                  routeType: swapType,\n                  subgraphProvider: this.v3SubgraphProvider,\n                  routingConfig: routingConfig,\n                  chainId: this.chainId\n                });\n\n              case 3:\n                _yield$getV3Candidate = _context4.sent;\n                poolAccessor = _yield$getV3Candidate.poolAccessor;\n                candidatePools = _yield$getV3Candidate.candidatePools;\n                pools = poolAccessor.getAllPools(); // Given all our candidate pools, compute all the possible ways to route from tokenIn to tokenOut.\n\n                maxSwapsPerPath = routingConfig.maxSwapsPerPath;\n                routes = computeAllV3Routes(tokenIn, tokenOut, pools, maxSwapsPerPath);\n\n                if (!(routes.length == 0)) {\n                  _context4.next = 11;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", {\n                  routesWithValidQuotes: [],\n                  candidatePools: candidatePools\n                });\n\n              case 11:\n                // For all our routes, and all the fractional amounts, fetch quotes on-chain.\n                quoteFn = swapType == TradeType.EXACT_INPUT ? this.v3QuoteProvider.getQuotesManyExactIn.bind(this.v3QuoteProvider) : this.v3QuoteProvider.getQuotesManyExactOut.bind(this.v3QuoteProvider);\n                beforeQuotes = Date.now();\n                log.info(\"Getting quotes for V3 for \".concat(routes.length, \" routes with \").concat(amounts.length, \" amounts per route.\"));\n                _context4.next = 16;\n                return quoteFn(amounts, routes, {\n                  blockNumber: routingConfig.blockNumber\n                });\n\n              case 16:\n                _yield$quoteFn = _context4.sent;\n                routesWithQuotes = _yield$quoteFn.routesWithQuotes;\n                _context4.next = 20;\n                return this.v3GasModelFactory.buildGasModel(this.chainId, gasPriceWei, this.v3PoolProvider, quoteToken);\n\n              case 20:\n                gasModel = _context4.sent;\n                metric.putMetric('V3QuotesLoad', Date.now() - beforeQuotes, MetricLoggerUnit.Milliseconds);\n                metric.putMetric('V3QuotesFetched', _(routesWithQuotes).map(function (_ref5) {\n                  var _ref6 = _slicedToArray(_ref5, 2),\n                      quotes = _ref6[1];\n\n                  return quotes.length;\n                }).sum(), MetricLoggerUnit.Count);\n                routesWithValidQuotes = [];\n                _iterator2 = _createForOfIteratorHelper(routesWithQuotes);\n                _context4.prev = 25;\n\n                _iterator2.s();\n\n              case 27:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context4.next = 45;\n                  break;\n                }\n\n                routeWithQuote = _step2.value;\n                _routeWithQuote = _slicedToArray(routeWithQuote, 2), route = _routeWithQuote[0], quotes = _routeWithQuote[1];\n                i = 0;\n\n              case 31:\n                if (!(i < quotes.length)) {\n                  _context4.next = 43;\n                  break;\n                }\n\n                percent = percents[i];\n                amountQuote = quotes[i];\n                quote = amountQuote.quote, amount = amountQuote.amount, sqrtPriceX96AfterList = amountQuote.sqrtPriceX96AfterList, initializedTicksCrossedList = amountQuote.initializedTicksCrossedList, gasEstimate = amountQuote.gasEstimate;\n\n                if (!(!quote || !sqrtPriceX96AfterList || !initializedTicksCrossedList || !gasEstimate)) {\n                  _context4.next = 38;\n                  break;\n                }\n\n                log.debug({\n                  route: routeToString(route),\n                  amountQuote: amountQuote\n                }, 'Dropping a null V3 quote for route.');\n                return _context4.abrupt(\"continue\", 40);\n\n              case 38:\n                routeWithValidQuote = new V3RouteWithValidQuote({\n                  route: route,\n                  rawQuote: quote,\n                  amount: amount,\n                  percent: percent,\n                  sqrtPriceX96AfterList: sqrtPriceX96AfterList,\n                  initializedTicksCrossedList: initializedTicksCrossedList,\n                  quoterGasEstimate: gasEstimate,\n                  gasModel: gasModel,\n                  quoteToken: quoteToken,\n                  tradeType: swapType,\n                  v3PoolProvider: this.v3PoolProvider\n                });\n                routesWithValidQuotes.push(routeWithValidQuote);\n\n              case 40:\n                i++;\n                _context4.next = 31;\n                break;\n\n              case 43:\n                _context4.next = 27;\n                break;\n\n              case 45:\n                _context4.next = 50;\n                break;\n\n              case 47:\n                _context4.prev = 47;\n                _context4.t0 = _context4[\"catch\"](25);\n\n                _iterator2.e(_context4.t0);\n\n              case 50:\n                _context4.prev = 50;\n\n                _iterator2.f();\n\n                return _context4.finish(50);\n\n              case 53:\n                return _context4.abrupt(\"return\", {\n                  routesWithValidQuotes: routesWithValidQuotes,\n                  candidatePools: candidatePools\n                });\n\n              case 54:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee3, this, [[25, 47, 50, 53]]);\n      }));\n\n      function getV3Quotes(_x10, _x11, _x12, _x13, _x14, _x15, _x16, _x17) {\n        return _getV3Quotes.apply(this, arguments);\n      }\n\n      return getV3Quotes;\n    }()\n  }, {\n    key: \"getV2Quotes\",\n    value: function () {\n      var _getV2Quotes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(tokenIn, tokenOut, amounts, percents, quoteToken, gasPriceWei, swapType, routingConfig) {\n        var _yield$getV2Candidate, poolAccessor, candidatePools, pools, maxSwapsPerPath, routes, quoteFn, beforeQuotes, _yield$quoteFn2, routesWithQuotes, gasModel, routesWithValidQuotes, _iterator3, _step3, routeWithQuote, _routeWithQuote2, route, quotes, i, percent, amountQuote, quote, amount, routeWithValidQuote;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                log.info('Starting to get V2 quotes'); // Fetch all the pools that we will consider routing via. There are thousands\n                // of pools, so we filter them to a set of candidate pools that we expect will\n                // result in good prices.\n\n                _context5.next = 3;\n                return getV2CandidatePools({\n                  tokenIn: tokenIn,\n                  tokenOut: tokenOut,\n                  tokenProvider: this.tokenProvider,\n                  blockedTokenListProvider: this.blockedTokenListProvider,\n                  poolProvider: this.v2PoolProvider,\n                  routeType: swapType,\n                  subgraphProvider: this.v2SubgraphProvider,\n                  routingConfig: routingConfig,\n                  chainId: this.chainId\n                });\n\n              case 3:\n                _yield$getV2Candidate = _context5.sent;\n                poolAccessor = _yield$getV2Candidate.poolAccessor;\n                candidatePools = _yield$getV2Candidate.candidatePools;\n                pools = poolAccessor.getAllPools(); // Given all our candidate pools, compute all the possible ways to route from tokenIn to tokenOut.\n\n                maxSwapsPerPath = routingConfig.maxSwapsPerPath;\n                routes = computeAllV2Routes(tokenIn, tokenOut, pools, maxSwapsPerPath);\n\n                if (!(routes.length == 0)) {\n                  _context5.next = 11;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", {\n                  routesWithValidQuotes: [],\n                  candidatePools: candidatePools\n                });\n\n              case 11:\n                // For all our routes, and all the fractional amounts, fetch quotes on-chain.\n                quoteFn = swapType == TradeType.EXACT_INPUT ? this.v2QuoteProvider.getQuotesManyExactIn.bind(this.v2QuoteProvider) : this.v2QuoteProvider.getQuotesManyExactOut.bind(this.v2QuoteProvider);\n                beforeQuotes = Date.now();\n                log.info(\"Getting quotes for V2 for \".concat(routes.length, \" routes with \").concat(amounts.length, \" amounts per route.\"));\n                _context5.next = 16;\n                return quoteFn(amounts, routes);\n\n              case 16:\n                _yield$quoteFn2 = _context5.sent;\n                routesWithQuotes = _yield$quoteFn2.routesWithQuotes;\n                _context5.next = 20;\n                return this.v2GasModelFactory.buildGasModel(this.chainId, gasPriceWei, this.v2PoolProvider, quoteToken);\n\n              case 20:\n                gasModel = _context5.sent;\n                metric.putMetric('V2QuotesLoad', Date.now() - beforeQuotes, MetricLoggerUnit.Milliseconds);\n                metric.putMetric('V2QuotesFetched', _(routesWithQuotes).map(function (_ref7) {\n                  var _ref8 = _slicedToArray(_ref7, 2),\n                      quotes = _ref8[1];\n\n                  return quotes.length;\n                }).sum(), MetricLoggerUnit.Count);\n                routesWithValidQuotes = [];\n                _iterator3 = _createForOfIteratorHelper(routesWithQuotes);\n                _context5.prev = 25;\n\n                _iterator3.s();\n\n              case 27:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context5.next = 45;\n                  break;\n                }\n\n                routeWithQuote = _step3.value;\n                _routeWithQuote2 = _slicedToArray(routeWithQuote, 2), route = _routeWithQuote2[0], quotes = _routeWithQuote2[1];\n                i = 0;\n\n              case 31:\n                if (!(i < quotes.length)) {\n                  _context5.next = 43;\n                  break;\n                }\n\n                percent = percents[i];\n                amountQuote = quotes[i];\n                quote = amountQuote.quote, amount = amountQuote.amount;\n\n                if (quote) {\n                  _context5.next = 38;\n                  break;\n                }\n\n                log.debug({\n                  route: routeToString(route),\n                  amountQuote: amountQuote\n                }, 'Dropping a null V2 quote for route.');\n                return _context5.abrupt(\"continue\", 40);\n\n              case 38:\n                routeWithValidQuote = new V2RouteWithValidQuote({\n                  route: route,\n                  rawQuote: quote,\n                  amount: amount,\n                  percent: percent,\n                  gasModel: gasModel,\n                  quoteToken: quoteToken,\n                  tradeType: swapType,\n                  v2PoolProvider: this.v2PoolProvider\n                });\n                routesWithValidQuotes.push(routeWithValidQuote);\n\n              case 40:\n                i++;\n                _context5.next = 31;\n                break;\n\n              case 43:\n                _context5.next = 27;\n                break;\n\n              case 45:\n                _context5.next = 50;\n                break;\n\n              case 47:\n                _context5.prev = 47;\n                _context5.t0 = _context5[\"catch\"](25);\n\n                _iterator3.e(_context5.t0);\n\n              case 50:\n                _context5.prev = 50;\n\n                _iterator3.f();\n\n                return _context5.finish(50);\n\n              case 53:\n                return _context5.abrupt(\"return\", {\n                  routesWithValidQuotes: routesWithValidQuotes,\n                  candidatePools: candidatePools\n                });\n\n              case 54:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee4, this, [[25, 47, 50, 53]]);\n      }));\n\n      function getV2Quotes(_x18, _x19, _x20, _x21, _x22, _x23, _x24, _x25) {\n        return _getV2Quotes.apply(this, arguments);\n      }\n\n      return getV2Quotes;\n    }() // Note multiplications here can result in a loss of precision in the amounts (e.g. taking 50% of 101)\n    // This is reconcilled at the end of the algorithm by adding any lost precision to one of\n    // the splits in the route.\n\n  }, {\n    key: \"getAmountDistribution\",\n    value: function getAmountDistribution(amount, routingConfig) {\n      var distributionPercent = routingConfig.distributionPercent;\n      var percents = [];\n      var amounts = [];\n\n      for (var i = 1; i <= 100 / distributionPercent; i++) {\n        percents.push(i * distributionPercent);\n        amounts.push(amount.multiply(new Fraction(i * distributionPercent, 100)));\n      }\n\n      return [percents, amounts];\n    }\n  }, {\n    key: \"buildTrade\",\n    value: function buildTrade(tokenInCurrency, tokenOutCurrency, tradeType, routeAmounts) {\n      var _$partition = _.partition(routeAmounts, function (routeAmount) {\n        return routeAmount.protocol == Protocol.V3;\n      }),\n          _$partition2 = _slicedToArray(_$partition, 2),\n          v3RouteAmounts = _$partition2[0],\n          v2RouteAmounts = _$partition2[1];\n\n      var v3Routes = _.map(v3RouteAmounts, function (routeAmount) {\n        var route = routeAmount.route,\n            amount = routeAmount.amount,\n            quote = routeAmount.quote; // The route, amount and quote are all in terms of wrapped tokens.\n        // When constructing the Trade object the inputAmount/outputAmount must\n        // use native currencies if specified by the user. This is so that the Trade knows to wrap/unwrap.\n\n        if (tradeType == TradeType.EXACT_INPUT) {\n          var amountCurrency = CurrencyAmount.fromFractionalAmount(tokenInCurrency, amount.numerator, amount.denominator);\n          var quoteCurrency = CurrencyAmount.fromFractionalAmount(tokenOutCurrency, quote.numerator, quote.denominator);\n          var routeRaw = new V3RouteRaw(route.pools, amountCurrency.currency, quoteCurrency.currency);\n          return {\n            routev3: routeRaw,\n            inputAmount: amountCurrency,\n            outputAmount: quoteCurrency\n          };\n        } else {\n          var _quoteCurrency = CurrencyAmount.fromFractionalAmount(tokenInCurrency, quote.numerator, quote.denominator);\n\n          var _amountCurrency = CurrencyAmount.fromFractionalAmount(tokenOutCurrency, amount.numerator, amount.denominator);\n\n          var routeCurrency = new V3RouteRaw(route.pools, _quoteCurrency.currency, _amountCurrency.currency);\n          return {\n            routev3: routeCurrency,\n            inputAmount: _quoteCurrency,\n            outputAmount: _amountCurrency\n          };\n        }\n      });\n\n      var v2Routes = _.map(v2RouteAmounts, function (routeAmount) {\n        var route = routeAmount.route,\n            amount = routeAmount.amount,\n            quote = routeAmount.quote; // The route, amount and quote are all in terms of wrapped tokens.\n        // When constructing the Trade object the inputAmount/outputAmount must\n        // use native currencies if specified by the user. This is so that the Trade knows to wrap/unwrap.\n\n        if (tradeType == TradeType.EXACT_INPUT) {\n          var amountCurrency = CurrencyAmount.fromFractionalAmount(tokenInCurrency, amount.numerator, amount.denominator);\n          var quoteCurrency = CurrencyAmount.fromFractionalAmount(tokenOutCurrency, quote.numerator, quote.denominator);\n          var routeV2SDK = new V2RouteRaw(route.pairs, amountCurrency.currency, quoteCurrency.currency);\n          return {\n            routev2: routeV2SDK,\n            inputAmount: amountCurrency,\n            outputAmount: quoteCurrency\n          };\n        } else {\n          var _quoteCurrency2 = CurrencyAmount.fromFractionalAmount(tokenInCurrency, quote.numerator, quote.denominator);\n\n          var _amountCurrency2 = CurrencyAmount.fromFractionalAmount(tokenOutCurrency, amount.numerator, amount.denominator);\n\n          var _routeV2SDK = new V2RouteRaw(route.pairs, _quoteCurrency2.currency, _amountCurrency2.currency);\n\n          return {\n            routev2: _routeV2SDK,\n            inputAmount: _quoteCurrency2,\n            outputAmount: _amountCurrency2\n          };\n        }\n      });\n\n      var trade = new Trade({\n        v2Routes: v2Routes,\n        v3Routes: v3Routes,\n        tradeType: tradeType\n      });\n      return trade;\n    }\n  }, {\n    key: \"buildSwapMethodParameters\",\n    value: function buildSwapMethodParameters(trade, swapConfig) {\n      var recipient = swapConfig.recipient,\n          slippageTolerance = swapConfig.slippageTolerance,\n          deadline = swapConfig.deadline,\n          inputTokenPermit = swapConfig.inputTokenPermit;\n      return SwapRouter.swapCallParameters(trade, {\n        recipient: recipient,\n        slippageTolerance: slippageTolerance,\n        deadlineOrPreviousBlockhash: deadline,\n        inputTokenPermit: inputTokenPermit\n      });\n    }\n  }, {\n    key: \"buildSwapAndAddMethodParameters\",\n    value: function () {\n      var _buildSwapAndAddMethodParameters = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(trade, swapAndAddOptions, swapAndAddParameters) {\n        var _swapAndAddOptions$sw, recipient, slippageTolerance, deadline, inputTokenPermit, addLiquidityConfig, preLiquidityPosition, finalBalanceTokenIn, finalBalanceTokenOut, approvalTypes, zeroForOne;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _swapAndAddOptions$sw = swapAndAddOptions.swapOptions, recipient = _swapAndAddOptions$sw.recipient, slippageTolerance = _swapAndAddOptions$sw.slippageTolerance, deadline = _swapAndAddOptions$sw.deadline, inputTokenPermit = _swapAndAddOptions$sw.inputTokenPermit, addLiquidityConfig = swapAndAddOptions.addLiquidityOptions;\n                preLiquidityPosition = swapAndAddParameters.preLiquidityPosition;\n                finalBalanceTokenIn = swapAndAddParameters.initialBalanceTokenIn.subtract(trade.inputAmount);\n                finalBalanceTokenOut = swapAndAddParameters.initialBalanceTokenOut.add(trade.outputAmount);\n                _context6.next = 6;\n                return this.swapRouterProvider.getApprovalType(finalBalanceTokenIn, finalBalanceTokenOut);\n\n              case 6:\n                approvalTypes = _context6.sent;\n                zeroForOne = finalBalanceTokenIn.currency.wrapped.sortsBefore(finalBalanceTokenOut.currency.wrapped);\n                return _context6.abrupt(\"return\", SwapRouter.swapAndAddCallParameters(trade, {\n                  recipient: recipient,\n                  slippageTolerance: slippageTolerance,\n                  deadlineOrPreviousBlockhash: deadline,\n                  inputTokenPermit: inputTokenPermit\n                }, Position.fromAmounts({\n                  pool: preLiquidityPosition.pool,\n                  tickLower: preLiquidityPosition.tickLower,\n                  tickUpper: preLiquidityPosition.tickUpper,\n                  amount0: zeroForOne ? finalBalanceTokenIn.quotient.toString() : finalBalanceTokenOut.quotient.toString(),\n                  amount1: zeroForOne ? finalBalanceTokenOut.quotient.toString() : finalBalanceTokenIn.quotient.toString(),\n                  useFullPrecision: false\n                }), addLiquidityConfig, approvalTypes.approvalTokenIn, approvalTypes.approvalTokenOut));\n\n              case 9:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function buildSwapAndAddMethodParameters(_x26, _x27, _x28) {\n        return _buildSwapAndAddMethodParameters.apply(this, arguments);\n      }\n\n      return buildSwapAndAddMethodParameters;\n    }()\n  }, {\n    key: \"emitPoolSelectionMetrics\",\n    value: function emitPoolSelectionMetrics(swapRouteRaw, allPoolsBySelection) {\n      var poolAddressesUsed = new Set();\n      var routeAmounts = swapRouteRaw.routes;\n\n      _(routeAmounts).flatMap(function (routeAmount) {\n        var poolAddresses = routeAmount.poolAddresses;\n        return poolAddresses;\n      }).forEach(function (address) {\n        poolAddressesUsed.add(address.toLowerCase());\n      });\n\n      var _iterator4 = _createForOfIteratorHelper(allPoolsBySelection),\n          _step4;\n\n      try {\n        var _loop2 = function _loop2() {\n          var poolsBySelection = _step4.value;\n          var protocol = poolsBySelection.protocol;\n\n          _.forIn(poolsBySelection.selections, function (pools, topNSelection) {\n            var topNUsed = _.findLastIndex(pools, function (pool) {\n              return poolAddressesUsed.has(pool.id.toLowerCase());\n            }) + 1;\n            metric.putMetric(_.capitalize(\"\".concat(protocol).concat(topNSelection)), topNUsed, MetricLoggerUnit.Count);\n          });\n        };\n\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          _loop2();\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      var hasV3Route = false;\n      var hasV2Route = false;\n\n      var _iterator5 = _createForOfIteratorHelper(routeAmounts),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var routeAmount = _step5.value;\n\n          if (routeAmount.protocol == Protocol.V3) {\n            hasV3Route = true;\n          }\n\n          if (routeAmount.protocol == Protocol.V2) {\n            hasV2Route = true;\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      if (hasV3Route && hasV2Route) {\n        metric.putMetric(\"V3AndV2SplitRoute\", 1, MetricLoggerUnit.Count);\n      } else if (hasV3Route) {\n        if (routeAmounts.length > 1) {\n          metric.putMetric(\"V3SplitRoute\", 1, MetricLoggerUnit.Count);\n        } else {\n          metric.putMetric(\"V3Route\", 1, MetricLoggerUnit.Count);\n        }\n      } else if (hasV2Route) {\n        if (routeAmounts.length > 1) {\n          metric.putMetric(\"V2SplitRoute\", 1, MetricLoggerUnit.Count);\n        } else {\n          metric.putMetric(\"V2Route\", 1, MetricLoggerUnit.Count);\n        }\n      }\n    }\n  }, {\n    key: \"calculateOptimalRatio\",\n    value: function calculateOptimalRatio(position, sqrtRatioX96, zeroForOne) {\n      var upperSqrtRatioX96 = TickMath.getSqrtRatioAtTick(position.tickUpper);\n      var lowerSqrtRatioX96 = TickMath.getSqrtRatioAtTick(position.tickLower); // returns Fraction(0, 1) for any out of range position regardless of zeroForOne. Implication: function\n      // cannot be used to determine the trading direction of out of range positions.\n\n      if (JSBI.greaterThan(sqrtRatioX96, upperSqrtRatioX96) || JSBI.lessThan(sqrtRatioX96, lowerSqrtRatioX96)) {\n        return new Fraction(0, 1);\n      }\n\n      var precision = JSBI.BigInt('1' + '0'.repeat(18));\n      var optimalRatio = new Fraction(SqrtPriceMath.getAmount0Delta(sqrtRatioX96, upperSqrtRatioX96, precision, true), SqrtPriceMath.getAmount1Delta(sqrtRatioX96, lowerSqrtRatioX96, precision, true));\n      if (!zeroForOne) optimalRatio = optimalRatio.invert();\n      return optimalRatio;\n    }\n  }, {\n    key: \"absoluteValue\",\n    value: function absoluteValue(fraction) {\n      var numeratorAbs = JSBI.lessThan(fraction.numerator, JSBI.BigInt(0)) ? JSBI.unaryMinus(fraction.numerator) : fraction.numerator;\n      var denominatorAbs = JSBI.lessThan(fraction.denominator, JSBI.BigInt(0)) ? JSBI.unaryMinus(fraction.denominator) : fraction.denominator;\n      return new Fraction(numeratorAbs, denominatorAbs);\n    }\n  }]);\n\n  return AlphaRouter;\n}();","map":{"version":3,"sources":["../../../../../src/routers/alpha-router/alpha-router.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import DEFAULT_TOKEN_LIST from '@uniswap/default-token-list';\nimport { Protocol, SwapRouter, Trade } from '@uniswap/router-sdk';\nimport { Fraction, TradeType } from '@uniswap/sdk-core';\nimport { Route as V2RouteRaw } from '@uniswap/v2-sdk';\nimport { Pool, Position, Route as V3RouteRaw, SqrtPriceMath, TickMath, } from '@uniswap/v3-sdk';\nimport { BigNumber, providers } from 'ethers';\nimport JSBI from 'jsbi';\nimport _ from 'lodash';\nimport NodeCache from 'node-cache';\nimport { V3HeuristicGasModelFactory } from '.';\nimport { CachingGasStationProvider, CachingTokenProviderWithFallback, CachingV2SubgraphProvider, CachingV3PoolProvider, CachingV3SubgraphProvider, EIP1559GasPriceProvider, ETHGasStationInfoProvider, LegacyGasPriceProvider, NodeJSCache, OnChainGasPriceProvider, StaticV2SubgraphProvider, StaticV3SubgraphProvider, SwapRouterProvider, UniswapMulticallProvider, URISubgraphProvider, V2QuoteProvider, V2SubgraphProviderWithFallBacks, V3SubgraphProviderWithFallBacks, } from '../../providers';\nimport { CachingTokenListProvider, } from '../../providers/caching-token-list-provider';\nimport { TokenProvider } from '../../providers/token-provider';\nimport { V2PoolProvider, } from '../../providers/v2/pool-provider';\nimport { V3PoolProvider, } from '../../providers/v3/pool-provider';\nimport { V3QuoteProvider, } from '../../providers/v3/quote-provider';\nimport { CurrencyAmount } from '../../util/amounts';\nimport { ChainId, ID_TO_CHAIN_ID, ID_TO_NETWORK_NAME } from '../../util/chains';\nimport { log } from '../../util/log';\nimport { metric, MetricLoggerUnit } from '../../util/metric';\nimport { routeToString } from '../../util/routes';\nimport { UNSUPPORTED_TOKENS } from '../../util/unsupported-tokens';\nimport { SwapToRatioStatus, } from '../router';\nimport { DEFAULT_ROUTING_CONFIG_BY_CHAIN, ETH_GAS_STATION_API_URL, } from './config';\nimport { V2RouteWithValidQuote, V3RouteWithValidQuote, } from './entities/route-with-valid-quote';\nimport { getBestSwapRoute } from './functions/best-swap-route';\nimport { calculateRatioAmountIn } from './functions/calculate-ratio-amount-in';\nimport { computeAllV2Routes, computeAllV3Routes, } from './functions/compute-all-routes';\nimport { getV2CandidatePools, getV3CandidatePools as getV3CandidatePools, } from './functions/get-candidate-pools';\nimport { V2HeuristicGasModelFactory } from './gas-models/v2/v2-heuristic-gas-model';\nexport class AlphaRouter {\n    constructor({ chainId, provider, multicall2Provider, v3PoolProvider, v3QuoteProvider, v2PoolProvider, v2QuoteProvider, v2SubgraphProvider, tokenProvider, blockedTokenListProvider, v3SubgraphProvider, gasPriceProvider, v3GasModelFactory, v2GasModelFactory, swapRouterProvider, }) {\n        this.chainId = chainId;\n        this.provider = provider;\n        this.multicall2Provider =\n            multicall2Provider !== null && multicall2Provider !== void 0 ? multicall2Provider : new UniswapMulticallProvider(chainId, provider, 375000);\n        this.v3PoolProvider =\n            v3PoolProvider !== null && v3PoolProvider !== void 0 ? v3PoolProvider : new CachingV3PoolProvider(this.chainId, new V3PoolProvider(ID_TO_CHAIN_ID(chainId), this.multicall2Provider), new NodeJSCache(new NodeCache({ stdTTL: 360, useClones: false })));\n        if (v3QuoteProvider) {\n            this.v3QuoteProvider = v3QuoteProvider;\n        }\n        else {\n            switch (chainId) {\n                case ChainId.OPTIMISM:\n                case ChainId.OPTIMISTIC_KOVAN:\n                    this.v3QuoteProvider = new V3QuoteProvider(chainId, provider, this.multicall2Provider, {\n                        retries: 2,\n                        minTimeout: 100,\n                        maxTimeout: 1000,\n                    }, {\n                        multicallChunk: 110,\n                        gasLimitPerCall: 1200000,\n                        quoteMinSuccessRate: 0.1,\n                    }, {\n                        gasLimitOverride: 3000000,\n                        multicallChunk: 45,\n                    }, {\n                        gasLimitOverride: 3000000,\n                        multicallChunk: 45,\n                    }, {\n                        baseBlockOffset: -10,\n                        rollback: {\n                            enabled: true,\n                            attemptsBeforeRollback: 1,\n                            rollbackBlockOffset: -10,\n                        },\n                    });\n                    break;\n                case ChainId.ARBITRUM_ONE:\n                case ChainId.ARBITRUM_RINKEBY:\n                    this.v3QuoteProvider = new V3QuoteProvider(chainId, provider, this.multicall2Provider, {\n                        retries: 2,\n                        minTimeout: 100,\n                        maxTimeout: 1000,\n                    }, {\n                        multicallChunk: 10,\n                        gasLimitPerCall: 12000000,\n                        quoteMinSuccessRate: 0.1,\n                    }, {\n                        gasLimitOverride: 30000000,\n                        multicallChunk: 6,\n                    }, {\n                        gasLimitOverride: 30000000,\n                        multicallChunk: 6,\n                    });\n                    break;\n                default:\n                    this.v3QuoteProvider = new V3QuoteProvider(chainId, provider, this.multicall2Provider, {\n                        retries: 2,\n                        minTimeout: 100,\n                        maxTimeout: 1000,\n                    }, {\n                        multicallChunk: 210,\n                        gasLimitPerCall: 705000,\n                        quoteMinSuccessRate: 0.15,\n                    }, {\n                        gasLimitOverride: 2000000,\n                        multicallChunk: 70,\n                    });\n                    break;\n            }\n        }\n        this.v2PoolProvider =\n            v2PoolProvider !== null && v2PoolProvider !== void 0 ? v2PoolProvider : new V2PoolProvider(chainId, this.multicall2Provider);\n        this.v2QuoteProvider = v2QuoteProvider !== null && v2QuoteProvider !== void 0 ? v2QuoteProvider : new V2QuoteProvider();\n        this.blockedTokenListProvider =\n            blockedTokenListProvider !== null && blockedTokenListProvider !== void 0 ? blockedTokenListProvider : new CachingTokenListProvider(chainId, UNSUPPORTED_TOKENS, new NodeJSCache(new NodeCache({ stdTTL: 3600, useClones: false })));\n        this.tokenProvider =\n            tokenProvider !== null && tokenProvider !== void 0 ? tokenProvider : new CachingTokenProviderWithFallback(chainId, new NodeJSCache(new NodeCache({ stdTTL: 3600, useClones: false })), new CachingTokenListProvider(chainId, DEFAULT_TOKEN_LIST, new NodeJSCache(new NodeCache({ stdTTL: 3600, useClones: false }))), new TokenProvider(chainId, this.multicall2Provider));\n        const chainName = ID_TO_NETWORK_NAME(chainId);\n        // ipfs urls in the following format: `https://cloudflare-ipfs.com/ipns/api.uniswap.org/v1/pools/${protocol}/${chainName}.json`;\n        if (v2SubgraphProvider) {\n            this.v2SubgraphProvider = v2SubgraphProvider;\n        }\n        else {\n            this.v2SubgraphProvider = new V2SubgraphProviderWithFallBacks([\n                new CachingV2SubgraphProvider(chainId, new URISubgraphProvider(chainId, `https://cloudflare-ipfs.com/ipns/api.uniswap.org/v1/pools/v2/${chainName}.json`, undefined, 0), new NodeJSCache(new NodeCache({ stdTTL: 300, useClones: false }))),\n                new StaticV2SubgraphProvider(chainId),\n            ]);\n        }\n        if (v3SubgraphProvider) {\n            this.v3SubgraphProvider = v3SubgraphProvider;\n        }\n        else {\n            this.v3SubgraphProvider = new V3SubgraphProviderWithFallBacks([\n                new CachingV3SubgraphProvider(chainId, new URISubgraphProvider(chainId, `https://cloudflare-ipfs.com/ipns/api.uniswap.org/v1/pools/v3/${chainName}.json`, undefined, 0), new NodeJSCache(new NodeCache({ stdTTL: 300, useClones: false }))),\n                new StaticV3SubgraphProvider(chainId, this.v3PoolProvider),\n            ]);\n        }\n        this.gasPriceProvider =\n            gasPriceProvider !== null && gasPriceProvider !== void 0 ? gasPriceProvider : new CachingGasStationProvider(chainId, this.provider instanceof providers.JsonRpcProvider\n                ? new OnChainGasPriceProvider(chainId, new EIP1559GasPriceProvider(this.provider), new LegacyGasPriceProvider(this.provider))\n                : new ETHGasStationInfoProvider(ETH_GAS_STATION_API_URL), new NodeJSCache(new NodeCache({ stdTTL: 15, useClones: false })));\n        this.v3GasModelFactory =\n            v3GasModelFactory !== null && v3GasModelFactory !== void 0 ? v3GasModelFactory : new V3HeuristicGasModelFactory();\n        this.v2GasModelFactory =\n            v2GasModelFactory !== null && v2GasModelFactory !== void 0 ? v2GasModelFactory : new V2HeuristicGasModelFactory();\n        this.swapRouterProvider =\n            swapRouterProvider !== null && swapRouterProvider !== void 0 ? swapRouterProvider : new SwapRouterProvider(this.multicall2Provider);\n    }\n    async routeToRatio(token0Balance, token1Balance, position, swapAndAddConfig, swapAndAddOptions, routingConfig = DEFAULT_ROUTING_CONFIG_BY_CHAIN(this.chainId)) {\n        if (token1Balance.currency.wrapped.sortsBefore(token0Balance.currency.wrapped)) {\n            [token0Balance, token1Balance] = [token1Balance, token0Balance];\n        }\n        let preSwapOptimalRatio = this.calculateOptimalRatio(position, position.pool.sqrtRatioX96, true);\n        // set up parameters according to which token will be swapped\n        let zeroForOne;\n        if (position.pool.tickCurrent > position.tickUpper) {\n            zeroForOne = true;\n        }\n        else if (position.pool.tickCurrent < position.tickLower) {\n            zeroForOne = false;\n        }\n        else {\n            zeroForOne = new Fraction(token0Balance.quotient, token1Balance.quotient).greaterThan(preSwapOptimalRatio);\n            if (!zeroForOne)\n                preSwapOptimalRatio = preSwapOptimalRatio.invert();\n        }\n        const [inputBalance, outputBalance] = zeroForOne\n            ? [token0Balance, token1Balance]\n            : [token1Balance, token0Balance];\n        let optimalRatio = preSwapOptimalRatio;\n        let postSwapTargetPool = position.pool;\n        let exchangeRate = zeroForOne\n            ? position.pool.token0Price\n            : position.pool.token1Price;\n        let swap = null;\n        let ratioAchieved = false;\n        let n = 0;\n        // iterate until we find a swap with a sufficient ratio or return null\n        while (!ratioAchieved) {\n            n++;\n            if (n > swapAndAddConfig.maxIterations) {\n                log.info('max iterations exceeded');\n                return {\n                    status: SwapToRatioStatus.NO_ROUTE_FOUND,\n                    error: 'max iterations exceeded',\n                };\n            }\n            let amountToSwap = calculateRatioAmountIn(optimalRatio, exchangeRate, inputBalance, outputBalance);\n            if (amountToSwap.equalTo(0)) {\n                log.info(`no swap needed`);\n                return {\n                    status: SwapToRatioStatus.NO_SWAP_NEEDED,\n                };\n            }\n            swap = await this.route(amountToSwap, outputBalance.currency, TradeType.EXACT_INPUT, undefined, {\n                ...DEFAULT_ROUTING_CONFIG_BY_CHAIN(this.chainId),\n                ...routingConfig,\n                protocols: [Protocol.V3, Protocol.V2],\n            });\n            if (!swap) {\n                return {\n                    status: SwapToRatioStatus.NO_ROUTE_FOUND,\n                    error: 'no route found',\n                };\n            }\n            let inputBalanceUpdated = inputBalance.subtract(swap.trade.inputAmount);\n            let outputBalanceUpdated = outputBalance.add(swap.trade.outputAmount);\n            let newRatio = inputBalanceUpdated.divide(outputBalanceUpdated);\n            let targetPoolPriceUpdate;\n            swap.route.forEach((route) => {\n                if (route.protocol == Protocol.V3) {\n                    const v3Route = route;\n                    v3Route.route.pools.forEach((pool, i) => {\n                        if (pool.token0.equals(position.pool.token0) &&\n                            pool.token1.equals(position.pool.token1) &&\n                            pool.fee == position.pool.fee) {\n                            targetPoolPriceUpdate = JSBI.BigInt(v3Route.sqrtPriceX96AfterList[i].toString());\n                            optimalRatio = this.calculateOptimalRatio(position, JSBI.BigInt(targetPoolPriceUpdate.toString()), zeroForOne);\n                        }\n                    });\n                }\n            });\n            if (!targetPoolPriceUpdate) {\n                optimalRatio = preSwapOptimalRatio;\n            }\n            ratioAchieved =\n                newRatio.equalTo(optimalRatio) ||\n                    this.absoluteValue(newRatio.asFraction.divide(optimalRatio).subtract(1)).lessThan(swapAndAddConfig.ratioErrorTolerance);\n            if (ratioAchieved && targetPoolPriceUpdate) {\n                postSwapTargetPool = new Pool(position.pool.token0, position.pool.token1, position.pool.fee, targetPoolPriceUpdate, position.pool.liquidity, TickMath.getTickAtSqrtRatio(targetPoolPriceUpdate), position.pool.tickDataProvider);\n            }\n            exchangeRate = swap.trade.outputAmount.divide(swap.trade.inputAmount);\n            log.info({\n                optimalRatio: optimalRatio.asFraction.toFixed(18),\n                newRatio: newRatio.asFraction.toFixed(18),\n                ratioErrorTolerance: swapAndAddConfig.ratioErrorTolerance.toFixed(18),\n                iterationN: n.toString(),\n            });\n        }\n        if (!swap) {\n            return {\n                status: SwapToRatioStatus.NO_ROUTE_FOUND,\n                error: 'no route found',\n            };\n        }\n        let methodParameters;\n        if (swapAndAddOptions) {\n            methodParameters = await this.buildSwapAndAddMethodParameters(swap.trade, swapAndAddOptions, {\n                initialBalanceTokenIn: inputBalance,\n                initialBalanceTokenOut: outputBalance,\n                preLiquidityPosition: position,\n            });\n        }\n        return {\n            status: SwapToRatioStatus.SUCCESS,\n            result: { ...swap, methodParameters, optimalRatio, postSwapTargetPool },\n        };\n    }\n    /**\n     * @inheritdoc IRouter\n     */\n    async route(amount, quoteCurrency, tradeType, swapConfig, partialRoutingConfig = {}) {\n        var _a;\n        metric.putMetric(`QuoteRequestedForChain${this.chainId}`, 1, MetricLoggerUnit.Count);\n        // Get a block number to specify in all our calls. Ensures data we fetch from chain is\n        // from the same block.\n        const blockNumber = (_a = partialRoutingConfig.blockNumber) !== null && _a !== void 0 ? _a : this.provider.getBlockNumber();\n        const routingConfig = _.merge({}, DEFAULT_ROUTING_CONFIG_BY_CHAIN(this.chainId), partialRoutingConfig, { blockNumber });\n        const { protocols } = routingConfig;\n        const currencyIn = tradeType == TradeType.EXACT_INPUT ? amount.currency : quoteCurrency;\n        const currencyOut = tradeType == TradeType.EXACT_INPUT ? quoteCurrency : amount.currency;\n        const tokenIn = currencyIn.wrapped;\n        const tokenOut = currencyOut.wrapped;\n        // Generate our distribution of amounts, i.e. fractions of the input amount.\n        // We will get quotes for fractions of the input amount for different routes, then\n        // combine to generate split routes.\n        const [percents, amounts] = this.getAmountDistribution(amount, routingConfig);\n        // Get an estimate of the gas price to use when estimating gas cost of different routes.\n        const beforeGas = Date.now();\n        const { gasPriceWei } = await this.gasPriceProvider.getGasPrice();\n        metric.putMetric('GasPriceLoad', Date.now() - beforeGas, MetricLoggerUnit.Milliseconds);\n        const quoteToken = quoteCurrency.wrapped;\n        const quotePromises = [];\n        const protocolsSet = new Set(protocols !== null && protocols !== void 0 ? protocols : []);\n        if (protocolsSet.size == 0 ||\n            (protocolsSet.has(Protocol.V2) && protocolsSet.has(Protocol.V3))) {\n            log.info({ protocols, tradeType }, 'Routing across all protocols');\n            quotePromises.push(this.getV3Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, gasPriceWei, tradeType, routingConfig));\n            quotePromises.push(this.getV2Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, gasPriceWei, tradeType, routingConfig));\n        }\n        else {\n            if (protocolsSet.has(Protocol.V3)) {\n                log.info({ protocols, swapType: tradeType }, 'Routing across V3');\n                quotePromises.push(this.getV3Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, gasPriceWei, tradeType, routingConfig));\n            }\n            if (protocolsSet.has(Protocol.V2)) {\n                log.info({ protocols, swapType: tradeType }, 'Routing across V2');\n                quotePromises.push(this.getV2Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, gasPriceWei, tradeType, routingConfig));\n            }\n        }\n        const routesWithValidQuotesByProtocol = await Promise.all(quotePromises);\n        let allRoutesWithValidQuotes = [];\n        let allCandidatePools = [];\n        for (const { routesWithValidQuotes, candidatePools, } of routesWithValidQuotesByProtocol) {\n            allRoutesWithValidQuotes = [\n                ...allRoutesWithValidQuotes,\n                ...routesWithValidQuotes,\n            ];\n            allCandidatePools = [...allCandidatePools, candidatePools];\n        }\n        if (allRoutesWithValidQuotes.length == 0) {\n            log.info({ allRoutesWithValidQuotes }, 'Received no valid quotes');\n            return null;\n        }\n        // Given all the quotes for all the amounts for all the routes, find the best combination.\n        const beforeBestSwap = Date.now();\n        const swapRouteRaw = getBestSwapRoute(amount, percents, allRoutesWithValidQuotes, tradeType, this.chainId, routingConfig);\n        if (!swapRouteRaw) {\n            return null;\n        }\n        const { quote, quoteGasAdjusted, estimatedGasUsed, routes: routeAmounts, estimatedGasUsedQuoteToken, estimatedGasUsedUSD, } = swapRouteRaw;\n        // Build Trade object that represents the optimal swap.\n        const trade = this.buildTrade(currencyIn, currencyOut, tradeType, routeAmounts);\n        let methodParameters;\n        // If user provided recipient, deadline etc. we also generate the calldata required to execute\n        // the swap and return it too.\n        if (swapConfig) {\n            methodParameters = this.buildSwapMethodParameters(trade, swapConfig);\n        }\n        metric.putMetric('FindBestSwapRoute', Date.now() - beforeBestSwap, MetricLoggerUnit.Milliseconds);\n        metric.putMetric(`QuoteFoundForChain${this.chainId}`, 1, MetricLoggerUnit.Count);\n        this.emitPoolSelectionMetrics(swapRouteRaw, allCandidatePools);\n        return {\n            quote,\n            quoteGasAdjusted,\n            estimatedGasUsed,\n            estimatedGasUsedQuoteToken,\n            estimatedGasUsedUSD,\n            gasPriceWei,\n            route: routeAmounts,\n            trade,\n            methodParameters,\n            blockNumber: BigNumber.from(await blockNumber),\n        };\n    }\n    async getV3Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, gasPriceWei, swapType, routingConfig) {\n        log.info('Starting to get V3 quotes');\n        // Fetch all the pools that we will consider routing via. There are thousands\n        // of pools, so we filter them to a set of candidate pools that we expect will\n        // result in good prices.\n        const { poolAccessor, candidatePools } = await getV3CandidatePools({\n            tokenIn,\n            tokenOut,\n            tokenProvider: this.tokenProvider,\n            blockedTokenListProvider: this.blockedTokenListProvider,\n            poolProvider: this.v3PoolProvider,\n            routeType: swapType,\n            subgraphProvider: this.v3SubgraphProvider,\n            routingConfig,\n            chainId: this.chainId,\n        });\n        const pools = poolAccessor.getAllPools();\n        // Given all our candidate pools, compute all the possible ways to route from tokenIn to tokenOut.\n        const { maxSwapsPerPath } = routingConfig;\n        const routes = computeAllV3Routes(tokenIn, tokenOut, pools, maxSwapsPerPath);\n        if (routes.length == 0) {\n            return { routesWithValidQuotes: [], candidatePools };\n        }\n        // For all our routes, and all the fractional amounts, fetch quotes on-chain.\n        const quoteFn = swapType == TradeType.EXACT_INPUT\n            ? this.v3QuoteProvider.getQuotesManyExactIn.bind(this.v3QuoteProvider)\n            : this.v3QuoteProvider.getQuotesManyExactOut.bind(this.v3QuoteProvider);\n        const beforeQuotes = Date.now();\n        log.info(`Getting quotes for V3 for ${routes.length} routes with ${amounts.length} amounts per route.`);\n        const { routesWithQuotes } = await quoteFn(amounts, routes, {\n            blockNumber: routingConfig.blockNumber,\n        });\n        const gasModel = await this.v3GasModelFactory.buildGasModel(this.chainId, gasPriceWei, this.v3PoolProvider, quoteToken);\n        metric.putMetric('V3QuotesLoad', Date.now() - beforeQuotes, MetricLoggerUnit.Milliseconds);\n        metric.putMetric('V3QuotesFetched', _(routesWithQuotes)\n            .map(([, quotes]) => quotes.length)\n            .sum(), MetricLoggerUnit.Count);\n        const routesWithValidQuotes = [];\n        for (const routeWithQuote of routesWithQuotes) {\n            const [route, quotes] = routeWithQuote;\n            for (let i = 0; i < quotes.length; i++) {\n                const percent = percents[i];\n                const amountQuote = quotes[i];\n                const { quote, amount, sqrtPriceX96AfterList, initializedTicksCrossedList, gasEstimate, } = amountQuote;\n                if (!quote ||\n                    !sqrtPriceX96AfterList ||\n                    !initializedTicksCrossedList ||\n                    !gasEstimate) {\n                    log.debug({\n                        route: routeToString(route),\n                        amountQuote,\n                    }, 'Dropping a null V3 quote for route.');\n                    continue;\n                }\n                const routeWithValidQuote = new V3RouteWithValidQuote({\n                    route,\n                    rawQuote: quote,\n                    amount,\n                    percent,\n                    sqrtPriceX96AfterList,\n                    initializedTicksCrossedList,\n                    quoterGasEstimate: gasEstimate,\n                    gasModel,\n                    quoteToken,\n                    tradeType: swapType,\n                    v3PoolProvider: this.v3PoolProvider,\n                });\n                routesWithValidQuotes.push(routeWithValidQuote);\n            }\n        }\n        return { routesWithValidQuotes, candidatePools };\n    }\n    async getV2Quotes(tokenIn, tokenOut, amounts, percents, quoteToken, gasPriceWei, swapType, routingConfig) {\n        log.info('Starting to get V2 quotes');\n        // Fetch all the pools that we will consider routing via. There are thousands\n        // of pools, so we filter them to a set of candidate pools that we expect will\n        // result in good prices.\n        const { poolAccessor, candidatePools } = await getV2CandidatePools({\n            tokenIn,\n            tokenOut,\n            tokenProvider: this.tokenProvider,\n            blockedTokenListProvider: this.blockedTokenListProvider,\n            poolProvider: this.v2PoolProvider,\n            routeType: swapType,\n            subgraphProvider: this.v2SubgraphProvider,\n            routingConfig,\n            chainId: this.chainId,\n        });\n        const pools = poolAccessor.getAllPools();\n        // Given all our candidate pools, compute all the possible ways to route from tokenIn to tokenOut.\n        const { maxSwapsPerPath } = routingConfig;\n        const routes = computeAllV2Routes(tokenIn, tokenOut, pools, maxSwapsPerPath);\n        if (routes.length == 0) {\n            return { routesWithValidQuotes: [], candidatePools };\n        }\n        // For all our routes, and all the fractional amounts, fetch quotes on-chain.\n        const quoteFn = swapType == TradeType.EXACT_INPUT\n            ? this.v2QuoteProvider.getQuotesManyExactIn.bind(this.v2QuoteProvider)\n            : this.v2QuoteProvider.getQuotesManyExactOut.bind(this.v2QuoteProvider);\n        const beforeQuotes = Date.now();\n        log.info(`Getting quotes for V2 for ${routes.length} routes with ${amounts.length} amounts per route.`);\n        const { routesWithQuotes } = await quoteFn(amounts, routes);\n        const gasModel = await this.v2GasModelFactory.buildGasModel(this.chainId, gasPriceWei, this.v2PoolProvider, quoteToken);\n        metric.putMetric('V2QuotesLoad', Date.now() - beforeQuotes, MetricLoggerUnit.Milliseconds);\n        metric.putMetric('V2QuotesFetched', _(routesWithQuotes)\n            .map(([, quotes]) => quotes.length)\n            .sum(), MetricLoggerUnit.Count);\n        const routesWithValidQuotes = [];\n        for (const routeWithQuote of routesWithQuotes) {\n            const [route, quotes] = routeWithQuote;\n            for (let i = 0; i < quotes.length; i++) {\n                const percent = percents[i];\n                const amountQuote = quotes[i];\n                const { quote, amount } = amountQuote;\n                if (!quote) {\n                    log.debug({\n                        route: routeToString(route),\n                        amountQuote,\n                    }, 'Dropping a null V2 quote for route.');\n                    continue;\n                }\n                const routeWithValidQuote = new V2RouteWithValidQuote({\n                    route,\n                    rawQuote: quote,\n                    amount,\n                    percent,\n                    gasModel,\n                    quoteToken,\n                    tradeType: swapType,\n                    v2PoolProvider: this.v2PoolProvider,\n                });\n                routesWithValidQuotes.push(routeWithValidQuote);\n            }\n        }\n        return { routesWithValidQuotes, candidatePools };\n    }\n    // Note multiplications here can result in a loss of precision in the amounts (e.g. taking 50% of 101)\n    // This is reconcilled at the end of the algorithm by adding any lost precision to one of\n    // the splits in the route.\n    getAmountDistribution(amount, routingConfig) {\n        const { distributionPercent } = routingConfig;\n        let percents = [];\n        let amounts = [];\n        for (let i = 1; i <= 100 / distributionPercent; i++) {\n            percents.push(i * distributionPercent);\n            amounts.push(amount.multiply(new Fraction(i * distributionPercent, 100)));\n        }\n        return [percents, amounts];\n    }\n    buildTrade(tokenInCurrency, tokenOutCurrency, tradeType, routeAmounts) {\n        const [v3RouteAmounts, v2RouteAmounts] = _.partition(routeAmounts, (routeAmount) => routeAmount.protocol == Protocol.V3);\n        const v3Routes = _.map(v3RouteAmounts, (routeAmount) => {\n            const { route, amount, quote } = routeAmount;\n            // The route, amount and quote are all in terms of wrapped tokens.\n            // When constructing the Trade object the inputAmount/outputAmount must\n            // use native currencies if specified by the user. This is so that the Trade knows to wrap/unwrap.\n            if (tradeType == TradeType.EXACT_INPUT) {\n                const amountCurrency = CurrencyAmount.fromFractionalAmount(tokenInCurrency, amount.numerator, amount.denominator);\n                const quoteCurrency = CurrencyAmount.fromFractionalAmount(tokenOutCurrency, quote.numerator, quote.denominator);\n                const routeRaw = new V3RouteRaw(route.pools, amountCurrency.currency, quoteCurrency.currency);\n                return {\n                    routev3: routeRaw,\n                    inputAmount: amountCurrency,\n                    outputAmount: quoteCurrency,\n                };\n            }\n            else {\n                const quoteCurrency = CurrencyAmount.fromFractionalAmount(tokenInCurrency, quote.numerator, quote.denominator);\n                const amountCurrency = CurrencyAmount.fromFractionalAmount(tokenOutCurrency, amount.numerator, amount.denominator);\n                const routeCurrency = new V3RouteRaw(route.pools, quoteCurrency.currency, amountCurrency.currency);\n                return {\n                    routev3: routeCurrency,\n                    inputAmount: quoteCurrency,\n                    outputAmount: amountCurrency,\n                };\n            }\n        });\n        const v2Routes = _.map(v2RouteAmounts, (routeAmount) => {\n            const { route, amount, quote } = routeAmount;\n            // The route, amount and quote are all in terms of wrapped tokens.\n            // When constructing the Trade object the inputAmount/outputAmount must\n            // use native currencies if specified by the user. This is so that the Trade knows to wrap/unwrap.\n            if (tradeType == TradeType.EXACT_INPUT) {\n                const amountCurrency = CurrencyAmount.fromFractionalAmount(tokenInCurrency, amount.numerator, amount.denominator);\n                const quoteCurrency = CurrencyAmount.fromFractionalAmount(tokenOutCurrency, quote.numerator, quote.denominator);\n                const routeV2SDK = new V2RouteRaw(route.pairs, amountCurrency.currency, quoteCurrency.currency);\n                return {\n                    routev2: routeV2SDK,\n                    inputAmount: amountCurrency,\n                    outputAmount: quoteCurrency,\n                };\n            }\n            else {\n                const quoteCurrency = CurrencyAmount.fromFractionalAmount(tokenInCurrency, quote.numerator, quote.denominator);\n                const amountCurrency = CurrencyAmount.fromFractionalAmount(tokenOutCurrency, amount.numerator, amount.denominator);\n                const routeV2SDK = new V2RouteRaw(route.pairs, quoteCurrency.currency, amountCurrency.currency);\n                return {\n                    routev2: routeV2SDK,\n                    inputAmount: quoteCurrency,\n                    outputAmount: amountCurrency,\n                };\n            }\n        });\n        const trade = new Trade({ v2Routes, v3Routes, tradeType });\n        return trade;\n    }\n    buildSwapMethodParameters(trade, swapConfig) {\n        const { recipient, slippageTolerance, deadline, inputTokenPermit } = swapConfig;\n        return SwapRouter.swapCallParameters(trade, {\n            recipient,\n            slippageTolerance,\n            deadlineOrPreviousBlockhash: deadline,\n            inputTokenPermit,\n        });\n    }\n    async buildSwapAndAddMethodParameters(trade, swapAndAddOptions, swapAndAddParameters) {\n        const { swapOptions: { recipient, slippageTolerance, deadline, inputTokenPermit }, addLiquidityOptions: addLiquidityConfig, } = swapAndAddOptions;\n        const preLiquidityPosition = swapAndAddParameters.preLiquidityPosition;\n        const finalBalanceTokenIn = swapAndAddParameters.initialBalanceTokenIn.subtract(trade.inputAmount);\n        const finalBalanceTokenOut = swapAndAddParameters.initialBalanceTokenOut.add(trade.outputAmount);\n        const approvalTypes = await this.swapRouterProvider.getApprovalType(finalBalanceTokenIn, finalBalanceTokenOut);\n        const zeroForOne = finalBalanceTokenIn.currency.wrapped.sortsBefore(finalBalanceTokenOut.currency.wrapped);\n        return SwapRouter.swapAndAddCallParameters(trade, {\n            recipient,\n            slippageTolerance,\n            deadlineOrPreviousBlockhash: deadline,\n            inputTokenPermit,\n        }, Position.fromAmounts({\n            pool: preLiquidityPosition.pool,\n            tickLower: preLiquidityPosition.tickLower,\n            tickUpper: preLiquidityPosition.tickUpper,\n            amount0: zeroForOne\n                ? finalBalanceTokenIn.quotient.toString()\n                : finalBalanceTokenOut.quotient.toString(),\n            amount1: zeroForOne\n                ? finalBalanceTokenOut.quotient.toString()\n                : finalBalanceTokenIn.quotient.toString(),\n            useFullPrecision: false,\n        }), addLiquidityConfig, approvalTypes.approvalTokenIn, approvalTypes.approvalTokenOut);\n    }\n    emitPoolSelectionMetrics(swapRouteRaw, allPoolsBySelection) {\n        const poolAddressesUsed = new Set();\n        const { routes: routeAmounts } = swapRouteRaw;\n        _(routeAmounts)\n            .flatMap((routeAmount) => {\n            const { poolAddresses } = routeAmount;\n            return poolAddresses;\n        })\n            .forEach((address) => {\n            poolAddressesUsed.add(address.toLowerCase());\n        });\n        for (const poolsBySelection of allPoolsBySelection) {\n            const { protocol } = poolsBySelection;\n            _.forIn(poolsBySelection.selections, (pools, topNSelection) => {\n                const topNUsed = _.findLastIndex(pools, (pool) => poolAddressesUsed.has(pool.id.toLowerCase())) + 1;\n                metric.putMetric(_.capitalize(`${protocol}${topNSelection}`), topNUsed, MetricLoggerUnit.Count);\n            });\n        }\n        let hasV3Route = false;\n        let hasV2Route = false;\n        for (const routeAmount of routeAmounts) {\n            if (routeAmount.protocol == Protocol.V3) {\n                hasV3Route = true;\n            }\n            if (routeAmount.protocol == Protocol.V2) {\n                hasV2Route = true;\n            }\n        }\n        if (hasV3Route && hasV2Route) {\n            metric.putMetric(`V3AndV2SplitRoute`, 1, MetricLoggerUnit.Count);\n        }\n        else if (hasV3Route) {\n            if (routeAmounts.length > 1) {\n                metric.putMetric(`V3SplitRoute`, 1, MetricLoggerUnit.Count);\n            }\n            else {\n                metric.putMetric(`V3Route`, 1, MetricLoggerUnit.Count);\n            }\n        }\n        else if (hasV2Route) {\n            if (routeAmounts.length > 1) {\n                metric.putMetric(`V2SplitRoute`, 1, MetricLoggerUnit.Count);\n            }\n            else {\n                metric.putMetric(`V2Route`, 1, MetricLoggerUnit.Count);\n            }\n        }\n    }\n    calculateOptimalRatio(position, sqrtRatioX96, zeroForOne) {\n        const upperSqrtRatioX96 = TickMath.getSqrtRatioAtTick(position.tickUpper);\n        const lowerSqrtRatioX96 = TickMath.getSqrtRatioAtTick(position.tickLower);\n        // returns Fraction(0, 1) for any out of range position regardless of zeroForOne. Implication: function\n        // cannot be used to determine the trading direction of out of range positions.\n        if (JSBI.greaterThan(sqrtRatioX96, upperSqrtRatioX96) ||\n            JSBI.lessThan(sqrtRatioX96, lowerSqrtRatioX96)) {\n            return new Fraction(0, 1);\n        }\n        const precision = JSBI.BigInt('1' + '0'.repeat(18));\n        let optimalRatio = new Fraction(SqrtPriceMath.getAmount0Delta(sqrtRatioX96, upperSqrtRatioX96, precision, true), SqrtPriceMath.getAmount1Delta(sqrtRatioX96, lowerSqrtRatioX96, precision, true));\n        if (!zeroForOne)\n            optimalRatio = optimalRatio.invert();\n        return optimalRatio;\n    }\n    absoluteValue(fraction) {\n        const numeratorAbs = JSBI.lessThan(fraction.numerator, JSBI.BigInt(0))\n            ? JSBI.unaryMinus(fraction.numerator)\n            : fraction.numerator;\n        const denominatorAbs = JSBI.lessThan(fraction.denominator, JSBI.BigInt(0))\n            ? JSBI.unaryMinus(fraction.denominator)\n            : fraction.denominator;\n        return new Fraction(numeratorAbs, denominatorAbs);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,"]},"metadata":{},"sourceType":"module"}