{"ast":null,"code":"import _defineProperty from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";var _ETHERSCAN_PREFIXES;import{SupportedChainId}from'../constants/chains';var ETHERSCAN_PREFIXES=(_ETHERSCAN_PREFIXES={},_defineProperty(_ETHERSCAN_PREFIXES,SupportedChainId.MAINNET,'https://etherscan.io'),_defineProperty(_ETHERSCAN_PREFIXES,SupportedChainId.ROPSTEN,'https://ropsten.etherscan.io'),_defineProperty(_ETHERSCAN_PREFIXES,SupportedChainId.RINKEBY,'https://rinkeby.etherscan.io'),_defineProperty(_ETHERSCAN_PREFIXES,SupportedChainId.GOERLI,'https://goerli.etherscan.io'),_defineProperty(_ETHERSCAN_PREFIXES,SupportedChainId.KOVAN,'https://kovan.etherscan.io'),_defineProperty(_ETHERSCAN_PREFIXES,SupportedChainId.OPTIMISM,'https://optimistic.etherscan.io'),_defineProperty(_ETHERSCAN_PREFIXES,SupportedChainId.OPTIMISTIC_KOVAN,'https://kovan-optimistic.etherscan.io'),_defineProperty(_ETHERSCAN_PREFIXES,SupportedChainId.POLYGON_MUMBAI,'https://mumbai.polygonscan.com'),_defineProperty(_ETHERSCAN_PREFIXES,SupportedChainId.POLYGON,'https://polygonscan.com'),_ETHERSCAN_PREFIXES);export var ExplorerDataType;/**\n * Return the explorer link for the given data and data type\n * @param chainId the ID of the chain for which to return the data\n * @param data the data to return a link for\n * @param type the type of the data\n */(function(ExplorerDataType){ExplorerDataType[\"TRANSACTION\"]=\"transaction\";ExplorerDataType[\"TOKEN\"]=\"token\";ExplorerDataType[\"ADDRESS\"]=\"address\";ExplorerDataType[\"BLOCK\"]=\"block\";})(ExplorerDataType||(ExplorerDataType={}));export function getExplorerLink(chainId,data,type){var _ETHERSCAN_PREFIXES$c;if(chainId===SupportedChainId.ARBITRUM_ONE){switch(type){case ExplorerDataType.TRANSACTION:return\"https://arbiscan.io/tx/\".concat(data);case ExplorerDataType.ADDRESS:case ExplorerDataType.TOKEN:return\"https://arbiscan.io/address/\".concat(data);case ExplorerDataType.BLOCK:return\"https://arbiscan.io/block/\".concat(data);default:return\"https://arbiscan.io/\";}}if(chainId===SupportedChainId.ARBITRUM_RINKEBY){switch(type){case ExplorerDataType.TRANSACTION:return\"https://rinkeby-explorer.arbitrum.io/tx/\".concat(data);case ExplorerDataType.ADDRESS:case ExplorerDataType.TOKEN:return\"https://rinkeby-explorer.arbitrum.io/address/\".concat(data);case ExplorerDataType.BLOCK:return\"https://rinkeby-explorer.arbitrum.io/block/\".concat(data);default:return\"https://rinkeby-explorer.arbitrum.io/\";}}var prefix=(_ETHERSCAN_PREFIXES$c=ETHERSCAN_PREFIXES[chainId])!==null&&_ETHERSCAN_PREFIXES$c!==void 0?_ETHERSCAN_PREFIXES$c:'https://etherscan.io';switch(type){case ExplorerDataType.TRANSACTION:return\"\".concat(prefix,\"/tx/\").concat(data);case ExplorerDataType.TOKEN:return\"\".concat(prefix,\"/token/\").concat(data);case ExplorerDataType.BLOCK:if(chainId===SupportedChainId.OPTIMISM||chainId===SupportedChainId.OPTIMISTIC_KOVAN){return\"\".concat(prefix,\"/tx/\").concat(data);}return\"\".concat(prefix,\"/block/\").concat(data);case ExplorerDataType.ADDRESS:return\"\".concat(prefix,\"/address/\").concat(data);default:return\"\".concat(prefix);}}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/utils/getExplorerLink.ts"],"names":["SupportedChainId","ETHERSCAN_PREFIXES","MAINNET","ROPSTEN","RINKEBY","GOERLI","KOVAN","OPTIMISM","OPTIMISTIC_KOVAN","POLYGON_MUMBAI","POLYGON","ExplorerDataType","getExplorerLink","chainId","data","type","ARBITRUM_ONE","TRANSACTION","ADDRESS","TOKEN","BLOCK","ARBITRUM_RINKEBY","prefix"],"mappings":"yLAAA,OAASA,gBAAT,KAAiC,qBAAjC,CAEA,GAAMC,CAAAA,kBAAiD,6DACpDD,gBAAgB,CAACE,OADmC,CACzB,sBADyB,sCAEpDF,gBAAgB,CAACG,OAFmC,CAEzB,8BAFyB,sCAGpDH,gBAAgB,CAACI,OAHmC,CAGzB,8BAHyB,sCAIpDJ,gBAAgB,CAACK,MAJmC,CAI1B,6BAJ0B,sCAKpDL,gBAAgB,CAACM,KALmC,CAK3B,4BAL2B,sCAMpDN,gBAAgB,CAACO,QANmC,CAMxB,iCANwB,sCAOpDP,gBAAgB,CAACQ,gBAPmC,CAOhB,uCAPgB,sCAQpDR,gBAAgB,CAACS,cARmC,CAQlB,gCARkB,sCASpDT,gBAAgB,CAACU,OATmC,CASzB,yBATyB,sBAAvD,CAYA,UAAYC,CAAAA,gBAAZ,CAOA;AACA;AACA;AACA;AACA;AACA,G,UAZYA,gB,EAAAA,gB,8BAAAA,gB,kBAAAA,gB,sBAAAA,gB,qBAAAA,gB,GAAAA,gB,MAaZ,MAAO,SAASC,CAAAA,eAAT,CAAyBC,OAAzB,CAA0CC,IAA1C,CAAwDC,IAAxD,CAAwF,2BAC7F,GAAIF,OAAO,GAAKb,gBAAgB,CAACgB,YAAjC,CAA+C,CAC7C,OAAQD,IAAR,EACE,IAAKJ,CAAAA,gBAAgB,CAACM,WAAtB,CACE,uCAAiCH,IAAjC,EACF,IAAKH,CAAAA,gBAAgB,CAACO,OAAtB,CACA,IAAKP,CAAAA,gBAAgB,CAACQ,KAAtB,CACE,4CAAsCL,IAAtC,EACF,IAAKH,CAAAA,gBAAgB,CAACS,KAAtB,CACE,0CAAoCN,IAApC,EACF,QACE,6BATJ,CAWD,CAED,GAAID,OAAO,GAAKb,gBAAgB,CAACqB,gBAAjC,CAAmD,CACjD,OAAQN,IAAR,EACE,IAAKJ,CAAAA,gBAAgB,CAACM,WAAtB,CACE,wDAAkDH,IAAlD,EACF,IAAKH,CAAAA,gBAAgB,CAACO,OAAtB,CACA,IAAKP,CAAAA,gBAAgB,CAACQ,KAAtB,CACE,6DAAuDL,IAAvD,EACF,IAAKH,CAAAA,gBAAgB,CAACS,KAAtB,CACE,2DAAqDN,IAArD,EACF,QACE,8CATJ,CAWD,CAED,GAAMQ,CAAAA,MAAM,wBAAGrB,kBAAkB,CAACY,OAAD,CAArB,+DAAkC,sBAA9C,CAEA,OAAQE,IAAR,EACE,IAAKJ,CAAAA,gBAAgB,CAACM,WAAtB,CACE,gBAAUK,MAAV,gBAAuBR,IAAvB,EAEF,IAAKH,CAAAA,gBAAgB,CAACQ,KAAtB,CACE,gBAAUG,MAAV,mBAA0BR,IAA1B,EAEF,IAAKH,CAAAA,gBAAgB,CAACS,KAAtB,CACE,GAAIP,OAAO,GAAKb,gBAAgB,CAACO,QAA7B,EAAyCM,OAAO,GAAKb,gBAAgB,CAACQ,gBAA1E,CAA4F,CAC1F,gBAAUc,MAAV,gBAAuBR,IAAvB,EACD,CACD,gBAAUQ,MAAV,mBAA0BR,IAA1B,EAEF,IAAKH,CAAAA,gBAAgB,CAACO,OAAtB,CACE,gBAAUI,MAAV,qBAA4BR,IAA5B,EACF,QACE,gBAAUQ,MAAV,EAhBJ,CAkBD","sourcesContent":["import { SupportedChainId } from '../constants/chains'\n\nconst ETHERSCAN_PREFIXES: { [chainId: number]: string } = {\n  [SupportedChainId.MAINNET]: 'https://etherscan.io',\n  [SupportedChainId.ROPSTEN]: 'https://ropsten.etherscan.io',\n  [SupportedChainId.RINKEBY]: 'https://rinkeby.etherscan.io',\n  [SupportedChainId.GOERLI]: 'https://goerli.etherscan.io',\n  [SupportedChainId.KOVAN]: 'https://kovan.etherscan.io',\n  [SupportedChainId.OPTIMISM]: 'https://optimistic.etherscan.io',\n  [SupportedChainId.OPTIMISTIC_KOVAN]: 'https://kovan-optimistic.etherscan.io',\n  [SupportedChainId.POLYGON_MUMBAI]: 'https://mumbai.polygonscan.com',\n  [SupportedChainId.POLYGON]: 'https://polygonscan.com',\n}\n\nexport enum ExplorerDataType {\n  TRANSACTION = 'transaction',\n  TOKEN = 'token',\n  ADDRESS = 'address',\n  BLOCK = 'block',\n}\n\n/**\n * Return the explorer link for the given data and data type\n * @param chainId the ID of the chain for which to return the data\n * @param data the data to return a link for\n * @param type the type of the data\n */\nexport function getExplorerLink(chainId: number, data: string, type: ExplorerDataType): string {\n  if (chainId === SupportedChainId.ARBITRUM_ONE) {\n    switch (type) {\n      case ExplorerDataType.TRANSACTION:\n        return `https://arbiscan.io/tx/${data}`\n      case ExplorerDataType.ADDRESS:\n      case ExplorerDataType.TOKEN:\n        return `https://arbiscan.io/address/${data}`\n      case ExplorerDataType.BLOCK:\n        return `https://arbiscan.io/block/${data}`\n      default:\n        return `https://arbiscan.io/`\n    }\n  }\n\n  if (chainId === SupportedChainId.ARBITRUM_RINKEBY) {\n    switch (type) {\n      case ExplorerDataType.TRANSACTION:\n        return `https://rinkeby-explorer.arbitrum.io/tx/${data}`\n      case ExplorerDataType.ADDRESS:\n      case ExplorerDataType.TOKEN:\n        return `https://rinkeby-explorer.arbitrum.io/address/${data}`\n      case ExplorerDataType.BLOCK:\n        return `https://rinkeby-explorer.arbitrum.io/block/${data}`\n      default:\n        return `https://rinkeby-explorer.arbitrum.io/`\n    }\n  }\n\n  const prefix = ETHERSCAN_PREFIXES[chainId] ?? 'https://etherscan.io'\n\n  switch (type) {\n    case ExplorerDataType.TRANSACTION:\n      return `${prefix}/tx/${data}`\n\n    case ExplorerDataType.TOKEN:\n      return `${prefix}/token/${data}`\n\n    case ExplorerDataType.BLOCK:\n      if (chainId === SupportedChainId.OPTIMISM || chainId === SupportedChainId.OPTIMISTIC_KOVAN) {\n        return `${prefix}/tx/${data}`\n      }\n      return `${prefix}/block/${data}`\n\n    case ExplorerDataType.ADDRESS:\n      return `${prefix}/address/${data}`\n    default:\n      return `${prefix}`\n  }\n}\n"]},"metadata":{},"sourceType":"module"}