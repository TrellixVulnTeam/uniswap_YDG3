{"ast":null,"code":"import _slicedToArray from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Interface}from'@ethersproject/abi';import{CurrencyAmount}from'@uniswap/sdk-core';import ERC20ABI from'abis/erc20.json';import JSBI from'jsbi';import{useMemo}from'react';import{nativeOnChain,UNI}from'../../constants/tokens';import{useAllTokens}from'../../hooks/Tokens';import{useInterfaceMulticall}from'../../hooks/useContract';import{useActiveWeb3React}from'../../hooks/web3';import{isAddress}from'../../utils';import{useUserUnclaimedAmount}from'../claim/hooks';import{useMultipleContractSingleData,useSingleContractMultipleData}from'../multicall/hooks';import{useTotalUniEarned}from'../stake/hooks';/**\n * Returns a map of the given addresses to their eventually consistent ETH balances.\n */export function useNativeCurrencyBalances(uncheckedAddresses){var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId;var multicallContract=useInterfaceMulticall();var validAddressInputs=useMemo(function(){return uncheckedAddresses?uncheckedAddresses.map(isAddress).filter(function(a){return a!==false;}).sort().map(function(addr){return[addr];}):[];},[uncheckedAddresses]);var results=useSingleContractMultipleData(multicallContract,'getEthBalance',validAddressInputs);return useMemo(function(){return validAddressInputs.reduce(function(memo,_ref,i){var _results$i,_results$i$result;var _ref2=_slicedToArray(_ref,1),address=_ref2[0];var value=results===null||results===void 0?void 0:(_results$i=results[i])===null||_results$i===void 0?void 0:(_results$i$result=_results$i.result)===null||_results$i$result===void 0?void 0:_results$i$result[0];if(value&&chainId)memo[address]=CurrencyAmount.fromRawAmount(nativeOnChain(chainId),JSBI.BigInt(value.toString()));return memo;},{});},[validAddressInputs,chainId,results]);}var ERC20Interface=new Interface(ERC20ABI);var tokenBalancesGasRequirement={gasRequired:125000};/**\n * Returns a map of token addresses to their eventually consistent token balances for a single account.\n */export function useTokenBalancesWithLoadingIndicator(address,tokens){var validatedTokens=useMemo(function(){var _tokens$filter;return(_tokens$filter=tokens===null||tokens===void 0?void 0:tokens.filter(function(t){return isAddress(t===null||t===void 0?void 0:t.address)!==false;}))!==null&&_tokens$filter!==void 0?_tokens$filter:[];},[tokens]);var validatedTokenAddresses=useMemo(function(){return validatedTokens.map(function(vt){return vt.address;});},[validatedTokens]);var balances=useMultipleContractSingleData(validatedTokenAddresses,ERC20Interface,'balanceOf',useMemo(function(){return[address];},[address]),tokenBalancesGasRequirement);var anyLoading=useMemo(function(){return balances.some(function(callState){return callState.loading;});},[balances]);return useMemo(function(){return[address&&validatedTokens.length>0?validatedTokens.reduce(function(memo,token,i){var _balances$i,_balances$i$result;var value=balances===null||balances===void 0?void 0:(_balances$i=balances[i])===null||_balances$i===void 0?void 0:(_balances$i$result=_balances$i.result)===null||_balances$i$result===void 0?void 0:_balances$i$result[0];var amount=value?JSBI.BigInt(value.toString()):undefined;if(amount){memo[token.address]=CurrencyAmount.fromRawAmount(token,amount);}return memo;},{}):{},anyLoading];},[address,validatedTokens,anyLoading,balances]);}export function useTokenBalances(address,tokens){return useTokenBalancesWithLoadingIndicator(address,tokens)[0];}// get the balance for a single token/account combo\nexport function useTokenBalance(account,token){var tokenBalances=useTokenBalances(account,[token]);if(!token)return undefined;return tokenBalances[token.address];}export function useCurrencyBalances(account,currencies){var tokens=useMemo(function(){var _currencies$filter;return(_currencies$filter=currencies===null||currencies===void 0?void 0:currencies.filter(function(currency){var _currency$isToken;return(_currency$isToken=currency===null||currency===void 0?void 0:currency.isToken)!==null&&_currency$isToken!==void 0?_currency$isToken:false;}))!==null&&_currencies$filter!==void 0?_currencies$filter:[];},[currencies]);var tokenBalances=useTokenBalances(account,tokens);var containsETH=useMemo(function(){var _currencies$some;return(_currencies$some=currencies===null||currencies===void 0?void 0:currencies.some(function(currency){return currency===null||currency===void 0?void 0:currency.isNative;}))!==null&&_currencies$some!==void 0?_currencies$some:false;},[currencies]);var ethBalance=useNativeCurrencyBalances(containsETH?[account]:[]);return useMemo(function(){var _currencies$map;return(_currencies$map=currencies===null||currencies===void 0?void 0:currencies.map(function(currency){if(!account||!currency)return undefined;if(currency.isToken)return tokenBalances[currency.address];if(currency.isNative)return ethBalance[account];return undefined;}))!==null&&_currencies$map!==void 0?_currencies$map:[];},[account,currencies,ethBalance,tokenBalances]);}export function useCurrencyBalance(account,currency){return useCurrencyBalances(account,useMemo(function(){return[currency];},[currency]))[0];}// mimics useAllBalances\nexport function useAllTokenBalances(){var _useActiveWeb3React2=useActiveWeb3React(),account=_useActiveWeb3React2.account;var allTokens=useAllTokens();var allTokensArray=useMemo(function(){return Object.values(allTokens!==null&&allTokens!==void 0?allTokens:{});},[allTokens]);var balances=useTokenBalances(account!==null&&account!==void 0?account:undefined,allTokensArray);return balances!==null&&balances!==void 0?balances:{};}// get the total owned, unclaimed, and unharvested UNI for account\nexport function useAggregateUniBalance(){var _uniBalance$quotient,_uniUnclaimed$quotien,_uniUnHarvested$quoti;var _useActiveWeb3React3=useActiveWeb3React(),account=_useActiveWeb3React3.account,chainId=_useActiveWeb3React3.chainId;var uni=chainId?UNI[chainId]:undefined;var uniBalance=useTokenBalance(account!==null&&account!==void 0?account:undefined,uni);var uniUnclaimed=useUserUnclaimedAmount(account);var uniUnHarvested=useTotalUniEarned();if(!uni)return undefined;return CurrencyAmount.fromRawAmount(uni,JSBI.add(JSBI.add((_uniBalance$quotient=uniBalance===null||uniBalance===void 0?void 0:uniBalance.quotient)!==null&&_uniBalance$quotient!==void 0?_uniBalance$quotient:JSBI.BigInt(0),(_uniUnclaimed$quotien=uniUnclaimed===null||uniUnclaimed===void 0?void 0:uniUnclaimed.quotient)!==null&&_uniUnclaimed$quotien!==void 0?_uniUnclaimed$quotien:JSBI.BigInt(0)),(_uniUnHarvested$quoti=uniUnHarvested===null||uniUnHarvested===void 0?void 0:uniUnHarvested.quotient)!==null&&_uniUnHarvested$quoti!==void 0?_uniUnHarvested$quoti:JSBI.BigInt(0)));}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/state/wallet/hooks.ts"],"names":["Interface","CurrencyAmount","ERC20ABI","JSBI","useMemo","nativeOnChain","UNI","useAllTokens","useInterfaceMulticall","useActiveWeb3React","isAddress","useUserUnclaimedAmount","useMultipleContractSingleData","useSingleContractMultipleData","useTotalUniEarned","useNativeCurrencyBalances","uncheckedAddresses","chainId","multicallContract","validAddressInputs","map","filter","a","sort","addr","results","reduce","memo","i","address","value","result","fromRawAmount","BigInt","toString","ERC20Interface","tokenBalancesGasRequirement","gasRequired","useTokenBalancesWithLoadingIndicator","tokens","validatedTokens","t","validatedTokenAddresses","vt","balances","anyLoading","some","callState","loading","length","token","amount","undefined","useTokenBalances","useTokenBalance","account","tokenBalances","useCurrencyBalances","currencies","currency","isToken","containsETH","isNative","ethBalance","useCurrencyBalance","useAllTokenBalances","allTokens","allTokensArray","Object","values","useAggregateUniBalance","uni","uniBalance","uniUnclaimed","uniUnHarvested","add","quotient"],"mappings":"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","sourcesContent":["import { Interface } from '@ethersproject/abi'\nimport { Currency, CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport ERC20ABI from 'abis/erc20.json'\nimport { Erc20Interface } from 'abis/types/Erc20'\nimport JSBI from 'jsbi'\nimport { useMemo } from 'react'\n\nimport { nativeOnChain, UNI } from '../../constants/tokens'\nimport { useAllTokens } from '../../hooks/Tokens'\nimport { useInterfaceMulticall } from '../../hooks/useContract'\nimport { useActiveWeb3React } from '../../hooks/web3'\nimport { isAddress } from '../../utils'\nimport { useUserUnclaimedAmount } from '../claim/hooks'\nimport { useMultipleContractSingleData, useSingleContractMultipleData } from '../multicall/hooks'\nimport { useTotalUniEarned } from '../stake/hooks'\n/**\n * Returns a map of the given addresses to their eventually consistent ETH balances.\n */\nexport function useNativeCurrencyBalances(uncheckedAddresses?: (string | undefined)[]): {\n  [address: string]: CurrencyAmount<Currency> | undefined\n} {\n  const { chainId } = useActiveWeb3React()\n  const multicallContract = useInterfaceMulticall()\n\n  const validAddressInputs: [string][] = useMemo(\n    () =>\n      uncheckedAddresses\n        ? uncheckedAddresses\n            .map(isAddress)\n            .filter((a): a is string => a !== false)\n            .sort()\n            .map((addr) => [addr])\n        : [],\n    [uncheckedAddresses]\n  )\n\n  const results = useSingleContractMultipleData(multicallContract, 'getEthBalance', validAddressInputs)\n\n  return useMemo(\n    () =>\n      validAddressInputs.reduce<{ [address: string]: CurrencyAmount<Currency> }>((memo, [address], i) => {\n        const value = results?.[i]?.result?.[0]\n        if (value && chainId)\n          memo[address] = CurrencyAmount.fromRawAmount(nativeOnChain(chainId), JSBI.BigInt(value.toString()))\n        return memo\n      }, {}),\n    [validAddressInputs, chainId, results]\n  )\n}\n\nconst ERC20Interface = new Interface(ERC20ABI) as Erc20Interface\nconst tokenBalancesGasRequirement = { gasRequired: 125_000 }\n\n/**\n * Returns a map of token addresses to their eventually consistent token balances for a single account.\n */\nexport function useTokenBalancesWithLoadingIndicator(\n  address?: string,\n  tokens?: (Token | undefined)[]\n): [{ [tokenAddress: string]: CurrencyAmount<Token> | undefined }, boolean] {\n  const validatedTokens: Token[] = useMemo(\n    () => tokens?.filter((t?: Token): t is Token => isAddress(t?.address) !== false) ?? [],\n    [tokens]\n  )\n  const validatedTokenAddresses = useMemo(() => validatedTokens.map((vt) => vt.address), [validatedTokens])\n\n  const balances = useMultipleContractSingleData(\n    validatedTokenAddresses,\n    ERC20Interface,\n    'balanceOf',\n    useMemo(() => [address], [address]),\n    tokenBalancesGasRequirement\n  )\n\n  const anyLoading: boolean = useMemo(() => balances.some((callState) => callState.loading), [balances])\n\n  return useMemo(\n    () => [\n      address && validatedTokens.length > 0\n        ? validatedTokens.reduce<{ [tokenAddress: string]: CurrencyAmount<Token> | undefined }>((memo, token, i) => {\n            const value = balances?.[i]?.result?.[0]\n            const amount = value ? JSBI.BigInt(value.toString()) : undefined\n            if (amount) {\n              memo[token.address] = CurrencyAmount.fromRawAmount(token, amount)\n            }\n            return memo\n          }, {})\n        : {},\n      anyLoading,\n    ],\n    [address, validatedTokens, anyLoading, balances]\n  )\n}\n\nexport function useTokenBalances(\n  address?: string,\n  tokens?: (Token | undefined)[]\n): { [tokenAddress: string]: CurrencyAmount<Token> | undefined } {\n  return useTokenBalancesWithLoadingIndicator(address, tokens)[0]\n}\n\n// get the balance for a single token/account combo\nexport function useTokenBalance(account?: string, token?: Token): CurrencyAmount<Token> | undefined {\n  const tokenBalances = useTokenBalances(account, [token])\n  if (!token) return undefined\n  return tokenBalances[token.address]\n}\n\nexport function useCurrencyBalances(\n  account?: string,\n  currencies?: (Currency | undefined)[]\n): (CurrencyAmount<Currency> | undefined)[] {\n  const tokens = useMemo(\n    () => currencies?.filter((currency): currency is Token => currency?.isToken ?? false) ?? [],\n    [currencies]\n  )\n\n  const tokenBalances = useTokenBalances(account, tokens)\n  const containsETH: boolean = useMemo(() => currencies?.some((currency) => currency?.isNative) ?? false, [currencies])\n  const ethBalance = useNativeCurrencyBalances(containsETH ? [account] : [])\n\n  return useMemo(\n    () =>\n      currencies?.map((currency) => {\n        if (!account || !currency) return undefined\n        if (currency.isToken) return tokenBalances[currency.address]\n        if (currency.isNative) return ethBalance[account]\n        return undefined\n      }) ?? [],\n    [account, currencies, ethBalance, tokenBalances]\n  )\n}\n\nexport function useCurrencyBalance(account?: string, currency?: Currency): CurrencyAmount<Currency> | undefined {\n  return useCurrencyBalances(\n    account,\n    useMemo(() => [currency], [currency])\n  )[0]\n}\n\n// mimics useAllBalances\nexport function useAllTokenBalances(): { [tokenAddress: string]: CurrencyAmount<Token> | undefined } {\n  const { account } = useActiveWeb3React()\n  const allTokens = useAllTokens()\n  const allTokensArray = useMemo(() => Object.values(allTokens ?? {}), [allTokens])\n  const balances = useTokenBalances(account ?? undefined, allTokensArray)\n  return balances ?? {}\n}\n\n// get the total owned, unclaimed, and unharvested UNI for account\nexport function useAggregateUniBalance(): CurrencyAmount<Token> | undefined {\n  const { account, chainId } = useActiveWeb3React()\n\n  const uni = chainId ? UNI[chainId] : undefined\n\n  const uniBalance: CurrencyAmount<Token> | undefined = useTokenBalance(account ?? undefined, uni)\n  const uniUnclaimed: CurrencyAmount<Token> | undefined = useUserUnclaimedAmount(account)\n  const uniUnHarvested: CurrencyAmount<Token> | undefined = useTotalUniEarned()\n\n  if (!uni) return undefined\n\n  return CurrencyAmount.fromRawAmount(\n    uni,\n    JSBI.add(\n      JSBI.add(uniBalance?.quotient ?? JSBI.BigInt(0), uniUnclaimed?.quotient ?? JSBI.BigInt(0)),\n      uniUnHarvested?.quotient ?? JSBI.BigInt(0)\n    )\n  )\n}\n"]},"metadata":{},"sourceType":"module"}