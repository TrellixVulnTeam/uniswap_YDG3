{"ast":null,"code":"/**\n * Mnemonist MultiMap\n * ===================\n *\n * Implementation of a MultiMap with custom container.\n */\nvar Iterator = require('obliterator/iterator'),\n    forEach = require('obliterator/foreach');\n/**\n * MultiMap.\n *\n * @constructor\n */\n\n\nfunction MultiMap(Container) {\n  this.Container = Container || Array;\n  this.items = new Map();\n  this.clear();\n  Object.defineProperty(this.items, 'constructor', {\n    value: MultiMap,\n    enumerable: false\n  });\n}\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\n\n\nMultiMap.prototype.clear = function () {\n  // Properties\n  this.size = 0;\n  this.dimension = 0;\n  this.items.clear();\n};\n/**\n * Method used to set a value.\n *\n * @param  {any}      key   - Key.\n * @param  {any}      value - Value to add.\n * @return {MultiMap}\n */\n\n\nMultiMap.prototype.set = function (key, value) {\n  var container = this.items.get(key),\n      sizeBefore;\n\n  if (!container) {\n    this.dimension++;\n    container = new this.Container();\n    this.items.set(key, container);\n  }\n\n  if (this.Container === Set) {\n    sizeBefore = container.size;\n    container.add(value);\n    if (sizeBefore < container.size) this.size++;\n  } else {\n    container.push(value);\n    this.size++;\n  }\n\n  return this;\n};\n/**\n * Method used to delete the given key.\n *\n * @param  {any}     key - Key to delete.\n * @return {boolean}\n */\n\n\nMultiMap.prototype.delete = function (key) {\n  var container = this.items.get(key);\n  if (!container) return false;\n  this.size -= this.Container === Set ? container.size : container.length;\n  this.dimension--;\n  this.items.delete(key);\n  return true;\n};\n/**\n * Method used to delete the remove an item in the container stored at the\n * given key.\n *\n * @param  {any}     key - Key to delete.\n * @return {boolean}\n */\n\n\nMultiMap.prototype.remove = function (key, value) {\n  var container = this.items.get(key),\n      wasDeleted,\n      index;\n  if (!container) return false;\n\n  if (this.Container === Set) {\n    wasDeleted = container.delete(value);\n    if (wasDeleted) this.size--;\n\n    if (container.size === 0) {\n      this.items.delete(key);\n      this.dimension--;\n    }\n\n    return wasDeleted;\n  } else {\n    index = container.indexOf(value);\n    if (index === -1) return false;\n    this.size--;\n\n    if (container.length === 1) {\n      this.items.delete(key);\n      this.dimension--;\n      return true;\n    }\n\n    container.splice(index, 1);\n    return true;\n  }\n};\n/**\n * Method used to return whether the given keys exists in the map.\n *\n * @param  {any}     key - Key to check.\n * @return {boolean}\n */\n\n\nMultiMap.prototype.has = function (key) {\n  return this.items.has(key);\n};\n/**\n * Method used to return the container stored at the given key or `undefined`.\n *\n * @param  {any}     key - Key to get.\n * @return {boolean}\n */\n\n\nMultiMap.prototype.get = function (key) {\n  return this.items.get(key);\n};\n/**\n * Method used to return the multiplicity of the given key, meaning the number\n * of times it is set, or, more trivially, the size of the attached container.\n *\n * @param  {any}     key - Key to check.\n * @return {number}\n */\n\n\nMultiMap.prototype.multiplicity = function (key) {\n  var container = this.items.get(key);\n  if (typeof container === 'undefined') return 0;\n  return this.Container === Set ? container.size : container.length;\n};\n\nMultiMap.prototype.count = MultiMap.prototype.multiplicity;\n/**\n * Method used to iterate over each of the key/value pairs.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\n\nMultiMap.prototype.forEach = function (callback, scope) {\n  scope = arguments.length > 1 ? scope : this; // Inner iteration function is created here to avoid creating it in the loop\n\n  var key;\n\n  function inner(value) {\n    callback.call(scope, value, key);\n  }\n\n  this.items.forEach(function (container, k) {\n    key = k;\n    container.forEach(inner);\n  });\n};\n/**\n * Method used to iterate over each of the associations.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\n\n\nMultiMap.prototype.forEachAssociation = function (callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n  this.items.forEach(callback, scope);\n};\n/**\n * Method returning an iterator over the map's keys.\n *\n * @return {Iterator}\n */\n\n\nMultiMap.prototype.keys = function () {\n  return this.items.keys();\n};\n/**\n * Method returning an iterator over the map's keys.\n *\n * @return {Iterator}\n */\n\n\nMultiMap.prototype.values = function () {\n  var iterator = this.items.values(),\n      inContainer = false,\n      countainer,\n      step,\n      i,\n      l;\n  if (this.Container === Set) return new Iterator(function next() {\n    if (!inContainer) {\n      step = iterator.next();\n      if (step.done) return {\n        done: true\n      };\n      inContainer = true;\n      countainer = step.value.values();\n    }\n\n    step = countainer.next();\n\n    if (step.done) {\n      inContainer = false;\n      return next();\n    }\n\n    return {\n      done: false,\n      value: step.value\n    };\n  });\n  return new Iterator(function next() {\n    if (!inContainer) {\n      step = iterator.next();\n      if (step.done) return {\n        done: true\n      };\n      inContainer = true;\n      countainer = step.value;\n      i = 0;\n      l = countainer.length;\n    }\n\n    if (i >= l) {\n      inContainer = false;\n      return next();\n    }\n\n    return {\n      done: false,\n      value: countainer[i++]\n    };\n  });\n};\n/**\n * Method returning an iterator over the map's entries.\n *\n * @return {Iterator}\n */\n\n\nMultiMap.prototype.entries = function () {\n  var iterator = this.items.entries(),\n      inContainer = false,\n      countainer,\n      step,\n      key,\n      i,\n      l;\n  if (this.Container === Set) return new Iterator(function next() {\n    if (!inContainer) {\n      step = iterator.next();\n      if (step.done) return {\n        done: true\n      };\n      inContainer = true;\n      key = step.value[0];\n      countainer = step.value[1].values();\n    }\n\n    step = countainer.next();\n\n    if (step.done) {\n      inContainer = false;\n      return next();\n    }\n\n    return {\n      done: false,\n      value: [key, step.value]\n    };\n  });\n  return new Iterator(function next() {\n    if (!inContainer) {\n      step = iterator.next();\n      if (step.done) return {\n        done: true\n      };\n      inContainer = true;\n      key = step.value[0];\n      countainer = step.value[1];\n      i = 0;\n      l = countainer.length;\n    }\n\n    if (i >= l) {\n      inContainer = false;\n      return next();\n    }\n\n    return {\n      done: false,\n      value: [key, countainer[i++]]\n    };\n  });\n};\n/**\n * Method returning an iterator over the map's containers.\n *\n * @return {Iterator}\n */\n\n\nMultiMap.prototype.containers = function () {\n  return this.items.values();\n};\n/**\n * Method returning an iterator over the map's associations.\n *\n * @return {Iterator}\n */\n\n\nMultiMap.prototype.associations = function () {\n  return this.items.entries();\n};\n/**\n * Attaching the #.entries method to Symbol.iterator if possible.\n */\n\n\nif (typeof Symbol !== 'undefined') MultiMap.prototype[Symbol.iterator] = MultiMap.prototype.entries;\n/**\n * Convenience known methods.\n */\n\nMultiMap.prototype.inspect = function () {\n  return this.items;\n};\n\nif (typeof Symbol !== 'undefined') MultiMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = MultiMap.prototype.inspect;\n\nMultiMap.prototype.toJSON = function () {\n  return this.items;\n};\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a structure.\n *\n * @param  {Iterable} iterable  - Target iterable.\n * @param  {Class}    Container - Container.\n * @return {MultiMap}\n */\n\n\nMultiMap.from = function (iterable, Container) {\n  var map = new MultiMap(Container);\n  forEach(iterable, function (value, key) {\n    map.set(key, value);\n  });\n  return map;\n};\n/**\n * Exporting.\n */\n\n\nmodule.exports = MultiMap;","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/node_modules/mnemonist/multi-map.js"],"names":["Iterator","require","forEach","MultiMap","Container","Array","items","Map","clear","Object","defineProperty","value","enumerable","prototype","size","dimension","set","key","container","get","sizeBefore","Set","add","push","delete","length","remove","wasDeleted","index","indexOf","splice","has","multiplicity","count","callback","scope","arguments","inner","call","k","forEachAssociation","keys","values","iterator","inContainer","countainer","step","i","l","next","done","entries","containers","associations","Symbol","inspect","for","toJSON","from","iterable","map","module","exports"],"mappings":"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","sourcesContent":["/**\n * Mnemonist MultiMap\n * ===================\n *\n * Implementation of a MultiMap with custom container.\n */\nvar Iterator = require('obliterator/iterator'),\n    forEach = require('obliterator/foreach');\n\n/**\n * MultiMap.\n *\n * @constructor\n */\nfunction MultiMap(Container) {\n\n  this.Container = Container || Array;\n  this.items = new Map();\n  this.clear();\n\n  Object.defineProperty(this.items, 'constructor', {\n    value: MultiMap,\n    enumerable: false\n  });\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nMultiMap.prototype.clear = function() {\n\n  // Properties\n  this.size = 0;\n  this.dimension = 0;\n  this.items.clear();\n};\n\n/**\n * Method used to set a value.\n *\n * @param  {any}      key   - Key.\n * @param  {any}      value - Value to add.\n * @return {MultiMap}\n */\nMultiMap.prototype.set = function(key, value) {\n  var container = this.items.get(key),\n      sizeBefore;\n\n  if (!container) {\n    this.dimension++;\n    container = new this.Container();\n    this.items.set(key, container);\n  }\n\n  if (this.Container === Set) {\n    sizeBefore = container.size;\n    container.add(value);\n\n    if (sizeBefore < container.size)\n      this.size++;\n  }\n  else {\n    container.push(value);\n    this.size++;\n  }\n\n  return this;\n};\n\n/**\n * Method used to delete the given key.\n *\n * @param  {any}     key - Key to delete.\n * @return {boolean}\n */\nMultiMap.prototype.delete = function(key) {\n  var container = this.items.get(key);\n\n  if (!container)\n    return false;\n\n  this.size -= (this.Container === Set ? container.size : container.length);\n  this.dimension--;\n  this.items.delete(key);\n\n  return true;\n};\n\n/**\n * Method used to delete the remove an item in the container stored at the\n * given key.\n *\n * @param  {any}     key - Key to delete.\n * @return {boolean}\n */\nMultiMap.prototype.remove = function(key, value) {\n  var container = this.items.get(key),\n      wasDeleted,\n      index;\n\n  if (!container)\n    return false;\n\n  if (this.Container === Set) {\n    wasDeleted = container.delete(value);\n\n    if (wasDeleted)\n      this.size--;\n\n    if (container.size === 0) {\n      this.items.delete(key);\n      this.dimension--;\n    }\n\n    return wasDeleted;\n  }\n  else {\n    index = container.indexOf(value);\n\n    if (index === -1)\n      return false;\n\n    this.size--;\n\n    if (container.length === 1) {\n      this.items.delete(key);\n      this.dimension--;\n\n      return true;\n    }\n\n    container.splice(index, 1);\n\n    return true;\n  }\n};\n\n/**\n * Method used to return whether the given keys exists in the map.\n *\n * @param  {any}     key - Key to check.\n * @return {boolean}\n */\nMultiMap.prototype.has = function(key) {\n  return this.items.has(key);\n};\n\n/**\n * Method used to return the container stored at the given key or `undefined`.\n *\n * @param  {any}     key - Key to get.\n * @return {boolean}\n */\nMultiMap.prototype.get = function(key) {\n  return this.items.get(key);\n};\n\n/**\n * Method used to return the multiplicity of the given key, meaning the number\n * of times it is set, or, more trivially, the size of the attached container.\n *\n * @param  {any}     key - Key to check.\n * @return {number}\n */\nMultiMap.prototype.multiplicity = function(key) {\n  var container = this.items.get(key);\n\n  if (typeof container === 'undefined')\n    return 0;\n\n  return this.Container === Set ? container.size : container.length;\n};\nMultiMap.prototype.count = MultiMap.prototype.multiplicity;\n\n/**\n * Method used to iterate over each of the key/value pairs.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nMultiMap.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  // Inner iteration function is created here to avoid creating it in the loop\n  var key;\n  function inner(value) {\n    callback.call(scope, value, key);\n  }\n\n  this.items.forEach(function(container, k) {\n    key = k;\n    container.forEach(inner);\n  });\n};\n\n/**\n * Method used to iterate over each of the associations.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nMultiMap.prototype.forEachAssociation = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  this.items.forEach(callback, scope);\n};\n\n/**\n * Method returning an iterator over the map's keys.\n *\n * @return {Iterator}\n */\nMultiMap.prototype.keys = function() {\n  return this.items.keys();\n};\n\n/**\n * Method returning an iterator over the map's keys.\n *\n * @return {Iterator}\n */\nMultiMap.prototype.values = function() {\n  var iterator = this.items.values(),\n      inContainer = false,\n      countainer,\n      step,\n      i,\n      l;\n\n  if (this.Container === Set)\n    return new Iterator(function next() {\n      if (!inContainer) {\n        step = iterator.next();\n\n        if (step.done)\n          return {done: true};\n\n        inContainer = true;\n        countainer = step.value.values();\n      }\n\n      step = countainer.next();\n\n      if (step.done) {\n        inContainer = false;\n        return next();\n      }\n\n      return {\n        done: false,\n        value: step.value\n      };\n    });\n\n  return new Iterator(function next() {\n    if (!inContainer) {\n      step = iterator.next();\n\n      if (step.done)\n        return {done: true};\n\n      inContainer = true;\n      countainer = step.value;\n      i = 0;\n      l = countainer.length;\n    }\n\n    if (i >= l) {\n      inContainer = false;\n      return next();\n    }\n\n    return {\n      done: false,\n      value: countainer[i++]\n    };\n  });\n};\n\n/**\n * Method returning an iterator over the map's entries.\n *\n * @return {Iterator}\n */\nMultiMap.prototype.entries = function() {\n  var iterator = this.items.entries(),\n      inContainer = false,\n      countainer,\n      step,\n      key,\n      i,\n      l;\n\n  if (this.Container === Set)\n    return new Iterator(function next() {\n      if (!inContainer) {\n        step = iterator.next();\n\n        if (step.done)\n          return {done: true};\n\n        inContainer = true;\n        key = step.value[0];\n        countainer = step.value[1].values();\n      }\n\n      step = countainer.next();\n\n      if (step.done) {\n        inContainer = false;\n        return next();\n      }\n\n      return {\n        done: false,\n        value: [key, step.value]\n      };\n    });\n\n  return new Iterator(function next() {\n    if (!inContainer) {\n      step = iterator.next();\n\n      if (step.done)\n        return {done: true};\n\n      inContainer = true;\n      key = step.value[0];\n      countainer = step.value[1];\n      i = 0;\n      l = countainer.length;\n    }\n\n    if (i >= l) {\n      inContainer = false;\n      return next();\n    }\n\n    return {\n      done: false,\n      value: [key, countainer[i++]]\n    };\n  });\n};\n\n/**\n * Method returning an iterator over the map's containers.\n *\n * @return {Iterator}\n */\nMultiMap.prototype.containers = function() {\n  return this.items.values();\n};\n\n/**\n * Method returning an iterator over the map's associations.\n *\n * @return {Iterator}\n */\nMultiMap.prototype.associations = function() {\n  return this.items.entries();\n};\n\n/**\n * Attaching the #.entries method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  MultiMap.prototype[Symbol.iterator] = MultiMap.prototype.entries;\n\n/**\n * Convenience known methods.\n */\nMultiMap.prototype.inspect = function() {\n  return this.items;\n};\n\nif (typeof Symbol !== 'undefined')\n  MultiMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = MultiMap.prototype.inspect;\nMultiMap.prototype.toJSON = function() {\n  return this.items;\n};\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a structure.\n *\n * @param  {Iterable} iterable  - Target iterable.\n * @param  {Class}    Container - Container.\n * @return {MultiMap}\n */\nMultiMap.from = function(iterable, Container) {\n  var map = new MultiMap(Container);\n\n  forEach(iterable, function(value, key) {\n    map.set(key, value);\n  });\n\n  return map;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = MultiMap;\n"]},"metadata":{},"sourceType":"script"}