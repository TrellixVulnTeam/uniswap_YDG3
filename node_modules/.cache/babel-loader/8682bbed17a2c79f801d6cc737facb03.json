{"ast":null,"code":"import { log } from '../../util';\n/**\n * Provider for getting V2 subgraph pools that falls back to a different provider\n * in the event of failure.\n *\n * @export\n * @class V2SubgraphProviderWithFallBacks\n */\n\nexport class V2SubgraphProviderWithFallBacks {\n  /**\n   * Creates an instance of V2SubgraphProviderWithFallBacks.\n   * @param fallbacks Ordered list of `IV2SubgraphProvider` to try to get pools from.\n   */\n  constructor(fallbacks) {\n    this.fallbacks = fallbacks;\n  }\n\n  async getPools(tokenIn, tokenOut, providerConfig) {\n    for (let i = 0; i < this.fallbacks.length; i++) {\n      const provider = this.fallbacks[i];\n\n      try {\n        const pools = await provider.getPools(tokenIn, tokenOut, providerConfig);\n        return pools;\n      } catch (err) {\n        log.info(`Failed to get subgraph pools for V2 from fallback #${i}`);\n      }\n    }\n\n    throw new Error('Failed to get subgraph pools from any providers');\n  }\n\n}","map":{"version":3,"sources":["../../../../../src/providers/v2/subgraph-provider-with-fallback.ts"],"names":[],"mappings":"AACA,SAAS,GAAT,QAAoB,YAApB;AAIA;;;;;;AAMG;;AACH,OAAM,MAAO,+BAAP,CAAsC;AAC1C;;;AAGG;AACH,EAAA,WAAA,CAAoB,SAApB,EAAoD;AAAhC,SAAA,SAAA,GAAA,SAAA;AAAoC;;AAEnC,QAAR,QAAQ,CACnB,OADmB,EAEnB,QAFmB,EAGnB,cAHmB,EAGY;AAE/B,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,SAAL,CAAe,MAAnC,EAA2C,CAAC,EAA5C,EAAgD;AAC9C,YAAM,QAAQ,GAAG,KAAK,SAAL,CAAe,CAAf,CAAjB;;AACA,UAAI;AACF,cAAM,KAAK,GAAG,MAAM,QAAQ,CAAC,QAAT,CAClB,OADkB,EAElB,QAFkB,EAGlB,cAHkB,CAApB;AAKA,eAAO,KAAP;AACD,OAPD,CAOE,OAAO,GAAP,EAAY;AACZ,QAAA,GAAG,CAAC,IAAJ,CAAS,sDAAsD,CAAC,EAAhE;AACD;AACF;;AAED,UAAM,IAAI,KAAJ,CAAU,iDAAV,CAAN;AACD;;AA3ByC","sourceRoot":"","sourcesContent":["import { log } from '../../util';\n/**\n * Provider for getting V2 subgraph pools that falls back to a different provider\n * in the event of failure.\n *\n * @export\n * @class V2SubgraphProviderWithFallBacks\n */\nexport class V2SubgraphProviderWithFallBacks {\n    /**\n     * Creates an instance of V2SubgraphProviderWithFallBacks.\n     * @param fallbacks Ordered list of `IV2SubgraphProvider` to try to get pools from.\n     */\n    constructor(fallbacks) {\n        this.fallbacks = fallbacks;\n    }\n    async getPools(tokenIn, tokenOut, providerConfig) {\n        for (let i = 0; i < this.fallbacks.length; i++) {\n            const provider = this.fallbacks[i];\n            try {\n                const pools = await provider.getPools(tokenIn, tokenOut, providerConfig);\n                return pools;\n            }\n            catch (err) {\n                log.info(`Failed to get subgraph pools for V2 from fallback #${i}`);\n            }\n        }\n        throw new Error('Failed to get subgraph pools from any providers');\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViZ3JhcGgtcHJvdmlkZXItd2l0aC1mYWxsYmFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9wcm92aWRlcnMvdjIvc3ViZ3JhcGgtcHJvdmlkZXItd2l0aC1mYWxsYmFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBSWpDOzs7Ozs7R0FNRztBQUNILE1BQU0sT0FBTywrQkFBK0I7SUFDMUM7OztPQUdHO0lBQ0gsWUFBb0IsU0FBZ0M7UUFBaEMsY0FBUyxHQUFULFNBQVMsQ0FBdUI7SUFBRyxDQUFDO0lBRWpELEtBQUssQ0FBQyxRQUFRLENBQ25CLE9BQWUsRUFDZixRQUFnQixFQUNoQixjQUErQjtRQUUvQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDOUMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUUsQ0FBQztZQUNwQyxJQUFJO2dCQUNGLE1BQU0sS0FBSyxHQUFHLE1BQU0sUUFBUSxDQUFDLFFBQVEsQ0FDbkMsT0FBTyxFQUNQLFFBQVEsRUFDUixjQUFjLENBQ2YsQ0FBQztnQkFDRixPQUFPLEtBQUssQ0FBQzthQUNkO1lBQUMsT0FBTyxHQUFHLEVBQUU7Z0JBQ1osR0FBRyxDQUFDLElBQUksQ0FBQyxzREFBc0QsQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUNyRTtTQUNGO1FBRUQsTUFBTSxJQUFJLEtBQUssQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7Q0FDRiJ9"]},"metadata":{},"sourceType":"module"}