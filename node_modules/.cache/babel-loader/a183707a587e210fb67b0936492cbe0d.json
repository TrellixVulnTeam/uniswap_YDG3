{"ast":null,"code":"import _defineProperty from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";var _reducer;import{configureStore}from'@reduxjs/toolkit';import{setupListeners}from'@reduxjs/toolkit/query/react';import{load,save}from'redux-localstorage-simple';import application from'./application/reducer';import burn from'./burn/reducer';import burnV3 from'./burn/v3/reducer';import{api as dataApi}from'./data/slice';import{updateVersion}from'./global/actions';import lists from'./lists/reducer';import logs from'./logs/slice';import mint from'./mint/reducer';import mintV3 from'./mint/v3/reducer';import{multicall}from'./multicall/instance';import{routingApi}from'./routing/slice';import swap from'./swap/reducer';import transactions from'./transactions/reducer';import user from'./user/reducer';var PERSISTED_KEYS=['user','transactions','lists'];var store=configureStore({reducer:(_reducer={application:application,user:user,transactions:transactions,swap:swap,mint:mint,mintV3:mintV3,burn:burn,burnV3:burnV3,multicall:multicall.reducer,lists:lists,logs:logs},_defineProperty(_reducer,dataApi.reducerPath,dataApi.reducer),_defineProperty(_reducer,routingApi.reducerPath,routingApi.reducer),_reducer),middleware:function middleware(getDefaultMiddleware){return getDefaultMiddleware({thunk:true}).concat(dataApi.middleware).concat(routingApi.middleware).concat(save({states:PERSISTED_KEYS,debounce:1000}));},preloadedState:load({states:PERSISTED_KEYS,disableWarnings:process.env.NODE_ENV==='test'})});store.dispatch(updateVersion());setupListeners(store.dispatch);export default store;","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/state/index.ts"],"names":["configureStore","setupListeners","load","save","application","burn","burnV3","api","dataApi","updateVersion","lists","logs","mint","mintV3","multicall","routingApi","swap","transactions","user","PERSISTED_KEYS","store","reducer","reducerPath","middleware","getDefaultMiddleware","thunk","concat","states","debounce","preloadedState","disableWarnings","process","env","NODE_ENV","dispatch"],"mappings":"8KAAA,OAASA,cAAT,KAA+B,kBAA/B,CACA,OAASC,cAAT,KAA+B,8BAA/B,CACA,OAASC,IAAT,CAAeC,IAAf,KAA2B,2BAA3B,CAEA,MAAOC,CAAAA,WAAP,KAAwB,uBAAxB,CACA,MAAOC,CAAAA,IAAP,KAAiB,gBAAjB,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CACA,OAASC,GAAG,GAAIC,CAAAA,OAAhB,KAA+B,cAA/B,CACA,OAASC,aAAT,KAA8B,kBAA9B,CACA,MAAOC,CAAAA,KAAP,KAAkB,iBAAlB,CACA,MAAOC,CAAAA,IAAP,KAAiB,cAAjB,CACA,MAAOC,CAAAA,IAAP,KAAiB,gBAAjB,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CACA,OAASC,SAAT,KAA0B,sBAA1B,CACA,OAASC,UAAT,KAA2B,iBAA3B,CACA,MAAOC,CAAAA,IAAP,KAAiB,gBAAjB,CACA,MAAOC,CAAAA,YAAP,KAAyB,wBAAzB,CACA,MAAOC,CAAAA,IAAP,KAAiB,gBAAjB,CAEA,GAAMC,CAAAA,cAAwB,CAAG,CAAC,MAAD,CAAS,cAAT,CAAyB,OAAzB,CAAjC,CAEA,GAAMC,CAAAA,KAAK,CAAGpB,cAAc,CAAC,CAC3BqB,OAAO,YACLjB,WAAW,CAAXA,WADK,CAELc,IAAI,CAAJA,IAFK,CAGLD,YAAY,CAAZA,YAHK,CAILD,IAAI,CAAJA,IAJK,CAKLJ,IAAI,CAAJA,IALK,CAMLC,MAAM,CAANA,MANK,CAOLR,IAAI,CAAJA,IAPK,CAQLC,MAAM,CAANA,MARK,CASLQ,SAAS,CAAEA,SAAS,CAACO,OAThB,CAULX,KAAK,CAALA,KAVK,CAWLC,IAAI,CAAJA,IAXK,2BAYJH,OAAO,CAACc,WAZJ,CAYkBd,OAAO,CAACa,OAZ1B,2BAaJN,UAAU,CAACO,WAbP,CAaqBP,UAAU,CAACM,OAbhC,WADoB,CAgB3BE,UAAU,CAAE,oBAACC,oBAAD,QACVA,CAAAA,oBAAoB,CAAC,CAAEC,KAAK,CAAE,IAAT,CAAD,CAApB,CACGC,MADH,CACUlB,OAAO,CAACe,UADlB,EAEGG,MAFH,CAEUX,UAAU,CAACQ,UAFrB,EAGGG,MAHH,CAGUvB,IAAI,CAAC,CAAEwB,MAAM,CAAER,cAAV,CAA0BS,QAAQ,CAAE,IAApC,CAAD,CAHd,CADU,EAhBe,CAqB3BC,cAAc,CAAE3B,IAAI,CAAC,CAAEyB,MAAM,CAAER,cAAV,CAA0BW,eAAe,CAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,MAApE,CAAD,CArBO,CAAD,CAA5B,CAwBAb,KAAK,CAACc,QAAN,CAAezB,aAAa,EAA5B,EAEAR,cAAc,CAACmB,KAAK,CAACc,QAAP,CAAd,CAEA,cAAed,CAAAA,KAAf","sourcesContent":["import { configureStore } from '@reduxjs/toolkit'\nimport { setupListeners } from '@reduxjs/toolkit/query/react'\nimport { load, save } from 'redux-localstorage-simple'\n\nimport application from './application/reducer'\nimport burn from './burn/reducer'\nimport burnV3 from './burn/v3/reducer'\nimport { api as dataApi } from './data/slice'\nimport { updateVersion } from './global/actions'\nimport lists from './lists/reducer'\nimport logs from './logs/slice'\nimport mint from './mint/reducer'\nimport mintV3 from './mint/v3/reducer'\nimport { multicall } from './multicall/instance'\nimport { routingApi } from './routing/slice'\nimport swap from './swap/reducer'\nimport transactions from './transactions/reducer'\nimport user from './user/reducer'\n\nconst PERSISTED_KEYS: string[] = ['user', 'transactions', 'lists']\n\nconst store = configureStore({\n  reducer: {\n    application,\n    user,\n    transactions,\n    swap,\n    mint,\n    mintV3,\n    burn,\n    burnV3,\n    multicall: multicall.reducer,\n    lists,\n    logs,\n    [dataApi.reducerPath]: dataApi.reducer,\n    [routingApi.reducerPath]: routingApi.reducer,\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({ thunk: true })\n      .concat(dataApi.middleware)\n      .concat(routingApi.middleware)\n      .concat(save({ states: PERSISTED_KEYS, debounce: 1000 })),\n  preloadedState: load({ states: PERSISTED_KEYS, disableWarnings: process.env.NODE_ENV === 'test' }),\n})\n\nstore.dispatch(updateVersion())\n\nsetupListeners(store.dispatch)\n\nexport default store\n\nexport type AppState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n"]},"metadata":{},"sourceType":"module"}