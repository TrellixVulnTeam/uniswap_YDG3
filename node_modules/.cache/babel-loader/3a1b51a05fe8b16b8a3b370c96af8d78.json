{"ast":null,"code":"import { default as retry } from 'async-retry';\nimport Timeout from 'await-timeout';\nimport { gql, GraphQLClient } from 'graphql-request';\nimport _ from 'lodash';\nimport { ChainId } from '../../util/chains';\nimport { log } from '../../util/log';\nconst SUBGRAPH_URL_BY_CHAIN = {\n  [ChainId.MAINNET]: 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswapv2',\n  [ChainId.RINKEBY]: 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-v2-rinkeby'\n};\nconst threshold = 0.025;\nconst PAGE_SIZE = 1000; // 1k is max possible query size from subgraph.\n\nexport class V2SubgraphProvider {\n  constructor(chainId, retries = 2, timeout = 360000, rollback = true) {\n    this.chainId = chainId;\n    this.retries = retries;\n    this.timeout = timeout;\n    this.rollback = rollback;\n    const subgraphUrl = SUBGRAPH_URL_BY_CHAIN[this.chainId];\n\n    if (!subgraphUrl) {\n      throw new Error(`No subgraph url for chain id: ${this.chainId}`);\n    }\n\n    this.client = new GraphQLClient(subgraphUrl);\n  }\n\n  async getPools(_tokenIn, _tokenOut, providerConfig) {\n    let blockNumber = (providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber) ? await providerConfig.blockNumber : undefined; // Due to limitations with the Subgraph API this is the only way to parameterize the query.\n\n    const query2 = gql`\n      query getPools($pageSize: Int!, $id: String) {\n        pairs(\n          first: $pageSize\n          ${blockNumber ? `block: { number: ${blockNumber} }` : ``}\n          where: { id_gt: $id }\n        ) {\n          id\n          token0 { id, symbol }\n          token1 { id, symbol }\n          totalSupply\n          reserveETH\n          trackedReserveETH\n        }\n      }\n    `;\n    let pools = [];\n    log.info(`Getting V2 pools from the subgraph with page size ${PAGE_SIZE}${(providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber) ? ` as of block ${providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber}` : ''}.`);\n    await retry(async () => {\n      const timeout = new Timeout();\n\n      const getPools = async () => {\n        let lastId = '';\n        let pairs = [];\n        let pairsPage = [];\n\n        do {\n          await retry(async () => {\n            const poolsResult = await this.client.request(query2, {\n              pageSize: PAGE_SIZE,\n              id: lastId\n            });\n            pairsPage = poolsResult.pairs;\n            pairs = pairs.concat(pairsPage);\n            lastId = pairs[pairs.length - 1].id;\n          }, {\n            retries: this.retries,\n            onRetry: (err, retry) => {\n              pools = [];\n              log.info({\n                err\n              }, `Failed request for page of pools from subgraph. Retry attempt: ${retry}`);\n            }\n          });\n        } while (pairsPage.length > 0);\n\n        return pairs;\n      };\n\n      try {\n        const getPoolsPromise = getPools();\n        const timerPromise = timeout.set(this.timeout).then(() => {\n          throw new Error(`Timed out getting pools from subgraph: ${this.timeout}`);\n        });\n        pools = await Promise.race([getPoolsPromise, timerPromise]);\n        return;\n      } catch (err) {\n        throw err;\n      } finally {\n        timeout.clear();\n      }\n    }, {\n      retries: this.retries,\n      onRetry: (err, retry) => {\n        if (this.rollback && blockNumber && _.includes(err.message, 'indexed up to')) {\n          blockNumber = blockNumber - 10;\n          log.info(`Detected subgraph indexing error. Rolled back block number to: ${blockNumber}`);\n        }\n\n        pools = [];\n        log.info({\n          err\n        }, `Failed to get pools from subgraph. Retry attempt: ${retry}`);\n      }\n    }); // Filter pools that have tracked reserve ETH less than threshold.\n    // trackedReserveETH filters pools that do not involve a pool from this allowlist:\n    // https://github.com/Uniswap/v2-subgraph/blob/7c82235cad7aee4cfce8ea82f0030af3d224833e/src/mappings/pricing.ts#L43\n    // Which helps filter pools with manipulated prices/liquidity.\n    // TODO: Remove. Temporary fix to ensure tokens without trackedReserveETH are in the list.\n\n    const FEI = '0x956f47f50a910163d8bf957cf5846d573e7f87ca';\n    const poolsSanitized = pools.filter(pool => {\n      return pool.token0.id == FEI || pool.token1.id == FEI || parseFloat(pool.trackedReserveETH) > threshold;\n    }).map(pool => {\n      return { ...pool,\n        id: pool.id.toLowerCase(),\n        token0: {\n          id: pool.token0.id.toLowerCase()\n        },\n        token1: {\n          id: pool.token1.id.toLowerCase()\n        },\n        supply: parseFloat(pool.totalSupply),\n        reserve: parseFloat(pool.trackedReserveETH)\n      };\n    });\n    log.info(`Got ${pools.length} V2 pools from the subgraph. ${poolsSanitized.length} after filtering`);\n    return poolsSanitized;\n  }\n\n}","map":{"version":3,"sources":["../../../../../src/providers/v2/subgraph-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { default as retry } from 'async-retry';\nimport Timeout from 'await-timeout';\nimport { gql, GraphQLClient } from 'graphql-request';\nimport _ from 'lodash';\nimport { ChainId } from '../../util/chains';\nimport { log } from '../../util/log';\nconst SUBGRAPH_URL_BY_CHAIN = {\n    [ChainId.MAINNET]: 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswapv2',\n    [ChainId.RINKEBY]: 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-v2-rinkeby',\n};\nconst threshold = 0.025;\nconst PAGE_SIZE = 1000; // 1k is max possible query size from subgraph.\nexport class V2SubgraphProvider {\n    constructor(chainId, retries = 2, timeout = 360000, rollback = true) {\n        this.chainId = chainId;\n        this.retries = retries;\n        this.timeout = timeout;\n        this.rollback = rollback;\n        const subgraphUrl = SUBGRAPH_URL_BY_CHAIN[this.chainId];\n        if (!subgraphUrl) {\n            throw new Error(`No subgraph url for chain id: ${this.chainId}`);\n        }\n        this.client = new GraphQLClient(subgraphUrl);\n    }\n    async getPools(_tokenIn, _tokenOut, providerConfig) {\n        let blockNumber = (providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber)\n            ? await providerConfig.blockNumber\n            : undefined;\n        // Due to limitations with the Subgraph API this is the only way to parameterize the query.\n        const query2 = gql `\n      query getPools($pageSize: Int!, $id: String) {\n        pairs(\n          first: $pageSize\n          ${blockNumber ? `block: { number: ${blockNumber} }` : ``}\n          where: { id_gt: $id }\n        ) {\n          id\n          token0 { id, symbol }\n          token1 { id, symbol }\n          totalSupply\n          reserveETH\n          trackedReserveETH\n        }\n      }\n    `;\n        let pools = [];\n        log.info(`Getting V2 pools from the subgraph with page size ${PAGE_SIZE}${(providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber)\n            ? ` as of block ${providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber}`\n            : ''}.`);\n        await retry(async () => {\n            const timeout = new Timeout();\n            const getPools = async () => {\n                let lastId = '';\n                let pairs = [];\n                let pairsPage = [];\n                do {\n                    await retry(async () => {\n                        const poolsResult = await this.client.request(query2, {\n                            pageSize: PAGE_SIZE,\n                            id: lastId,\n                        });\n                        pairsPage = poolsResult.pairs;\n                        pairs = pairs.concat(pairsPage);\n                        lastId = pairs[pairs.length - 1].id;\n                    }, {\n                        retries: this.retries,\n                        onRetry: (err, retry) => {\n                            pools = [];\n                            log.info({ err }, `Failed request for page of pools from subgraph. Retry attempt: ${retry}`);\n                        },\n                    });\n                } while (pairsPage.length > 0);\n                return pairs;\n            };\n            try {\n                const getPoolsPromise = getPools();\n                const timerPromise = timeout.set(this.timeout).then(() => {\n                    throw new Error(`Timed out getting pools from subgraph: ${this.timeout}`);\n                });\n                pools = await Promise.race([getPoolsPromise, timerPromise]);\n                return;\n            }\n            catch (err) {\n                throw err;\n            }\n            finally {\n                timeout.clear();\n            }\n        }, {\n            retries: this.retries,\n            onRetry: (err, retry) => {\n                if (this.rollback &&\n                    blockNumber &&\n                    _.includes(err.message, 'indexed up to')) {\n                    blockNumber = blockNumber - 10;\n                    log.info(`Detected subgraph indexing error. Rolled back block number to: ${blockNumber}`);\n                }\n                pools = [];\n                log.info({ err }, `Failed to get pools from subgraph. Retry attempt: ${retry}`);\n            },\n        });\n        // Filter pools that have tracked reserve ETH less than threshold.\n        // trackedReserveETH filters pools that do not involve a pool from this allowlist:\n        // https://github.com/Uniswap/v2-subgraph/blob/7c82235cad7aee4cfce8ea82f0030af3d224833e/src/mappings/pricing.ts#L43\n        // Which helps filter pools with manipulated prices/liquidity.\n        // TODO: Remove. Temporary fix to ensure tokens without trackedReserveETH are in the list.\n        const FEI = '0x956f47f50a910163d8bf957cf5846d573e7f87ca';\n        const poolsSanitized = pools\n            .filter((pool) => {\n            return (pool.token0.id == FEI ||\n                pool.token1.id == FEI ||\n                parseFloat(pool.trackedReserveETH) > threshold);\n        })\n            .map((pool) => {\n            return {\n                ...pool,\n                id: pool.id.toLowerCase(),\n                token0: {\n                    id: pool.token0.id.toLowerCase(),\n                },\n                token1: {\n                    id: pool.token1.id.toLowerCase(),\n                },\n                supply: parseFloat(pool.totalSupply),\n                reserve: parseFloat(pool.trackedReserveETH),\n            };\n        });\n        log.info(`Got ${pools.length} V2 pools from the subgraph. ${poolsSanitized.length} after filtering`);\n        return poolsSanitized;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ViZ3JhcGgtcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvcHJvdmlkZXJzL3YyL3N1YmdyYXBoLXByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxPQUFPLElBQUksS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQy9DLE9BQU8sT0FBTyxNQUFNLGVBQWUsQ0FBQztBQUNwQyxPQUFPLEVBQUUsR0FBRyxFQUFFLGFBQWEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3JELE9BQU8sQ0FBQyxNQUFNLFFBQVEsQ0FBQztBQUN2QixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDNUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBOEJyQyxNQUFNLHFCQUFxQixHQUFzQztJQUMvRCxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFDZiw2REFBNkQ7SUFDL0QsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQ2Ysc0VBQXNFO0NBQ3pFLENBQUM7QUFFRixNQUFNLFNBQVMsR0FBRyxLQUFLLENBQUM7QUFFeEIsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUMsK0NBQStDO0FBZ0J2RSxNQUFNLE9BQU8sa0JBQWtCO0lBRzdCLFlBQ1UsT0FBZ0IsRUFDaEIsVUFBVSxDQUFDLEVBQ1gsVUFBVSxNQUFNLEVBQ2hCLFdBQVcsSUFBSTtRQUhmLFlBQU8sR0FBUCxPQUFPLENBQVM7UUFDaEIsWUFBTyxHQUFQLE9BQU8sQ0FBSTtRQUNYLFlBQU8sR0FBUCxPQUFPLENBQVM7UUFDaEIsYUFBUSxHQUFSLFFBQVEsQ0FBTztRQUV2QixNQUFNLFdBQVcsR0FBRyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNoQixNQUFNLElBQUksS0FBSyxDQUFDLGlDQUFp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"]},"metadata":{},"sourceType":"module"}