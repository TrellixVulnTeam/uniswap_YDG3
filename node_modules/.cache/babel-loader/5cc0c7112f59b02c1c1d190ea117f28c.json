{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nimport { namehash } from '@ethersproject/hash';\nimport { useEffect, useMemo, useState } from 'react';\nimport { safeNamehash } from 'utils/safeNamehash';\nimport uriToHttp from 'utils/uriToHttp';\nimport { useSingleCallResult } from '../state/multicall/hooks';\nimport { isAddress } from '../utils';\nimport isZero from '../utils/isZero';\nimport { useENSRegistrarContract, useENSResolverContract, useERC721Contract, useERC1155Contract } from './useContract';\nimport useDebounce from './useDebounce';\nimport useENSName from './useENSName';\nimport { useActiveWeb3React } from './web3';\n/**\n * Returns the ENS avatar URI, if available.\n * Spec: https://gist.github.com/Arachnid/9db60bd75277969ee1689c8742b75182.\n */\n\nexport default function useENSAvatar(address, enforceOwnership = true) {\n  _s();\n\n  const debouncedAddress = useDebounce(address, 200);\n  const node = useMemo(() => {\n    if (!debouncedAddress || !isAddress(debouncedAddress)) return undefined;\n    return namehash(`${debouncedAddress.toLowerCase().substr(2)}.addr.reverse`);\n  }, [debouncedAddress]);\n  const addressAvatar = useAvatarFromNode(node);\n  const ENSName = useENSName(address).ENSName;\n  const nameAvatar = useAvatarFromNode(ENSName === null ? undefined : safeNamehash(ENSName));\n  let avatar = addressAvatar.avatar || nameAvatar.avatar;\n  const nftAvatar = useAvatarFromNFT(avatar, enforceOwnership);\n  avatar = nftAvatar.avatar || avatar;\n  const http = avatar && uriToHttp(avatar)[0];\n  const changed = debouncedAddress !== address;\n  return useMemo(() => ({\n    avatar: changed ? null : http !== null && http !== void 0 ? http : null,\n    loading: changed || addressAvatar.loading || nameAvatar.loading || nftAvatar.loading\n  }), [addressAvatar.loading, changed, http, nameAvatar.loading, nftAvatar.loading]);\n}\n\n_s(useENSAvatar, \"kPqadEJJYXkc1pn3HmgR3c/pQo0=\", false, function () {\n  return [useDebounce, useAvatarFromNode, useENSName, useAvatarFromNode, useAvatarFromNFT];\n});\n\nfunction useAvatarFromNode(node) {\n  _s2();\n\n  var _resolverAddress$resu;\n\n  const nodeArgument = useMemo(() => [node], [node]);\n  const textArgument = useMemo(() => [node, 'avatar'], [node]);\n  const registrarContract = useENSRegistrarContract(false);\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', nodeArgument);\n  const resolverAddressResult = (_resolverAddress$resu = resolverAddress.result) === null || _resolverAddress$resu === void 0 ? void 0 : _resolverAddress$resu[0];\n  const resolverContract = useENSResolverContract(resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined, false);\n  const avatar = useSingleCallResult(resolverContract, 'text', textArgument);\n  return useMemo(() => {\n    var _avatar$result;\n\n    return {\n      avatar: (_avatar$result = avatar.result) === null || _avatar$result === void 0 ? void 0 : _avatar$result[0],\n      loading: resolverAddress.loading || avatar.loading\n    };\n  }, [avatar.loading, avatar.result, resolverAddress.loading]);\n}\n\n_s2(useAvatarFromNode, \"CAccaDqfuiWTPuzsSvy0wlA1c/Q=\", false, function () {\n  return [useENSRegistrarContract, useSingleCallResult, useENSResolverContract, useSingleCallResult];\n});\n\nfunction useAvatarFromNFT(nftUri = '', enforceOwnership) {\n  _s3();\n\n  var _parts$1$split, _parts$, _parts$2$split, _parts$2;\n\n  const parts = nftUri.toLowerCase().split(':');\n  const protocol = parts[0]; // ignore the chain from eip155\n  // TODO: when we are able, pull only from the specified chain\n\n  const [, erc] = (_parts$1$split = (_parts$ = parts[1]) === null || _parts$ === void 0 ? void 0 : _parts$.split('/')) !== null && _parts$1$split !== void 0 ? _parts$1$split : [];\n  const [contractAddress, id] = (_parts$2$split = (_parts$2 = parts[2]) === null || _parts$2 === void 0 ? void 0 : _parts$2.split('/')) !== null && _parts$2$split !== void 0 ? _parts$2$split : [];\n  const isERC721 = protocol === 'eip155' && erc === 'erc721';\n  const isERC1155 = protocol === 'eip155' && erc === 'erc1155';\n  const erc721 = useERC721Uri(isERC721 ? contractAddress : undefined, id, enforceOwnership);\n  const erc1155 = useERC1155Uri(isERC1155 ? contractAddress : undefined, id, enforceOwnership);\n  const uri = erc721.uri || erc1155.uri;\n  const http = uri && uriToHttp(uri)[0];\n  const [loading, setLoading] = useState(false);\n  const [avatar, setAvatar] = useState(undefined);\n  useEffect(() => {\n    setAvatar(undefined);\n\n    if (http) {\n      setLoading(true);\n      fetch(http).then(res => res.json()).then(({\n        image\n      }) => {\n        setAvatar(image);\n      }).catch(e => console.warn(e)).finally(() => {\n        setLoading(false);\n      });\n    }\n  }, [http]);\n  return useMemo(() => ({\n    avatar,\n    loading: erc721.loading || erc1155.loading || loading\n  }), [avatar, erc1155.loading, erc721.loading, loading]);\n}\n\n_s3(useAvatarFromNFT, \"U9booG3oVmc10wR1Yu6HvEmz+/I=\", false, function () {\n  return [useERC721Uri, useERC1155Uri];\n});\n\nfunction useERC721Uri(contractAddress, id, enforceOwnership) {\n  _s4();\n\n  const idArgument = useMemo(() => [id], [id]);\n  const {\n    account\n  } = useActiveWeb3React();\n  const contract = useERC721Contract(contractAddress);\n  const owner = useSingleCallResult(contract, 'ownerOf', idArgument);\n  const uri = useSingleCallResult(contract, 'tokenURI', idArgument);\n  return useMemo(() => {\n    var _owner$result, _uri$result;\n\n    return {\n      uri: !enforceOwnership || account === ((_owner$result = owner.result) === null || _owner$result === void 0 ? void 0 : _owner$result[0]) ? (_uri$result = uri.result) === null || _uri$result === void 0 ? void 0 : _uri$result[0] : undefined,\n      loading: owner.loading || uri.loading\n    };\n  }, [account, enforceOwnership, owner.loading, owner.result, uri.loading, uri.result]);\n}\n\n_s4(useERC721Uri, \"tw7zoxEwgytuvllPM9p+F4Kqv38=\", false, function () {\n  return [useActiveWeb3React, useERC721Contract, useSingleCallResult, useSingleCallResult];\n});\n\nfunction useERC1155Uri(contractAddress, id, enforceOwnership) {\n  _s5();\n\n  const {\n    account\n  } = useActiveWeb3React();\n  const idArgument = useMemo(() => [id], [id]);\n  const accountArgument = useMemo(() => [account || '', id], [account, id]);\n  const contract = useERC1155Contract(contractAddress);\n  const balance = useSingleCallResult(contract, 'balanceOf', accountArgument);\n  const uri = useSingleCallResult(contract, 'uri', idArgument);\n  return useMemo(() => {\n    var _balance$result, _uri$result2;\n\n    return {\n      uri: !enforceOwnership || ((_balance$result = balance.result) === null || _balance$result === void 0 ? void 0 : _balance$result[0]) > 0 ? (_uri$result2 = uri.result) === null || _uri$result2 === void 0 ? void 0 : _uri$result2[0] : undefined,\n      loading: balance.loading || uri.loading\n    };\n  }, [balance.loading, balance.result, enforceOwnership, uri.loading, uri.result]);\n}\n\n_s5(useERC1155Uri, \"GUPAahOBzmEDEfC4pb2yyATzKhA=\", false, function () {\n  return [useActiveWeb3React, useERC1155Contract, useSingleCallResult, useSingleCallResult];\n});","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/hooks/useENSAvatar.ts"],"names":["namehash","useEffect","useMemo","useState","safeNamehash","uriToHttp","useSingleCallResult","isAddress","isZero","useENSRegistrarContract","useENSResolverContract","useERC721Contract","useERC1155Contract","useDebounce","useENSName","useActiveWeb3React","useENSAvatar","address","enforceOwnership","debouncedAddress","node","undefined","toLowerCase","substr","addressAvatar","useAvatarFromNode","ENSName","nameAvatar","avatar","nftAvatar","useAvatarFromNFT","http","changed","loading","nodeArgument","textArgument","registrarContract","resolverAddress","resolverAddressResult","result","resolverContract","nftUri","parts","split","protocol","erc","contractAddress","id","isERC721","isERC1155","erc721","useERC721Uri","erc1155","useERC1155Uri","uri","setLoading","setAvatar","fetch","then","res","json","image","catch","e","console","warn","finally","idArgument","account","contract","owner","accountArgument","balance"],"mappings":"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","sourcesContent":["import { namehash } from '@ethersproject/hash'\nimport { useEffect, useMemo, useState } from 'react'\nimport { safeNamehash } from 'utils/safeNamehash'\nimport uriToHttp from 'utils/uriToHttp'\n\nimport { useSingleCallResult } from '../state/multicall/hooks'\nimport { isAddress } from '../utils'\nimport isZero from '../utils/isZero'\nimport { useENSRegistrarContract, useENSResolverContract, useERC721Contract, useERC1155Contract } from './useContract'\nimport useDebounce from './useDebounce'\nimport useENSName from './useENSName'\nimport { useActiveWeb3React } from './web3'\n\n/**\n * Returns the ENS avatar URI, if available.\n * Spec: https://gist.github.com/Arachnid/9db60bd75277969ee1689c8742b75182.\n */\nexport default function useENSAvatar(\n  address?: string,\n  enforceOwnership = true\n): { avatar: string | null; loading: boolean } {\n  const debouncedAddress = useDebounce(address, 200)\n  const node = useMemo(() => {\n    if (!debouncedAddress || !isAddress(debouncedAddress)) return undefined\n    return namehash(`${debouncedAddress.toLowerCase().substr(2)}.addr.reverse`)\n  }, [debouncedAddress])\n\n  const addressAvatar = useAvatarFromNode(node)\n  const ENSName = useENSName(address).ENSName\n  const nameAvatar = useAvatarFromNode(ENSName === null ? undefined : safeNamehash(ENSName))\n  let avatar = addressAvatar.avatar || nameAvatar.avatar\n\n  const nftAvatar = useAvatarFromNFT(avatar, enforceOwnership)\n  avatar = nftAvatar.avatar || avatar\n\n  const http = avatar && uriToHttp(avatar)[0]\n\n  const changed = debouncedAddress !== address\n  return useMemo(\n    () => ({\n      avatar: changed ? null : http ?? null,\n      loading: changed || addressAvatar.loading || nameAvatar.loading || nftAvatar.loading,\n    }),\n    [addressAvatar.loading, changed, http, nameAvatar.loading, nftAvatar.loading]\n  )\n}\n\nfunction useAvatarFromNode(node?: string): { avatar?: string; loading: boolean } {\n  const nodeArgument = useMemo(() => [node], [node])\n  const textArgument = useMemo(() => [node, 'avatar'], [node])\n  const registrarContract = useENSRegistrarContract(false)\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', nodeArgument)\n  const resolverAddressResult = resolverAddress.result?.[0]\n  const resolverContract = useENSResolverContract(\n    resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined,\n    false\n  )\n  const avatar = useSingleCallResult(resolverContract, 'text', textArgument)\n\n  return useMemo(\n    () => ({\n      avatar: avatar.result?.[0],\n      loading: resolverAddress.loading || avatar.loading,\n    }),\n    [avatar.loading, avatar.result, resolverAddress.loading]\n  )\n}\n\nfunction useAvatarFromNFT(nftUri = '', enforceOwnership: boolean): { avatar?: string; loading: boolean } {\n  const parts = nftUri.toLowerCase().split(':')\n  const protocol = parts[0]\n  // ignore the chain from eip155\n  // TODO: when we are able, pull only from the specified chain\n  const [, erc] = parts[1]?.split('/') ?? []\n  const [contractAddress, id] = parts[2]?.split('/') ?? []\n  const isERC721 = protocol === 'eip155' && erc === 'erc721'\n  const isERC1155 = protocol === 'eip155' && erc === 'erc1155'\n  const erc721 = useERC721Uri(isERC721 ? contractAddress : undefined, id, enforceOwnership)\n  const erc1155 = useERC1155Uri(isERC1155 ? contractAddress : undefined, id, enforceOwnership)\n  const uri = erc721.uri || erc1155.uri\n  const http = uri && uriToHttp(uri)[0]\n\n  const [loading, setLoading] = useState(false)\n  const [avatar, setAvatar] = useState(undefined)\n  useEffect(() => {\n    setAvatar(undefined)\n    if (http) {\n      setLoading(true)\n      fetch(http)\n        .then((res) => res.json())\n        .then(({ image }) => {\n          setAvatar(image)\n        })\n        .catch((e) => console.warn(e))\n        .finally(() => {\n          setLoading(false)\n        })\n    }\n  }, [http])\n\n  return useMemo(\n    () => ({ avatar, loading: erc721.loading || erc1155.loading || loading }),\n    [avatar, erc1155.loading, erc721.loading, loading]\n  )\n}\n\nfunction useERC721Uri(\n  contractAddress: string | undefined,\n  id: string | undefined,\n  enforceOwnership: boolean\n): { uri?: string; loading: boolean } {\n  const idArgument = useMemo(() => [id], [id])\n  const { account } = useActiveWeb3React()\n  const contract = useERC721Contract(contractAddress)\n  const owner = useSingleCallResult(contract, 'ownerOf', idArgument)\n  const uri = useSingleCallResult(contract, 'tokenURI', idArgument)\n  return useMemo(\n    () => ({\n      uri: !enforceOwnership || account === owner.result?.[0] ? uri.result?.[0] : undefined,\n      loading: owner.loading || uri.loading,\n    }),\n    [account, enforceOwnership, owner.loading, owner.result, uri.loading, uri.result]\n  )\n}\n\nfunction useERC1155Uri(\n  contractAddress: string | undefined,\n  id: string | undefined,\n  enforceOwnership: boolean\n): { uri?: string; loading: boolean } {\n  const { account } = useActiveWeb3React()\n  const idArgument = useMemo(() => [id], [id])\n  const accountArgument = useMemo(() => [account || '', id], [account, id])\n  const contract = useERC1155Contract(contractAddress)\n  const balance = useSingleCallResult(contract, 'balanceOf', accountArgument)\n  const uri = useSingleCallResult(contract, 'uri', idArgument)\n  return useMemo(\n    () => ({\n      uri: !enforceOwnership || balance.result?.[0] > 0 ? uri.result?.[0] : undefined,\n      loading: balance.loading || uri.loading,\n    }),\n    [balance.loading, balance.result, enforceOwnership, uri.loading, uri.result]\n  )\n}\n"]},"metadata":{},"sourceType":"module"}