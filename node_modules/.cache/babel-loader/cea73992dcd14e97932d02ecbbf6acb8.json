{"ast":null,"code":"import _regeneratorRuntime from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _defineProperty from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _contractAddressByCha;\n\nimport _ from 'lodash';\nimport stats from 'stats-lite';\nimport { UniswapInterfaceMulticall__factory } from '../types/v3/factories/UniswapInterfaceMulticall__factory';\nimport { ChainId } from '../util';\nimport { UNISWAP_MULTICALL_ADDRESS } from '../util/addresses';\nimport { log } from '../util/log';\nimport { IMulticallProvider } from './multicall-provider';\nvar contractAddressByChain = (_contractAddressByCha = {}, _defineProperty(_contractAddressByCha, ChainId.MAINNET, UNISWAP_MULTICALL_ADDRESS), _defineProperty(_contractAddressByCha, ChainId.RINKEBY, UNISWAP_MULTICALL_ADDRESS), _defineProperty(_contractAddressByCha, ChainId.KOVAN, UNISWAP_MULTICALL_ADDRESS), _defineProperty(_contractAddressByCha, ChainId.ROPSTEN, UNISWAP_MULTICALL_ADDRESS), _defineProperty(_contractAddressByCha, ChainId.GÃ–RLI, UNISWAP_MULTICALL_ADDRESS), _contractAddressByCha);\n/**\n * The UniswapMulticall contract has added functionality for limiting the amount of gas\n * that each call within the multicall can consume. This is useful for operations where\n * a call could consume such a large amount of gas that it causes the node to error out\n * with an out of gas error.\n *\n * @export\n * @class UniswapMulticallProvider\n */\n\nexport var UniswapMulticallProvider = /*#__PURE__*/function (_IMulticallProvider) {\n  _inherits(UniswapMulticallProvider, _IMulticallProvider);\n\n  var _super = _createSuper(UniswapMulticallProvider);\n\n  function UniswapMulticallProvider(chainId, provider) {\n    var _this;\n\n    var gasLimitPerCall = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1000000;\n    var multicallAddressOverride = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : UNISWAP_MULTICALL_ADDRESS;\n\n    _classCallCheck(this, UniswapMulticallProvider);\n\n    _this = _super.call(this);\n    _this.chainId = chainId;\n    _this.provider = provider;\n    _this.gasLimitPerCall = gasLimitPerCall;\n    _this.multicallAddressOverride = multicallAddressOverride;\n    var multicallAddress = multicallAddressOverride ? multicallAddressOverride : contractAddressByChain[_this.chainId];\n\n    if (!multicallAddress) {\n      throw new Error(\"No address for Uniswap Multicall Contract on chain id: \".concat(chainId));\n    }\n\n    _this.multicallContract = UniswapInterfaceMulticall__factory.connect(multicallAddress, _this.provider);\n    return _this;\n  }\n\n  _createClass(UniswapMulticallProvider, [{\n    key: \"callSameFunctionOnMultipleContracts\",\n    value: function () {\n      var _callSameFunctionOnMultipleContracts = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(params) {\n        var _this2 = this;\n\n        var _a, addresses, contractInterface, functionName, functionParams, providerConfig, blockNumberOverride, fragment, callData, calls, _yield$this$multicall, blockNumber, aggregateResults, results, i, _aggregateResults$i, success, returnData;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                addresses = params.addresses, contractInterface = params.contractInterface, functionName = params.functionName, functionParams = params.functionParams, providerConfig = params.providerConfig;\n                blockNumberOverride = (_a = providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber) !== null && _a !== void 0 ? _a : undefined;\n                fragment = contractInterface.getFunction(functionName);\n                callData = contractInterface.encodeFunctionData(fragment, functionParams);\n                calls = _.map(addresses, function (address) {\n                  return {\n                    target: address,\n                    callData: callData,\n                    gasLimit: _this2.gasLimitPerCall\n                  };\n                });\n                log.debug({\n                  calls: calls\n                }, \"About to multicall for \".concat(functionName, \" across \").concat(addresses.length, \" addresses\"));\n                _context.next = 8;\n                return this.multicallContract.callStatic.multicall(calls, {\n                  blockTag: blockNumberOverride\n                });\n\n              case 8:\n                _yield$this$multicall = _context.sent;\n                blockNumber = _yield$this$multicall.blockNumber;\n                aggregateResults = _yield$this$multicall.returnData;\n                results = [];\n                i = 0;\n\n              case 13:\n                if (!(i < aggregateResults.length)) {\n                  _context.next = 23;\n                  break;\n                }\n\n                _aggregateResults$i = aggregateResults[i], success = _aggregateResults$i.success, returnData = _aggregateResults$i.returnData; // Return data \"0x\" is sometimes returned for invalid calls.\n\n                if (!(!success || returnData.length <= 2)) {\n                  _context.next = 19;\n                  break;\n                }\n\n                log.debug({\n                  result: aggregateResults[i]\n                }, \"Invalid result calling \".concat(functionName, \" on address \").concat(addresses[i]));\n                results.push({\n                  success: false,\n                  returnData: returnData\n                });\n                return _context.abrupt(\"continue\", 20);\n\n              case 19:\n                results.push({\n                  success: true,\n                  result: contractInterface.decodeFunctionResult(fragment, returnData)\n                });\n\n              case 20:\n                i++;\n                _context.next = 13;\n                break;\n\n              case 23:\n                log.debug({\n                  results: results\n                }, \"Results for multicall on \".concat(functionName, \" across \").concat(addresses.length, \" addresses as of block \").concat(blockNumber));\n                return _context.abrupt(\"return\", {\n                  blockNumber: blockNumber,\n                  results: results\n                });\n\n              case 25:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function callSameFunctionOnMultipleContracts(_x) {\n        return _callSameFunctionOnMultipleContracts.apply(this, arguments);\n      }\n\n      return callSameFunctionOnMultipleContracts;\n    }()\n  }, {\n    key: \"callSameFunctionOnContractWithMultipleParams\",\n    value: function () {\n      var _callSameFunctionOnContractWithMultipleParams = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(params) {\n        var _a, _b, address, contractInterface, functionName, functionParams, additionalConfig, providerConfig, fragment, gasLimitPerCall, blockNumberOverride, calls, _yield$this$multicall2, blockNumber, aggregateResults, results, gasUsedForSuccess, i, _aggregateResults$i2, success, returnData, gasUsed;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                address = params.address, contractInterface = params.contractInterface, functionName = params.functionName, functionParams = params.functionParams, additionalConfig = params.additionalConfig, providerConfig = params.providerConfig;\n                fragment = contractInterface.getFunction(functionName);\n                gasLimitPerCall = (_a = additionalConfig === null || additionalConfig === void 0 ? void 0 : additionalConfig.gasLimitPerCallOverride) !== null && _a !== void 0 ? _a : this.gasLimitPerCall;\n                blockNumberOverride = (_b = providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber) !== null && _b !== void 0 ? _b : undefined;\n                calls = _.map(functionParams, function (functionParam) {\n                  var callData = contractInterface.encodeFunctionData(fragment, functionParam);\n                  return {\n                    target: address,\n                    callData: callData,\n                    gasLimit: gasLimitPerCall\n                  };\n                });\n                log.debug({\n                  calls: calls\n                }, \"About to multicall for \".concat(functionName, \" at address \").concat(address, \" with \").concat(functionParams.length, \" different sets of params\"));\n                _context2.next = 8;\n                return this.multicallContract.callStatic.multicall(calls, {\n                  blockTag: blockNumberOverride\n                });\n\n              case 8:\n                _yield$this$multicall2 = _context2.sent;\n                blockNumber = _yield$this$multicall2.blockNumber;\n                aggregateResults = _yield$this$multicall2.returnData;\n                results = [];\n                gasUsedForSuccess = [];\n                i = 0;\n\n              case 14:\n                if (!(i < aggregateResults.length)) {\n                  _context2.next = 25;\n                  break;\n                }\n\n                _aggregateResults$i2 = aggregateResults[i], success = _aggregateResults$i2.success, returnData = _aggregateResults$i2.returnData, gasUsed = _aggregateResults$i2.gasUsed; // Return data \"0x\" is sometimes returned for invalid pools.\n\n                if (!(!success || returnData.length <= 2)) {\n                  _context2.next = 20;\n                  break;\n                }\n\n                log.debug({\n                  result: aggregateResults[i]\n                }, \"Invalid result calling \".concat(functionName, \" with params \").concat(functionParams[i]));\n                results.push({\n                  success: false,\n                  returnData: returnData\n                });\n                return _context2.abrupt(\"continue\", 22);\n\n              case 20:\n                gasUsedForSuccess.push(gasUsed.toNumber());\n                results.push({\n                  success: true,\n                  result: contractInterface.decodeFunctionResult(fragment, returnData)\n                });\n\n              case 22:\n                i++;\n                _context2.next = 14;\n                break;\n\n              case 25:\n                log.debug({\n                  results: results,\n                  functionName: functionName,\n                  address: address\n                }, \"Results for multicall for \".concat(functionName, \" at address \").concat(address, \" with \").concat(functionParams.length, \" different sets of params. Results as of block \").concat(blockNumber));\n                return _context2.abrupt(\"return\", {\n                  blockNumber: blockNumber,\n                  results: results,\n                  approxGasUsedPerSuccessCall: stats.percentile(gasUsedForSuccess, 99)\n                });\n\n              case 27:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function callSameFunctionOnContractWithMultipleParams(_x2) {\n        return _callSameFunctionOnContractWithMultipleParams.apply(this, arguments);\n      }\n\n      return callSameFunctionOnContractWithMultipleParams;\n    }()\n  }]);\n\n  return UniswapMulticallProvider;\n}(IMulticallProvider);","map":{"version":3,"sources":["../../../../src/providers/multicall-uniswap-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import _ from 'lodash';\nimport stats from 'stats-lite';\nimport { UniswapInterfaceMulticall__factory } from '../types/v3/factories/UniswapInterfaceMulticall__factory';\nimport { ChainId } from '../util';\nimport { UNISWAP_MULTICALL_ADDRESS } from '../util/addresses';\nimport { log } from '../util/log';\nimport { IMulticallProvider, } from './multicall-provider';\nconst contractAddressByChain = {\n    [ChainId.MAINNET]: UNISWAP_MULTICALL_ADDRESS,\n    [ChainId.RINKEBY]: UNISWAP_MULTICALL_ADDRESS,\n    [ChainId.KOVAN]: UNISWAP_MULTICALL_ADDRESS,\n    [ChainId.ROPSTEN]: UNISWAP_MULTICALL_ADDRESS,\n    [ChainId.GÃ–RLI]: UNISWAP_MULTICALL_ADDRESS,\n};\n/**\n * The UniswapMulticall contract has added functionality for limiting the amount of gas\n * that each call within the multicall can consume. This is useful for operations where\n * a call could consume such a large amount of gas that it causes the node to error out\n * with an out of gas error.\n *\n * @export\n * @class UniswapMulticallProvider\n */\nexport class UniswapMulticallProvider extends IMulticallProvider {\n    constructor(chainId, provider, gasLimitPerCall = 1000000, multicallAddressOverride = UNISWAP_MULTICALL_ADDRESS) {\n        super();\n        this.chainId = chainId;\n        this.provider = provider;\n        this.gasLimitPerCall = gasLimitPerCall;\n        this.multicallAddressOverride = multicallAddressOverride;\n        const multicallAddress = multicallAddressOverride\n            ? multicallAddressOverride\n            : contractAddressByChain[this.chainId];\n        if (!multicallAddress) {\n            throw new Error(`No address for Uniswap Multicall Contract on chain id: ${chainId}`);\n        }\n        this.multicallContract = UniswapInterfaceMulticall__factory.connect(multicallAddress, this.provider);\n    }\n    async callSameFunctionOnMultipleContracts(params) {\n        var _a;\n        const { addresses, contractInterface, functionName, functionParams, providerConfig, } = params;\n        const blockNumberOverride = (_a = providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber) !== null && _a !== void 0 ? _a : undefined;\n        const fragment = contractInterface.getFunction(functionName);\n        const callData = contractInterface.encodeFunctionData(fragment, functionParams);\n        const calls = _.map(addresses, (address) => {\n            return {\n                target: address,\n                callData,\n                gasLimit: this.gasLimitPerCall,\n            };\n        });\n        log.debug({ calls }, `About to multicall for ${functionName} across ${addresses.length} addresses`);\n        const { blockNumber, returnData: aggregateResults } = await this.multicallContract.callStatic.multicall(calls, {\n            blockTag: blockNumberOverride,\n        });\n        const results = [];\n        for (let i = 0; i < aggregateResults.length; i++) {\n            const { success, returnData } = aggregateResults[i];\n            // Return data \"0x\" is sometimes returned for invalid calls.\n            if (!success || returnData.length <= 2) {\n                log.debug({ result: aggregateResults[i] }, `Invalid result calling ${functionName} on address ${addresses[i]}`);\n                results.push({\n                    success: false,\n                    returnData,\n                });\n                continue;\n            }\n            results.push({\n                success: true,\n                result: contractInterface.decodeFunctionResult(fragment, returnData),\n            });\n        }\n        log.debug({ results }, `Results for multicall on ${functionName} across ${addresses.length} addresses as of block ${blockNumber}`);\n        return { blockNumber, results };\n    }\n    async callSameFunctionOnContractWithMultipleParams(params) {\n        var _a, _b;\n        const { address, contractInterface, functionName, functionParams, additionalConfig, providerConfig, } = params;\n        const fragment = contractInterface.getFunction(functionName);\n        const gasLimitPerCall = (_a = additionalConfig === null || additionalConfig === void 0 ? void 0 : additionalConfig.gasLimitPerCallOverride) !== null && _a !== void 0 ? _a : this.gasLimitPerCall;\n        const blockNumberOverride = (_b = providerConfig === null || providerConfig === void 0 ? void 0 : providerConfig.blockNumber) !== null && _b !== void 0 ? _b : undefined;\n        const calls = _.map(functionParams, (functionParam) => {\n            const callData = contractInterface.encodeFunctionData(fragment, functionParam);\n            return {\n                target: address,\n                callData,\n                gasLimit: gasLimitPerCall,\n            };\n        });\n        log.debug({ calls }, `About to multicall for ${functionName} at address ${address} with ${functionParams.length} different sets of params`);\n        const { blockNumber, returnData: aggregateResults } = await this.multicallContract.callStatic.multicall(calls, {\n            blockTag: blockNumberOverride,\n        });\n        const results = [];\n        const gasUsedForSuccess = [];\n        for (let i = 0; i < aggregateResults.length; i++) {\n            const { success, returnData, gasUsed } = aggregateResults[i];\n            // Return data \"0x\" is sometimes returned for invalid pools.\n            if (!success || returnData.length <= 2) {\n                log.debug({ result: aggregateResults[i] }, `Invalid result calling ${functionName} with params ${functionParams[i]}`);\n                results.push({\n                    success: false,\n                    returnData,\n                });\n                continue;\n            }\n            gasUsedForSuccess.push(gasUsed.toNumber());\n            results.push({\n                success: true,\n                result: contractInterface.decodeFunctionResult(fragment, returnData),\n            });\n        }\n        log.debug({ results, functionName, address }, `Results for multicall for ${functionName} at address ${address} with ${functionParams.length} different sets of params. Results as of block ${blockNumber}`);\n        return {\n            blockNumber,\n            results,\n            approxGasUsedPerSuccessCall: stats.percentile(gasUsedForSuccess, 99),\n        };\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGljYWxsLXVuaXN3YXAtcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvcHJvdmlkZXJzL211bHRpY2FsbC11bmlzd2FwLXByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sQ0FBQyxNQUFNLFFBQVEsQ0FBQztBQUN2QixPQUFPLEtBQUssTUFBTSxZQUFZLENBQUM7QUFDL0IsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLE1BQU0sMERBQTBELENBQUM7QUFFOUcsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNsQyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ2xDLE9BQU8sRUFHTCxrQkFBa0IsR0FFbkIsTUFBTSxzQkFBc0IsQ0FBQztBQU05QixNQUFNLHNCQUFzQixHQUFzQztJQUNoRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSx5QkFBeUI7SUFDNUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUseUJBQXlCO0lBQzVDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLHlCQUF5QjtJQUMxQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSx5QkFBeUI7SUFDNUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUseUJBQXlCO0NBQzNDLENBQUM7QUFFRjs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sT0FBTyx3QkFBeUIsU0FBUSxrQkFBMEM7SUFHdEYsWUFDWSxPQUFnQixFQUNoQixRQUFnQyxFQUNoQyxrQkFBa0IsT0FBUyxFQUMzQiwyQkFBMkIseUJBQXlCO1FBRTlELEtBQUssRUFBRSxDQUFDO1FBTEUsWUFBTyxHQUFQLE9BQU8sQ0FBUztRQUNoQixhQUFRLEdBQVIsUUFBUSxDQUF3QjtRQUNoQyxvQkFBZSxHQUFmLGVB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"]},"metadata":{},"sourceType":"module"}