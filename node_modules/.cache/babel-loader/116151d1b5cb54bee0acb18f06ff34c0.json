{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _regeneratorRuntime from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { BigNumber } from '@ethersproject/bignumber';\nimport { FeeAmount } from '@uniswap/v3-sdk';\nimport _ from 'lodash';\nimport { WRAPPED_NATIVE_CURRENCY } from '../../../..';\nimport { CurrencyAmount } from '../../../../util/amounts';\nimport { log } from '../../../../util/log';\nimport { IV3GasModelFactory, usdGasTokensByChain } from '../gas-model'; // Constant cost for doing any swap regardless of pools.\n\nvar BASE_SWAP_COST = BigNumber.from(2000); // Cost for crossing an initialized tick.\n\nvar COST_PER_INIT_TICK = BigNumber.from(31000); // Cost for crossing an uninitialized tick.\n\nvar COST_PER_UNINIT_TICK = BigNumber.from(0); // Constant per pool swap in the route.\n\nvar COST_PER_HOP = BigNumber.from(80000);\n/**\n * Computes a gas estimate for a V3 swap using heuristics.\n * Considers number of hops in the route, number of ticks crossed\n * and the typical base cost for a swap.\n *\n * We get the number of ticks crossed in a swap from the QuoterV2\n * contract.\n *\n * We compute gas estimates off-chain because\n *  1/ Calling eth_estimateGas for a swaps requires the caller to have\n *     the full balance token being swapped, and approvals.\n *  2/ Tracking gas used using a wrapper contract is not accurate with Multicall\n *     due to EIP-2929. We would have to make a request for every swap we wanted to estimate.\n *  3/ For V2 we simulate all our swaps off-chain so have no way to track gas used.\n *\n * @export\n * @class V3HeuristicGasModelFactory\n */\n\nexport var V3HeuristicGasModelFactory = /*#__PURE__*/function (_IV3GasModelFactory) {\n  _inherits(V3HeuristicGasModelFactory, _IV3GasModelFactory);\n\n  var _super = _createSuper(V3HeuristicGasModelFactory);\n\n  function V3HeuristicGasModelFactory() {\n    _classCallCheck(this, V3HeuristicGasModelFactory);\n\n    return _super.call(this);\n  }\n\n  _createClass(V3HeuristicGasModelFactory, [{\n    key: \"buildGasModel\",\n    value: function () {\n      var _buildGasModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(chainId, gasPriceWei, poolProvider, token // this is the quoteToken\n      ) {\n        var _this = this;\n\n        var nativeCurrency, _usdPool, _estimateGasCost, nativePool, usdPool, usdToken, estimateGasCost;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // If our quote token is WETH, we don't need to convert our gas use to be in terms\n                // of the quote token in order to produce a gas adjusted amount.\n                // We do return a gas use in USD however, so we still convert to usd.\n                nativeCurrency = WRAPPED_NATIVE_CURRENCY[chainId];\n\n                if (!token.equals(nativeCurrency)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _context.next = 4;\n                return this.getHighestLiquidityUSDPool(chainId, poolProvider);\n\n              case 4:\n                _usdPool = _context.sent;\n\n                _estimateGasCost = function _estimateGasCost(routeWithValidQuote) {\n                  var _this$estimateGas = _this.estimateGas(routeWithValidQuote, gasPriceWei, chainId),\n                      gasCostNativeCurrency = _this$estimateGas.gasCostNativeCurrency,\n                      gasUse = _this$estimateGas.gasUse;\n\n                  var token0 = _usdPool.token0.address == nativeCurrency.address;\n                  var nativeTokenPrice = token0 ? _usdPool.token0Price : _usdPool.token1Price;\n                  var gasCostInTermsOfUSD = nativeTokenPrice.quote(gasCostNativeCurrency);\n                  return {\n                    gasEstimate: gasUse,\n                    gasCostInToken: gasCostNativeCurrency,\n                    gasCostInUSD: gasCostInTermsOfUSD\n                  };\n                };\n\n                return _context.abrupt(\"return\", {\n                  estimateGasCost: _estimateGasCost\n                });\n\n              case 7:\n                _context.next = 9;\n                return this.getHighestLiquidityNativePool(chainId, token, poolProvider);\n\n              case 9:\n                nativePool = _context.sent;\n                _context.next = 12;\n                return this.getHighestLiquidityUSDPool(chainId, poolProvider);\n\n              case 12:\n                usdPool = _context.sent;\n                usdToken = usdPool.token0.address == nativeCurrency.address ? usdPool.token1 : usdPool.token0;\n\n                estimateGasCost = function estimateGasCost(routeWithValidQuote) {\n                  var _this$estimateGas2 = _this.estimateGas(routeWithValidQuote, gasPriceWei, chainId),\n                      gasCostNativeCurrency = _this$estimateGas2.gasCostNativeCurrency,\n                      gasUse = _this$estimateGas2.gasUse;\n\n                  if (!nativePool) {\n                    log.info(\"Unable to find \".concat(nativeCurrency.symbol, \" pool with the quote token, \").concat(token.symbol, \" to produce gas adjusted costs. Route will not account for gas.\"));\n                    return {\n                      gasEstimate: gasUse,\n                      gasCostInToken: CurrencyAmount.fromRawAmount(token, 0),\n                      gasCostInUSD: CurrencyAmount.fromRawAmount(usdToken, 0)\n                    };\n                  }\n\n                  var token0 = nativePool.token0.address == nativeCurrency.address; // returns mid price in terms of the native currency (the ratio of quoteToken/nativeToken)\n\n                  var nativeTokenPrice = token0 ? nativePool.token0Price : nativePool.token1Price;\n                  var gasCostInTermsOfQuoteToken;\n\n                  try {\n                    // native token is base currency\n                    gasCostInTermsOfQuoteToken = nativeTokenPrice.quote(gasCostNativeCurrency);\n                  } catch (err) {\n                    log.info({\n                      nativeTokenPriceBase: nativeTokenPrice.baseCurrency,\n                      nativeTokenPriceQuote: nativeTokenPrice.quoteCurrency,\n                      gasCostInEth: gasCostNativeCurrency.currency\n                    }, 'Debug eth price token issue');\n                    throw err;\n                  } // true if token0 is the native currency\n\n\n                  var token0USDPool = usdPool.token0.address == nativeCurrency.address; // gets the mid price of the pool in terms of the native token\n\n                  var nativeTokenPriceUSDPool = token0USDPool ? usdPool.token0Price : usdPool.token1Price;\n                  var gasCostInTermsOfUSD;\n\n                  try {\n                    gasCostInTermsOfUSD = nativeTokenPriceUSDPool.quote(gasCostNativeCurrency);\n                  } catch (err) {\n                    log.info({\n                      usdT1: usdPool.token0.symbol,\n                      usdT2: usdPool.token1.symbol,\n                      gasCostInNativeToken: gasCostNativeCurrency.currency.symbol\n                    }, 'Failed to compute USD gas price');\n                    throw err;\n                  }\n\n                  return {\n                    gasEstimate: gasUse,\n                    gasCostInToken: gasCostInTermsOfQuoteToken,\n                    gasCostInUSD: gasCostInTermsOfUSD\n                  };\n                };\n\n                return _context.abrupt(\"return\", {\n                  estimateGasCost: estimateGasCost.bind(this)\n                });\n\n              case 16:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function buildGasModel(_x, _x2, _x3, _x4) {\n        return _buildGasModel.apply(this, arguments);\n      }\n\n      return buildGasModel;\n    }()\n  }, {\n    key: \"estimateGas\",\n    value: function estimateGas(routeWithValidQuote, gasPriceWei, chainId) {\n      var totalInitializedTicksCrossed = Math.max(1, _.sum(routeWithValidQuote.initializedTicksCrossedList));\n      var totalHops = BigNumber.from(routeWithValidQuote.route.pools.length);\n      var hopsGasUse = COST_PER_HOP.mul(totalHops);\n      var tickGasUse = COST_PER_INIT_TICK.mul(totalInitializedTicksCrossed);\n      var uninitializedTickGasUse = COST_PER_UNINIT_TICK.mul(0);\n      var gasUse = BASE_SWAP_COST.add(hopsGasUse).add(tickGasUse).add(uninitializedTickGasUse);\n      var totalGasCostWei = gasPriceWei.mul(gasUse);\n      var wrappedCurrency = WRAPPED_NATIVE_CURRENCY[chainId];\n      var gasCostNativeCurrency = CurrencyAmount.fromRawAmount(wrappedCurrency, totalGasCostWei.toString());\n      return {\n        gasCostNativeCurrency: gasCostNativeCurrency,\n        gasUse: gasUse\n      };\n    }\n  }, {\n    key: \"getHighestLiquidityNativePool\",\n    value: function () {\n      var _getHighestLiquidityNativePool = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(chainId, token, poolProvider) {\n        var nativeCurrency, nativePools, poolAccessor, pools, maxPool;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                nativeCurrency = WRAPPED_NATIVE_CURRENCY[chainId];\n                nativePools = _([FeeAmount.HIGH, FeeAmount.MEDIUM, FeeAmount.LOW]).map(function (feeAmount) {\n                  return [nativeCurrency, token, feeAmount];\n                }).value();\n                _context2.next = 4;\n                return poolProvider.getPools(nativePools);\n\n              case 4:\n                poolAccessor = _context2.sent;\n                pools = _([FeeAmount.HIGH, FeeAmount.MEDIUM, FeeAmount.LOW]).map(function (feeAmount) {\n                  return poolAccessor.getPool(nativeCurrency, token, feeAmount);\n                }).compact().value();\n\n                if (!(pools.length == 0)) {\n                  _context2.next = 9;\n                  break;\n                }\n\n                log.error({\n                  pools: pools\n                }, \"Could not find a \".concat(nativeCurrency.symbol, \" pool with \").concat(token.symbol, \" for computing gas costs.\"));\n                return _context2.abrupt(\"return\", null);\n\n              case 9:\n                maxPool = _.maxBy(pools, function (pool) {\n                  return pool.liquidity;\n                });\n                return _context2.abrupt(\"return\", maxPool);\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getHighestLiquidityNativePool(_x5, _x6, _x7) {\n        return _getHighestLiquidityNativePool.apply(this, arguments);\n      }\n\n      return getHighestLiquidityNativePool;\n    }()\n  }, {\n    key: \"getHighestLiquidityUSDPool\",\n    value: function () {\n      var _getHighestLiquidityUSDPool = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(chainId, poolProvider) {\n        var usdTokens, wrappedCurrency, usdPools, poolAccessor, pools, maxPool;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                usdTokens = usdGasTokensByChain[chainId];\n                wrappedCurrency = WRAPPED_NATIVE_CURRENCY[chainId];\n\n                if (usdTokens) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                throw new Error(\"Could not find a USD token for computing gas costs on \".concat(chainId));\n\n              case 4:\n                usdPools = _([FeeAmount.HIGH, FeeAmount.MEDIUM, FeeAmount.LOW, FeeAmount.LOWEST]).flatMap(function (feeAmount) {\n                  return _.map(usdTokens, function (usdToken) {\n                    return [wrappedCurrency, usdToken, feeAmount];\n                  });\n                }).value();\n                _context3.next = 7;\n                return poolProvider.getPools(usdPools);\n\n              case 7:\n                poolAccessor = _context3.sent;\n                pools = _([FeeAmount.HIGH, FeeAmount.MEDIUM, FeeAmount.LOW, FeeAmount.LOWEST]).flatMap(function (feeAmount) {\n                  var pools = [];\n\n                  var _iterator = _createForOfIteratorHelper(usdTokens),\n                      _step;\n\n                  try {\n                    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                      var _usdToken = _step.value;\n                      var pool = poolAccessor.getPool(wrappedCurrency, _usdToken, feeAmount);\n\n                      if (pool) {\n                        pools.push(pool);\n                      }\n                    }\n                  } catch (err) {\n                    _iterator.e(err);\n                  } finally {\n                    _iterator.f();\n                  }\n\n                  return pools;\n                }).compact().value();\n\n                if (!(pools.length == 0)) {\n                  _context3.next = 12;\n                  break;\n                }\n\n                log.error({\n                  pools: pools\n                }, \"Could not find a USD/\".concat(wrappedCurrency.symbol, \" pool for computing gas costs.\"));\n                throw new Error(\"Can't find USD/\".concat(wrappedCurrency.symbol, \" pool for computing gas costs.\"));\n\n              case 12:\n                maxPool = _.maxBy(pools, function (pool) {\n                  return pool.liquidity;\n                });\n                return _context3.abrupt(\"return\", maxPool);\n\n              case 14:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function getHighestLiquidityUSDPool(_x8, _x9) {\n        return _getHighestLiquidityUSDPool.apply(this, arguments);\n      }\n\n      return getHighestLiquidityUSDPool;\n    }()\n  }]);\n\n  return V3HeuristicGasModelFactory;\n}(IV3GasModelFactory);","map":{"version":3,"sources":["../../../../../../../src/routers/alpha-router/gas-models/v3/v3-heuristic-gas-model.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber';\nimport { FeeAmount } from '@uniswap/v3-sdk';\nimport _ from 'lodash';\nimport { WRAPPED_NATIVE_CURRENCY } from '../../../..';\nimport { CurrencyAmount } from '../../../../util/amounts';\nimport { log } from '../../../../util/log';\nimport { IV3GasModelFactory, usdGasTokensByChain, } from '../gas-model';\n// Constant cost for doing any swap regardless of pools.\nconst BASE_SWAP_COST = BigNumber.from(2000);\n// Cost for crossing an initialized tick.\nconst COST_PER_INIT_TICK = BigNumber.from(31000);\n// Cost for crossing an uninitialized tick.\nconst COST_PER_UNINIT_TICK = BigNumber.from(0);\n// Constant per pool swap in the route.\nconst COST_PER_HOP = BigNumber.from(80000);\n/**\n * Computes a gas estimate for a V3 swap using heuristics.\n * Considers number of hops in the route, number of ticks crossed\n * and the typical base cost for a swap.\n *\n * We get the number of ticks crossed in a swap from the QuoterV2\n * contract.\n *\n * We compute gas estimates off-chain because\n *  1/ Calling eth_estimateGas for a swaps requires the caller to have\n *     the full balance token being swapped, and approvals.\n *  2/ Tracking gas used using a wrapper contract is not accurate with Multicall\n *     due to EIP-2929. We would have to make a request for every swap we wanted to estimate.\n *  3/ For V2 we simulate all our swaps off-chain so have no way to track gas used.\n *\n * @export\n * @class V3HeuristicGasModelFactory\n */\nexport class V3HeuristicGasModelFactory extends IV3GasModelFactory {\n    constructor() {\n        super();\n    }\n    async buildGasModel(chainId, gasPriceWei, poolProvider, token\n    // this is the quoteToken\n    ) {\n        // If our quote token is WETH, we don't need to convert our gas use to be in terms\n        // of the quote token in order to produce a gas adjusted amount.\n        // We do return a gas use in USD however, so we still convert to usd.\n        const nativeCurrency = WRAPPED_NATIVE_CURRENCY[chainId];\n        if (token.equals(nativeCurrency)) {\n            const usdPool = await this.getHighestLiquidityUSDPool(chainId, poolProvider);\n            const estimateGasCost = (routeWithValidQuote) => {\n                const { gasCostNativeCurrency, gasUse } = this.estimateGas(routeWithValidQuote, gasPriceWei, chainId);\n                const token0 = usdPool.token0.address == nativeCurrency.address;\n                const nativeTokenPrice = token0\n                    ? usdPool.token0Price\n                    : usdPool.token1Price;\n                const gasCostInTermsOfUSD = nativeTokenPrice.quote(gasCostNativeCurrency);\n                return {\n                    gasEstimate: gasUse,\n                    gasCostInToken: gasCostNativeCurrency,\n                    gasCostInUSD: gasCostInTermsOfUSD,\n                };\n            };\n            return {\n                estimateGasCost,\n            };\n        }\n        // If the quote token is not in the native currency, we convert the gas cost to be in terms of the quote token.\n        // We do this by getting the highest liquidity <quoteToken>/<nativeCurrency> pool. eg. <quoteToken>/ETH pool.\n        const nativePool = await this.getHighestLiquidityNativePool(chainId, token, poolProvider);\n        const usdPool = await this.getHighestLiquidityUSDPool(chainId, poolProvider);\n        const usdToken = usdPool.token0.address == nativeCurrency.address\n            ? usdPool.token1\n            : usdPool.token0;\n        const estimateGasCost = (routeWithValidQuote) => {\n            const { gasCostNativeCurrency, gasUse } = this.estimateGas(routeWithValidQuote, gasPriceWei, chainId);\n            if (!nativePool) {\n                log.info(`Unable to find ${nativeCurrency.symbol} pool with the quote token, ${token.symbol} to produce gas adjusted costs. Route will not account for gas.`);\n                return {\n                    gasEstimate: gasUse,\n                    gasCostInToken: CurrencyAmount.fromRawAmount(token, 0),\n                    gasCostInUSD: CurrencyAmount.fromRawAmount(usdToken, 0),\n                };\n            }\n            const token0 = nativePool.token0.address == nativeCurrency.address;\n            // returns mid price in terms of the native currency (the ratio of quoteToken/nativeToken)\n            const nativeTokenPrice = token0\n                ? nativePool.token0Price\n                : nativePool.token1Price;\n            let gasCostInTermsOfQuoteToken;\n            try {\n                // native token is base currency\n                gasCostInTermsOfQuoteToken = nativeTokenPrice.quote(gasCostNativeCurrency);\n            }\n            catch (err) {\n                log.info({\n                    nativeTokenPriceBase: nativeTokenPrice.baseCurrency,\n                    nativeTokenPriceQuote: nativeTokenPrice.quoteCurrency,\n                    gasCostInEth: gasCostNativeCurrency.currency,\n                }, 'Debug eth price token issue');\n                throw err;\n            }\n            // true if token0 is the native currency\n            const token0USDPool = usdPool.token0.address == nativeCurrency.address;\n            // gets the mid price of the pool in terms of the native token\n            const nativeTokenPriceUSDPool = token0USDPool\n                ? usdPool.token0Price\n                : usdPool.token1Price;\n            let gasCostInTermsOfUSD;\n            try {\n                gasCostInTermsOfUSD = nativeTokenPriceUSDPool.quote(gasCostNativeCurrency);\n            }\n            catch (err) {\n                log.info({\n                    usdT1: usdPool.token0.symbol,\n                    usdT2: usdPool.token1.symbol,\n                    gasCostInNativeToken: gasCostNativeCurrency.currency.symbol,\n                }, 'Failed to compute USD gas price');\n                throw err;\n            }\n            return {\n                gasEstimate: gasUse,\n                gasCostInToken: gasCostInTermsOfQuoteToken,\n                gasCostInUSD: gasCostInTermsOfUSD,\n            };\n        };\n        return {\n            estimateGasCost: estimateGasCost.bind(this),\n        };\n    }\n    estimateGas(routeWithValidQuote, gasPriceWei, chainId) {\n        const totalInitializedTicksCrossed = Math.max(1, _.sum(routeWithValidQuote.initializedTicksCrossedList));\n        const totalHops = BigNumber.from(routeWithValidQuote.route.pools.length);\n        const hopsGasUse = COST_PER_HOP.mul(totalHops);\n        const tickGasUse = COST_PER_INIT_TICK.mul(totalInitializedTicksCrossed);\n        const uninitializedTickGasUse = COST_PER_UNINIT_TICK.mul(0);\n        const gasUse = BASE_SWAP_COST.add(hopsGasUse)\n            .add(tickGasUse)\n            .add(uninitializedTickGasUse);\n        const totalGasCostWei = gasPriceWei.mul(gasUse);\n        const wrappedCurrency = WRAPPED_NATIVE_CURRENCY[chainId];\n        const gasCostNativeCurrency = CurrencyAmount.fromRawAmount(wrappedCurrency, totalGasCostWei.toString());\n        return { gasCostNativeCurrency, gasUse };\n    }\n    async getHighestLiquidityNativePool(chainId, token, poolProvider) {\n        const nativeCurrency = WRAPPED_NATIVE_CURRENCY[chainId];\n        const nativePools = _([FeeAmount.HIGH, FeeAmount.MEDIUM, FeeAmount.LOW])\n            .map((feeAmount) => {\n            return [nativeCurrency, token, feeAmount];\n        })\n            .value();\n        const poolAccessor = await poolProvider.getPools(nativePools);\n        const pools = _([FeeAmount.HIGH, FeeAmount.MEDIUM, FeeAmount.LOW])\n            .map((feeAmount) => {\n            return poolAccessor.getPool(nativeCurrency, token, feeAmount);\n        })\n            .compact()\n            .value();\n        if (pools.length == 0) {\n            log.error({ pools }, `Could not find a ${nativeCurrency.symbol} pool with ${token.symbol} for computing gas costs.`);\n            return null;\n        }\n        const maxPool = _.maxBy(pools, (pool) => pool.liquidity);\n        return maxPool;\n    }\n    async getHighestLiquidityUSDPool(chainId, poolProvider) {\n        const usdTokens = usdGasTokensByChain[chainId];\n        const wrappedCurrency = WRAPPED_NATIVE_CURRENCY[chainId];\n        if (!usdTokens) {\n            throw new Error(`Could not find a USD token for computing gas costs on ${chainId}`);\n        }\n        const usdPools = _([\n            FeeAmount.HIGH,\n            FeeAmount.MEDIUM,\n            FeeAmount.LOW,\n            FeeAmount.LOWEST,\n        ])\n            .flatMap((feeAmount) => {\n            return _.map(usdTokens, (usdToken) => [wrappedCurrency, usdToken, feeAmount]);\n        })\n            .value();\n        const poolAccessor = await poolProvider.getPools(usdPools);\n        const pools = _([\n            FeeAmount.HIGH,\n            FeeAmount.MEDIUM,\n            FeeAmount.LOW,\n            FeeAmount.LOWEST,\n        ])\n            .flatMap((feeAmount) => {\n            const pools = [];\n            for (const usdToken of usdTokens) {\n                const pool = poolAccessor.getPool(wrappedCurrency, usdToken, feeAmount);\n                if (pool) {\n                    pools.push(pool);\n                }\n            }\n            return pools;\n        })\n            .compact()\n            .value();\n        if (pools.length == 0) {\n            log.error({ pools }, `Could not find a USD/${wrappedCurrency.symbol} pool for computing gas costs.`);\n            throw new Error(`Can't find USD/${wrappedCurrency.symbol} pool for computing gas costs.`);\n        }\n        const maxPool = _.maxBy(pools, (pool) => pool.liquidity);\n        return maxPool;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidjMtaGV1cmlzdGljLWdhcy1tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9yb3V0ZXJzL2FscGhhLXJvdXRlci9nYXMtbW9kZWxzL3YzL3YzLWhldXJpc3RpYy1nYXMtbW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRXJELE9BQU8sRUFBRSxTQUFTLEVBQVEsTUFBTSxpQkFBaUIsQ0FBQztBQUNsRCxPQUFPLENBQUMsTUFBTSxRQUFRLENBQUM7QUFDdkIsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBR3RELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFM0MsT0FBTyxFQUVMLGtCQUFrQixFQUNsQixtQkFBbUIsR0FDcEIsTUFBTSxjQUFjLENBQUM7QUFFdEIsd0RBQXdEO0FBQ3hELE1BQU0sY0FBYyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFFNUMseUNBQXlDO0FBQ3pDLE1BQU0sa0JBQWtCLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUVqRCwyQ0FBMkM7QUFDM0MsTUFBTSxvQkFBb0IsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRS9DLHVDQUF1QztBQUN2QyxNQUFNLFlBQVksR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRTNDOzs7Ozs7Ozs7Ozs7Ozs7OztHQWlCRztBQUNILE1BQU0sT0FBTywwQkFBMkIsU0FBUSxrQkFBa0I7SUFDaEU7UUFDRSxLQUFLLEVBQUUsQ0FBQztJQUNWLENBQUM7SUFFTSxLQUFLLENBQUMsYUFBYSxDQUN4QixPQUFnQixF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"]},"metadata":{},"sourceType":"module"}