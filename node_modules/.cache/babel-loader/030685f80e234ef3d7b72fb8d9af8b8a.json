{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { Protocol } from '@uniswap/router-sdk';\nimport qs from 'qs';\nconst protocols = [Protocol.V2, Protocol.V3];\nconst DEFAULT_QUERY_PARAMS = {\n  protocols: protocols.map(p => p.toLowerCase()).join(',') // example other params\n  // forceCrossProtocol: 'true',\n  // minSplits: '5',\n\n};\n\nasync function getClientSideQuote({\n  tokenInAddress,\n  tokenInChainId,\n  tokenInDecimals,\n  tokenInSymbol,\n  tokenOutAddress,\n  tokenOutChainId,\n  tokenOutDecimals,\n  tokenOutSymbol,\n  amount,\n  type\n}) {\n  return (await import('./clientSideSmartOrderRouter')).getQuote({\n    type,\n    chainId: tokenInChainId,\n    tokenIn: {\n      address: tokenInAddress,\n      chainId: tokenInChainId,\n      decimals: tokenInDecimals,\n      symbol: tokenInSymbol\n    },\n    tokenOut: {\n      address: tokenOutAddress,\n      chainId: tokenOutChainId,\n      decimals: tokenOutDecimals,\n      symbol: tokenOutSymbol\n    },\n    amount\n  }, {\n    protocols\n  });\n}\n\nexport const routingApi = createApi({\n  reducerPath: 'routingApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://api.uniswap.org/v1/'\n  }),\n  endpoints: build => ({\n    getQuote: build.query({\n      async queryFn(args, _api, _extraOptions, fetch) {\n        const {\n          tokenInAddress,\n          tokenInChainId,\n          tokenOutAddress,\n          tokenOutChainId,\n          amount,\n          useClientSideRouter,\n          type\n        } = args;\n        let result;\n\n        try {\n          if (useClientSideRouter) {\n            result = await getClientSideQuote(args);\n          } else {\n            const query = qs.stringify({ ...DEFAULT_QUERY_PARAMS,\n              tokenInAddress,\n              tokenInChainId,\n              tokenOutAddress,\n              tokenOutChainId,\n              amount,\n              type\n            });\n            result = await fetch(`quote?${query}`);\n          }\n\n          return {\n            data: result.data\n          };\n        } catch (e) {\n          // TODO: fall back to client-side quoter when auto router fails.\n          // deprecate 'legacy' v2/v3 routers first.\n          return {\n            error: e\n          };\n        }\n      },\n\n      keepUnusedDataFor: 10000,\n      extraOptions: {\n        maxRetries: 0\n      }\n    })\n  })\n});\nexport const {\n  useGetQuoteQuery\n} = routingApi;","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/state/routing/slice.ts"],"names":["createApi","fetchBaseQuery","Protocol","qs","protocols","V2","V3","DEFAULT_QUERY_PARAMS","map","p","toLowerCase","join","getClientSideQuote","tokenInAddress","tokenInChainId","tokenInDecimals","tokenInSymbol","tokenOutAddress","tokenOutChainId","tokenOutDecimals","tokenOutSymbol","amount","type","getQuote","chainId","tokenIn","address","decimals","symbol","tokenOut","routingApi","reducerPath","baseQuery","baseUrl","endpoints","build","query","queryFn","args","_api","_extraOptions","fetch","useClientSideRouter","result","stringify","data","e","error","keepUnusedDataFor","extraOptions","maxRetries","useGetQuoteQuery"],"mappings":"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","sourcesContent":["import { createApi, fetchBaseQuery, FetchBaseQueryError } from '@reduxjs/toolkit/query/react'\nimport { Protocol } from '@uniswap/router-sdk'\nimport { ChainId } from '@uniswap/smart-order-router'\nimport ms from 'ms.macro'\nimport qs from 'qs'\n\nimport { GetQuoteResult } from './types'\n\nconst protocols: Protocol[] = [Protocol.V2, Protocol.V3]\n\nconst DEFAULT_QUERY_PARAMS = {\n  protocols: protocols.map((p) => p.toLowerCase()).join(','),\n  // example other params\n  // forceCrossProtocol: 'true',\n  // minSplits: '5',\n}\n\nasync function getClientSideQuote({\n  tokenInAddress,\n  tokenInChainId,\n  tokenInDecimals,\n  tokenInSymbol,\n  tokenOutAddress,\n  tokenOutChainId,\n  tokenOutDecimals,\n  tokenOutSymbol,\n  amount,\n  type,\n}: {\n  tokenInAddress: string\n  tokenInChainId: ChainId\n  tokenInDecimals: number\n  tokenInSymbol?: string\n  tokenOutAddress: string\n  tokenOutChainId: ChainId\n  tokenOutDecimals: number\n  tokenOutSymbol?: string\n  amount: string\n  type: 'exactIn' | 'exactOut'\n}) {\n  return (await import('./clientSideSmartOrderRouter')).getQuote(\n    {\n      type,\n      chainId: tokenInChainId,\n      tokenIn: {\n        address: tokenInAddress,\n        chainId: tokenInChainId,\n        decimals: tokenInDecimals,\n        symbol: tokenInSymbol,\n      },\n      tokenOut: {\n        address: tokenOutAddress,\n        chainId: tokenOutChainId,\n        decimals: tokenOutDecimals,\n        symbol: tokenOutSymbol,\n      },\n      amount,\n    },\n    { protocols }\n  )\n}\n\nexport const routingApi = createApi({\n  reducerPath: 'routingApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://api.uniswap.org/v1/',\n  }),\n  endpoints: (build) => ({\n    getQuote: build.query<\n      GetQuoteResult,\n      {\n        tokenInAddress: string\n        tokenInChainId: ChainId\n        tokenInDecimals: number\n        tokenInSymbol?: string\n        tokenOutAddress: string\n        tokenOutChainId: ChainId\n        tokenOutDecimals: number\n        tokenOutSymbol?: string\n        amount: string\n        useClientSideRouter: boolean // included in key to invalidate on change\n        type: 'exactIn' | 'exactOut'\n      }\n    >({\n      async queryFn(args, _api, _extraOptions, fetch) {\n        const { tokenInAddress, tokenInChainId, tokenOutAddress, tokenOutChainId, amount, useClientSideRouter, type } =\n          args\n\n        let result\n\n        try {\n          if (useClientSideRouter) {\n            result = await getClientSideQuote(args)\n          } else {\n            const query = qs.stringify({\n              ...DEFAULT_QUERY_PARAMS,\n              tokenInAddress,\n              tokenInChainId,\n              tokenOutAddress,\n              tokenOutChainId,\n              amount,\n              type,\n            })\n            result = await fetch(`quote?${query}`)\n          }\n\n          return { data: result.data as GetQuoteResult }\n        } catch (e) {\n          // TODO: fall back to client-side quoter when auto router fails.\n          // deprecate 'legacy' v2/v3 routers first.\n          return { error: e as FetchBaseQueryError }\n        }\n      },\n      keepUnusedDataFor: ms`10s`,\n      extraOptions: {\n        maxRetries: 0,\n      },\n    }),\n  }),\n})\n\nexport const { useGetQuoteQuery } = routingApi\n"]},"metadata":{},"sourceType":"module"}