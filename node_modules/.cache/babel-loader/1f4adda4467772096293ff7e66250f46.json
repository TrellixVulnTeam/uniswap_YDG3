{"ast":null,"code":"/**\n * Mnemonist Linked List\n * ======================\n *\n * Singly linked list implementation. Uses raw JavaScript objects as nodes\n * as benchmarks proved it was the fastest thing to do.\n */\nvar Iterator = require('obliterator/iterator'),\n    forEach = require('obliterator/foreach');\n/**\n * Linked List.\n *\n * @constructor\n */\n\n\nfunction LinkedList() {\n  this.clear();\n}\n/**\n * Method used to clear the list.\n *\n * @return {undefined}\n */\n\n\nLinkedList.prototype.clear = function () {\n  // Properties\n  this.head = null;\n  this.tail = null;\n  this.size = 0;\n};\n/**\n * Method used to get the first item of the list.\n *\n * @return {any}\n */\n\n\nLinkedList.prototype.first = function () {\n  return this.head ? this.head.item : undefined;\n};\n\nLinkedList.prototype.peek = LinkedList.prototype.first;\n/**\n * Method used to get the last item of the list.\n *\n * @return {any}\n */\n\nLinkedList.prototype.last = function () {\n  return this.tail ? this.tail.item : undefined;\n};\n/**\n * Method used to add an item at the end of the list.\n *\n * @param  {any}    item - The item to add.\n * @return {number}\n */\n\n\nLinkedList.prototype.push = function (item) {\n  var node = {\n    item: item,\n    next: null\n  };\n\n  if (!this.head) {\n    this.head = node;\n    this.tail = node;\n  } else {\n    this.tail.next = node;\n    this.tail = node;\n  }\n\n  this.size++;\n  return this.size;\n};\n/**\n * Method used to add an item at the beginning of the list.\n *\n * @param  {any}    item - The item to add.\n * @return {number}\n */\n\n\nLinkedList.prototype.unshift = function (item) {\n  var node = {\n    item: item,\n    next: null\n  };\n\n  if (!this.head) {\n    this.head = node;\n    this.tail = node;\n  } else {\n    if (!this.head.next) this.tail = this.head;\n    node.next = this.head;\n    this.head = node;\n  }\n\n  this.size++;\n  return this.size;\n};\n/**\n * Method used to retrieve & remove the first item of the list.\n *\n * @return {any}\n */\n\n\nLinkedList.prototype.shift = function () {\n  if (!this.size) return undefined;\n  var node = this.head;\n  this.head = node.next;\n  this.size--;\n  return node.item;\n};\n/**\n * Method used to iterate over the list.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\n\n\nLinkedList.prototype.forEach = function (callback, scope) {\n  if (!this.size) return;\n  scope = arguments.length > 1 ? scope : this;\n  var n = this.head,\n      i = 0;\n\n  while (n) {\n    callback.call(scope, n.item, i, this);\n    n = n.next;\n    i++;\n  }\n};\n/**\n * Method used to convert the list into an array.\n *\n * @return {array}\n */\n\n\nLinkedList.prototype.toArray = function () {\n  if (!this.size) return [];\n  var array = new Array(this.size);\n\n  for (var i = 0, l = this.size, n = this.head; i < l; i++) {\n    array[i] = n.item;\n    n = n.next;\n  }\n\n  return array;\n};\n/**\n * Method used to create an iterator over a list's values.\n *\n * @return {Iterator}\n */\n\n\nLinkedList.prototype.values = function () {\n  var n = this.head;\n  return new Iterator(function () {\n    if (!n) return {\n      done: true\n    };\n    var value = n.item;\n    n = n.next;\n    return {\n      value: value,\n      done: false\n    };\n  });\n};\n/**\n * Method used to create an iterator over a list's entries.\n *\n * @return {Iterator}\n */\n\n\nLinkedList.prototype.entries = function () {\n  var n = this.head,\n      i = 0;\n  return new Iterator(function () {\n    if (!n) return {\n      done: true\n    };\n    var value = n.item;\n    n = n.next;\n    i++;\n    return {\n      value: [i - 1, value],\n      done: false\n    };\n  });\n};\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\n\n\nif (typeof Symbol !== 'undefined') LinkedList.prototype[Symbol.iterator] = LinkedList.prototype.values;\n/**\n * Convenience known methods.\n */\n\nLinkedList.prototype.toString = function () {\n  return this.toArray().join(',');\n};\n\nLinkedList.prototype.toJSON = function () {\n  return this.toArray();\n};\n\nLinkedList.prototype.inspect = function () {\n  var array = this.toArray(); // Trick so that node displays the name of the constructor\n\n  Object.defineProperty(array, 'constructor', {\n    value: LinkedList,\n    enumerable: false\n  });\n  return array;\n};\n\nif (typeof Symbol !== 'undefined') LinkedList.prototype[Symbol.for('nodejs.util.inspect.custom')] = LinkedList.prototype.inspect;\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a list.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @return {LinkedList}\n */\n\nLinkedList.from = function (iterable) {\n  var list = new LinkedList();\n  forEach(iterable, function (value) {\n    list.push(value);\n  });\n  return list;\n};\n/**\n * Exporting.\n */\n\n\nmodule.exports = LinkedList;","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/node_modules/mnemonist/linked-list.js"],"names":["Iterator","require","forEach","LinkedList","clear","prototype","head","tail","size","first","item","undefined","peek","last","push","node","next","unshift","shift","callback","scope","arguments","length","n","i","call","toArray","array","Array","l","values","done","value","entries","Symbol","iterator","toString","join","toJSON","inspect","Object","defineProperty","enumerable","for","from","iterable","list","module","exports"],"mappings":"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","sourcesContent":["/**\n * Mnemonist Linked List\n * ======================\n *\n * Singly linked list implementation. Uses raw JavaScript objects as nodes\n * as benchmarks proved it was the fastest thing to do.\n */\nvar Iterator = require('obliterator/iterator'),\n    forEach = require('obliterator/foreach');\n\n/**\n * Linked List.\n *\n * @constructor\n */\nfunction LinkedList() {\n  this.clear();\n}\n\n/**\n * Method used to clear the list.\n *\n * @return {undefined}\n */\nLinkedList.prototype.clear = function() {\n\n  // Properties\n  this.head = null;\n  this.tail = null;\n  this.size = 0;\n};\n\n/**\n * Method used to get the first item of the list.\n *\n * @return {any}\n */\nLinkedList.prototype.first = function() {\n  return this.head ? this.head.item : undefined;\n};\nLinkedList.prototype.peek = LinkedList.prototype.first;\n\n/**\n * Method used to get the last item of the list.\n *\n * @return {any}\n */\nLinkedList.prototype.last = function() {\n  return this.tail ? this.tail.item : undefined;\n};\n\n/**\n * Method used to add an item at the end of the list.\n *\n * @param  {any}    item - The item to add.\n * @return {number}\n */\nLinkedList.prototype.push = function(item) {\n  var node = {item: item, next: null};\n\n  if (!this.head) {\n    this.head = node;\n    this.tail = node;\n  }\n  else {\n    this.tail.next = node;\n    this.tail = node;\n  }\n\n  this.size++;\n\n  return this.size;\n};\n\n/**\n * Method used to add an item at the beginning of the list.\n *\n * @param  {any}    item - The item to add.\n * @return {number}\n */\nLinkedList.prototype.unshift = function(item) {\n  var node = {item: item, next: null};\n\n  if (!this.head) {\n    this.head = node;\n    this.tail = node;\n  }\n  else {\n    if (!this.head.next)\n      this.tail = this.head;\n    node.next = this.head;\n    this.head = node;\n  }\n\n  this.size++;\n\n  return this.size;\n};\n\n/**\n * Method used to retrieve & remove the first item of the list.\n *\n * @return {any}\n */\nLinkedList.prototype.shift = function() {\n  if (!this.size)\n    return undefined;\n\n  var node = this.head;\n\n  this.head = node.next;\n  this.size--;\n\n  return node.item;\n};\n\n/**\n * Method used to iterate over the list.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nLinkedList.prototype.forEach = function(callback, scope) {\n  if (!this.size)\n    return;\n\n  scope = arguments.length > 1 ? scope : this;\n\n  var n = this.head,\n      i = 0;\n\n  while (n) {\n    callback.call(scope, n.item, i, this);\n    n = n.next;\n    i++;\n  }\n};\n\n/**\n * Method used to convert the list into an array.\n *\n * @return {array}\n */\nLinkedList.prototype.toArray = function() {\n  if (!this.size)\n    return [];\n\n  var array = new Array(this.size);\n\n  for (var i = 0, l = this.size, n = this.head; i < l; i++) {\n    array[i] = n.item;\n    n = n.next;\n  }\n\n  return array;\n};\n\n/**\n * Method used to create an iterator over a list's values.\n *\n * @return {Iterator}\n */\nLinkedList.prototype.values = function() {\n  var n = this.head;\n\n  return new Iterator(function() {\n    if (!n)\n      return {\n        done: true\n      };\n\n    var value = n.item;\n    n = n.next;\n\n    return {\n      value: value,\n      done: false\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over a list's entries.\n *\n * @return {Iterator}\n */\nLinkedList.prototype.entries = function() {\n  var n = this.head,\n      i = 0;\n\n  return new Iterator(function() {\n    if (!n)\n      return {\n        done: true\n      };\n\n    var value = n.item;\n    n = n.next;\n    i++;\n\n    return {\n      value: [i - 1, value],\n      done: false\n    };\n  });\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  LinkedList.prototype[Symbol.iterator] = LinkedList.prototype.values;\n\n/**\n * Convenience known methods.\n */\nLinkedList.prototype.toString = function() {\n  return this.toArray().join(',');\n};\n\nLinkedList.prototype.toJSON = function() {\n  return this.toArray();\n};\n\nLinkedList.prototype.inspect = function() {\n  var array = this.toArray();\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: LinkedList,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  LinkedList.prototype[Symbol.for('nodejs.util.inspect.custom')] = LinkedList.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a list.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @return {LinkedList}\n */\nLinkedList.from = function(iterable) {\n  var list = new LinkedList();\n\n  forEach(iterable, function(value) {\n    list.push(value);\n  });\n\n  return list;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = LinkedList;\n"]},"metadata":{},"sourceType":"script"}