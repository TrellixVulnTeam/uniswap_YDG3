{"ast":null,"code":"import _slicedToArray from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{skipToken}from'@reduxjs/toolkit/query/react';import{CurrencyAmount,TradeType}from'@uniswap/sdk-core';import{useStablecoinAmountFromFiatValue}from'hooks/useUSDCPrice';import{useMemo}from'react';import{useBlockNumber}from'state/application/hooks';import{useGetQuoteQuery}from'state/routing/slice';import{useClientSideRouter}from'state/user/hooks';import{TradeState}from'./types';import{computeRoutes,transformRoutesToTrade}from'./utils';function useFreshData(data,dataBlockNumber){var maxBlockAge=arguments.length>2&&arguments[2]!==undefined?arguments[2]:10;var localBlockNumber=useBlockNumber();if(!localBlockNumber)return undefined;if(localBlockNumber-dataBlockNumber>maxBlockAge){return undefined;}return data;}/**\n * Returns query arguments for the Routing API query or undefined if the\n * query should be skipped.\n */function useRoutingAPIArguments(_ref){var tokenIn=_ref.tokenIn,tokenOut=_ref.tokenOut,amount=_ref.amount,tradeType=_ref.tradeType;var _useClientSideRouter=useClientSideRouter(),_useClientSideRouter2=_slicedToArray(_useClientSideRouter,1),clientSideRouter=_useClientSideRouter2[0];return useMemo(function(){return!tokenIn||!tokenOut||!amount||tokenIn.equals(tokenOut)?undefined:{amount:amount.quotient.toString(),tokenInAddress:tokenIn.wrapped.address,tokenInChainId:tokenIn.wrapped.chainId,tokenInDecimals:tokenIn.wrapped.decimals,tokenInSymbol:tokenIn.wrapped.symbol,tokenOutAddress:tokenOut.wrapped.address,tokenOutChainId:tokenOut.wrapped.chainId,tokenOutDecimals:tokenOut.wrapped.decimals,tokenOutSymbol:tokenOut.wrapped.symbol,useClientSideRouter:clientSideRouter,type:tradeType===TradeType.EXACT_INPUT?'exactIn':'exactOut'};},[amount,clientSideRouter,tokenIn,tokenOut,tradeType]);}/**\n * Returns the best trade by invoking the routing api or the smart order router on the client\n * @param tradeType whether the swap is an exact in/out\n * @param amountSpecified the exact amount to swap in/out\n * @param otherCurrency the desired output/payment currency\n */export function useRoutingAPITrade(tradeType,amountSpecified,otherCurrency){var _useStablecoinAmountF;var _useMemo=useMemo(function(){return tradeType===TradeType.EXACT_INPUT?[amountSpecified===null||amountSpecified===void 0?void 0:amountSpecified.currency,otherCurrency]:[otherCurrency,amountSpecified===null||amountSpecified===void 0?void 0:amountSpecified.currency];},[amountSpecified,otherCurrency,tradeType]),_useMemo2=_slicedToArray(_useMemo,2),currencyIn=_useMemo2[0],currencyOut=_useMemo2[1];var queryArgs=useRoutingAPIArguments({tokenIn:currencyIn,tokenOut:currencyOut,amount:amountSpecified,tradeType:tradeType});var _useGetQuoteQuery=useGetQuoteQuery(queryArgs!==null&&queryArgs!==void 0?queryArgs:skipToken,{pollingInterval:15000,refetchOnFocus:true}),isLoading=_useGetQuoteQuery.isLoading,isError=_useGetQuoteQuery.isError,data=_useGetQuoteQuery.data;var quoteResult=useFreshData(data,Number(data===null||data===void 0?void 0:data.blockNumber)||0);var route=useMemo(function(){return computeRoutes(currencyIn,currencyOut,tradeType,quoteResult);},[currencyIn,currencyOut,quoteResult,tradeType]);// get USD gas cost of trade in active chains stablecoin amount\nvar gasUseEstimateUSD=(_useStablecoinAmountF=useStablecoinAmountFromFiatValue(quoteResult===null||quoteResult===void 0?void 0:quoteResult.gasUseEstimateUSD))!==null&&_useStablecoinAmountF!==void 0?_useStablecoinAmountF:null;return useMemo(function(){if(!currencyIn||!currencyOut){return{state:TradeState.INVALID,trade:undefined};}if(isLoading&&!quoteResult){// only on first hook render\nreturn{state:TradeState.LOADING,trade:undefined};}var otherAmount=tradeType===TradeType.EXACT_INPUT?currencyOut&&quoteResult?CurrencyAmount.fromRawAmount(currencyOut,quoteResult.quote):undefined:currencyIn&&quoteResult?CurrencyAmount.fromRawAmount(currencyIn,quoteResult.quote):undefined;if(isError||!otherAmount||!route||route.length===0||!queryArgs){return{state:TradeState.NO_ROUTE_FOUND,trade:undefined};}try{var trade=transformRoutesToTrade(route,tradeType,gasUseEstimateUSD);return{// always return VALID regardless of isFetching status\nstate:TradeState.VALID,trade:trade};}catch(e){console.debug('transformRoutesToTrade failed: ',e);return{state:TradeState.INVALID,trade:undefined};}},[currencyIn,currencyOut,isLoading,quoteResult,tradeType,isError,route,queryArgs,gasUseEstimateUSD]);}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/state/routing/useRoutingAPITrade.ts"],"names":["skipToken","CurrencyAmount","TradeType","useStablecoinAmountFromFiatValue","useMemo","useBlockNumber","useGetQuoteQuery","useClientSideRouter","TradeState","computeRoutes","transformRoutesToTrade","useFreshData","data","dataBlockNumber","maxBlockAge","localBlockNumber","undefined","useRoutingAPIArguments","tokenIn","tokenOut","amount","tradeType","clientSideRouter","equals","quotient","toString","tokenInAddress","wrapped","address","tokenInChainId","chainId","tokenInDecimals","decimals","tokenInSymbol","symbol","tokenOutAddress","tokenOutChainId","tokenOutDecimals","tokenOutSymbol","type","EXACT_INPUT","useRoutingAPITrade","amountSpecified","otherCurrency","currency","currencyIn","currencyOut","queryArgs","pollingInterval","refetchOnFocus","isLoading","isError","quoteResult","Number","blockNumber","route","gasUseEstimateUSD","state","INVALID","trade","LOADING","otherAmount","fromRawAmount","quote","length","NO_ROUTE_FOUND","VALID","e","console","debug"],"mappings":"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","sourcesContent":["import { skipToken } from '@reduxjs/toolkit/query/react'\nimport { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { useStablecoinAmountFromFiatValue } from 'hooks/useUSDCPrice'\nimport ms from 'ms.macro'\nimport { useMemo } from 'react'\nimport { useBlockNumber } from 'state/application/hooks'\nimport { useGetQuoteQuery } from 'state/routing/slice'\nimport { useClientSideRouter } from 'state/user/hooks'\n\nimport { GetQuoteResult, InterfaceTrade, TradeState } from './types'\nimport { computeRoutes, transformRoutesToTrade } from './utils'\n\nfunction useFreshData<T>(data: T, dataBlockNumber: number, maxBlockAge = 10): T | undefined {\n  const localBlockNumber = useBlockNumber()\n\n  if (!localBlockNumber) return undefined\n  if (localBlockNumber - dataBlockNumber > maxBlockAge) {\n    return undefined\n  }\n\n  return data\n}\n\n/**\n * Returns query arguments for the Routing API query or undefined if the\n * query should be skipped.\n */\nfunction useRoutingAPIArguments({\n  tokenIn,\n  tokenOut,\n  amount,\n  tradeType,\n}: {\n  tokenIn: Currency | undefined\n  tokenOut: Currency | undefined\n  amount: CurrencyAmount<Currency> | undefined\n  tradeType: TradeType\n}) {\n  const [clientSideRouter] = useClientSideRouter()\n\n  return useMemo(\n    () =>\n      !tokenIn || !tokenOut || !amount || tokenIn.equals(tokenOut)\n        ? undefined\n        : {\n            amount: amount.quotient.toString(),\n            tokenInAddress: tokenIn.wrapped.address,\n            tokenInChainId: tokenIn.wrapped.chainId,\n            tokenInDecimals: tokenIn.wrapped.decimals,\n            tokenInSymbol: tokenIn.wrapped.symbol,\n            tokenOutAddress: tokenOut.wrapped.address,\n            tokenOutChainId: tokenOut.wrapped.chainId,\n            tokenOutDecimals: tokenOut.wrapped.decimals,\n            tokenOutSymbol: tokenOut.wrapped.symbol,\n            useClientSideRouter: clientSideRouter,\n            type: (tradeType === TradeType.EXACT_INPUT ? 'exactIn' : 'exactOut') as 'exactIn' | 'exactOut',\n          },\n    [amount, clientSideRouter, tokenIn, tokenOut, tradeType]\n  )\n}\n\n/**\n * Returns the best trade by invoking the routing api or the smart order router on the client\n * @param tradeType whether the swap is an exact in/out\n * @param amountSpecified the exact amount to swap in/out\n * @param otherCurrency the desired output/payment currency\n */\nexport function useRoutingAPITrade<TTradeType extends TradeType>(\n  tradeType: TTradeType,\n  amountSpecified?: CurrencyAmount<Currency>,\n  otherCurrency?: Currency\n): {\n  state: TradeState\n  trade: InterfaceTrade<Currency, Currency, TTradeType> | undefined\n} {\n  const [currencyIn, currencyOut]: [Currency | undefined, Currency | undefined] = useMemo(\n    () =>\n      tradeType === TradeType.EXACT_INPUT\n        ? [amountSpecified?.currency, otherCurrency]\n        : [otherCurrency, amountSpecified?.currency],\n    [amountSpecified, otherCurrency, tradeType]\n  )\n\n  const queryArgs = useRoutingAPIArguments({\n    tokenIn: currencyIn,\n    tokenOut: currencyOut,\n    amount: amountSpecified,\n    tradeType,\n  })\n\n  const { isLoading, isError, data } = useGetQuoteQuery(queryArgs ?? skipToken, {\n    pollingInterval: ms`15s`,\n    refetchOnFocus: true,\n  })\n\n  const quoteResult: GetQuoteResult | undefined = useFreshData(data, Number(data?.blockNumber) || 0)\n\n  const route = useMemo(\n    () => computeRoutes(currencyIn, currencyOut, tradeType, quoteResult),\n    [currencyIn, currencyOut, quoteResult, tradeType]\n  )\n\n  // get USD gas cost of trade in active chains stablecoin amount\n  const gasUseEstimateUSD = useStablecoinAmountFromFiatValue(quoteResult?.gasUseEstimateUSD) ?? null\n\n  return useMemo(() => {\n    if (!currencyIn || !currencyOut) {\n      return {\n        state: TradeState.INVALID,\n        trade: undefined,\n      }\n    }\n\n    if (isLoading && !quoteResult) {\n      // only on first hook render\n      return {\n        state: TradeState.LOADING,\n        trade: undefined,\n      }\n    }\n\n    const otherAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? currencyOut && quoteResult\n          ? CurrencyAmount.fromRawAmount(currencyOut, quoteResult.quote)\n          : undefined\n        : currencyIn && quoteResult\n        ? CurrencyAmount.fromRawAmount(currencyIn, quoteResult.quote)\n        : undefined\n\n    if (isError || !otherAmount || !route || route.length === 0 || !queryArgs) {\n      return {\n        state: TradeState.NO_ROUTE_FOUND,\n        trade: undefined,\n      }\n    }\n\n    try {\n      const trade = transformRoutesToTrade(route, tradeType, gasUseEstimateUSD)\n      return {\n        // always return VALID regardless of isFetching status\n        state: TradeState.VALID,\n        trade,\n      }\n    } catch (e) {\n      console.debug('transformRoutesToTrade failed: ', e)\n      return { state: TradeState.INVALID, trade: undefined }\n    }\n  }, [currencyIn, currencyOut, isLoading, quoteResult, tradeType, isError, route, queryArgs, gasUseEstimateUSD])\n}\n"]},"metadata":{},"sourceType":"module"}