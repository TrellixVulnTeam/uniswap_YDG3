{"ast":null,"code":"import{getVersionUpgrade,minVersionBump,VersionUpgrade}from'@uniswap/token-lists';import{SupportedChainId}from'constants/chains';import{ARBITRUM_LIST,OPTIMISM_LIST,UNSUPPORTED_LIST_URLS}from'constants/lists';import{useCallback,useEffect}from'react';import{useAppDispatch}from'state/hooks';import{useAllLists}from'state/lists/hooks';import{useFetchListCallback}from'../../hooks/useFetchListCallback';import useInterval from'../../hooks/useInterval';import useIsWindowVisible from'../../hooks/useIsWindowVisible';import{useActiveWeb3React}from'../../hooks/web3';import{acceptListUpdate,enableList}from'./actions';import{useActiveListUrls}from'./hooks';export default function Updater(){var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId,library=_useActiveWeb3React.library;var dispatch=useAppDispatch();var isWindowVisible=useIsWindowVisible();// get all loaded lists, and the active urls\nvar lists=useAllLists();var activeListUrls=useActiveListUrls();var fetchList=useFetchListCallback();var fetchAllListsCallback=useCallback(function(){if(!isWindowVisible)return;Object.keys(lists).forEach(function(url){return fetchList(url).catch(function(error){return console.debug('interval list fetching error',error);});});},[fetchList,isWindowVisible,lists]);useEffect(function(){if(chainId&&[SupportedChainId.OPTIMISM,SupportedChainId.OPTIMISTIC_KOVAN].includes(chainId)){dispatch(enableList(OPTIMISM_LIST));}if(chainId&&[SupportedChainId.ARBITRUM_ONE,SupportedChainId.ARBITRUM_RINKEBY].includes(chainId)){dispatch(enableList(ARBITRUM_LIST));}},[chainId,dispatch]);// fetch all lists every 10 minutes, but only after we initialize library\nuseInterval(fetchAllListsCallback,library?1000*60*10:null);// whenever a list is not loaded and not loading, try again to load it\nuseEffect(function(){Object.keys(lists).forEach(function(listUrl){var list=lists[listUrl];if(!list.current&&!list.loadingRequestId&&!list.error){fetchList(listUrl).catch(function(error){return console.debug('list added fetching error',error);});}});},[dispatch,fetchList,library,lists]);// if any lists from unsupported lists are loaded, check them too (in case new updates since last visit)\nuseEffect(function(){UNSUPPORTED_LIST_URLS.forEach(function(listUrl){var list=lists[listUrl];if(!list||!list.current&&!list.loadingRequestId&&!list.error){fetchList(listUrl).catch(function(error){return console.debug('list added fetching error',error);});}});},[dispatch,fetchList,library,lists]);// automatically update lists if versions are minor/patch\nuseEffect(function(){Object.keys(lists).forEach(function(listUrl){var list=lists[listUrl];if(list.current&&list.pendingUpdate){var bump=getVersionUpgrade(list.current.version,list.pendingUpdate.version);switch(bump){case VersionUpgrade.NONE:throw new Error('unexpected no version bump');case VersionUpgrade.PATCH:case VersionUpgrade.MINOR:var min=minVersionBump(list.current.tokens,list.pendingUpdate.tokens);// automatically update minor/patch as long as bump matches the min update\nif(bump>=min){dispatch(acceptListUpdate(listUrl));}else{console.error(\"List at url \".concat(listUrl,\" could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR\"));}break;// update any active or inactive lists\ncase VersionUpgrade.MAJOR:dispatch(acceptListUpdate(listUrl));}}});},[dispatch,lists,activeListUrls]);return null;}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/state/lists/updater.ts"],"names":["getVersionUpgrade","minVersionBump","VersionUpgrade","SupportedChainId","ARBITRUM_LIST","OPTIMISM_LIST","UNSUPPORTED_LIST_URLS","useCallback","useEffect","useAppDispatch","useAllLists","useFetchListCallback","useInterval","useIsWindowVisible","useActiveWeb3React","acceptListUpdate","enableList","useActiveListUrls","Updater","chainId","library","dispatch","isWindowVisible","lists","activeListUrls","fetchList","fetchAllListsCallback","Object","keys","forEach","url","catch","error","console","debug","OPTIMISM","OPTIMISTIC_KOVAN","includes","ARBITRUM_ONE","ARBITRUM_RINKEBY","listUrl","list","current","loadingRequestId","pendingUpdate","bump","version","NONE","Error","PATCH","MINOR","min","tokens","MAJOR"],"mappings":"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","sourcesContent":["import { getVersionUpgrade, minVersionBump, VersionUpgrade } from '@uniswap/token-lists'\nimport { SupportedChainId } from 'constants/chains'\nimport { ARBITRUM_LIST, OPTIMISM_LIST, UNSUPPORTED_LIST_URLS } from 'constants/lists'\nimport { useCallback, useEffect } from 'react'\nimport { useAppDispatch } from 'state/hooks'\nimport { useAllLists } from 'state/lists/hooks'\n\nimport { useFetchListCallback } from '../../hooks/useFetchListCallback'\nimport useInterval from '../../hooks/useInterval'\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible'\nimport { useActiveWeb3React } from '../../hooks/web3'\nimport { acceptListUpdate, enableList } from './actions'\nimport { useActiveListUrls } from './hooks'\n\nexport default function Updater(): null {\n  const { chainId, library } = useActiveWeb3React()\n  const dispatch = useAppDispatch()\n  const isWindowVisible = useIsWindowVisible()\n\n  // get all loaded lists, and the active urls\n  const lists = useAllLists()\n  const activeListUrls = useActiveListUrls()\n\n  const fetchList = useFetchListCallback()\n  const fetchAllListsCallback = useCallback(() => {\n    if (!isWindowVisible) return\n    Object.keys(lists).forEach((url) =>\n      fetchList(url).catch((error) => console.debug('interval list fetching error', error))\n    )\n  }, [fetchList, isWindowVisible, lists])\n\n  useEffect(() => {\n    if (chainId && [SupportedChainId.OPTIMISM, SupportedChainId.OPTIMISTIC_KOVAN].includes(chainId)) {\n      dispatch(enableList(OPTIMISM_LIST))\n    }\n    if (chainId && [SupportedChainId.ARBITRUM_ONE, SupportedChainId.ARBITRUM_RINKEBY].includes(chainId)) {\n      dispatch(enableList(ARBITRUM_LIST))\n    }\n  }, [chainId, dispatch])\n  // fetch all lists every 10 minutes, but only after we initialize library\n  useInterval(fetchAllListsCallback, library ? 1000 * 60 * 10 : null)\n\n  // whenever a list is not loaded and not loading, try again to load it\n  useEffect(() => {\n    Object.keys(lists).forEach((listUrl) => {\n      const list = lists[listUrl]\n      if (!list.current && !list.loadingRequestId && !list.error) {\n        fetchList(listUrl).catch((error) => console.debug('list added fetching error', error))\n      }\n    })\n  }, [dispatch, fetchList, library, lists])\n\n  // if any lists from unsupported lists are loaded, check them too (in case new updates since last visit)\n  useEffect(() => {\n    UNSUPPORTED_LIST_URLS.forEach((listUrl) => {\n      const list = lists[listUrl]\n      if (!list || (!list.current && !list.loadingRequestId && !list.error)) {\n        fetchList(listUrl).catch((error) => console.debug('list added fetching error', error))\n      }\n    })\n  }, [dispatch, fetchList, library, lists])\n\n  // automatically update lists if versions are minor/patch\n  useEffect(() => {\n    Object.keys(lists).forEach((listUrl) => {\n      const list = lists[listUrl]\n      if (list.current && list.pendingUpdate) {\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version)\n        switch (bump) {\n          case VersionUpgrade.NONE:\n            throw new Error('unexpected no version bump')\n          case VersionUpgrade.PATCH:\n          case VersionUpgrade.MINOR:\n            const min = minVersionBump(list.current.tokens, list.pendingUpdate.tokens)\n            // automatically update minor/patch as long as bump matches the min update\n            if (bump >= min) {\n              dispatch(acceptListUpdate(listUrl))\n            } else {\n              console.error(\n                `List at url ${listUrl} could not automatically update because the version bump was only PATCH/MINOR while the update had breaking changes and should have been MAJOR`\n              )\n            }\n            break\n\n          // update any active or inactive lists\n          case VersionUpgrade.MAJOR:\n            dispatch(acceptListUpdate(listUrl))\n        }\n      }\n    })\n  }, [dispatch, lists, activeListUrls])\n\n  return null\n}\n"]},"metadata":{},"sourceType":"module"}