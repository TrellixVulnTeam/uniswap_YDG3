{"ast":null,"code":"import _styled from \"styled-components\";\n\nvar _jsxFileName = \"/Users/safahi/Downloads/interface-4.30.1/src/components/HoverInlineText/index.tsx\",\n    _s = $RefreshSig$();\n\nimport Tooltip from 'components/Tooltip';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TextWrapper = _styled.span.withConfig({\n  displayName: \"HoverInlineText__TextWrapper\",\n  componentId: \"sc-19p08fx-0\"\n})([\"margin-left:\", \";color:\", \";font-size:\", \";@media screen and (max-width:600px){font-size:\", \";}\"], ({\n  margin\n}) => margin && '4px', ({\n  theme,\n  link,\n  textColor\n}) => link ? theme.blue1 : textColor !== null && textColor !== void 0 ? textColor : theme.text1, ({\n  fontSize\n}) => fontSize !== null && fontSize !== void 0 ? fontSize : 'inherit', ({\n  adjustSize\n}) => adjustSize && '12px');\n\nconst HoverInlineText = ({\n  text,\n  maxCharacters = 20,\n  margin = false,\n  adjustSize = false,\n  fontSize,\n  textColor,\n  link,\n  ...rest\n}) => {\n  _s();\n\n  const [showHover, setShowHover] = useState(false);\n\n  if (!text) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (text.length > maxCharacters) {\n    return /*#__PURE__*/_jsxDEV(Tooltip, {\n      text: text,\n      show: showHover,\n      children: /*#__PURE__*/_jsxDEV(TextWrapper, {\n        onMouseEnter: () => setShowHover(true),\n        onMouseLeave: () => setShowHover(false),\n        margin: margin,\n        adjustSize: adjustSize,\n        textColor: textColor,\n        link: link,\n        fontSize: fontSize,\n        ...rest,\n        children: ' ' + text.slice(0, maxCharacters - 1) + '...'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(TextWrapper, {\n    margin: margin,\n    adjustSize: adjustSize,\n    link: link,\n    fontSize: fontSize,\n    textColor: textColor,\n    ...rest,\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(HoverInlineText, \"smjBK0wZhzG9wbOjaQIljuQOK5E=\");\n\n_c = HoverInlineText;\nexport default HoverInlineText;\n\nvar _c;\n\n$RefreshReg$(_c, \"HoverInlineText\");","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/components/HoverInlineText/index.tsx"],"names":["Tooltip","useState","TextWrapper","styled","span","margin","theme","link","textColor","blue1","text1","fontSize","adjustSize","HoverInlineText","text","maxCharacters","rest","showHover","setShowHover","length","slice"],"mappings":";;;;;AAAA,OAAOA,OAAP,MAAoB,oBAApB;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAGA,MAAMC,WAAW,GAAGC,OAAM,CAACC,IAAV;AAAA;AAAA;AAAA,wGAOA,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAgBA,MAAM,IAAI,KAP1B,EAQN,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,IAAT;AAAeC,EAAAA;AAAf,CAAD,KAAiCD,IAAI,GAAGD,KAAK,CAACG,KAAT,GAAiBD,SAAjB,aAAiBA,SAAjB,cAAiBA,SAAjB,GAA8BF,KAAK,CAACI,KARnE,EASF,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkBA,QAAlB,aAAkBA,QAAlB,cAAkBA,QAAlB,GAA8B,SAT5B,EAYA,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAoBA,UAAU,IAAI,MAZlC,CAAjB;;AAgBA,MAAMC,eAAe,GAAG,CAAC;AACvBC,EAAAA,IADuB;AAEvBC,EAAAA,aAAa,GAAG,EAFO;AAGvBV,EAAAA,MAAM,GAAG,KAHc;AAIvBO,EAAAA,UAAU,GAAG,KAJU;AAKvBD,EAAAA,QALuB;AAMvBH,EAAAA,SANuB;AAOvBD,EAAAA,IAPuB;AAQvB,KAAGS;AARoB,CAAD,KAiBlB;AAAA;;AACJ,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAAC,KAAD,CAA1C;;AAEA,MAAI,CAACa,IAAL,EAAW;AACT,wBAAO;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,MAAIA,IAAI,CAACK,MAAL,GAAcJ,aAAlB,EAAiC;AAC/B,wBACE,QAAC,OAAD;AAAS,MAAA,IAAI,EAAED,IAAf;AAAqB,MAAA,IAAI,EAAEG,SAA3B;AAAA,6BACE,QAAC,WAAD;AACE,QAAA,YAAY,EAAE,MAAMC,YAAY,CAAC,IAAD,CADlC;AAEE,QAAA,YAAY,EAAE,MAAMA,YAAY,CAAC,KAAD,CAFlC;AAGE,QAAA,MAAM,EAAEb,MAHV;AAIE,QAAA,UAAU,EAAEO,UAJd;AAKE,QAAA,SAAS,EAAEJ,SALb;AAME,QAAA,IAAI,EAAED,IANR;AAOE,QAAA,QAAQ,EAAEI,QAPZ;AAAA,WAQMK,IARN;AAAA,kBAUG,MAAMF,IAAI,CAACM,KAAL,CAAW,CAAX,EAAcL,aAAa,GAAG,CAA9B,CAAN,GAAyC;AAV5C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAgBD;;AAED,sBACE,QAAC,WAAD;AACE,IAAA,MAAM,EAAEV,MADV;AAEE,IAAA,UAAU,EAAEO,UAFd;AAGE,IAAA,IAAI,EAAEL,IAHR;AAIE,IAAA,QAAQ,EAAEI,QAJZ;AAKE,IAAA,SAAS,EAAEH,SALb;AAAA,OAMMQ,IANN;AAAA,cAQGF;AARH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAvDD;;GAAMD,e;;KAAAA,e;AAyDN,eAAeA,eAAf","sourcesContent":["import Tooltip from 'components/Tooltip'\nimport { useState } from 'react'\nimport styled from 'styled-components/macro'\n\nconst TextWrapper = styled.span<{\n  margin: boolean\n  link?: boolean\n  fontSize?: string\n  adjustSize?: boolean\n  textColor?: string\n}>`\n  margin-left: ${({ margin }) => margin && '4px'};\n  color: ${({ theme, link, textColor }) => (link ? theme.blue1 : textColor ?? theme.text1)};\n  font-size: ${({ fontSize }) => fontSize ?? 'inherit'};\n\n  @media screen and (max-width: 600px) {\n    font-size: ${({ adjustSize }) => adjustSize && '12px'};\n  }\n`\n\nconst HoverInlineText = ({\n  text,\n  maxCharacters = 20,\n  margin = false,\n  adjustSize = false,\n  fontSize,\n  textColor,\n  link,\n  ...rest\n}: {\n  text?: string\n  maxCharacters?: number\n  margin?: boolean\n  adjustSize?: boolean\n  fontSize?: string\n  textColor?: string\n  link?: boolean\n}) => {\n  const [showHover, setShowHover] = useState(false)\n\n  if (!text) {\n    return <span />\n  }\n\n  if (text.length > maxCharacters) {\n    return (\n      <Tooltip text={text} show={showHover}>\n        <TextWrapper\n          onMouseEnter={() => setShowHover(true)}\n          onMouseLeave={() => setShowHover(false)}\n          margin={margin}\n          adjustSize={adjustSize}\n          textColor={textColor}\n          link={link}\n          fontSize={fontSize}\n          {...rest}\n        >\n          {' ' + text.slice(0, maxCharacters - 1) + '...'}\n        </TextWrapper>\n      </Tooltip>\n    )\n  }\n\n  return (\n    <TextWrapper\n      margin={margin}\n      adjustSize={adjustSize}\n      link={link}\n      fontSize={fontSize}\n      textColor={textColor}\n      {...rest}\n    >\n      {text}\n    </TextWrapper>\n  )\n}\n\nexport default HoverInlineText\n"]},"metadata":{},"sourceType":"module"}