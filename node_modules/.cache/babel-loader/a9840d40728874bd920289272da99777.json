{"ast":null,"code":"import { createApi } from '@reduxjs/toolkit/query/react';\nimport { SupportedChainId } from 'constants/chains';\nimport { ClientError, gql, GraphQLClient } from 'graphql-request';\n// List of supported subgraphs. Note that the app currently only support one active subgraph at a time\nconst CHAIN_SUBGRAPH_URL = {\n  [SupportedChainId.MAINNET]: 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3',\n  [SupportedChainId.RINKEBY]: 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3',\n  [SupportedChainId.ARBITRUM_ONE]: 'https://api.thegraph.com/subgraphs/name/ianlapham/arbitrum-minimal',\n  [SupportedChainId.OPTIMISM]: 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-optimism-dev',\n  [SupportedChainId.POLYGON]: 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-v3-polygon'\n};\nexport const api = createApi({\n  reducerPath: 'dataApi',\n  baseQuery: graphqlRequestBaseQuery(),\n  endpoints: builder => ({\n    allV3Ticks: builder.query({\n      query: ({\n        poolAddress,\n        skip = 0\n      }) => ({\n        document: gql`\n          query allV3Ticks($poolAddress: String!, $skip: Int!) {\n            ticks(first: 1000, skip: $skip, where: { poolAddress: $poolAddress }, orderBy: tickIdx) {\n              tickIdx\n              liquidityNet\n              price0\n              price1\n            }\n          }\n        `,\n        variables: {\n          poolAddress,\n          skip\n        }\n      })\n    }),\n    feeTierDistribution: builder.query({\n      query: ({\n        token0,\n        token1\n      }) => ({\n        document: gql`\n          query feeTierDistribution($token0: String!, $token1: String!) {\n            _meta {\n              block {\n                number\n              }\n            }\n            asToken0: pools(\n              orderBy: totalValueLockedToken0\n              orderDirection: desc\n              where: { token0: $token0, token1: $token1 }\n            ) {\n              feeTier\n              totalValueLockedToken0\n              totalValueLockedToken1\n            }\n            asToken1: pools(\n              orderBy: totalValueLockedToken0\n              orderDirection: desc\n              where: { token0: $token1, token1: $token0 }\n            ) {\n              feeTier\n              totalValueLockedToken0\n              totalValueLockedToken1\n            }\n          }\n        `,\n        variables: {\n          token0,\n          token1\n        }\n      })\n    })\n  })\n}); // Graphql query client wrapper that builds a dynamic url based on chain id\n\nfunction graphqlRequestBaseQuery() {\n  return async ({\n    document,\n    variables\n  }, {\n    getState\n  }) => {\n    try {\n      const chainId = getState().application.chainId;\n      const subgraphUrl = chainId ? CHAIN_SUBGRAPH_URL[chainId] : undefined;\n\n      if (!subgraphUrl) {\n        return {\n          error: {\n            name: 'UnsupportedChainId',\n            message: `Subgraph queries against ChainId ${chainId} are not supported.`,\n            stack: ''\n          }\n        };\n      }\n\n      return {\n        data: await new GraphQLClient(subgraphUrl).request(document, variables),\n        meta: {}\n      };\n    } catch (error) {\n      if (error instanceof ClientError) {\n        const {\n          name,\n          message,\n          stack,\n          request,\n          response\n        } = error;\n        return {\n          error: {\n            name,\n            message,\n            stack\n          },\n          meta: {\n            request,\n            response\n          }\n        };\n      }\n\n      throw error;\n    }\n  };\n}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/state/data/slice.ts"],"names":["createApi","SupportedChainId","ClientError","gql","GraphQLClient","CHAIN_SUBGRAPH_URL","MAINNET","RINKEBY","ARBITRUM_ONE","OPTIMISM","POLYGON","api","reducerPath","baseQuery","graphqlRequestBaseQuery","endpoints","builder","allV3Ticks","query","poolAddress","skip","document","variables","feeTierDistribution","token0","token1","getState","chainId","application","subgraphUrl","undefined","error","name","message","stack","data","request","meta","response"],"mappings":"AACA,SAASA,SAAT,QAA0B,8BAA1B;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AAEA,SAASC,WAAT,EAAsBC,GAAtB,EAA2BC,aAA3B,QAAgD,iBAAhD;AAGA;AACA,MAAMC,kBAA0C,GAAG;AACjD,GAACJ,gBAAgB,CAACK,OAAlB,GAA4B,4DADqB;AAEjD,GAACL,gBAAgB,CAACM,OAAlB,GAA4B,4DAFqB;AAIjD,GAACN,gBAAgB,CAACO,YAAlB,GAAiC,oEAJgB;AAMjD,GAACP,gBAAgB,CAACQ,QAAlB,GAA6B,wEANoB;AAQjD,GAACR,gBAAgB,CAACS,OAAlB,GAA4B;AARqB,CAAnD;AAWA,OAAO,MAAMC,GAAG,GAAGX,SAAS,CAAC;AAC3BY,EAAAA,WAAW,EAAE,SADc;AAE3BC,EAAAA,SAAS,EAAEC,uBAAuB,EAFP;AAG3BC,EAAAA,SAAS,EAAGC,OAAD,KAAc;AACvBC,IAAAA,UAAU,EAAED,OAAO,CAACE,KAAR,CAAc;AACxBA,MAAAA,KAAK,EAAE,CAAC;AAAEC,QAAAA,WAAF;AAAeC,QAAAA,IAAI,GAAG;AAAtB,OAAD,MAAgC;AACrCC,QAAAA,QAAQ,EAAElB,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAV6C;AAWrCmB,QAAAA,SAAS,EAAE;AACTH,UAAAA,WADS;AAETC,UAAAA;AAFS;AAX0B,OAAhC;AADiB,KAAd,CADW;AAmBvBG,IAAAA,mBAAmB,EAAEP,OAAO,CAACE,KAAR,CAAc;AACjCA,MAAAA,KAAK,EAAE,CAAC;AAAEM,QAAAA,MAAF;AAAUC,QAAAA;AAAV,OAAD,MAAyB;AAC9BJ,QAAAA,QAAQ,EAAElB,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SA3BsC;AA4B9BmB,QAAAA,SAAS,EAAE;AACTE,UAAAA,MADS;AAETC,UAAAA;AAFS;AA5BmB,OAAzB;AAD0B,KAAd;AAnBE,GAAd;AAHgB,CAAD,CAArB,C,CA4DP;;AACA,SAASX,uBAAT,GAKE;AACA,SAAO,OAAO;AAAEO,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAP,EAAgC;AAAEI,IAAAA;AAAF,GAAhC,KAAiD;AACtD,QAAI;AACF,YAAMC,OAAO,GAAID,QAAQ,EAAT,CAAyBE,WAAzB,CAAqCD,OAArD;AAEA,YAAME,WAAW,GAAGF,OAAO,GAAGtB,kBAAkB,CAACsB,OAAD,CAArB,GAAiCG,SAA5D;;AAEA,UAAI,CAACD,WAAL,EAAkB;AAChB,eAAO;AACLE,UAAAA,KAAK,EAAE;AACLC,YAAAA,IAAI,EAAE,oBADD;AAELC,YAAAA,OAAO,EAAG,oCAAmCN,OAAQ,qBAFhD;AAGLO,YAAAA,KAAK,EAAE;AAHF;AADF,SAAP;AAOD;;AAED,aAAO;AAAEC,QAAAA,IAAI,EAAE,MAAM,IAAI/B,aAAJ,CAAkByB,WAAlB,EAA+BO,OAA/B,CAAuCf,QAAvC,EAAiDC,SAAjD,CAAd;AAA2Ee,QAAAA,IAAI,EAAE;AAAjF,OAAP;AACD,KAhBD,CAgBE,OAAON,KAAP,EAAc;AACd,UAAIA,KAAK,YAAY7B,WAArB,EAAkC;AAChC,cAAM;AAAE8B,UAAAA,IAAF;AAAQC,UAAAA,OAAR;AAAiBC,UAAAA,KAAjB;AAAwBE,UAAAA,OAAxB;AAAiCE,UAAAA;AAAjC,YAA8CP,KAApD;AACA,eAAO;AAAEA,UAAAA,KAAK,EAAE;AAAEC,YAAAA,IAAF;AAAQC,YAAAA,OAAR;AAAiBC,YAAAA;AAAjB,WAAT;AAAmCG,UAAAA,IAAI,EAAE;AAAED,YAAAA,OAAF;AAAWE,YAAAA;AAAX;AAAzC,SAAP;AACD;;AACD,YAAMP,KAAN;AACD;AACF,GAxBD;AAyBD","sourcesContent":["import { BaseQueryFn } from '@reduxjs/toolkit/query'\nimport { createApi } from '@reduxjs/toolkit/query/react'\nimport { SupportedChainId } from 'constants/chains'\nimport { DocumentNode } from 'graphql'\nimport { ClientError, gql, GraphQLClient } from 'graphql-request'\nimport { AppState } from 'state'\n\n// List of supported subgraphs. Note that the app currently only support one active subgraph at a time\nconst CHAIN_SUBGRAPH_URL: Record<number, string> = {\n  [SupportedChainId.MAINNET]: 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3',\n  [SupportedChainId.RINKEBY]: 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3',\n\n  [SupportedChainId.ARBITRUM_ONE]: 'https://api.thegraph.com/subgraphs/name/ianlapham/arbitrum-minimal',\n\n  [SupportedChainId.OPTIMISM]: 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-optimism-dev',\n\n  [SupportedChainId.POLYGON]: 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-v3-polygon',\n}\n\nexport const api = createApi({\n  reducerPath: 'dataApi',\n  baseQuery: graphqlRequestBaseQuery(),\n  endpoints: (builder) => ({\n    allV3Ticks: builder.query({\n      query: ({ poolAddress, skip = 0 }) => ({\n        document: gql`\n          query allV3Ticks($poolAddress: String!, $skip: Int!) {\n            ticks(first: 1000, skip: $skip, where: { poolAddress: $poolAddress }, orderBy: tickIdx) {\n              tickIdx\n              liquidityNet\n              price0\n              price1\n            }\n          }\n        `,\n        variables: {\n          poolAddress,\n          skip,\n        },\n      }),\n    }),\n    feeTierDistribution: builder.query({\n      query: ({ token0, token1 }) => ({\n        document: gql`\n          query feeTierDistribution($token0: String!, $token1: String!) {\n            _meta {\n              block {\n                number\n              }\n            }\n            asToken0: pools(\n              orderBy: totalValueLockedToken0\n              orderDirection: desc\n              where: { token0: $token0, token1: $token1 }\n            ) {\n              feeTier\n              totalValueLockedToken0\n              totalValueLockedToken1\n            }\n            asToken1: pools(\n              orderBy: totalValueLockedToken0\n              orderDirection: desc\n              where: { token0: $token1, token1: $token0 }\n            ) {\n              feeTier\n              totalValueLockedToken0\n              totalValueLockedToken1\n            }\n          }\n        `,\n        variables: {\n          token0,\n          token1,\n        },\n      }),\n    }),\n  }),\n})\n\n// Graphql query client wrapper that builds a dynamic url based on chain id\nfunction graphqlRequestBaseQuery(): BaseQueryFn<\n  { document: string | DocumentNode; variables?: any },\n  unknown,\n  Pick<ClientError, 'name' | 'message' | 'stack'>,\n  Partial<Pick<ClientError, 'request' | 'response'>>\n> {\n  return async ({ document, variables }, { getState }) => {\n    try {\n      const chainId = (getState() as AppState).application.chainId\n\n      const subgraphUrl = chainId ? CHAIN_SUBGRAPH_URL[chainId] : undefined\n\n      if (!subgraphUrl) {\n        return {\n          error: {\n            name: 'UnsupportedChainId',\n            message: `Subgraph queries against ChainId ${chainId} are not supported.`,\n            stack: '',\n          },\n        }\n      }\n\n      return { data: await new GraphQLClient(subgraphUrl).request(document, variables), meta: {} }\n    } catch (error) {\n      if (error instanceof ClientError) {\n        const { name, message, stack, request, response } = error\n        return { error: { name, message, stack }, meta: { request, response } }\n      }\n      throw error\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}