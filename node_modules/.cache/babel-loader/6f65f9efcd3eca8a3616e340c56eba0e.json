{"ast":null,"code":"import { createSlice, nanoid } from '@reduxjs/toolkit';\nimport { DEFAULT_TXN_DISMISS_MS } from 'constants/misc';\nexport let ApplicationModal;\n\n(function (ApplicationModal) {\n  ApplicationModal[ApplicationModal[\"WALLET\"] = 0] = \"WALLET\";\n  ApplicationModal[ApplicationModal[\"SETTINGS\"] = 1] = \"SETTINGS\";\n  ApplicationModal[ApplicationModal[\"SELF_CLAIM\"] = 2] = \"SELF_CLAIM\";\n  ApplicationModal[ApplicationModal[\"ADDRESS_CLAIM\"] = 3] = \"ADDRESS_CLAIM\";\n  ApplicationModal[ApplicationModal[\"CLAIM_POPUP\"] = 4] = \"CLAIM_POPUP\";\n  ApplicationModal[ApplicationModal[\"MENU\"] = 5] = \"MENU\";\n  ApplicationModal[ApplicationModal[\"DELEGATE\"] = 6] = \"DELEGATE\";\n  ApplicationModal[ApplicationModal[\"VOTE\"] = 7] = \"VOTE\";\n  ApplicationModal[ApplicationModal[\"POOL_OVERVIEW_OPTIONS\"] = 8] = \"POOL_OVERVIEW_OPTIONS\";\n  ApplicationModal[ApplicationModal[\"NETWORK_SELECTOR\"] = 9] = \"NETWORK_SELECTOR\";\n  ApplicationModal[ApplicationModal[\"PRIVACY_POLICY\"] = 10] = \"PRIVACY_POLICY\";\n})(ApplicationModal || (ApplicationModal = {}));\n\nconst initialState = {\n  blockNumber: {},\n  chainId: null,\n  openModal: null,\n  popupList: []\n};\nconst applicationSlice = createSlice({\n  name: 'application',\n  initialState,\n  reducers: {\n    updateChainId(state, action) {\n      const {\n        chainId\n      } = action.payload;\n      state.chainId = chainId;\n    },\n\n    updateBlockNumber(state, action) {\n      const {\n        chainId,\n        blockNumber\n      } = action.payload;\n\n      if (typeof state.blockNumber[chainId] !== 'number') {\n        state.blockNumber[chainId] = blockNumber;\n      } else {\n        state.blockNumber[chainId] = Math.max(blockNumber, state.blockNumber[chainId]);\n      }\n    },\n\n    setOpenModal(state, action) {\n      state.openModal = action.payload;\n    },\n\n    addPopup(state, {\n      payload: {\n        content,\n        key,\n        removeAfterMs = DEFAULT_TXN_DISMISS_MS\n      }\n    }) {\n      state.popupList = (key ? state.popupList.filter(popup => popup.key !== key) : state.popupList).concat([{\n        key: key || nanoid(),\n        show: true,\n        content,\n        removeAfterMs\n      }]);\n    },\n\n    removePopup(state, {\n      payload: {\n        key\n      }\n    }) {\n      state.popupList.forEach(p => {\n        if (p.key === key) {\n          p.show = false;\n        }\n      });\n    }\n\n  }\n});\nexport const {\n  updateChainId,\n  updateBlockNumber,\n  setOpenModal,\n  addPopup,\n  removePopup\n} = applicationSlice.actions;\nexport default applicationSlice.reducer;","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/state/application/reducer.ts"],"names":["createSlice","nanoid","DEFAULT_TXN_DISMISS_MS","ApplicationModal","initialState","blockNumber","chainId","openModal","popupList","applicationSlice","name","reducers","updateChainId","state","action","payload","updateBlockNumber","Math","max","setOpenModal","addPopup","content","key","removeAfterMs","filter","popup","concat","show","removePopup","forEach","p","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, nanoid } from '@reduxjs/toolkit'\nimport { DEFAULT_TXN_DISMISS_MS } from 'constants/misc'\n\nimport { SupportedChainId } from '../../constants/chains'\n\nexport type PopupContent =\n  | {\n      txn: {\n        hash: string\n      }\n    }\n  | {\n      failedSwitchNetwork: SupportedChainId\n    }\n\nexport enum ApplicationModal {\n  WALLET,\n  SETTINGS,\n  SELF_CLAIM,\n  ADDRESS_CLAIM,\n  CLAIM_POPUP,\n  MENU,\n  DELEGATE,\n  VOTE,\n  POOL_OVERVIEW_OPTIONS,\n  NETWORK_SELECTOR,\n  PRIVACY_POLICY,\n}\n\ntype PopupList = Array<{ key: string; show: boolean; content: PopupContent; removeAfterMs: number | null }>\n\nexport interface ApplicationState {\n  readonly blockNumber: { readonly [chainId: number]: number }\n  readonly chainId: number | null\n  readonly openModal: ApplicationModal | null\n  readonly popupList: PopupList\n}\n\nconst initialState: ApplicationState = {\n  blockNumber: {},\n  chainId: null,\n  openModal: null,\n  popupList: [],\n}\n\nconst applicationSlice = createSlice({\n  name: 'application',\n  initialState,\n  reducers: {\n    updateChainId(state, action) {\n      const { chainId } = action.payload\n      state.chainId = chainId\n    },\n    updateBlockNumber(state, action) {\n      const { chainId, blockNumber } = action.payload\n      if (typeof state.blockNumber[chainId] !== 'number') {\n        state.blockNumber[chainId] = blockNumber\n      } else {\n        state.blockNumber[chainId] = Math.max(blockNumber, state.blockNumber[chainId])\n      }\n    },\n    setOpenModal(state, action) {\n      state.openModal = action.payload\n    },\n    addPopup(state, { payload: { content, key, removeAfterMs = DEFAULT_TXN_DISMISS_MS } }) {\n      state.popupList = (key ? state.popupList.filter((popup) => popup.key !== key) : state.popupList).concat([\n        {\n          key: key || nanoid(),\n          show: true,\n          content,\n          removeAfterMs,\n        },\n      ])\n    },\n    removePopup(state, { payload: { key } }) {\n      state.popupList.forEach((p) => {\n        if (p.key === key) {\n          p.show = false\n        }\n      })\n    },\n  },\n})\n\nexport const { updateChainId, updateBlockNumber, setOpenModal, addPopup, removePopup } = applicationSlice.actions\nexport default applicationSlice.reducer\n"]},"metadata":{},"sourceType":"module"}