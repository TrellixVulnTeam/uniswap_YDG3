{"ast":null,"code":"import _slicedToArray from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{FeeAmount}from'@uniswap/v3-sdk';import{SupportedChainId}from'constants/chains';import{useMemo}from'react';import{useAllCurrencyCombinations}from'./useAllCurrencyCombinations';import{PoolState,usePools}from'./usePools';import{useActiveWeb3React}from'./web3';/**\n * Returns all the existing pools that should be considered for swapping between an input currency and an output currency\n * @param currencyIn the input currency\n * @param currencyOut the output currency\n */export function useV3SwapPools(currencyIn,currencyOut){var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId;var allCurrencyCombinations=useAllCurrencyCombinations(currencyIn,currencyOut);var allCurrencyCombinationsWithAllFees=useMemo(function(){return allCurrencyCombinations.reduce(function(list,_ref){var _ref2=_slicedToArray(_ref,2),tokenA=_ref2[0],tokenB=_ref2[1];return chainId===SupportedChainId.MAINNET?list.concat([[tokenA,tokenB,FeeAmount.LOW],[tokenA,tokenB,FeeAmount.MEDIUM],[tokenA,tokenB,FeeAmount.HIGH]]):list.concat([[tokenA,tokenB,FeeAmount.LOWEST],[tokenA,tokenB,FeeAmount.LOW],[tokenA,tokenB,FeeAmount.MEDIUM],[tokenA,tokenB,FeeAmount.HIGH]]);},[]);},[allCurrencyCombinations,chainId]);var pools=usePools(allCurrencyCombinationsWithAllFees);return useMemo(function(){return{pools:pools.filter(function(tuple){return tuple[0]===PoolState.EXISTS&&tuple[1]!==null;}).map(function(_ref3){var _ref4=_slicedToArray(_ref3,2),pool=_ref4[1];return pool;}),loading:pools.some(function(_ref5){var _ref6=_slicedToArray(_ref5,1),state=_ref6[0];return state===PoolState.LOADING;})};},[pools]);}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/hooks/useV3SwapPools.ts"],"names":["FeeAmount","SupportedChainId","useMemo","useAllCurrencyCombinations","PoolState","usePools","useActiveWeb3React","useV3SwapPools","currencyIn","currencyOut","chainId","allCurrencyCombinations","allCurrencyCombinationsWithAllFees","reduce","list","tokenA","tokenB","MAINNET","concat","LOW","MEDIUM","HIGH","LOWEST","pools","filter","tuple","EXISTS","map","pool","loading","some","state","LOADING"],"mappings":"+JACA,OAASA,SAAT,KAAgC,iBAAhC,CACA,OAASC,gBAAT,KAAiC,kBAAjC,CACA,OAASC,OAAT,KAAwB,OAAxB,CAEA,OAASC,0BAAT,KAA2C,8BAA3C,CACA,OAASC,SAAT,CAAoBC,QAApB,KAAoC,YAApC,CACA,OAASC,kBAAT,KAAmC,QAAnC,CAEA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASC,CAAAA,cAAT,CACLC,UADK,CAELC,WAFK,CAML,CACA,wBAAoBH,kBAAkB,EAAtC,CAAQI,OAAR,qBAAQA,OAAR,CAEA,GAAMC,CAAAA,uBAAuB,CAAGR,0BAA0B,CAACK,UAAD,CAAaC,WAAb,CAA1D,CAEA,GAAMG,CAAAA,kCAA+D,CAAGV,OAAO,CAC7E,iBACES,CAAAA,uBAAuB,CAACE,MAAxB,CAA4D,SAACC,IAAD,MAA4B,kCAApBC,MAAoB,UAAZC,MAAY,UACtF,MAAON,CAAAA,OAAO,GAAKT,gBAAgB,CAACgB,OAA7B,CACHH,IAAI,CAACI,MAAL,CAAY,CACV,CAACH,MAAD,CAASC,MAAT,CAAiBhB,SAAS,CAACmB,GAA3B,CADU,CAEV,CAACJ,MAAD,CAASC,MAAT,CAAiBhB,SAAS,CAACoB,MAA3B,CAFU,CAGV,CAACL,MAAD,CAASC,MAAT,CAAiBhB,SAAS,CAACqB,IAA3B,CAHU,CAAZ,CADG,CAMHP,IAAI,CAACI,MAAL,CAAY,CACV,CAACH,MAAD,CAASC,MAAT,CAAiBhB,SAAS,CAACsB,MAA3B,CADU,CAEV,CAACP,MAAD,CAASC,MAAT,CAAiBhB,SAAS,CAACmB,GAA3B,CAFU,CAGV,CAACJ,MAAD,CAASC,MAAT,CAAiBhB,SAAS,CAACoB,MAA3B,CAHU,CAIV,CAACL,MAAD,CAASC,MAAT,CAAiBhB,SAAS,CAACqB,IAA3B,CAJU,CAAZ,CANJ,CAYD,CAbD,CAaG,EAbH,CADF,EAD6E,CAgB7E,CAACV,uBAAD,CAA0BD,OAA1B,CAhB6E,CAA/E,CAmBA,GAAMa,CAAAA,KAAK,CAAGlB,QAAQ,CAACO,kCAAD,CAAtB,CAEA,MAAOV,CAAAA,OAAO,CAAC,UAAM,CACnB,MAAO,CACLqB,KAAK,CAAEA,KAAK,CACTC,MADI,CACG,SAACC,KAAD,CAA8C,CACpD,MAAOA,CAAAA,KAAK,CAAC,CAAD,CAAL,GAAarB,SAAS,CAACsB,MAAvB,EAAiCD,KAAK,CAAC,CAAD,CAAL,GAAa,IAArD,CACD,CAHI,EAIJE,GAJI,CAIA,kDAAIC,IAAJ,gBAAcA,CAAAA,IAAd,EAJA,CADF,CAMLC,OAAO,CAAEN,KAAK,CAACO,IAAN,CAAW,kDAAEC,KAAF,gBAAaA,CAAAA,KAAK,GAAK3B,SAAS,CAAC4B,OAAjC,EAAX,CANJ,CAAP,CAQD,CATa,CASX,CAACT,KAAD,CATW,CAAd,CAUD","sourcesContent":["import { Currency, Token } from '@uniswap/sdk-core'\nimport { FeeAmount, Pool } from '@uniswap/v3-sdk'\nimport { SupportedChainId } from 'constants/chains'\nimport { useMemo } from 'react'\n\nimport { useAllCurrencyCombinations } from './useAllCurrencyCombinations'\nimport { PoolState, usePools } from './usePools'\nimport { useActiveWeb3React } from './web3'\n\n/**\n * Returns all the existing pools that should be considered for swapping between an input currency and an output currency\n * @param currencyIn the input currency\n * @param currencyOut the output currency\n */\nexport function useV3SwapPools(\n  currencyIn?: Currency,\n  currencyOut?: Currency\n): {\n  pools: Pool[]\n  loading: boolean\n} {\n  const { chainId } = useActiveWeb3React()\n\n  const allCurrencyCombinations = useAllCurrencyCombinations(currencyIn, currencyOut)\n\n  const allCurrencyCombinationsWithAllFees: [Token, Token, FeeAmount][] = useMemo(\n    () =>\n      allCurrencyCombinations.reduce<[Token, Token, FeeAmount][]>((list, [tokenA, tokenB]) => {\n        return chainId === SupportedChainId.MAINNET\n          ? list.concat([\n              [tokenA, tokenB, FeeAmount.LOW],\n              [tokenA, tokenB, FeeAmount.MEDIUM],\n              [tokenA, tokenB, FeeAmount.HIGH],\n            ])\n          : list.concat([\n              [tokenA, tokenB, FeeAmount.LOWEST],\n              [tokenA, tokenB, FeeAmount.LOW],\n              [tokenA, tokenB, FeeAmount.MEDIUM],\n              [tokenA, tokenB, FeeAmount.HIGH],\n            ])\n      }, []),\n    [allCurrencyCombinations, chainId]\n  )\n\n  const pools = usePools(allCurrencyCombinationsWithAllFees)\n\n  return useMemo(() => {\n    return {\n      pools: pools\n        .filter((tuple): tuple is [PoolState.EXISTS, Pool] => {\n          return tuple[0] === PoolState.EXISTS && tuple[1] !== null\n        })\n        .map(([, pool]) => pool),\n      loading: pools.some(([state]) => state === PoolState.LOADING),\n    }\n  }, [pools])\n}\n"]},"metadata":{},"sourceType":"module"}