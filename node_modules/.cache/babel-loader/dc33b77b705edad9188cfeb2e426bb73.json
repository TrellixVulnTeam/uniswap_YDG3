{"ast":null,"code":"/**\n * Mnemonist DefaultMap\n * =====================\n *\n * JavaScript implementation of a default map that will return a constructed\n * value any time one tries to access an inexisting key. It's quite similar\n * to python's defaultdict.\n */\n\n/**\n * DefaultMap.\n *\n * @constructor\n */\nfunction DefaultMap(factory) {\n  if (typeof factory !== 'function') throw new Error('mnemonist/DefaultMap.constructor: expecting a function.');\n  this.items = new Map();\n  this.factory = factory;\n  this.size = 0;\n}\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\n\n\nDefaultMap.prototype.clear = function () {\n  // Properties\n  this.items.clear();\n  this.size = 0;\n};\n/**\n * Method used to get the value set for given key. If the key does not exist,\n * the value will be created using the provided factory.\n *\n * @param  {any} key - Target key.\n * @return {any}\n */\n\n\nDefaultMap.prototype.get = function (key) {\n  var value = this.items.get(key);\n\n  if (typeof value === 'undefined') {\n    value = this.factory(key, this.size);\n    this.items.set(key, value);\n    this.size++;\n  }\n\n  return value;\n};\n/**\n * Method used to get the value set for given key. If the key does not exist,\n * a value won't be created.\n *\n * @param  {any} key - Target key.\n * @return {any}\n */\n\n\nDefaultMap.prototype.peek = function (key) {\n  return this.items.get(key);\n};\n/**\n * Method used to set a value for given key.\n *\n * @param  {any} key   - Target key.\n * @param  {any} value - Value.\n * @return {DefaultMap}\n */\n\n\nDefaultMap.prototype.set = function (key, value) {\n  this.items.set(key, value);\n  this.size = this.items.size;\n  return this;\n};\n/**\n * Method used to test the existence of a key in the map.\n *\n * @param  {any} key   - Target key.\n * @return {boolean}\n */\n\n\nDefaultMap.prototype.has = function (key) {\n  return this.items.has(key);\n};\n/**\n * Method used to delete target key.\n *\n * @param  {any} key   - Target key.\n * @return {boolean}\n */\n\n\nDefaultMap.prototype.delete = function (key) {\n  var deleted = this.items.delete(key);\n  this.size = this.items.size;\n  return deleted;\n};\n/**\n * Method used to iterate over each of the key/value pairs.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\n\n\nDefaultMap.prototype.forEach = function (callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n  this.items.forEach(callback, scope);\n};\n/**\n * Iterators.\n */\n\n\nDefaultMap.prototype.entries = function () {\n  return this.items.entries();\n};\n\nDefaultMap.prototype.keys = function () {\n  return this.items.keys();\n};\n\nDefaultMap.prototype.values = function () {\n  return this.items.values();\n};\n/**\n * Attaching the #.entries method to Symbol.iterator if possible.\n */\n\n\nif (typeof Symbol !== 'undefined') DefaultMap.prototype[Symbol.iterator] = DefaultMap.prototype.entries;\n/**\n * Convenience known methods.\n */\n\nDefaultMap.prototype.inspect = function () {\n  return this.items;\n};\n\nif (typeof Symbol !== 'undefined') DefaultMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = DefaultMap.prototype.inspect;\n/**\n * Typical factories.\n */\n\nDefaultMap.autoIncrement = function () {\n  var i = 0;\n  return function () {\n    return i++;\n  };\n};\n/**\n * Exporting.\n */\n\n\nmodule.exports = DefaultMap;","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/node_modules/mnemonist/default-map.js"],"names":["DefaultMap","factory","Error","items","Map","size","prototype","clear","get","key","value","set","peek","has","delete","deleted","forEach","callback","scope","arguments","length","entries","keys","values","Symbol","iterator","inspect","for","autoIncrement","i","module","exports"],"mappings":"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","sourcesContent":["/**\n * Mnemonist DefaultMap\n * =====================\n *\n * JavaScript implementation of a default map that will return a constructed\n * value any time one tries to access an inexisting key. It's quite similar\n * to python's defaultdict.\n */\n\n/**\n * DefaultMap.\n *\n * @constructor\n */\nfunction DefaultMap(factory) {\n  if (typeof factory !== 'function')\n    throw new Error('mnemonist/DefaultMap.constructor: expecting a function.');\n\n  this.items = new Map();\n  this.factory = factory;\n  this.size = 0;\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nDefaultMap.prototype.clear = function() {\n\n  // Properties\n  this.items.clear();\n  this.size = 0;\n};\n\n/**\n * Method used to get the value set for given key. If the key does not exist,\n * the value will be created using the provided factory.\n *\n * @param  {any} key - Target key.\n * @return {any}\n */\nDefaultMap.prototype.get = function(key) {\n  var value = this.items.get(key);\n\n  if (typeof value === 'undefined') {\n    value = this.factory(key, this.size);\n    this.items.set(key, value);\n    this.size++;\n  }\n\n  return value;\n};\n\n/**\n * Method used to get the value set for given key. If the key does not exist,\n * a value won't be created.\n *\n * @param  {any} key - Target key.\n * @return {any}\n */\nDefaultMap.prototype.peek = function(key) {\n  return this.items.get(key);\n};\n\n/**\n * Method used to set a value for given key.\n *\n * @param  {any} key   - Target key.\n * @param  {any} value - Value.\n * @return {DefaultMap}\n */\nDefaultMap.prototype.set = function(key, value) {\n  this.items.set(key, value);\n  this.size = this.items.size;\n\n  return this;\n};\n\n/**\n * Method used to test the existence of a key in the map.\n *\n * @param  {any} key   - Target key.\n * @return {boolean}\n */\nDefaultMap.prototype.has = function(key) {\n  return this.items.has(key);\n};\n\n/**\n * Method used to delete target key.\n *\n * @param  {any} key   - Target key.\n * @return {boolean}\n */\nDefaultMap.prototype.delete = function(key) {\n  var deleted = this.items.delete(key);\n\n  this.size = this.items.size;\n\n  return deleted;\n};\n\n/**\n * Method used to iterate over each of the key/value pairs.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nDefaultMap.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  this.items.forEach(callback, scope);\n};\n\n/**\n * Iterators.\n */\nDefaultMap.prototype.entries = function() {\n  return this.items.entries();\n};\n\nDefaultMap.prototype.keys = function() {\n  return this.items.keys();\n};\n\nDefaultMap.prototype.values = function() {\n  return this.items.values();\n};\n\n/**\n * Attaching the #.entries method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  DefaultMap.prototype[Symbol.iterator] = DefaultMap.prototype.entries;\n\n/**\n * Convenience known methods.\n */\nDefaultMap.prototype.inspect = function() {\n  return this.items;\n};\n\nif (typeof Symbol !== 'undefined')\n  DefaultMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = DefaultMap.prototype.inspect;\n\n/**\n * Typical factories.\n */\nDefaultMap.autoIncrement = function() {\n  var i = 0;\n\n  return function() {\n    return i++;\n  };\n};\n\n/**\n * Exporting.\n */\nmodule.exports = DefaultMap;\n"]},"metadata":{},"sourceType":"script"}