{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { parse } from 'qs';\nimport { useMemo } from 'react';\nimport { useLocation } from 'react-router-dom';\nexport function parsedQueryString(search) {\n  if (!search) {\n    // react-router-dom places search string in the hash\n    const hash = window.location.hash;\n    search = hash.substr(hash.indexOf('?'));\n  }\n\n  return search && search.length > 1 ? parse(search, {\n    parseArrays: false,\n    ignoreQueryPrefix: true\n  }) : {};\n}\nexport default function useParsedQueryString() {\n  _s();\n\n  const {\n    search\n  } = useLocation();\n  return useMemo(() => parsedQueryString(search), [search]);\n}\n\n_s(useParsedQueryString, \"I+9F+Vhfmc3otMLqUKFlYflxhf8=\", false, function () {\n  return [useLocation];\n});","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/hooks/useParsedQueryString.ts"],"names":["parse","useMemo","useLocation","parsedQueryString","search","hash","window","location","substr","indexOf","length","parseArrays","ignoreQueryPrefix","useParsedQueryString"],"mappings":";;AAAA,SAASA,KAAT,QAAgC,IAAhC;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,OAAO,SAASC,iBAAT,CAA2BC,MAA3B,EAAsD;AAC3D,MAAI,CAACA,MAAL,EAAa;AACX;AACA,UAAMC,IAAI,GAAGC,MAAM,CAACC,QAAP,CAAgBF,IAA7B;AACAD,IAAAA,MAAM,GAAGC,IAAI,CAACG,MAAL,CAAYH,IAAI,CAACI,OAAL,CAAa,GAAb,CAAZ,CAAT;AACD;;AACD,SAAOL,MAAM,IAAIA,MAAM,CAACM,MAAP,GAAgB,CAA1B,GAA8BV,KAAK,CAACI,MAAD,EAAS;AAAEO,IAAAA,WAAW,EAAE,KAAf;AAAsBC,IAAAA,iBAAiB,EAAE;AAAzC,GAAT,CAAnC,GAA+F,EAAtG;AACD;AAED,eAAe,SAASC,oBAAT,GAA0C;AAAA;;AACvD,QAAM;AAAET,IAAAA;AAAF,MAAaF,WAAW,EAA9B;AACA,SAAOD,OAAO,CAAC,MAAME,iBAAiB,CAACC,MAAD,CAAxB,EAAkC,CAACA,MAAD,CAAlC,CAAd;AACD;;GAHuBS,oB;UACHX,W","sourcesContent":["import { parse, ParsedQs } from 'qs'\nimport { useMemo } from 'react'\nimport { useLocation } from 'react-router-dom'\n\nexport function parsedQueryString(search?: string): ParsedQs {\n  if (!search) {\n    // react-router-dom places search string in the hash\n    const hash = window.location.hash\n    search = hash.substr(hash.indexOf('?'))\n  }\n  return search && search.length > 1 ? parse(search, { parseArrays: false, ignoreQueryPrefix: true }) : {}\n}\n\nexport default function useParsedQueryString(): ParsedQs {\n  const { search } = useLocation()\n  return useMemo(() => parsedQueryString(search), [search])\n}\n"]},"metadata":{},"sourceType":"module"}