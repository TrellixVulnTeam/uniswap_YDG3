{"ast":null,"code":"import { TradeType } from '@uniswap/sdk-core';\nimport { InsufficientInputAmountError, InsufficientReservesError } from '@uniswap/v2-sdk';\nimport { BigNumber } from 'ethers';\n/**\n * Computes quotes for V2 off-chain. Quotes are computed using the balances\n * of the pools within each route provided.\n *\n * @export\n * @class V2QuoteProvider\n */\n\nexport class V2QuoteProvider {\n  constructor() {}\n\n  async getQuotesManyExactIn(amountIns, routes) {\n    return this.getQuotes(amountIns, routes, TradeType.EXACT_INPUT);\n  }\n\n  async getQuotesManyExactOut(amountOuts, routes) {\n    return this.getQuotes(amountOuts, routes, TradeType.EXACT_OUTPUT);\n  }\n\n  async getQuotes(amounts, routes, tradeType) {\n    const routesWithQuotes = [];\n\n    for (const route of routes) {\n      const amountQuotes = [];\n\n      for (const amount of amounts) {\n        try {\n          if (tradeType == TradeType.EXACT_INPUT) {\n            let outputAmount = amount.wrapped;\n\n            for (const pair of route.pairs) {\n              const [outputAmountNew] = pair.getOutputAmount(outputAmount);\n              outputAmount = outputAmountNew;\n            }\n\n            amountQuotes.push({\n              amount,\n              quote: BigNumber.from(outputAmount.quotient.toString())\n            });\n          } else {\n            let inputAmount = amount.wrapped;\n\n            for (let i = route.pairs.length - 1; i >= 0; i--) {\n              const pair = route.pairs[i];\n              [inputAmount] = pair.getInputAmount(inputAmount);\n            }\n\n            amountQuotes.push({\n              amount,\n              quote: BigNumber.from(inputAmount.quotient.toString())\n            });\n          }\n        } catch (err) {\n          // Can fail to get quotes, e.g. throws InsufficientReservesError or InsufficientInputAmountError.\n          if (err instanceof InsufficientInputAmountError || err instanceof InsufficientReservesError) {\n            amountQuotes.push({\n              amount,\n              quote: null\n            });\n          } else {\n            throw err;\n          }\n        }\n      }\n\n      routesWithQuotes.push([route, amountQuotes]);\n    }\n\n    return {\n      routesWithQuotes\n    };\n  }\n\n}","map":{"version":3,"sources":["../../../../../src/providers/v2/quote-provider.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,QAA0B,mBAA1B;AACA,SACE,4BADF,EAEE,yBAFF,QAGO,iBAHP;AAIA,SAAS,SAAT,QAA0B,QAA1B;AAwBA;;;;;;AAMG;;AACH,OAAM,MAAO,eAAP,CAAsB;AAC1B,EAAA,WAAA,GAAA,CAAgB;;AAEiB,QAApB,oBAAoB,CAC/B,SAD+B,EAE/B,MAF+B,EAEd;AAEjB,WAAO,KAAK,SAAL,CAAe,SAAf,EAA0B,MAA1B,EAAkC,SAAS,CAAC,WAA5C,CAAP;AACD;;AAEiC,QAArB,qBAAqB,CAChC,UADgC,EAEhC,MAFgC,EAEf;AAEjB,WAAO,KAAK,SAAL,CAAe,UAAf,EAA2B,MAA3B,EAAmC,SAAS,CAAC,YAA7C,CAAP;AACD;;AAEsB,QAAT,SAAS,CACrB,OADqB,EAErB,MAFqB,EAGrB,SAHqB,EAGD;AAEpB,UAAM,gBAAgB,GAAwB,EAA9C;;AAEA,SAAK,MAAM,KAAX,IAAoB,MAApB,EAA4B;AAC1B,YAAM,YAAY,GAAoB,EAAtC;;AAEA,WAAK,MAAM,MAAX,IAAqB,OAArB,EAA8B;AAC5B,YAAI;AACF,cAAI,SAAS,IAAI,SAAS,CAAC,WAA3B,EAAwC;AACtC,gBAAI,YAAY,GAAG,MAAM,CAAC,OAA1B;;AAEA,iBAAK,MAAM,IAAX,IAAmB,KAAK,CAAC,KAAzB,EAAgC;AAC9B,oBAAM,CAAC,eAAD,IAAoB,IAAI,CAAC,eAAL,CAAqB,YAArB,CAA1B;AACA,cAAA,YAAY,GAAG,eAAf;AACD;;AAED,YAAA,YAAY,CAAC,IAAb,CAAkB;AAChB,cAAA,MADgB;AAEhB,cAAA,KAAK,EAAE,SAAS,CAAC,IAAV,CAAe,YAAY,CAAC,QAAb,CAAsB,QAAtB,EAAf;AAFS,aAAlB;AAID,WAZD,MAYO;AACL,gBAAI,WAAW,GAAG,MAAM,CAAC,OAAzB;;AAEA,iBAAK,IAAI,CAAC,GAAG,KAAK,CAAC,KAAN,CAAY,MAAZ,GAAqB,CAAlC,EAAqC,CAAC,IAAI,CAA1C,EAA6C,CAAC,EAA9C,EAAkD;AAChD,oBAAM,IAAI,GAAG,KAAK,CAAC,KAAN,CAAY,CAAZ,CAAb;AACA,eAAC,WAAD,IAAgB,IAAI,CAAC,cAAL,CAAoB,WAApB,CAAhB;AACD;;AAED,YAAA,YAAY,CAAC,IAAb,CAAkB;AAChB,cAAA,MADgB;AAEhB,cAAA,KAAK,EAAE,SAAS,CAAC,IAAV,CAAe,WAAW,CAAC,QAAZ,CAAqB,QAArB,EAAf;AAFS,aAAlB;AAID;AACF,SA1BD,CA0BE,OAAO,GAAP,EAAY;AACZ;AACA,cACE,GAAG,YAAY,4BAAf,IACA,GAAG,YAAY,yBAFjB,EAGE;AACA,YAAA,YAAY,CAAC,IAAb,CAAkB;AAAE,cAAA,MAAF;AAAU,cAAA,KAAK,EAAE;AAAjB,aAAlB;AACD,WALD,MAKO;AACL,kBAAM,GAAN;AACD;AACF;AACF;;AAED,MAAA,gBAAgB,CAAC,IAAjB,CAAsB,CAAC,KAAD,EAAQ,YAAR,CAAtB;AACD;;AAED,WAAO;AACL,MAAA;AADK,KAAP;AAGD;;AAzEyB","sourceRoot":"","sourcesContent":["import { TradeType } from '@uniswap/sdk-core';\nimport { InsufficientInputAmountError, InsufficientReservesError, } from '@uniswap/v2-sdk';\nimport { BigNumber } from 'ethers';\n/**\n * Computes quotes for V2 off-chain. Quotes are computed using the balances\n * of the pools within each route provided.\n *\n * @export\n * @class V2QuoteProvider\n */\nexport class V2QuoteProvider {\n    constructor() { }\n    async getQuotesManyExactIn(amountIns, routes) {\n        return this.getQuotes(amountIns, routes, TradeType.EXACT_INPUT);\n    }\n    async getQuotesManyExactOut(amountOuts, routes) {\n        return this.getQuotes(amountOuts, routes, TradeType.EXACT_OUTPUT);\n    }\n    async getQuotes(amounts, routes, tradeType) {\n        const routesWithQuotes = [];\n        for (const route of routes) {\n            const amountQuotes = [];\n            for (const amount of amounts) {\n                try {\n                    if (tradeType == TradeType.EXACT_INPUT) {\n                        let outputAmount = amount.wrapped;\n                        for (const pair of route.pairs) {\n                            const [outputAmountNew] = pair.getOutputAmount(outputAmount);\n                            outputAmount = outputAmountNew;\n                        }\n                        amountQuotes.push({\n                            amount,\n                            quote: BigNumber.from(outputAmount.quotient.toString()),\n                        });\n                    }\n                    else {\n                        let inputAmount = amount.wrapped;\n                        for (let i = route.pairs.length - 1; i >= 0; i--) {\n                            const pair = route.pairs[i];\n                            [inputAmount] = pair.getInputAmount(inputAmount);\n                        }\n                        amountQuotes.push({\n                            amount,\n                            quote: BigNumber.from(inputAmount.quotient.toString()),\n                        });\n                    }\n                }\n                catch (err) {\n                    // Can fail to get quotes, e.g. throws InsufficientReservesError or InsufficientInputAmountError.\n                    if (err instanceof InsufficientInputAmountError ||\n                        err instanceof InsufficientReservesError) {\n                        amountQuotes.push({ amount, quote: null });\n                    }\n                    else {\n                        throw err;\n                    }\n                }\n            }\n            routesWithQuotes.push([route, amountQuotes]);\n        }\n        return {\n            routesWithQuotes,\n        };\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVvdGUtcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvcHJvdmlkZXJzL3YyL3F1b3RlLXByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM5QyxPQUFPLEVBQ0wsNEJBQTRCLEVBQzVCLHlCQUF5QixHQUMxQixNQUFNLGlCQUFpQixDQUFDO0FBQ3pCLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxRQUFRLENBQUM7QUF3Qm5DOzs7Ozs7R0FNRztBQUNILE1BQU0sT0FBTyxlQUFlO0lBQzFCLGdCQUFlLENBQUM7SUFFVCxLQUFLLENBQUMsb0JBQW9CLENBQy9CLFNBQTJCLEVBQzNCLE1BQWlCO1FBRWpCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBRU0sS0FBSyxDQUFDLHFCQUFxQixDQUNoQyxVQUE0QixFQUM1QixNQUFpQjtRQUVqQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVPLEtBQUssQ0FBQyxTQUFTLENBQ3JCLE9BQXlCLEVBQ3pCLE1BQWlCLEVBQ2pCLFNBQW9CO1FBRXBCLE1BQU0sZ0JBQWdCLEdBQXdCLEVBQUUsQ0FBQztRQUVqRCxLQUFLLE1BQU0sS0FBSyxJQUFJLE1BQU0sRUFBRTtZQUMxQixNQUFNLFlBQVksR0FBb0IsRUFBRSxDQUFDO1lBRXpDLEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFO2dCQUM1QixJQUFJO29CQUNGLElBQUksU0FBUyxJQUFJLFNBQVMsQ0FBQyxXQUFXLEVBQUU7d0JBQ3RDLElBQUksWUFBWSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7d0JBRWxDLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxDQUFDLEtBQUssRUFBRTs0QkFDOUIsTUFBTSxDQUFDLGVBQWUsQ0FBQyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLENBQUM7NEJBQzdELFlBQVksR0FBRyxlQUFlLENBQUM7eUJBQ2hDO3dCQUVELFlBQVksQ0FBQyxJQUFJLENBQUM7NEJBQ2hCLE1BQU07NEJBQ04sS0FBSyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQzt5QkFDeEQsQ0FBQyxDQUFDO3FCQUNKO3lCQUFNO3dCQUNMLElBQUksV0FBVyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7d0JBRWpDLEtBQUssSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7NEJBQ2hELE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFFLENBQUM7NEJBQzdCLENBQUMsV0FBVyxDQUFDLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQzt5QkFDbEQ7d0JBRUQsWUFBWSxDQUFDLElBQUksQ0FBQzs0QkFDaEIsTUFBTTs0QkFDTixLQUFLLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO3lCQUN2RCxDQUFDLENBQUM7cUJBQ0o7aUJBQ0Y7Z0JBQUMsT0FBTyxHQUFHLEVBQUU7b0JBQ1osaUdBQWlHO29CQUNqRyxJQUNFLEdBQUcsWUFBWSw0QkFBNEI7d0JBQzNDLEdBQUcsWUFBWSx5QkFBeUIsRUFDeEM7d0JBQ0EsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztxQkFDNUM7eUJBQU07d0JBQ0wsTUFBTSxHQUFHLENBQUM7cUJBQ1g7aUJBQ0Y7YUFDRjtZQUVELGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO1NBQzlDO1FBRUQsT0FBTztZQUNMLGdCQUFnQjtTQUNqQixDQUFDO0lBQ0osQ0FBQztDQUNGIn0="]},"metadata":{},"sourceType":"module"}