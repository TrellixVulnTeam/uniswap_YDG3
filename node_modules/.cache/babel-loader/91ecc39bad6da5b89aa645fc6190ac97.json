{"ast":null,"code":"import { log } from '../../../util/log';\nimport { routeToString } from '../../../util/routes';\nimport { V2Route, V3Route } from '../../router';\nexport function computeAllV3Routes(tokenIn, tokenOut, pools, maxHops) {\n  return computeAllRoutes(tokenIn, tokenOut, (route, tokenIn, tokenOut) => {\n    return new V3Route(route, tokenIn, tokenOut);\n  }, pools, maxHops);\n}\nexport function computeAllV2Routes(tokenIn, tokenOut, pools, maxHops) {\n  return computeAllRoutes(tokenIn, tokenOut, (route, tokenIn, tokenOut) => {\n    return new V2Route(route, tokenIn, tokenOut);\n  }, pools, maxHops);\n}\nexport function computeAllRoutes(tokenIn, tokenOut, buildRoute, pools, maxHops) {\n  const poolsUsed = Array(pools.length).fill(false);\n  const routes = [];\n\n  const computeRoutes = (tokenIn, tokenOut, currentRoute, poolsUsed, _previousTokenOut) => {\n    if (currentRoute.length > maxHops) {\n      return;\n    }\n\n    if (currentRoute.length > 0 && currentRoute[currentRoute.length - 1].involvesToken(tokenOut)) {\n      routes.push(buildRoute([...currentRoute], tokenIn, tokenOut));\n      return;\n    }\n\n    for (let i = 0; i < pools.length; i++) {\n      if (poolsUsed[i]) {\n        continue;\n      }\n\n      const curPool = pools[i];\n      const previousTokenOut = _previousTokenOut ? _previousTokenOut : tokenIn;\n\n      if (!curPool.involvesToken(previousTokenOut)) {\n        continue;\n      }\n\n      const currentTokenOut = curPool.token0.equals(previousTokenOut) ? curPool.token1 : curPool.token0;\n      currentRoute.push(curPool);\n      poolsUsed[i] = true;\n      computeRoutes(tokenIn, tokenOut, currentRoute, poolsUsed, currentTokenOut);\n      poolsUsed[i] = false;\n      currentRoute.pop();\n    }\n  };\n\n  computeRoutes(tokenIn, tokenOut, [], poolsUsed);\n  log.info({\n    routes: routes.map(routeToString)\n  }, `Computed ${routes.length} possible routes.`);\n  return routes;\n}","map":{"version":3,"sources":["../../../../../../src/routers/alpha-router/functions/compute-all-routes.ts"],"names":[],"mappings":"AAGA,SAAS,GAAT,QAAoB,mBAApB;AACA,SAAS,aAAT,QAA8B,sBAA9B;AACA,SAAS,OAAT,EAAkB,OAAlB,QAAiC,cAAjC;AAEA,OAAM,SAAU,kBAAV,CACJ,OADI,EAEJ,QAFI,EAGJ,KAHI,EAIJ,OAJI,EAIW;AAEf,SAAO,gBAAgB,CACrB,OADqB,EAErB,QAFqB,EAGrB,CAAC,KAAD,EAAgB,OAAhB,EAAgC,QAAhC,KAAmD;AACjD,WAAO,IAAI,OAAJ,CAAY,KAAZ,EAAmB,OAAnB,EAA4B,QAA5B,CAAP;AACD,GALoB,EAMrB,KANqB,EAOrB,OAPqB,CAAvB;AASD;AAED,OAAM,SAAU,kBAAV,CACJ,OADI,EAEJ,QAFI,EAGJ,KAHI,EAIJ,OAJI,EAIW;AAEf,SAAO,gBAAgB,CACrB,OADqB,EAErB,QAFqB,EAGrB,CAAC,KAAD,EAAgB,OAAhB,EAAgC,QAAhC,KAAmD;AACjD,WAAO,IAAI,OAAJ,CAAY,KAAZ,EAAmB,OAAnB,EAA4B,QAA5B,CAAP;AACD,GALoB,EAMrB,KANqB,EAOrB,OAPqB,CAAvB;AASD;AAED,OAAM,SAAU,gBAAV,CAIJ,OAJI,EAKJ,QALI,EAMJ,UANI,EAOJ,KAPI,EAQJ,OARI,EAQW;AAEf,QAAM,SAAS,GAAG,KAAK,CAAU,KAAK,CAAC,MAAhB,CAAL,CAA6B,IAA7B,CAAkC,KAAlC,CAAlB;AACA,QAAM,MAAM,GAAa,EAAzB;;AAEA,QAAM,aAAa,GAAG,CACpB,OADoB,EAEpB,QAFoB,EAGpB,YAHoB,EAIpB,SAJoB,EAKpB,iBALoB,KAMlB;AACF,QAAI,YAAY,CAAC,MAAb,GAAsB,OAA1B,EAAmC;AACjC;AACD;;AAED,QACE,YAAY,CAAC,MAAb,GAAsB,CAAtB,IACA,YAAY,CAAC,YAAY,CAAC,MAAb,GAAsB,CAAvB,CAAZ,CAAuC,aAAvC,CAAqD,QAArD,CAFF,EAGE;AACA,MAAA,MAAM,CAAC,IAAP,CAAY,UAAU,CAAC,CAAC,GAAG,YAAJ,CAAD,EAAoB,OAApB,EAA6B,QAA7B,CAAtB;AACA;AACD;;AAED,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACrC,UAAI,SAAS,CAAC,CAAD,CAAb,EAAkB;AAChB;AACD;;AAED,YAAM,OAAO,GAAG,KAAK,CAAC,CAAD,CAArB;AACA,YAAM,gBAAgB,GAAG,iBAAiB,GAAG,iBAAH,GAAuB,OAAjE;;AAEA,UAAI,CAAC,OAAO,CAAC,aAAR,CAAsB,gBAAtB,CAAL,EAA8C;AAC5C;AACD;;AAED,YAAM,eAAe,GAAG,OAAO,CAAC,MAAR,CAAe,MAAf,CAAsB,gBAAtB,IACpB,OAAO,CAAC,MADY,GAEpB,OAAO,CAAC,MAFZ;AAIA,MAAA,YAAY,CAAC,IAAb,CAAkB,OAAlB;AACA,MAAA,SAAS,CAAC,CAAD,CAAT,GAAe,IAAf;AACA,MAAA,aAAa,CACX,OADW,EAEX,QAFW,EAGX,YAHW,EAIX,SAJW,EAKX,eALW,CAAb;AAOA,MAAA,SAAS,CAAC,CAAD,CAAT,GAAe,KAAf;AACA,MAAA,YAAY,CAAC,GAAb;AACD;AACF,GA/CD;;AAiDA,EAAA,aAAa,CAAC,OAAD,EAAU,QAAV,EAAoB,EAApB,EAAwB,SAAxB,CAAb;AAEA,EAAA,GAAG,CAAC,IAAJ,CACE;AAAE,IAAA,MAAM,EAAE,MAAM,CAAC,GAAP,CAAW,aAAX;AAAV,GADF,EAEE,YAAY,MAAM,CAAC,MAAM,mBAF3B;AAKA,SAAO,MAAP;AACD","sourceRoot":"","sourcesContent":["import { log } from '../../../util/log';\nimport { routeToString } from '../../../util/routes';\nimport { V2Route, V3Route } from '../../router';\nexport function computeAllV3Routes(tokenIn, tokenOut, pools, maxHops) {\n    return computeAllRoutes(tokenIn, tokenOut, (route, tokenIn, tokenOut) => {\n        return new V3Route(route, tokenIn, tokenOut);\n    }, pools, maxHops);\n}\nexport function computeAllV2Routes(tokenIn, tokenOut, pools, maxHops) {\n    return computeAllRoutes(tokenIn, tokenOut, (route, tokenIn, tokenOut) => {\n        return new V2Route(route, tokenIn, tokenOut);\n    }, pools, maxHops);\n}\nexport function computeAllRoutes(tokenIn, tokenOut, buildRoute, pools, maxHops) {\n    const poolsUsed = Array(pools.length).fill(false);\n    const routes = [];\n    const computeRoutes = (tokenIn, tokenOut, currentRoute, poolsUsed, _previousTokenOut) => {\n        if (currentRoute.length > maxHops) {\n            return;\n        }\n        if (currentRoute.length > 0 &&\n            currentRoute[currentRoute.length - 1].involvesToken(tokenOut)) {\n            routes.push(buildRoute([...currentRoute], tokenIn, tokenOut));\n            return;\n        }\n        for (let i = 0; i < pools.length; i++) {\n            if (poolsUsed[i]) {\n                continue;\n            }\n            const curPool = pools[i];\n            const previousTokenOut = _previousTokenOut ? _previousTokenOut : tokenIn;\n            if (!curPool.involvesToken(previousTokenOut)) {\n                continue;\n            }\n            const currentTokenOut = curPool.token0.equals(previousTokenOut)\n                ? curPool.token1\n                : curPool.token0;\n            currentRoute.push(curPool);\n            poolsUsed[i] = true;\n            computeRoutes(tokenIn, tokenOut, currentRoute, poolsUsed, currentTokenOut);\n            poolsUsed[i] = false;\n            currentRoute.pop();\n        }\n    };\n    computeRoutes(tokenIn, tokenOut, [], poolsUsed);\n    log.info({ routes: routes.map(routeToString) }, `Computed ${routes.length} possible routes.`);\n    return routes;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcHV0ZS1hbGwtcm91dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vc3JjL3JvdXRlcnMvYWxwaGEtcm91dGVyL2Z1bmN0aW9ucy9jb21wdXRlLWFsbC1yb3V0ZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUVoRCxNQUFNLFVBQVUsa0JBQWtCLENBQ2hDLE9BQWMsRUFDZCxRQUFlLEVBQ2YsS0FBYSxFQUNiLE9BQWU7SUFFZixPQUFPLGdCQUFnQixDQUNyQixPQUFPLEVBQ1AsUUFBUSxFQUNSLENBQUMsS0FBYSxFQUFFLE9BQWMsRUFBRSxRQUFlLEVBQUUsRUFBRTtRQUNqRCxPQUFPLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDL0MsQ0FBQyxFQUNELEtBQUssRUFDTCxPQUFPLENBQ1IsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLFVBQVUsa0JBQWtCLENBQ2hDLE9BQWMsRUFDZCxRQUFlLEVBQ2YsS0FBYSxFQUNiLE9BQWU7SUFFZixPQUFPLGdCQUFnQixDQUNyQixPQUFPLEVBQ1AsUUFBUSxFQUNSLENBQUMsS0FBYSxFQUFFLE9BQWMsRUFBRSxRQUFlLEVBQUUsRUFBRTtRQUNqRCxPQUFPLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDL0MsQ0FBQyxFQUNELEtBQUssRUFDTCxPQUFPLENBQ1IsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLFVBQVUsZ0JBQWdCLENBSTlCLE9BQWMsRUFDZCxRQUFlLEVBQ2YsVUFBdUUsRUFDdkUsS0FBYyxFQUNkLE9BQWU7SUFFZixNQUFNLFNBQVMsR0FBRyxLQUFLLENBQVUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzRCxNQUFNLE1BQU0sR0FBYSxFQUFFLENBQUM7SUFFNUIsTUFBTSxhQUFhLEdBQUcsQ0FDcEIsT0FBYyxFQUNkLFFBQWUsRUFDZixZQUFxQixFQUNyQixTQUFvQixFQUNwQixpQkFBeUIsRUFDekIsRUFBRTtRQUNGLElBQUksWUFBWSxDQUFDLE1BQU0sR0FBRyxPQUFPLEVBQUU7WUFDakMsT0FBTztTQUNSO1FBRUQsSUFDRSxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUM7WUFDdkIsWUFBWSxDQUFDLFlBQVksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxFQUM5RDtZQUNBLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxZQUFZLENBQUMsRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUM5RCxPQUFPO1NBQ1I7UUFFRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUNyQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDaEIsU0FBUzthQUNWO1lBRUQsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBRSxDQUFDO1lBQzFCLE1BQU0sZ0JBQWdCLEdBQUcsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFFekUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtnQkFDNUMsU0FBUzthQUNWO1lBRUQsTUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7Z0JBQzdELENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTTtnQkFDaEIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7WUFFbkIsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMzQixTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDO1lBQ3BCLGFBQWEsQ0FDWCxPQUFPLEVBQ1AsUUFBUSxFQUNSLFlBQVksRUFDWixTQUFTLEVBQ1QsZUFBZSxDQUNoQixDQUFDO1lBQ0YsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUNyQixZQUFZLENBQUMsR0FBRyxFQUFFLENBQUM7U0FDcEI7SUFDSCxDQUFDLENBQUM7SUFFRixhQUFhLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFFaEQsR0FBRyxDQUFDLElBQUksQ0FDTixFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxFQUFFLEVBQ3JDLFlBQVksTUFBTSxDQUFDLE1BQU0sbUJBQW1CLENBQzdDLENBQUM7SUFFRixPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDIn0="]},"metadata":{},"sourceType":"module"}