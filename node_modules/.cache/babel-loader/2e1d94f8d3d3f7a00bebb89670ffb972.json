{"ast":null,"code":"import{DEFAULT_TXN_DISMISS_MS}from'constants/misc';import{useCallback,useMemo}from'react';import{useAppDispatch,useAppSelector}from'state/hooks';import{useActiveWeb3React}from'../../hooks/web3';import{addPopup,ApplicationModal,removePopup,setOpenModal}from'./reducer';export function useBlockNumber(){var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId;return useAppSelector(function(state){return state.application.blockNumber[chainId!==null&&chainId!==void 0?chainId:-1];});}export function useModalOpen(modal){var openModal=useAppSelector(function(state){return state.application.openModal;});return openModal===modal;}export function useToggleModal(modal){var open=useModalOpen(modal);var dispatch=useAppDispatch();return useCallback(function(){return dispatch(setOpenModal(open?null:modal));},[dispatch,modal,open]);}export function useWalletModalToggle(){return useToggleModal(ApplicationModal.WALLET);}export function useToggleSettingsMenu(){return useToggleModal(ApplicationModal.SETTINGS);}export function useShowClaimPopup(){return useModalOpen(ApplicationModal.CLAIM_POPUP);}export function useToggleShowClaimPopup(){return useToggleModal(ApplicationModal.CLAIM_POPUP);}export function useToggleSelfClaimModal(){return useToggleModal(ApplicationModal.SELF_CLAIM);}export function useToggleDelegateModal(){return useToggleModal(ApplicationModal.DELEGATE);}export function useToggleVoteModal(){return useToggleModal(ApplicationModal.VOTE);}export function useTogglePrivacyPolicy(){return useToggleModal(ApplicationModal.PRIVACY_POLICY);}// returns a function that allows adding a popup\nexport function useAddPopup(){var dispatch=useAppDispatch();return useCallback(function(content,key,removeAfterMs){dispatch(addPopup({content:content,key:key,removeAfterMs:removeAfterMs!==null&&removeAfterMs!==void 0?removeAfterMs:DEFAULT_TXN_DISMISS_MS}));},[dispatch]);}// returns a function that allows removing a popup via its key\nexport function useRemovePopup(){var dispatch=useAppDispatch();return useCallback(function(key){dispatch(removePopup({key:key}));},[dispatch]);}// get the list of active popups\nexport function useActivePopups(){var list=useAppSelector(function(state){return state.application.popupList;});return useMemo(function(){return list.filter(function(item){return item.show;});},[list]);}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/state/application/hooks.ts"],"names":["DEFAULT_TXN_DISMISS_MS","useCallback","useMemo","useAppDispatch","useAppSelector","useActiveWeb3React","addPopup","ApplicationModal","removePopup","setOpenModal","useBlockNumber","chainId","state","application","blockNumber","useModalOpen","modal","openModal","useToggleModal","open","dispatch","useWalletModalToggle","WALLET","useToggleSettingsMenu","SETTINGS","useShowClaimPopup","CLAIM_POPUP","useToggleShowClaimPopup","useToggleSelfClaimModal","SELF_CLAIM","useToggleDelegateModal","DELEGATE","useToggleVoteModal","VOTE","useTogglePrivacyPolicy","PRIVACY_POLICY","useAddPopup","content","key","removeAfterMs","useRemovePopup","useActivePopups","list","popupList","filter","item","show"],"mappings":"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","sourcesContent":["import { DEFAULT_TXN_DISMISS_MS } from 'constants/misc'\nimport { useCallback, useMemo } from 'react'\nimport { useAppDispatch, useAppSelector } from 'state/hooks'\n\nimport { useActiveWeb3React } from '../../hooks/web3'\nimport { AppState } from '../index'\nimport { addPopup, ApplicationModal, PopupContent, removePopup, setOpenModal } from './reducer'\n\nexport function useBlockNumber(): number | undefined {\n  const { chainId } = useActiveWeb3React()\n\n  return useAppSelector((state: AppState) => state.application.blockNumber[chainId ?? -1])\n}\n\nexport function useModalOpen(modal: ApplicationModal): boolean {\n  const openModal = useAppSelector((state: AppState) => state.application.openModal)\n  return openModal === modal\n}\n\nexport function useToggleModal(modal: ApplicationModal): () => void {\n  const open = useModalOpen(modal)\n  const dispatch = useAppDispatch()\n  return useCallback(() => dispatch(setOpenModal(open ? null : modal)), [dispatch, modal, open])\n}\n\nexport function useWalletModalToggle(): () => void {\n  return useToggleModal(ApplicationModal.WALLET)\n}\n\nexport function useToggleSettingsMenu(): () => void {\n  return useToggleModal(ApplicationModal.SETTINGS)\n}\n\nexport function useShowClaimPopup(): boolean {\n  return useModalOpen(ApplicationModal.CLAIM_POPUP)\n}\n\nexport function useToggleShowClaimPopup(): () => void {\n  return useToggleModal(ApplicationModal.CLAIM_POPUP)\n}\n\nexport function useToggleSelfClaimModal(): () => void {\n  return useToggleModal(ApplicationModal.SELF_CLAIM)\n}\n\nexport function useToggleDelegateModal(): () => void {\n  return useToggleModal(ApplicationModal.DELEGATE)\n}\n\nexport function useToggleVoteModal(): () => void {\n  return useToggleModal(ApplicationModal.VOTE)\n}\n\nexport function useTogglePrivacyPolicy(): () => void {\n  return useToggleModal(ApplicationModal.PRIVACY_POLICY)\n}\n\n// returns a function that allows adding a popup\nexport function useAddPopup(): (content: PopupContent, key?: string, removeAfterMs?: number) => void {\n  const dispatch = useAppDispatch()\n\n  return useCallback(\n    (content: PopupContent, key?: string, removeAfterMs?: number) => {\n      dispatch(addPopup({ content, key, removeAfterMs: removeAfterMs ?? DEFAULT_TXN_DISMISS_MS }))\n    },\n    [dispatch]\n  )\n}\n\n// returns a function that allows removing a popup via its key\nexport function useRemovePopup(): (key: string) => void {\n  const dispatch = useAppDispatch()\n  return useCallback(\n    (key: string) => {\n      dispatch(removePopup({ key }))\n    },\n    [dispatch]\n  )\n}\n\n// get the list of active popups\nexport function useActivePopups(): AppState['application']['popupList'] {\n  const list = useAppSelector((state: AppState) => state.application.popupList)\n  return useMemo(() => list.filter((item) => item.show), [list])\n}\n"]},"metadata":{},"sourceType":"module"}