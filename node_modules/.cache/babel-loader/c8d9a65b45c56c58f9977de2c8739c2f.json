{"ast":null,"code":"/**\n * Mnemonist Quick Sort\n * =====================\n *\n * Quick sort related functions.\n * Adapted from: https://alienryderflex.com/quicksort/\n */\nvar LOS = new Float64Array(64),\n    HIS = new Float64Array(64);\n\nfunction inplaceQuickSort(array, lo, hi) {\n  var p, i, l, r, swap;\n  LOS[0] = lo;\n  HIS[0] = hi;\n  i = 0;\n\n  while (i >= 0) {\n    l = LOS[i];\n    r = HIS[i] - 1;\n\n    if (l < r) {\n      p = array[l];\n\n      while (l < r) {\n        while (array[r] >= p && l < r) {\n          r--;\n        }\n\n        if (l < r) array[l++] = array[r];\n\n        while (array[l] <= p && l < r) {\n          l++;\n        }\n\n        if (l < r) array[r--] = array[l];\n      }\n\n      array[l] = p;\n      LOS[i + 1] = l + 1;\n      HIS[i + 1] = HIS[i];\n      HIS[i++] = l;\n\n      if (HIS[i] - LOS[i] > HIS[i - 1] - LOS[i - 1]) {\n        swap = LOS[i];\n        LOS[i] = LOS[i - 1];\n        LOS[i - 1] = swap;\n        swap = HIS[i];\n        HIS[i] = HIS[i - 1];\n        HIS[i - 1] = swap;\n      }\n    } else {\n      i--;\n    }\n  }\n\n  return array;\n}\n\nexports.inplaceQuickSort = inplaceQuickSort;\n\nfunction inplaceQuickSortIndices(array, indices, lo, hi) {\n  var p, i, l, r, t, swap;\n  LOS[0] = lo;\n  HIS[0] = hi;\n  i = 0;\n\n  while (i >= 0) {\n    l = LOS[i];\n    r = HIS[i] - 1;\n\n    if (l < r) {\n      t = indices[l];\n      p = array[t];\n\n      while (l < r) {\n        while (array[indices[r]] >= p && l < r) {\n          r--;\n        }\n\n        if (l < r) indices[l++] = indices[r];\n\n        while (array[indices[l]] <= p && l < r) {\n          l++;\n        }\n\n        if (l < r) indices[r--] = indices[l];\n      }\n\n      indices[l] = t;\n      LOS[i + 1] = l + 1;\n      HIS[i + 1] = HIS[i];\n      HIS[i++] = l;\n\n      if (HIS[i] - LOS[i] > HIS[i - 1] - LOS[i - 1]) {\n        swap = LOS[i];\n        LOS[i] = LOS[i - 1];\n        LOS[i - 1] = swap;\n        swap = HIS[i];\n        HIS[i] = HIS[i - 1];\n        HIS[i - 1] = swap;\n      }\n    } else {\n      i--;\n    }\n  }\n\n  return indices;\n}\n\nexports.inplaceQuickSortIndices = inplaceQuickSortIndices;","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/node_modules/mnemonist/sort/quick.js"],"names":["LOS","Float64Array","HIS","inplaceQuickSort","array","lo","hi","p","i","l","r","swap","exports","inplaceQuickSortIndices","indices","t"],"mappings":"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","sourcesContent":["/**\n * Mnemonist Quick Sort\n * =====================\n *\n * Quick sort related functions.\n * Adapted from: https://alienryderflex.com/quicksort/\n */\nvar LOS = new Float64Array(64),\n    HIS = new Float64Array(64);\n\nfunction inplaceQuickSort(array, lo, hi) {\n  var p, i, l, r, swap;\n\n  LOS[0] = lo;\n  HIS[0] = hi;\n  i = 0;\n\n  while (i >= 0) {\n    l = LOS[i];\n    r = HIS[i] - 1;\n\n    if (l < r) {\n      p = array[l];\n\n      while (l < r) {\n        while (array[r] >= p && l < r)\n          r--;\n\n        if (l < r)\n          array[l++] = array[r];\n\n        while (array[l] <= p && l < r)\n          l++;\n\n        if (l < r)\n          array[r--] = array[l];\n      }\n\n      array[l] = p;\n      LOS[i + 1] = l + 1;\n      HIS[i + 1] = HIS[i];\n      HIS[i++] = l;\n\n      if (HIS[i] - LOS[i] > HIS[i - 1] - LOS[i - 1]) {\n        swap = LOS[i];\n        LOS[i] = LOS[i - 1];\n        LOS[i - 1] = swap;\n\n        swap = HIS[i];\n        HIS[i] = HIS[i - 1];\n        HIS[i - 1] = swap;\n      }\n    }\n    else {\n      i--;\n    }\n  }\n\n  return array;\n}\n\nexports.inplaceQuickSort = inplaceQuickSort;\n\nfunction inplaceQuickSortIndices(array, indices, lo, hi) {\n  var p, i, l, r, t, swap;\n\n  LOS[0] = lo;\n  HIS[0] = hi;\n  i = 0;\n\n  while (i >= 0) {\n    l = LOS[i];\n    r = HIS[i] - 1;\n\n    if (l < r) {\n      t = indices[l];\n      p = array[t];\n\n      while (l < r) {\n        while (array[indices[r]] >= p && l < r)\n          r--;\n\n        if (l < r)\n          indices[l++] = indices[r];\n\n        while (array[indices[l]] <= p && l < r)\n          l++;\n\n        if (l < r)\n          indices[r--] = indices[l];\n      }\n\n      indices[l] = t;\n      LOS[i + 1] = l + 1;\n      HIS[i + 1] = HIS[i];\n      HIS[i++] = l;\n\n      if (HIS[i] - LOS[i] > HIS[i - 1] - LOS[i - 1]) {\n        swap = LOS[i];\n        LOS[i] = LOS[i - 1];\n        LOS[i - 1] = swap;\n\n        swap = HIS[i];\n        HIS[i] = HIS[i - 1];\n        HIS[i - 1] = swap;\n      }\n    }\n    else {\n      i--;\n    }\n  }\n\n  return indices;\n}\n\nexports.inplaceQuickSortIndices = inplaceQuickSortIndices;\n"]},"metadata":{},"sourceType":"script"}