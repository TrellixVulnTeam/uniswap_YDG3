{"ast":null,"code":"import _regeneratorRuntime from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _objectSpread from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _baseTokensByChain;\n\nimport { Protocol } from '@uniswap/router-sdk';\nimport { TradeType } from '@uniswap/sdk-core';\nimport { FeeAmount } from '@uniswap/v3-sdk';\nimport _ from 'lodash';\nimport { DAI_ARBITRUM, DAI_ARBITRUM_RINKEBY, DAI_MAINNET, DAI_OPTIMISM, DAI_OPTIMISTIC_KOVAN, DAI_POLYGON_MUMBAI, DAI_RINKEBY_1, DAI_RINKEBY_2, FEI_MAINNET, USDC_ARBITRUM, USDC_MAINNET, USDC_OPTIMISM, USDC_OPTIMISTIC_KOVAN, USDC_POLYGON, USDT_ARBITRUM, USDT_ARBITRUM_RINKEBY, USDT_MAINNET, USDT_OPTIMISM, USDT_OPTIMISTIC_KOVAN, WBTC_ARBITRUM, WBTC_MAINNET, WBTC_OPTIMISM, WBTC_OPTIMISTIC_KOVAN, WMATIC_POLYGON, WMATIC_POLYGON_MUMBAI } from '../../../providers/token-provider';\nimport { ChainId, WRAPPED_NATIVE_CURRENCY } from '../../../util';\nimport { parseFeeAmount, unparseFeeAmount } from '../../../util/amounts';\nimport { log } from '../../../util/log';\nimport { metric, MetricLoggerUnit } from '../../../util/metric';\nvar baseTokensByChain = (_baseTokensByChain = {}, _defineProperty(_baseTokensByChain, ChainId.MAINNET, [USDC_MAINNET, USDT_MAINNET, WBTC_MAINNET, DAI_MAINNET, WRAPPED_NATIVE_CURRENCY[1], FEI_MAINNET]), _defineProperty(_baseTokensByChain, ChainId.RINKEBY, [DAI_RINKEBY_1, DAI_RINKEBY_2]), _defineProperty(_baseTokensByChain, ChainId.OPTIMISM, [DAI_OPTIMISM, USDC_OPTIMISM, USDT_OPTIMISM, WBTC_OPTIMISM]), _defineProperty(_baseTokensByChain, ChainId.OPTIMISTIC_KOVAN, [DAI_OPTIMISTIC_KOVAN, USDC_OPTIMISTIC_KOVAN, WBTC_OPTIMISTIC_KOVAN, USDT_OPTIMISTIC_KOVAN]), _defineProperty(_baseTokensByChain, ChainId.ARBITRUM_ONE, [DAI_ARBITRUM, USDC_ARBITRUM, WBTC_ARBITRUM, USDT_ARBITRUM]), _defineProperty(_baseTokensByChain, ChainId.ARBITRUM_RINKEBY, [DAI_ARBITRUM_RINKEBY, USDT_ARBITRUM_RINKEBY]), _defineProperty(_baseTokensByChain, ChainId.POLYGON, [USDC_POLYGON, WMATIC_POLYGON]), _defineProperty(_baseTokensByChain, ChainId.POLYGON_MUMBAI, [DAI_POLYGON_MUMBAI, WMATIC_POLYGON_MUMBAI]), _baseTokensByChain);\nexport function getV3CandidatePools(_x) {\n  return _getV3CandidatePools.apply(this, arguments);\n}\n\nfunction _getV3CandidatePools() {\n  _getV3CandidatePools = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var tokenIn, tokenOut, routeType, routingConfig, subgraphProvider, tokenProvider, poolProvider, blockedTokenListProvider, chainId, _a, _b, _c, _d, _e, blockNumber, _routingConfig$v3Pool, topN, topNDirectSwaps, topNTokenInOut, topNSecondHop, topNWithEachBaseToken, topNWithBaseToken, tokenInAddress, tokenOutAddress, beforeSubgraphPools, allPoolsRaw, allPools, filteredPools, _iterator, _step, pool, token0InBlocklist, token1InBlocklist, subgraphPoolsSorted, poolAddressesSoFar, addToAddressSet, baseTokens, topByBaseWithTokenIn, topByBaseWithTokenOut, top2DirectSwapPool, wrappedNativeAddress, top2EthQuoteTokenPool, topByTVL, topByTVLUsingTokenIn, topByTVLUsingTokenOut, topByTVLUsingTokenInSecondHops, topByTVLUsingTokenOutSecondHops, subgraphPools, tokenAddresses, tokenAccessor, printV3SubgraphPool, tokenPairsRaw, tokenPairs, beforePoolsLoad, poolAccessor, poolsBySelection;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            tokenIn = _ref.tokenIn, tokenOut = _ref.tokenOut, routeType = _ref.routeType, routingConfig = _ref.routingConfig, subgraphProvider = _ref.subgraphProvider, tokenProvider = _ref.tokenProvider, poolProvider = _ref.poolProvider, blockedTokenListProvider = _ref.blockedTokenListProvider, chainId = _ref.chainId;\n            blockNumber = routingConfig.blockNumber, _routingConfig$v3Pool = routingConfig.v3PoolSelection, topN = _routingConfig$v3Pool.topN, topNDirectSwaps = _routingConfig$v3Pool.topNDirectSwaps, topNTokenInOut = _routingConfig$v3Pool.topNTokenInOut, topNSecondHop = _routingConfig$v3Pool.topNSecondHop, topNWithEachBaseToken = _routingConfig$v3Pool.topNWithEachBaseToken, topNWithBaseToken = _routingConfig$v3Pool.topNWithBaseToken;\n            tokenInAddress = tokenIn.address.toLowerCase();\n            tokenOutAddress = tokenOut.address.toLowerCase();\n            beforeSubgraphPools = Date.now();\n            _context.next = 7;\n            return subgraphProvider.getPools(tokenIn, tokenOut, {\n              blockNumber: blockNumber\n            });\n\n          case 7:\n            allPoolsRaw = _context.sent;\n            log.info({\n              samplePools: allPoolsRaw.slice(0, 3)\n            }, 'Got all pools from V3 subgraph provider');\n            allPools = _.map(allPoolsRaw, function (pool) {\n              return _objectSpread(_objectSpread({}, pool), {}, {\n                token0: _objectSpread(_objectSpread({}, pool.token0), {}, {\n                  id: pool.token0.id.toLowerCase()\n                }),\n                token1: _objectSpread(_objectSpread({}, pool.token1), {}, {\n                  id: pool.token1.id.toLowerCase()\n                })\n              });\n            });\n            metric.putMetric('V3SubgraphPoolsLoad', Date.now() - beforeSubgraphPools, MetricLoggerUnit.Milliseconds); // Only consider pools where neither tokens are in the blocked token list.\n\n            filteredPools = allPools;\n\n            if (!blockedTokenListProvider) {\n              _context.next = 38;\n              break;\n            }\n\n            filteredPools = [];\n            _iterator = _createForOfIteratorHelper(allPools);\n            _context.prev = 15;\n\n            _iterator.s();\n\n          case 17:\n            if ((_step = _iterator.n()).done) {\n              _context.next = 30;\n              break;\n            }\n\n            pool = _step.value;\n            _context.next = 21;\n            return blockedTokenListProvider.getTokenByAddress(pool.token0.id);\n\n          case 21:\n            token0InBlocklist = _context.sent;\n            _context.next = 24;\n            return blockedTokenListProvider.getTokenByAddress(pool.token1.id);\n\n          case 24:\n            token1InBlocklist = _context.sent;\n\n            if (!(token0InBlocklist || token1InBlocklist)) {\n              _context.next = 27;\n              break;\n            }\n\n            return _context.abrupt(\"continue\", 28);\n\n          case 27:\n            filteredPools.push(pool);\n\n          case 28:\n            _context.next = 17;\n            break;\n\n          case 30:\n            _context.next = 35;\n            break;\n\n          case 32:\n            _context.prev = 32;\n            _context.t0 = _context[\"catch\"](15);\n\n            _iterator.e(_context.t0);\n\n          case 35:\n            _context.prev = 35;\n\n            _iterator.f();\n\n            return _context.finish(35);\n\n          case 38:\n            subgraphPoolsSorted = _(filteredPools).sortBy(function (tokenListPool) {\n              return -tokenListPool.tvlUSD;\n            }).value();\n            log.info(\"After filtering blocked tokens went from \".concat(allPools.length, \" to \").concat(subgraphPoolsSorted.length, \".\"));\n            poolAddressesSoFar = new Set();\n\n            addToAddressSet = function addToAddressSet(pools) {\n              _(pools).map(function (pool) {\n                return pool.id;\n              }).forEach(function (poolAddress) {\n                return poolAddressesSoFar.add(poolAddress);\n              });\n            };\n\n            baseTokens = (_a = baseTokensByChain[chainId]) !== null && _a !== void 0 ? _a : [];\n            topByBaseWithTokenIn = _(baseTokens).flatMap(function (token) {\n              return _(subgraphPoolsSorted).filter(function (subgraphPool) {\n                var tokenAddress = token.address.toLowerCase();\n                return subgraphPool.token0.id == tokenAddress && subgraphPool.token1.id == tokenInAddress || subgraphPool.token1.id == tokenAddress && subgraphPool.token0.id == tokenInAddress;\n              }).sortBy(function (tokenListPool) {\n                return -tokenListPool.tvlUSD;\n              }).slice(0, topNWithEachBaseToken).value();\n            }).sortBy(function (tokenListPool) {\n              return -tokenListPool.tvlUSD;\n            }).slice(0, topNWithBaseToken).value();\n            topByBaseWithTokenOut = _(baseTokens).flatMap(function (token) {\n              return _(subgraphPoolsSorted).filter(function (subgraphPool) {\n                var tokenAddress = token.address.toLowerCase();\n                return subgraphPool.token0.id == tokenAddress && subgraphPool.token1.id == tokenOutAddress || subgraphPool.token1.id == tokenAddress && subgraphPool.token0.id == tokenOutAddress;\n              }).sortBy(function (tokenListPool) {\n                return -tokenListPool.tvlUSD;\n              }).slice(0, topNWithEachBaseToken).value();\n            }).sortBy(function (tokenListPool) {\n              return -tokenListPool.tvlUSD;\n            }).slice(0, topNWithBaseToken).value();\n            top2DirectSwapPool = _(subgraphPoolsSorted).filter(function (subgraphPool) {\n              return !poolAddressesSoFar.has(subgraphPool.id) && (subgraphPool.token0.id == tokenInAddress && subgraphPool.token1.id == tokenOutAddress || subgraphPool.token1.id == tokenInAddress && subgraphPool.token0.id == tokenOutAddress);\n            }).slice(0, topNDirectSwaps).value();\n\n            if (top2DirectSwapPool.length == 0 && topNDirectSwaps > 0) {\n              // If we requested direct swap pools but did not find any in the subgraph query.\n              // Optimistically add them into the query regardless. Invalid pools ones will be dropped anyway\n              // when we query the pool on-chain. Ensures that new pools for new pairs can be swapped on immediately.\n              top2DirectSwapPool = _.map([FeeAmount.HIGH, FeeAmount.MEDIUM, FeeAmount.LOW, FeeAmount.LOWEST], function (feeAmount) {\n                var _poolProvider$getPool = poolProvider.getPoolAddress(tokenIn, tokenOut, feeAmount),\n                    token0 = _poolProvider$getPool.token0,\n                    token1 = _poolProvider$getPool.token1,\n                    poolAddress = _poolProvider$getPool.poolAddress;\n\n                return {\n                  id: poolAddress,\n                  feeTier: unparseFeeAmount(feeAmount),\n                  liquidity: '10000',\n                  token0: {\n                    id: token0.address\n                  },\n                  token1: {\n                    id: token1.address\n                  },\n                  tvlETH: 10000,\n                  tvlUSD: 10000\n                };\n              });\n            }\n\n            addToAddressSet(top2DirectSwapPool);\n            wrappedNativeAddress = (_b = WRAPPED_NATIVE_CURRENCY[chainId]) === null || _b === void 0 ? void 0 : _b.address; // Main reason we need this is for gas estimates, only needed if token out is not native.\n            // We don't check the seen address set because if we've already added pools for getting native quotes\n            // theres no need to add more.\n\n            top2EthQuoteTokenPool = [];\n\n            if (((_c = WRAPPED_NATIVE_CURRENCY[chainId]) === null || _c === void 0 ? void 0 : _c.symbol) == ((_d = WRAPPED_NATIVE_CURRENCY[ChainId.MAINNET]) === null || _d === void 0 ? void 0 : _d.symbol) && tokenOut.symbol != 'WETH' && tokenOut.symbol != 'WETH9' && tokenOut.symbol != 'ETH' || ((_e = WRAPPED_NATIVE_CURRENCY[chainId]) === null || _e === void 0 ? void 0 : _e.symbol) == WMATIC_POLYGON.symbol && tokenOut.symbol != 'MATIC' && tokenOut.symbol != 'WMATIC') {\n              top2EthQuoteTokenPool = _(subgraphPoolsSorted).filter(function (subgraphPool) {\n                if (routeType == TradeType.EXACT_INPUT) {\n                  return subgraphPool.token0.id == wrappedNativeAddress && subgraphPool.token1.id == tokenOutAddress || subgraphPool.token1.id == wrappedNativeAddress && subgraphPool.token0.id == tokenOutAddress;\n                } else {\n                  return subgraphPool.token0.id == wrappedNativeAddress && subgraphPool.token1.id == tokenInAddress || subgraphPool.token1.id == wrappedNativeAddress && subgraphPool.token0.id == tokenInAddress;\n                }\n              }).slice(0, 1).value();\n            }\n\n            addToAddressSet(top2EthQuoteTokenPool);\n            topByTVL = _(subgraphPoolsSorted).filter(function (subgraphPool) {\n              return !poolAddressesSoFar.has(subgraphPool.id);\n            }).slice(0, topN).value();\n            addToAddressSet(topByTVL);\n            topByTVLUsingTokenIn = _(subgraphPoolsSorted).filter(function (subgraphPool) {\n              return !poolAddressesSoFar.has(subgraphPool.id) && (subgraphPool.token0.id == tokenInAddress || subgraphPool.token1.id == tokenInAddress);\n            }).slice(0, topNTokenInOut).value();\n            addToAddressSet(topByTVLUsingTokenIn);\n            topByTVLUsingTokenOut = _(subgraphPoolsSorted).filter(function (subgraphPool) {\n              return !poolAddressesSoFar.has(subgraphPool.id) && (subgraphPool.token0.id == tokenOutAddress || subgraphPool.token1.id == tokenOutAddress);\n            }).slice(0, topNTokenInOut).value();\n            addToAddressSet(topByTVLUsingTokenOut);\n            topByTVLUsingTokenInSecondHops = _(topByTVLUsingTokenIn).map(function (subgraphPool) {\n              return tokenInAddress == subgraphPool.token0.id ? subgraphPool.token1.id : subgraphPool.token0.id;\n            }).flatMap(function (secondHopId) {\n              return _(subgraphPoolsSorted).filter(function (subgraphPool) {\n                return !poolAddressesSoFar.has(subgraphPool.id) && (subgraphPool.token0.id == secondHopId || subgraphPool.token1.id == secondHopId);\n              }).slice(0, topNSecondHop).value();\n            }).uniqBy(function (pool) {\n              return pool.id;\n            }).sortBy(function (tokenListPool) {\n              return -tokenListPool.tvlUSD;\n            }).slice(0, topNSecondHop).value();\n            addToAddressSet(topByTVLUsingTokenInSecondHops);\n            topByTVLUsingTokenOutSecondHops = _(topByTVLUsingTokenOut).map(function (subgraphPool) {\n              return tokenOutAddress == subgraphPool.token0.id ? subgraphPool.token1.id : subgraphPool.token0.id;\n            }).flatMap(function (secondHopId) {\n              return _(subgraphPoolsSorted).filter(function (subgraphPool) {\n                return !poolAddressesSoFar.has(subgraphPool.id) && (subgraphPool.token0.id == secondHopId || subgraphPool.token1.id == secondHopId);\n              }).slice(0, topNSecondHop).value();\n            }).uniqBy(function (pool) {\n              return pool.id;\n            }).sortBy(function (tokenListPool) {\n              return -tokenListPool.tvlUSD;\n            }).slice(0, topNSecondHop).value();\n            addToAddressSet(topByTVLUsingTokenOutSecondHops);\n            subgraphPools = _([].concat(_toConsumableArray(topByBaseWithTokenIn), _toConsumableArray(topByBaseWithTokenOut), _toConsumableArray(top2DirectSwapPool), _toConsumableArray(top2EthQuoteTokenPool), _toConsumableArray(topByTVL), _toConsumableArray(topByTVLUsingTokenIn), _toConsumableArray(topByTVLUsingTokenOut), _toConsumableArray(topByTVLUsingTokenInSecondHops), _toConsumableArray(topByTVLUsingTokenOutSecondHops))).compact().uniqBy(function (pool) {\n              return pool.id;\n            }).value();\n            tokenAddresses = _(subgraphPools).flatMap(function (subgraphPool) {\n              return [subgraphPool.token0.id, subgraphPool.token1.id];\n            }).compact().uniq().value();\n            log.info(\"Getting the \".concat(tokenAddresses.length, \" tokens within the \").concat(subgraphPools.length, \" V3 pools we are considering\"));\n            _context.next = 67;\n            return tokenProvider.getTokens(tokenAddresses, {\n              blockNumber: blockNumber\n            });\n\n          case 67:\n            tokenAccessor = _context.sent;\n\n            printV3SubgraphPool = function printV3SubgraphPool(s) {\n              var _a, _b, _c, _d;\n\n              return \"\".concat((_b = (_a = tokenAccessor.getTokenByAddress(s.token0.id)) === null || _a === void 0 ? void 0 : _a.symbol) !== null && _b !== void 0 ? _b : s.token0.id, \"/\").concat((_d = (_c = tokenAccessor.getTokenByAddress(s.token1.id)) === null || _c === void 0 ? void 0 : _c.symbol) !== null && _d !== void 0 ? _d : s.token1.id, \"/\").concat(s.feeTier);\n            };\n\n            log.info({\n              topByBaseWithTokenIn: topByBaseWithTokenIn.map(printV3SubgraphPool),\n              topByBaseWithTokenOut: topByBaseWithTokenOut.map(printV3SubgraphPool),\n              topByTVL: topByTVL.map(printV3SubgraphPool),\n              topByTVLUsingTokenIn: topByTVLUsingTokenIn.map(printV3SubgraphPool),\n              topByTVLUsingTokenOut: topByTVLUsingTokenOut.map(printV3SubgraphPool),\n              topByTVLUsingTokenInSecondHops: topByTVLUsingTokenInSecondHops.map(printV3SubgraphPool),\n              topByTVLUsingTokenOutSecondHops: topByTVLUsingTokenOutSecondHops.map(printV3SubgraphPool),\n              top2DirectSwap: top2DirectSwapPool.map(printV3SubgraphPool),\n              top2EthQuotePool: top2EthQuoteTokenPool.map(printV3SubgraphPool)\n            }, \"V3 Candidate Pools\");\n            tokenPairsRaw = _.map(subgraphPools, function (subgraphPool) {\n              var tokenA = tokenAccessor.getTokenByAddress(subgraphPool.token0.id);\n              var tokenB = tokenAccessor.getTokenByAddress(subgraphPool.token1.id);\n              var fee;\n\n              try {\n                fee = parseFeeAmount(subgraphPool.feeTier);\n              } catch (err) {\n                log.info({\n                  subgraphPool: subgraphPool\n                }, \"Dropping candidate pool for \".concat(subgraphPool.token0.id, \"/\").concat(subgraphPool.token1.id, \"/\").concat(subgraphPool.feeTier, \" because fee tier not supported\"));\n                return undefined;\n              }\n\n              if (!tokenA || !tokenB) {\n                log.info(\"Dropping candidate pool for \".concat(subgraphPool.token0.id, \"/\").concat(subgraphPool.token1.id, \"/\").concat(fee, \" because \").concat(tokenA ? subgraphPool.token1.id : subgraphPool.token0.id, \" not found by token provider\"));\n                return undefined;\n              }\n\n              return [tokenA, tokenB, fee];\n            });\n            tokenPairs = _.compact(tokenPairsRaw);\n            beforePoolsLoad = Date.now();\n            _context.next = 75;\n            return poolProvider.getPools(tokenPairs);\n\n          case 75:\n            poolAccessor = _context.sent;\n            metric.putMetric('V3PoolsLoad', Date.now() - beforePoolsLoad, MetricLoggerUnit.Milliseconds);\n            poolsBySelection = {\n              protocol: Protocol.V3,\n              selections: {\n                topByBaseWithTokenIn: topByBaseWithTokenIn,\n                topByBaseWithTokenOut: topByBaseWithTokenOut,\n                topByDirectSwapPool: top2DirectSwapPool,\n                topByEthQuoteTokenPool: top2EthQuoteTokenPool,\n                topByTVL: topByTVL,\n                topByTVLUsingTokenIn: topByTVLUsingTokenIn,\n                topByTVLUsingTokenOut: topByTVLUsingTokenOut,\n                topByTVLUsingTokenInSecondHops: topByTVLUsingTokenInSecondHops,\n                topByTVLUsingTokenOutSecondHops: topByTVLUsingTokenOutSecondHops\n              }\n            };\n            return _context.abrupt(\"return\", {\n              poolAccessor: poolAccessor,\n              candidatePools: poolsBySelection\n            });\n\n          case 79:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[15, 32, 35, 38]]);\n  }));\n  return _getV3CandidatePools.apply(this, arguments);\n}\n\nexport function getV2CandidatePools(_x2) {\n  return _getV2CandidatePools.apply(this, arguments);\n}\n\nfunction _getV2CandidatePools() {\n  _getV2CandidatePools = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2) {\n    var tokenIn, tokenOut, routeType, routingConfig, subgraphProvider, tokenProvider, poolProvider, blockedTokenListProvider, chainId, _a, blockNumber, _routingConfig$v2Pool, topN, topNDirectSwaps, topNTokenInOut, topNSecondHop, topNWithEachBaseToken, topNWithBaseToken, tokenInAddress, tokenOutAddress, beforeSubgraphPools, allPoolsRaw, allPools, filteredPools, _iterator2, _step2, pool, token0InBlocklist, token1InBlocklist, subgraphPoolsSorted, poolAddressesSoFar, addToAddressSet, baseTokens, topByBaseWithTokenIn, topByBaseWithTokenOut, topByDirectSwapPool, _poolProvider$getPool2, token0, token1, poolAddress, wethAddress, topByEthQuoteTokenPool, topByTVL, topByTVLUsingTokenIn, topByTVLUsingTokenOut, topByTVLUsingTokenInSecondHops, topByTVLUsingTokenOutSecondHops, subgraphPools, tokenAddresses, tokenAccessor, printV2SubgraphPool, tokenPairsRaw, tokenPairs, beforePoolsLoad, poolAccessor, poolsBySelection;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            tokenIn = _ref2.tokenIn, tokenOut = _ref2.tokenOut, routeType = _ref2.routeType, routingConfig = _ref2.routingConfig, subgraphProvider = _ref2.subgraphProvider, tokenProvider = _ref2.tokenProvider, poolProvider = _ref2.poolProvider, blockedTokenListProvider = _ref2.blockedTokenListProvider, chainId = _ref2.chainId;\n            blockNumber = routingConfig.blockNumber, _routingConfig$v2Pool = routingConfig.v2PoolSelection, topN = _routingConfig$v2Pool.topN, topNDirectSwaps = _routingConfig$v2Pool.topNDirectSwaps, topNTokenInOut = _routingConfig$v2Pool.topNTokenInOut, topNSecondHop = _routingConfig$v2Pool.topNSecondHop, topNWithEachBaseToken = _routingConfig$v2Pool.topNWithEachBaseToken, topNWithBaseToken = _routingConfig$v2Pool.topNWithBaseToken;\n            tokenInAddress = tokenIn.address.toLowerCase();\n            tokenOutAddress = tokenOut.address.toLowerCase();\n            beforeSubgraphPools = Date.now();\n            _context2.next = 7;\n            return subgraphProvider.getPools(tokenIn, tokenOut, {\n              blockNumber: blockNumber\n            });\n\n          case 7:\n            allPoolsRaw = _context2.sent;\n            allPools = _.map(allPoolsRaw, function (pool) {\n              return _objectSpread(_objectSpread({}, pool), {}, {\n                token0: _objectSpread(_objectSpread({}, pool.token0), {}, {\n                  id: pool.token0.id.toLowerCase()\n                }),\n                token1: _objectSpread(_objectSpread({}, pool.token1), {}, {\n                  id: pool.token1.id.toLowerCase()\n                })\n              });\n            });\n            metric.putMetric('V2SubgraphPoolsLoad', Date.now() - beforeSubgraphPools, MetricLoggerUnit.Milliseconds); // Only consider pools where neither tokens are in the blocked token list.\n\n            filteredPools = allPools;\n\n            if (!blockedTokenListProvider) {\n              _context2.next = 37;\n              break;\n            }\n\n            filteredPools = [];\n            _iterator2 = _createForOfIteratorHelper(allPools);\n            _context2.prev = 14;\n\n            _iterator2.s();\n\n          case 16:\n            if ((_step2 = _iterator2.n()).done) {\n              _context2.next = 29;\n              break;\n            }\n\n            pool = _step2.value;\n            _context2.next = 20;\n            return blockedTokenListProvider.getTokenByAddress(pool.token0.id);\n\n          case 20:\n            token0InBlocklist = _context2.sent;\n            _context2.next = 23;\n            return blockedTokenListProvider.getTokenByAddress(pool.token1.id);\n\n          case 23:\n            token1InBlocklist = _context2.sent;\n\n            if (!(token0InBlocklist || token1InBlocklist)) {\n              _context2.next = 26;\n              break;\n            }\n\n            return _context2.abrupt(\"continue\", 27);\n\n          case 26:\n            filteredPools.push(pool);\n\n          case 27:\n            _context2.next = 16;\n            break;\n\n          case 29:\n            _context2.next = 34;\n            break;\n\n          case 31:\n            _context2.prev = 31;\n            _context2.t0 = _context2[\"catch\"](14);\n\n            _iterator2.e(_context2.t0);\n\n          case 34:\n            _context2.prev = 34;\n\n            _iterator2.f();\n\n            return _context2.finish(34);\n\n          case 37:\n            subgraphPoolsSorted = _(filteredPools).sortBy(function (tokenListPool) {\n              return -tokenListPool.reserve;\n            }).value();\n            log.info(\"After filtering blocked tokens went from \".concat(allPools.length, \" to \").concat(subgraphPoolsSorted.length, \".\"));\n            poolAddressesSoFar = new Set();\n\n            addToAddressSet = function addToAddressSet(pools) {\n              _(pools).map(function (pool) {\n                return pool.id;\n              }).forEach(function (poolAddress) {\n                return poolAddressesSoFar.add(poolAddress);\n              });\n            };\n\n            baseTokens = (_a = baseTokensByChain[chainId]) !== null && _a !== void 0 ? _a : [];\n            topByBaseWithTokenIn = _(baseTokens).flatMap(function (token) {\n              return _(subgraphPoolsSorted).filter(function (subgraphPool) {\n                var tokenAddress = token.address.toLowerCase();\n                return subgraphPool.token0.id == tokenAddress && subgraphPool.token1.id == tokenInAddress || subgraphPool.token1.id == tokenAddress && subgraphPool.token0.id == tokenInAddress;\n              }).sortBy(function (tokenListPool) {\n                return -tokenListPool.reserve;\n              }).slice(0, topNWithEachBaseToken).value();\n            }).sortBy(function (tokenListPool) {\n              return -tokenListPool.reserve;\n            }).slice(0, topNWithBaseToken).value();\n            topByBaseWithTokenOut = _(baseTokens).flatMap(function (token) {\n              return _(subgraphPoolsSorted).filter(function (subgraphPool) {\n                var tokenAddress = token.address.toLowerCase();\n                return subgraphPool.token0.id == tokenAddress && subgraphPool.token1.id == tokenOutAddress || subgraphPool.token1.id == tokenAddress && subgraphPool.token0.id == tokenOutAddress;\n              }).sortBy(function (tokenListPool) {\n                return -tokenListPool.reserve;\n              }).slice(0, topNWithEachBaseToken).value();\n            }).sortBy(function (tokenListPool) {\n              return -tokenListPool.reserve;\n            }).slice(0, topNWithBaseToken).value(); // Always add the direct swap pool into the mix regardless of if it exists in the subgraph pool list.\n            // Ensures that new pools can be swapped on immediately, and that if a pool was filtered out of the\n            // subgraph query for some reason (e.g. trackedReserveETH was 0), then we still consider it.\n\n            topByDirectSwapPool = [];\n\n            if (topNDirectSwaps != 0) {\n              _poolProvider$getPool2 = poolProvider.getPoolAddress(tokenIn, tokenOut), token0 = _poolProvider$getPool2.token0, token1 = _poolProvider$getPool2.token1, poolAddress = _poolProvider$getPool2.poolAddress;\n              topByDirectSwapPool = [{\n                id: poolAddress,\n                token0: {\n                  id: token0.address\n                },\n                token1: {\n                  id: token1.address\n                },\n                supply: 10000,\n                reserve: 10000 // Not used. Set to arbitrary number.\n\n              }];\n            }\n\n            addToAddressSet(topByDirectSwapPool);\n            wethAddress = WRAPPED_NATIVE_CURRENCY[chainId].address; // Main reason we need this is for gas estimates, only needed if token out is not ETH.\n            // We don't check the seen address set because if we've already added pools for getting ETH quotes\n            // theres no need to add more.\n            // Note: we do not need to check other native currencies for the V2 Protocol\n\n            topByEthQuoteTokenPool = [];\n\n            if (tokenOut.symbol != 'WETH' && tokenOut.symbol != 'WETH9' && tokenOut.symbol != 'ETH') {\n              topByEthQuoteTokenPool = _(subgraphPoolsSorted).filter(function (subgraphPool) {\n                if (routeType == TradeType.EXACT_INPUT) {\n                  return subgraphPool.token0.id == wethAddress && subgraphPool.token1.id == tokenOutAddress || subgraphPool.token1.id == wethAddress && subgraphPool.token0.id == tokenOutAddress;\n                } else {\n                  return subgraphPool.token0.id == wethAddress && subgraphPool.token1.id == tokenInAddress || subgraphPool.token1.id == wethAddress && subgraphPool.token0.id == tokenInAddress;\n                }\n              }).slice(0, 1).value();\n            }\n\n            addToAddressSet(topByEthQuoteTokenPool);\n            topByTVL = _(subgraphPoolsSorted).filter(function (subgraphPool) {\n              return !poolAddressesSoFar.has(subgraphPool.id);\n            }).slice(0, topN).value();\n            addToAddressSet(topByTVL);\n            topByTVLUsingTokenIn = _(subgraphPoolsSorted).filter(function (subgraphPool) {\n              return !poolAddressesSoFar.has(subgraphPool.id) && (subgraphPool.token0.id == tokenInAddress || subgraphPool.token1.id == tokenInAddress);\n            }).slice(0, topNTokenInOut).value();\n            addToAddressSet(topByTVLUsingTokenIn);\n            topByTVLUsingTokenOut = _(subgraphPoolsSorted).filter(function (subgraphPool) {\n              return !poolAddressesSoFar.has(subgraphPool.id) && (subgraphPool.token0.id == tokenOutAddress || subgraphPool.token1.id == tokenOutAddress);\n            }).slice(0, topNTokenInOut).value();\n            addToAddressSet(topByTVLUsingTokenOut);\n            topByTVLUsingTokenInSecondHops = _(topByTVLUsingTokenIn).map(function (subgraphPool) {\n              return tokenInAddress == subgraphPool.token0.id ? subgraphPool.token1.id : subgraphPool.token0.id;\n            }).flatMap(function (secondHopId) {\n              return _(subgraphPoolsSorted).filter(function (subgraphPool) {\n                return !poolAddressesSoFar.has(subgraphPool.id) && (subgraphPool.token0.id == secondHopId || subgraphPool.token1.id == secondHopId);\n              }).slice(0, topNSecondHop).value();\n            }).uniqBy(function (pool) {\n              return pool.id;\n            }).sortBy(function (tokenListPool) {\n              return -tokenListPool.reserve;\n            }).slice(0, topNSecondHop).value();\n            addToAddressSet(topByTVLUsingTokenInSecondHops);\n            topByTVLUsingTokenOutSecondHops = _(topByTVLUsingTokenOut).map(function (subgraphPool) {\n              return tokenOutAddress == subgraphPool.token0.id ? subgraphPool.token1.id : subgraphPool.token0.id;\n            }).flatMap(function (secondHopId) {\n              return _(subgraphPoolsSorted).filter(function (subgraphPool) {\n                return !poolAddressesSoFar.has(subgraphPool.id) && (subgraphPool.token0.id == secondHopId || subgraphPool.token1.id == secondHopId);\n              }).slice(0, topNSecondHop).value();\n            }).uniqBy(function (pool) {\n              return pool.id;\n            }).sortBy(function (tokenListPool) {\n              return -tokenListPool.reserve;\n            }).slice(0, topNSecondHop).value();\n            addToAddressSet(topByTVLUsingTokenOutSecondHops);\n            subgraphPools = _([].concat(_toConsumableArray(topByBaseWithTokenIn), _toConsumableArray(topByBaseWithTokenOut), _toConsumableArray(topByDirectSwapPool), _toConsumableArray(topByEthQuoteTokenPool), _toConsumableArray(topByTVL), _toConsumableArray(topByTVLUsingTokenIn), _toConsumableArray(topByTVLUsingTokenOut), _toConsumableArray(topByTVLUsingTokenInSecondHops), _toConsumableArray(topByTVLUsingTokenOutSecondHops))).compact().uniqBy(function (pool) {\n              return pool.id;\n            }).value();\n            tokenAddresses = _(subgraphPools).flatMap(function (subgraphPool) {\n              return [subgraphPool.token0.id, subgraphPool.token1.id];\n            }).compact().uniq().value();\n            log.info(\"Getting the \".concat(tokenAddresses.length, \" tokens within the \").concat(subgraphPools.length, \" V2 pools we are considering\"));\n            _context2.next = 66;\n            return tokenProvider.getTokens(tokenAddresses, {\n              blockNumber: blockNumber\n            });\n\n          case 66:\n            tokenAccessor = _context2.sent;\n\n            printV2SubgraphPool = function printV2SubgraphPool(s) {\n              var _a, _b, _c, _d;\n\n              return \"\".concat((_b = (_a = tokenAccessor.getTokenByAddress(s.token0.id)) === null || _a === void 0 ? void 0 : _a.symbol) !== null && _b !== void 0 ? _b : s.token0.id, \"/\").concat((_d = (_c = tokenAccessor.getTokenByAddress(s.token1.id)) === null || _c === void 0 ? void 0 : _c.symbol) !== null && _d !== void 0 ? _d : s.token1.id);\n            };\n\n            log.info({\n              topByBaseWithTokenIn: topByBaseWithTokenIn.map(printV2SubgraphPool),\n              topByBaseWithTokenOut: topByBaseWithTokenOut.map(printV2SubgraphPool),\n              topByTVL: topByTVL.map(printV2SubgraphPool),\n              topByTVLUsingTokenIn: topByTVLUsingTokenIn.map(printV2SubgraphPool),\n              topByTVLUsingTokenOut: topByTVLUsingTokenOut.map(printV2SubgraphPool),\n              topByTVLUsingTokenInSecondHops: topByTVLUsingTokenInSecondHops.map(printV2SubgraphPool),\n              topByTVLUsingTokenOutSecondHops: topByTVLUsingTokenOutSecondHops.map(printV2SubgraphPool),\n              top2DirectSwap: topByDirectSwapPool.map(printV2SubgraphPool),\n              top2EthQuotePool: topByEthQuoteTokenPool.map(printV2SubgraphPool)\n            }, \"V2 Candidate pools\");\n            tokenPairsRaw = _.map(subgraphPools, function (subgraphPool) {\n              var tokenA = tokenAccessor.getTokenByAddress(subgraphPool.token0.id);\n              var tokenB = tokenAccessor.getTokenByAddress(subgraphPool.token1.id);\n\n              if (!tokenA || !tokenB) {\n                log.info(\"Dropping candidate pool for \".concat(subgraphPool.token0.id, \"/\").concat(subgraphPool.token1.id));\n                return undefined;\n              }\n\n              return [tokenA, tokenB];\n            });\n            tokenPairs = _.compact(tokenPairsRaw);\n            beforePoolsLoad = Date.now();\n            _context2.next = 74;\n            return poolProvider.getPools(tokenPairs, {\n              blockNumber: blockNumber\n            });\n\n          case 74:\n            poolAccessor = _context2.sent;\n            metric.putMetric('V2PoolsLoad', Date.now() - beforePoolsLoad, MetricLoggerUnit.Milliseconds);\n            poolsBySelection = {\n              protocol: Protocol.V2,\n              selections: {\n                topByBaseWithTokenIn: topByBaseWithTokenIn,\n                topByBaseWithTokenOut: topByBaseWithTokenOut,\n                topByDirectSwapPool: topByDirectSwapPool,\n                topByEthQuoteTokenPool: topByEthQuoteTokenPool,\n                topByTVL: topByTVL,\n                topByTVLUsingTokenIn: topByTVLUsingTokenIn,\n                topByTVLUsingTokenOut: topByTVLUsingTokenOut,\n                topByTVLUsingTokenInSecondHops: topByTVLUsingTokenInSecondHops,\n                topByTVLUsingTokenOutSecondHops: topByTVLUsingTokenOutSecondHops\n              }\n            };\n            return _context2.abrupt(\"return\", {\n              poolAccessor: poolAccessor,\n              candidatePools: poolsBySelection\n            });\n\n          case 78:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[14, 31, 34, 37]]);\n  }));\n  return _getV2CandidatePools.apply(this, arguments);\n}","map":{"version":3,"sources":["../../../../../../src/routers/alpha-router/functions/get-candidate-pools.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Protocol } from '@uniswap/router-sdk';\nimport { TradeType } from '@uniswap/sdk-core';\nimport { FeeAmount } from '@uniswap/v3-sdk';\nimport _ from 'lodash';\nimport { DAI_ARBITRUM, DAI_ARBITRUM_RINKEBY, DAI_MAINNET, DAI_OPTIMISM, DAI_OPTIMISTIC_KOVAN, DAI_POLYGON_MUMBAI, DAI_RINKEBY_1, DAI_RINKEBY_2, FEI_MAINNET, USDC_ARBITRUM, USDC_MAINNET, USDC_OPTIMISM, USDC_OPTIMISTIC_KOVAN, USDC_POLYGON, USDT_ARBITRUM, USDT_ARBITRUM_RINKEBY, USDT_MAINNET, USDT_OPTIMISM, USDT_OPTIMISTIC_KOVAN, WBTC_ARBITRUM, WBTC_MAINNET, WBTC_OPTIMISM, WBTC_OPTIMISTIC_KOVAN, WMATIC_POLYGON, WMATIC_POLYGON_MUMBAI, } from '../../../providers/token-provider';\nimport { ChainId, WRAPPED_NATIVE_CURRENCY } from '../../../util';\nimport { parseFeeAmount, unparseFeeAmount } from '../../../util/amounts';\nimport { log } from '../../../util/log';\nimport { metric, MetricLoggerUnit } from '../../../util/metric';\nconst baseTokensByChain = {\n    [ChainId.MAINNET]: [\n        USDC_MAINNET,\n        USDT_MAINNET,\n        WBTC_MAINNET,\n        DAI_MAINNET,\n        WRAPPED_NATIVE_CURRENCY[1],\n        FEI_MAINNET,\n    ],\n    [ChainId.RINKEBY]: [DAI_RINKEBY_1, DAI_RINKEBY_2],\n    [ChainId.OPTIMISM]: [\n        DAI_OPTIMISM,\n        USDC_OPTIMISM,\n        USDT_OPTIMISM,\n        WBTC_OPTIMISM,\n    ],\n    [ChainId.OPTIMISTIC_KOVAN]: [\n        DAI_OPTIMISTIC_KOVAN,\n        USDC_OPTIMISTIC_KOVAN,\n        WBTC_OPTIMISTIC_KOVAN,\n        USDT_OPTIMISTIC_KOVAN,\n    ],\n    [ChainId.ARBITRUM_ONE]: [\n        DAI_ARBITRUM,\n        USDC_ARBITRUM,\n        WBTC_ARBITRUM,\n        USDT_ARBITRUM,\n    ],\n    [ChainId.ARBITRUM_RINKEBY]: [DAI_ARBITRUM_RINKEBY, USDT_ARBITRUM_RINKEBY],\n    [ChainId.POLYGON]: [USDC_POLYGON, WMATIC_POLYGON],\n    [ChainId.POLYGON_MUMBAI]: [DAI_POLYGON_MUMBAI, WMATIC_POLYGON_MUMBAI],\n};\nexport async function getV3CandidatePools({ tokenIn, tokenOut, routeType, routingConfig, subgraphProvider, tokenProvider, poolProvider, blockedTokenListProvider, chainId, }) {\n    var _a, _b, _c, _d, _e;\n    const { blockNumber, v3PoolSelection: { topN, topNDirectSwaps, topNTokenInOut, topNSecondHop, topNWithEachBaseToken, topNWithBaseToken, }, } = routingConfig;\n    const tokenInAddress = tokenIn.address.toLowerCase();\n    const tokenOutAddress = tokenOut.address.toLowerCase();\n    const beforeSubgraphPools = Date.now();\n    const allPoolsRaw = await subgraphProvider.getPools(tokenIn, tokenOut, {\n        blockNumber,\n    });\n    log.info({ samplePools: allPoolsRaw.slice(0, 3) }, 'Got all pools from V3 subgraph provider');\n    const allPools = _.map(allPoolsRaw, (pool) => {\n        return {\n            ...pool,\n            token0: {\n                ...pool.token0,\n                id: pool.token0.id.toLowerCase(),\n            },\n            token1: {\n                ...pool.token1,\n                id: pool.token1.id.toLowerCase(),\n            },\n        };\n    });\n    metric.putMetric('V3SubgraphPoolsLoad', Date.now() - beforeSubgraphPools, MetricLoggerUnit.Milliseconds);\n    // Only consider pools where neither tokens are in the blocked token list.\n    let filteredPools = allPools;\n    if (blockedTokenListProvider) {\n        filteredPools = [];\n        for (const pool of allPools) {\n            const token0InBlocklist = await blockedTokenListProvider.getTokenByAddress(pool.token0.id);\n            const token1InBlocklist = await blockedTokenListProvider.getTokenByAddress(pool.token1.id);\n            if (token0InBlocklist || token1InBlocklist) {\n                continue;\n            }\n            filteredPools.push(pool);\n        }\n    }\n    const subgraphPoolsSorted = _(filteredPools)\n        .sortBy((tokenListPool) => -tokenListPool.tvlUSD)\n        .value();\n    log.info(`After filtering blocked tokens went from ${allPools.length} to ${subgraphPoolsSorted.length}.`);\n    const poolAddressesSoFar = new Set();\n    const addToAddressSet = (pools) => {\n        _(pools)\n            .map((pool) => pool.id)\n            .forEach((poolAddress) => poolAddressesSoFar.add(poolAddress));\n    };\n    const baseTokens = (_a = baseTokensByChain[chainId]) !== null && _a !== void 0 ? _a : [];\n    const topByBaseWithTokenIn = _(baseTokens)\n        .flatMap((token) => {\n        return _(subgraphPoolsSorted)\n            .filter((subgraphPool) => {\n            const tokenAddress = token.address.toLowerCase();\n            return ((subgraphPool.token0.id == tokenAddress &&\n                subgraphPool.token1.id == tokenInAddress) ||\n                (subgraphPool.token1.id == tokenAddress &&\n                    subgraphPool.token0.id == tokenInAddress));\n        })\n            .sortBy((tokenListPool) => -tokenListPool.tvlUSD)\n            .slice(0, topNWithEachBaseToken)\n            .value();\n    })\n        .sortBy((tokenListPool) => -tokenListPool.tvlUSD)\n        .slice(0, topNWithBaseToken)\n        .value();\n    const topByBaseWithTokenOut = _(baseTokens)\n        .flatMap((token) => {\n        return _(subgraphPoolsSorted)\n            .filter((subgraphPool) => {\n            const tokenAddress = token.address.toLowerCase();\n            return ((subgraphPool.token0.id == tokenAddress &&\n                subgraphPool.token1.id == tokenOutAddress) ||\n                (subgraphPool.token1.id == tokenAddress &&\n                    subgraphPool.token0.id == tokenOutAddress));\n        })\n            .sortBy((tokenListPool) => -tokenListPool.tvlUSD)\n            .slice(0, topNWithEachBaseToken)\n            .value();\n    })\n        .sortBy((tokenListPool) => -tokenListPool.tvlUSD)\n        .slice(0, topNWithBaseToken)\n        .value();\n    let top2DirectSwapPool = _(subgraphPoolsSorted)\n        .filter((subgraphPool) => {\n        return (!poolAddressesSoFar.has(subgraphPool.id) &&\n            ((subgraphPool.token0.id == tokenInAddress &&\n                subgraphPool.token1.id == tokenOutAddress) ||\n                (subgraphPool.token1.id == tokenInAddress &&\n                    subgraphPool.token0.id == tokenOutAddress)));\n    })\n        .slice(0, topNDirectSwaps)\n        .value();\n    if (top2DirectSwapPool.length == 0 && topNDirectSwaps > 0) {\n        // If we requested direct swap pools but did not find any in the subgraph query.\n        // Optimistically add them into the query regardless. Invalid pools ones will be dropped anyway\n        // when we query the pool on-chain. Ensures that new pools for new pairs can be swapped on immediately.\n        top2DirectSwapPool = _.map([FeeAmount.HIGH, FeeAmount.MEDIUM, FeeAmount.LOW, FeeAmount.LOWEST], (feeAmount) => {\n            const { token0, token1, poolAddress } = poolProvider.getPoolAddress(tokenIn, tokenOut, feeAmount);\n            return {\n                id: poolAddress,\n                feeTier: unparseFeeAmount(feeAmount),\n                liquidity: '10000',\n                token0: {\n                    id: token0.address,\n                },\n                token1: {\n                    id: token1.address,\n                },\n                tvlETH: 10000,\n                tvlUSD: 10000,\n            };\n        });\n    }\n    addToAddressSet(top2DirectSwapPool);\n    const wrappedNativeAddress = (_b = WRAPPED_NATIVE_CURRENCY[chainId]) === null || _b === void 0 ? void 0 : _b.address;\n    // Main reason we need this is for gas estimates, only needed if token out is not native.\n    // We don't check the seen address set because if we've already added pools for getting native quotes\n    // theres no need to add more.\n    let top2EthQuoteTokenPool = [];\n    if ((((_c = WRAPPED_NATIVE_CURRENCY[chainId]) === null || _c === void 0 ? void 0 : _c.symbol) ==\n        ((_d = WRAPPED_NATIVE_CURRENCY[ChainId.MAINNET]) === null || _d === void 0 ? void 0 : _d.symbol) &&\n        tokenOut.symbol != 'WETH' &&\n        tokenOut.symbol != 'WETH9' &&\n        tokenOut.symbol != 'ETH') ||\n        (((_e = WRAPPED_NATIVE_CURRENCY[chainId]) === null || _e === void 0 ? void 0 : _e.symbol) == WMATIC_POLYGON.symbol &&\n            tokenOut.symbol != 'MATIC' &&\n            tokenOut.symbol != 'WMATIC')) {\n        top2EthQuoteTokenPool = _(subgraphPoolsSorted)\n            .filter((subgraphPool) => {\n            if (routeType == TradeType.EXACT_INPUT) {\n                return ((subgraphPool.token0.id == wrappedNativeAddress &&\n                    subgraphPool.token1.id == tokenOutAddress) ||\n                    (subgraphPool.token1.id == wrappedNativeAddress &&\n                        subgraphPool.token0.id == tokenOutAddress));\n            }\n            else {\n                return ((subgraphPool.token0.id == wrappedNativeAddress &&\n                    subgraphPool.token1.id == tokenInAddress) ||\n                    (subgraphPool.token1.id == wrappedNativeAddress &&\n                        subgraphPool.token0.id == tokenInAddress));\n            }\n        })\n            .slice(0, 1)\n            .value();\n    }\n    addToAddressSet(top2EthQuoteTokenPool);\n    const topByTVL = _(subgraphPoolsSorted)\n        .filter((subgraphPool) => {\n        return !poolAddressesSoFar.has(subgraphPool.id);\n    })\n        .slice(0, topN)\n        .value();\n    addToAddressSet(topByTVL);\n    const topByTVLUsingTokenIn = _(subgraphPoolsSorted)\n        .filter((subgraphPool) => {\n        return (!poolAddressesSoFar.has(subgraphPool.id) &&\n            (subgraphPool.token0.id == tokenInAddress ||\n                subgraphPool.token1.id == tokenInAddress));\n    })\n        .slice(0, topNTokenInOut)\n        .value();\n    addToAddressSet(topByTVLUsingTokenIn);\n    const topByTVLUsingTokenOut = _(subgraphPoolsSorted)\n        .filter((subgraphPool) => {\n        return (!poolAddressesSoFar.has(subgraphPool.id) &&\n            (subgraphPool.token0.id == tokenOutAddress ||\n                subgraphPool.token1.id == tokenOutAddress));\n    })\n        .slice(0, topNTokenInOut)\n        .value();\n    addToAddressSet(topByTVLUsingTokenOut);\n    const topByTVLUsingTokenInSecondHops = _(topByTVLUsingTokenIn)\n        .map((subgraphPool) => {\n        return tokenInAddress == subgraphPool.token0.id\n            ? subgraphPool.token1.id\n            : subgraphPool.token0.id;\n    })\n        .flatMap((secondHopId) => {\n        return _(subgraphPoolsSorted)\n            .filter((subgraphPool) => {\n            return (!poolAddressesSoFar.has(subgraphPool.id) &&\n                (subgraphPool.token0.id == secondHopId ||\n                    subgraphPool.token1.id == secondHopId));\n        })\n            .slice(0, topNSecondHop)\n            .value();\n    })\n        .uniqBy((pool) => pool.id)\n        .sortBy((tokenListPool) => -tokenListPool.tvlUSD)\n        .slice(0, topNSecondHop)\n        .value();\n    addToAddressSet(topByTVLUsingTokenInSecondHops);\n    const topByTVLUsingTokenOutSecondHops = _(topByTVLUsingTokenOut)\n        .map((subgraphPool) => {\n        return tokenOutAddress == subgraphPool.token0.id\n            ? subgraphPool.token1.id\n            : subgraphPool.token0.id;\n    })\n        .flatMap((secondHopId) => {\n        return _(subgraphPoolsSorted)\n            .filter((subgraphPool) => {\n            return (!poolAddressesSoFar.has(subgraphPool.id) &&\n                (subgraphPool.token0.id == secondHopId ||\n                    subgraphPool.token1.id == secondHopId));\n        })\n            .slice(0, topNSecondHop)\n            .value();\n    })\n        .uniqBy((pool) => pool.id)\n        .sortBy((tokenListPool) => -tokenListPool.tvlUSD)\n        .slice(0, topNSecondHop)\n        .value();\n    addToAddressSet(topByTVLUsingTokenOutSecondHops);\n    const subgraphPools = _([\n        ...topByBaseWithTokenIn,\n        ...topByBaseWithTokenOut,\n        ...top2DirectSwapPool,\n        ...top2EthQuoteTokenPool,\n        ...topByTVL,\n        ...topByTVLUsingTokenIn,\n        ...topByTVLUsingTokenOut,\n        ...topByTVLUsingTokenInSecondHops,\n        ...topByTVLUsingTokenOutSecondHops,\n    ])\n        .compact()\n        .uniqBy((pool) => pool.id)\n        .value();\n    const tokenAddresses = _(subgraphPools)\n        .flatMap((subgraphPool) => [subgraphPool.token0.id, subgraphPool.token1.id])\n        .compact()\n        .uniq()\n        .value();\n    log.info(`Getting the ${tokenAddresses.length} tokens within the ${subgraphPools.length} V3 pools we are considering`);\n    const tokenAccessor = await tokenProvider.getTokens(tokenAddresses, {\n        blockNumber,\n    });\n    const printV3SubgraphPool = (s) => {\n        var _a, _b, _c, _d;\n        return `${(_b = (_a = tokenAccessor.getTokenByAddress(s.token0.id)) === null || _a === void 0 ? void 0 : _a.symbol) !== null && _b !== void 0 ? _b : s.token0.id}/${(_d = (_c = tokenAccessor.getTokenByAddress(s.token1.id)) === null || _c === void 0 ? void 0 : _c.symbol) !== null && _d !== void 0 ? _d : s.token1.id}/${s.feeTier}`;\n    };\n    log.info({\n        topByBaseWithTokenIn: topByBaseWithTokenIn.map(printV3SubgraphPool),\n        topByBaseWithTokenOut: topByBaseWithTokenOut.map(printV3SubgraphPool),\n        topByTVL: topByTVL.map(printV3SubgraphPool),\n        topByTVLUsingTokenIn: topByTVLUsingTokenIn.map(printV3SubgraphPool),\n        topByTVLUsingTokenOut: topByTVLUsingTokenOut.map(printV3SubgraphPool),\n        topByTVLUsingTokenInSecondHops: topByTVLUsingTokenInSecondHops.map(printV3SubgraphPool),\n        topByTVLUsingTokenOutSecondHops: topByTVLUsingTokenOutSecondHops.map(printV3SubgraphPool),\n        top2DirectSwap: top2DirectSwapPool.map(printV3SubgraphPool),\n        top2EthQuotePool: top2EthQuoteTokenPool.map(printV3SubgraphPool),\n    }, `V3 Candidate Pools`);\n    const tokenPairsRaw = _.map(subgraphPools, (subgraphPool) => {\n        const tokenA = tokenAccessor.getTokenByAddress(subgraphPool.token0.id);\n        const tokenB = tokenAccessor.getTokenByAddress(subgraphPool.token1.id);\n        let fee;\n        try {\n            fee = parseFeeAmount(subgraphPool.feeTier);\n        }\n        catch (err) {\n            log.info({ subgraphPool }, `Dropping candidate pool for ${subgraphPool.token0.id}/${subgraphPool.token1.id}/${subgraphPool.feeTier} because fee tier not supported`);\n            return undefined;\n        }\n        if (!tokenA || !tokenB) {\n            log.info(`Dropping candidate pool for ${subgraphPool.token0.id}/${subgraphPool.token1.id}/${fee} because ${tokenA ? subgraphPool.token1.id : subgraphPool.token0.id} not found by token provider`);\n            return undefined;\n        }\n        return [tokenA, tokenB, fee];\n    });\n    const tokenPairs = _.compact(tokenPairsRaw);\n    const beforePoolsLoad = Date.now();\n    const poolAccessor = await poolProvider.getPools(tokenPairs);\n    metric.putMetric('V3PoolsLoad', Date.now() - beforePoolsLoad, MetricLoggerUnit.Milliseconds);\n    const poolsBySelection = {\n        protocol: Protocol.V3,\n        selections: {\n            topByBaseWithTokenIn,\n            topByBaseWithTokenOut,\n            topByDirectSwapPool: top2DirectSwapPool,\n            topByEthQuoteTokenPool: top2EthQuoteTokenPool,\n            topByTVL,\n            topByTVLUsingTokenIn,\n            topByTVLUsingTokenOut,\n            topByTVLUsingTokenInSecondHops,\n            topByTVLUsingTokenOutSecondHops,\n        },\n    };\n    return { poolAccessor, candidatePools: poolsBySelection };\n}\nexport async function getV2CandidatePools({ tokenIn, tokenOut, routeType, routingConfig, subgraphProvider, tokenProvider, poolProvider, blockedTokenListProvider, chainId, }) {\n    var _a;\n    const { blockNumber, v2PoolSelection: { topN, topNDirectSwaps, topNTokenInOut, topNSecondHop, topNWithEachBaseToken, topNWithBaseToken, }, } = routingConfig;\n    const tokenInAddress = tokenIn.address.toLowerCase();\n    const tokenOutAddress = tokenOut.address.toLowerCase();\n    const beforeSubgraphPools = Date.now();\n    const allPoolsRaw = await subgraphProvider.getPools(tokenIn, tokenOut, {\n        blockNumber,\n    });\n    const allPools = _.map(allPoolsRaw, (pool) => {\n        return {\n            ...pool,\n            token0: {\n                ...pool.token0,\n                id: pool.token0.id.toLowerCase(),\n            },\n            token1: {\n                ...pool.token1,\n                id: pool.token1.id.toLowerCase(),\n            },\n        };\n    });\n    metric.putMetric('V2SubgraphPoolsLoad', Date.now() - beforeSubgraphPools, MetricLoggerUnit.Milliseconds);\n    // Only consider pools where neither tokens are in the blocked token list.\n    let filteredPools = allPools;\n    if (blockedTokenListProvider) {\n        filteredPools = [];\n        for (const pool of allPools) {\n            const token0InBlocklist = await blockedTokenListProvider.getTokenByAddress(pool.token0.id);\n            const token1InBlocklist = await blockedTokenListProvider.getTokenByAddress(pool.token1.id);\n            if (token0InBlocklist || token1InBlocklist) {\n                continue;\n            }\n            filteredPools.push(pool);\n        }\n    }\n    const subgraphPoolsSorted = _(filteredPools)\n        .sortBy((tokenListPool) => -tokenListPool.reserve)\n        .value();\n    log.info(`After filtering blocked tokens went from ${allPools.length} to ${subgraphPoolsSorted.length}.`);\n    const poolAddressesSoFar = new Set();\n    const addToAddressSet = (pools) => {\n        _(pools)\n            .map((pool) => pool.id)\n            .forEach((poolAddress) => poolAddressesSoFar.add(poolAddress));\n    };\n    const baseTokens = (_a = baseTokensByChain[chainId]) !== null && _a !== void 0 ? _a : [];\n    const topByBaseWithTokenIn = _(baseTokens)\n        .flatMap((token) => {\n        return _(subgraphPoolsSorted)\n            .filter((subgraphPool) => {\n            const tokenAddress = token.address.toLowerCase();\n            return ((subgraphPool.token0.id == tokenAddress &&\n                subgraphPool.token1.id == tokenInAddress) ||\n                (subgraphPool.token1.id == tokenAddress &&\n                    subgraphPool.token0.id == tokenInAddress));\n        })\n            .sortBy((tokenListPool) => -tokenListPool.reserve)\n            .slice(0, topNWithEachBaseToken)\n            .value();\n    })\n        .sortBy((tokenListPool) => -tokenListPool.reserve)\n        .slice(0, topNWithBaseToken)\n        .value();\n    const topByBaseWithTokenOut = _(baseTokens)\n        .flatMap((token) => {\n        return _(subgraphPoolsSorted)\n            .filter((subgraphPool) => {\n            const tokenAddress = token.address.toLowerCase();\n            return ((subgraphPool.token0.id == tokenAddress &&\n                subgraphPool.token1.id == tokenOutAddress) ||\n                (subgraphPool.token1.id == tokenAddress &&\n                    subgraphPool.token0.id == tokenOutAddress));\n        })\n            .sortBy((tokenListPool) => -tokenListPool.reserve)\n            .slice(0, topNWithEachBaseToken)\n            .value();\n    })\n        .sortBy((tokenListPool) => -tokenListPool.reserve)\n        .slice(0, topNWithBaseToken)\n        .value();\n    // Always add the direct swap pool into the mix regardless of if it exists in the subgraph pool list.\n    // Ensures that new pools can be swapped on immediately, and that if a pool was filtered out of the\n    // subgraph query for some reason (e.g. trackedReserveETH was 0), then we still consider it.\n    let topByDirectSwapPool = [];\n    if (topNDirectSwaps != 0) {\n        const { token0, token1, poolAddress } = poolProvider.getPoolAddress(tokenIn, tokenOut);\n        topByDirectSwapPool = [\n            {\n                id: poolAddress,\n                token0: {\n                    id: token0.address,\n                },\n                token1: {\n                    id: token1.address,\n                },\n                supply: 10000,\n                reserve: 10000, // Not used. Set to arbitrary number.\n            },\n        ];\n    }\n    addToAddressSet(topByDirectSwapPool);\n    const wethAddress = WRAPPED_NATIVE_CURRENCY[chainId].address;\n    // Main reason we need this is for gas estimates, only needed if token out is not ETH.\n    // We don't check the seen address set because if we've already added pools for getting ETH quotes\n    // theres no need to add more.\n    // Note: we do not need to check other native currencies for the V2 Protocol\n    let topByEthQuoteTokenPool = [];\n    if (tokenOut.symbol != 'WETH' &&\n        tokenOut.symbol != 'WETH9' &&\n        tokenOut.symbol != 'ETH') {\n        topByEthQuoteTokenPool = _(subgraphPoolsSorted)\n            .filter((subgraphPool) => {\n            if (routeType == TradeType.EXACT_INPUT) {\n                return ((subgraphPool.token0.id == wethAddress &&\n                    subgraphPool.token1.id == tokenOutAddress) ||\n                    (subgraphPool.token1.id == wethAddress &&\n                        subgraphPool.token0.id == tokenOutAddress));\n            }\n            else {\n                return ((subgraphPool.token0.id == wethAddress &&\n                    subgraphPool.token1.id == tokenInAddress) ||\n                    (subgraphPool.token1.id == wethAddress &&\n                        subgraphPool.token0.id == tokenInAddress));\n            }\n        })\n            .slice(0, 1)\n            .value();\n    }\n    addToAddressSet(topByEthQuoteTokenPool);\n    const topByTVL = _(subgraphPoolsSorted)\n        .filter((subgraphPool) => {\n        return !poolAddressesSoFar.has(subgraphPool.id);\n    })\n        .slice(0, topN)\n        .value();\n    addToAddressSet(topByTVL);\n    const topByTVLUsingTokenIn = _(subgraphPoolsSorted)\n        .filter((subgraphPool) => {\n        return (!poolAddressesSoFar.has(subgraphPool.id) &&\n            (subgraphPool.token0.id == tokenInAddress ||\n                subgraphPool.token1.id == tokenInAddress));\n    })\n        .slice(0, topNTokenInOut)\n        .value();\n    addToAddressSet(topByTVLUsingTokenIn);\n    const topByTVLUsingTokenOut = _(subgraphPoolsSorted)\n        .filter((subgraphPool) => {\n        return (!poolAddressesSoFar.has(subgraphPool.id) &&\n            (subgraphPool.token0.id == tokenOutAddress ||\n                subgraphPool.token1.id == tokenOutAddress));\n    })\n        .slice(0, topNTokenInOut)\n        .value();\n    addToAddressSet(topByTVLUsingTokenOut);\n    const topByTVLUsingTokenInSecondHops = _(topByTVLUsingTokenIn)\n        .map((subgraphPool) => {\n        return tokenInAddress == subgraphPool.token0.id\n            ? subgraphPool.token1.id\n            : subgraphPool.token0.id;\n    })\n        .flatMap((secondHopId) => {\n        return _(subgraphPoolsSorted)\n            .filter((subgraphPool) => {\n            return (!poolAddressesSoFar.has(subgraphPool.id) &&\n                (subgraphPool.token0.id == secondHopId ||\n                    subgraphPool.token1.id == secondHopId));\n        })\n            .slice(0, topNSecondHop)\n            .value();\n    })\n        .uniqBy((pool) => pool.id)\n        .sortBy((tokenListPool) => -tokenListPool.reserve)\n        .slice(0, topNSecondHop)\n        .value();\n    addToAddressSet(topByTVLUsingTokenInSecondHops);\n    const topByTVLUsingTokenOutSecondHops = _(topByTVLUsingTokenOut)\n        .map((subgraphPool) => {\n        return tokenOutAddress == subgraphPool.token0.id\n            ? subgraphPool.token1.id\n            : subgraphPool.token0.id;\n    })\n        .flatMap((secondHopId) => {\n        return _(subgraphPoolsSorted)\n            .filter((subgraphPool) => {\n            return (!poolAddressesSoFar.has(subgraphPool.id) &&\n                (subgraphPool.token0.id == secondHopId ||\n                    subgraphPool.token1.id == secondHopId));\n        })\n            .slice(0, topNSecondHop)\n            .value();\n    })\n        .uniqBy((pool) => pool.id)\n        .sortBy((tokenListPool) => -tokenListPool.reserve)\n        .slice(0, topNSecondHop)\n        .value();\n    addToAddressSet(topByTVLUsingTokenOutSecondHops);\n    const subgraphPools = _([\n        ...topByBaseWithTokenIn,\n        ...topByBaseWithTokenOut,\n        ...topByDirectSwapPool,\n        ...topByEthQuoteTokenPool,\n        ...topByTVL,\n        ...topByTVLUsingTokenIn,\n        ...topByTVLUsingTokenOut,\n        ...topByTVLUsingTokenInSecondHops,\n        ...topByTVLUsingTokenOutSecondHops,\n    ])\n        .compact()\n        .uniqBy((pool) => pool.id)\n        .value();\n    const tokenAddresses = _(subgraphPools)\n        .flatMap((subgraphPool) => [subgraphPool.token0.id, subgraphPool.token1.id])\n        .compact()\n        .uniq()\n        .value();\n    log.info(`Getting the ${tokenAddresses.length} tokens within the ${subgraphPools.length} V2 pools we are considering`);\n    const tokenAccessor = await tokenProvider.getTokens(tokenAddresses, {\n        blockNumber,\n    });\n    const printV2SubgraphPool = (s) => {\n        var _a, _b, _c, _d;\n        return `${(_b = (_a = tokenAccessor.getTokenByAddress(s.token0.id)) === null || _a === void 0 ? void 0 : _a.symbol) !== null && _b !== void 0 ? _b : s.token0.id}/${(_d = (_c = tokenAccessor.getTokenByAddress(s.token1.id)) === null || _c === void 0 ? void 0 : _c.symbol) !== null && _d !== void 0 ? _d : s.token1.id}`;\n    };\n    log.info({\n        topByBaseWithTokenIn: topByBaseWithTokenIn.map(printV2SubgraphPool),\n        topByBaseWithTokenOut: topByBaseWithTokenOut.map(printV2SubgraphPool),\n        topByTVL: topByTVL.map(printV2SubgraphPool),\n        topByTVLUsingTokenIn: topByTVLUsingTokenIn.map(printV2SubgraphPool),\n        topByTVLUsingTokenOut: topByTVLUsingTokenOut.map(printV2SubgraphPool),\n        topByTVLUsingTokenInSecondHops: topByTVLUsingTokenInSecondHops.map(printV2SubgraphPool),\n        topByTVLUsingTokenOutSecondHops: topByTVLUsingTokenOutSecondHops.map(printV2SubgraphPool),\n        top2DirectSwap: topByDirectSwapPool.map(printV2SubgraphPool),\n        top2EthQuotePool: topByEthQuoteTokenPool.map(printV2SubgraphPool),\n    }, `V2 Candidate pools`);\n    const tokenPairsRaw = _.map(subgraphPools, (subgraphPool) => {\n        const tokenA = tokenAccessor.getTokenByAddress(subgraphPool.token0.id);\n        const tokenB = tokenAccessor.getTokenByAddress(subgraphPool.token1.id);\n        if (!tokenA || !tokenB) {\n            log.info(`Dropping candidate pool for ${subgraphPool.token0.id}/${subgraphPool.token1.id}`);\n            return undefined;\n        }\n        return [tokenA, tokenB];\n    });\n    const tokenPairs = _.compact(tokenPairsRaw);\n    const beforePoolsLoad = Date.now();\n    const poolAccessor = await poolProvider.getPools(tokenPairs, { blockNumber });\n    metric.putMetric('V2PoolsLoad', Date.now() - beforePoolsLoad, MetricLoggerUnit.Milliseconds);\n    const poolsBySelection = {\n        protocol: Protocol.V2,\n        selections: {\n            topByBaseWithTokenIn,\n            topByBaseWithTokenOut,\n            topByDirectSwapPool,\n            topByEthQuoteTokenPool: topByEthQuoteTokenPool,\n            topByTVL,\n            topByTVLUsingTokenIn,\n            topByTVLUsingTokenOut,\n            topByTVLUsingTokenInSecondHops,\n            topByTVLUsingTokenOutSecondHops,\n        },\n    };\n    return { poolAccessor, candidatePools: poolsBySelection };\n}\n//# sourceMappingURL=data:application/json;base64,"]},"metadata":{},"sourceType":"module"}