{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMemo } from 'react';\nimport { useUnsupportedTokens } from './Tokens';\n/**\n * Returns true if the input currency or output currency cannot be traded in the interface\n * @param currencyIn the input currency to check\n * @param currencyOut the output currency to check\n */\n\nexport function useIsSwapUnsupported(currencyIn, currencyOut) {\n  _s();\n\n  const unsupportedTokens = useUnsupportedTokens();\n  return useMemo(() => {\n    if (!unsupportedTokens) {\n      return false;\n    }\n\n    const currencyInUnsupported = Boolean((currencyIn === null || currencyIn === void 0 ? void 0 : currencyIn.isToken) && unsupportedTokens[currencyIn.address]);\n    const currencyOutUnsupported = Boolean((currencyOut === null || currencyOut === void 0 ? void 0 : currencyOut.isToken) && unsupportedTokens[currencyOut.address]);\n    return currencyInUnsupported || currencyOutUnsupported;\n  }, [currencyIn, currencyOut, unsupportedTokens]);\n}\n\n_s(useIsSwapUnsupported, \"c6jsqzEiMtNuP2/3kRit75pPYgk=\", false, function () {\n  return [useUnsupportedTokens];\n});","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/hooks/useIsSwapUnsupported.ts"],"names":["useMemo","useUnsupportedTokens","useIsSwapUnsupported","currencyIn","currencyOut","unsupportedTokens","currencyInUnsupported","Boolean","isToken","address","currencyOutUnsupported"],"mappings":";;AACA,SAASA,OAAT,QAAwB,OAAxB;AAEA,SAASC,oBAAT,QAAqC,UAArC;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,oBAAT,CAA8BC,UAA9B,EAA4DC,WAA5D,EAAoG;AAAA;;AACzG,QAAMC,iBAAiB,GAAGJ,oBAAoB,EAA9C;AACA,SAAOD,OAAO,CAAC,MAAM;AACnB,QAAI,CAACK,iBAAL,EAAwB;AACtB,aAAO,KAAP;AACD;;AACD,UAAMC,qBAAqB,GAAGC,OAAO,CAAC,CAAAJ,UAAU,SAAV,IAAAA,UAAU,WAAV,YAAAA,UAAU,CAAEK,OAAZ,KAAuBH,iBAAiB,CAACF,UAAU,CAACM,OAAZ,CAAzC,CAArC;AACA,UAAMC,sBAAsB,GAAGH,OAAO,CAAC,CAAAH,WAAW,SAAX,IAAAA,WAAW,WAAX,YAAAA,WAAW,CAAEI,OAAb,KAAwBH,iBAAiB,CAACD,WAAW,CAACK,OAAb,CAA1C,CAAtC;AACA,WAAOH,qBAAqB,IAAII,sBAAhC;AACD,GAPa,EAOX,CAACP,UAAD,EAAaC,WAAb,EAA0BC,iBAA1B,CAPW,CAAd;AAQD;;GAVeH,oB;UACYD,oB","sourcesContent":["import { Currency } from '@uniswap/sdk-core'\nimport { useMemo } from 'react'\n\nimport { useUnsupportedTokens } from './Tokens'\n\n/**\n * Returns true if the input currency or output currency cannot be traded in the interface\n * @param currencyIn the input currency to check\n * @param currencyOut the output currency to check\n */\nexport function useIsSwapUnsupported(currencyIn?: Currency | null, currencyOut?: Currency | null): boolean {\n  const unsupportedTokens = useUnsupportedTokens()\n  return useMemo(() => {\n    if (!unsupportedTokens) {\n      return false\n    }\n    const currencyInUnsupported = Boolean(currencyIn?.isToken && unsupportedTokens[currencyIn.address])\n    const currencyOutUnsupported = Boolean(currencyOut?.isToken && unsupportedTokens[currencyOut.address])\n    return currencyInUnsupported || currencyOutUnsupported\n  }, [currencyIn, currencyOut, unsupportedTokens])\n}\n"]},"metadata":{},"sourceType":"module"}