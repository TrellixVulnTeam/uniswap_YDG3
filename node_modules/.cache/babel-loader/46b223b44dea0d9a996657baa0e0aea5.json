{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { TradeType } from '@uniswap/sdk-core';\nimport { Trade } from '@uniswap/v2-sdk';\nimport { useMemo } from 'react';\nimport { isTradeBetter } from 'utils/isTradeBetter';\nimport { BETTER_TRADE_LESS_HOPS_THRESHOLD } from '../constants/misc';\nimport { useAllCurrencyCombinations } from './useAllCurrencyCombinations';\nimport { PairState, useV2Pairs } from './useV2Pairs';\n\nfunction useAllCommonPairs(currencyA, currencyB) {\n  _s();\n\n  const allCurrencyCombinations = useAllCurrencyCombinations(currencyA, currencyB);\n  const allPairs = useV2Pairs(allCurrencyCombinations);\n  return useMemo(() => Object.values(allPairs // filter out invalid pairs\n  .filter(result => Boolean(result[0] === PairState.EXISTS && result[1])).map(([, pair]) => pair)), [allPairs]);\n}\n\n_s(useAllCommonPairs, \"Uhk2SvGlNfxqQ8GQMQ9Drlfr/mQ=\", false, function () {\n  return [useAllCurrencyCombinations, useV2Pairs];\n});\n\nconst MAX_HOPS = 3;\n/**\n * Returns the best v2 trade for a desired swap\n * @param tradeType whether the swap is an exact in/out\n * @param amountSpecified the exact amount to swap in/out\n * @param otherCurrency the desired output/payment currency\n */\n\nexport function useBestV2Trade(tradeType, amountSpecified, otherCurrency, {\n  maxHops = MAX_HOPS\n} = {}) {\n  _s2();\n\n  const [currencyIn, currencyOut] = useMemo(() => tradeType === TradeType.EXACT_INPUT ? [amountSpecified === null || amountSpecified === void 0 ? void 0 : amountSpecified.currency, otherCurrency] : [otherCurrency, amountSpecified === null || amountSpecified === void 0 ? void 0 : amountSpecified.currency], [tradeType, amountSpecified, otherCurrency]);\n  const allowedPairs = useAllCommonPairs(currencyIn, currencyOut);\n  return useMemo(() => {\n    if (amountSpecified && currencyIn && currencyOut && allowedPairs.length > 0) {\n      if (maxHops === 1) {\n        const options = {\n          maxHops: 1,\n          maxNumResults: 1\n        };\n\n        if (tradeType === TradeType.EXACT_INPUT) {\n          var _Trade$bestTradeExact;\n\n          const amountIn = amountSpecified;\n          return (_Trade$bestTradeExact = Trade.bestTradeExactIn(allowedPairs, amountIn, currencyOut, options)[0]) !== null && _Trade$bestTradeExact !== void 0 ? _Trade$bestTradeExact : null;\n        } else {\n          var _Trade$bestTradeExact2;\n\n          const amountOut = amountSpecified;\n          return (_Trade$bestTradeExact2 = Trade.bestTradeExactOut(allowedPairs, currencyIn, amountOut, options)[0]) !== null && _Trade$bestTradeExact2 !== void 0 ? _Trade$bestTradeExact2 : null;\n        }\n      } // search through trades with varying hops, find best trade out of them\n\n\n      let bestTradeSoFar = null;\n\n      for (let i = 1; i <= maxHops; i++) {\n        const options = {\n          maxHops: i,\n          maxNumResults: 1\n        };\n        let currentTrade;\n\n        if (tradeType === TradeType.EXACT_INPUT) {\n          var _Trade$bestTradeExact3;\n\n          const amountIn = amountSpecified;\n          currentTrade = (_Trade$bestTradeExact3 = Trade.bestTradeExactIn(allowedPairs, amountIn, currencyOut, options)[0]) !== null && _Trade$bestTradeExact3 !== void 0 ? _Trade$bestTradeExact3 : null;\n        } else {\n          var _Trade$bestTradeExact4;\n\n          const amountOut = amountSpecified;\n          currentTrade = (_Trade$bestTradeExact4 = Trade.bestTradeExactOut(allowedPairs, currencyIn, amountOut, options)[0]) !== null && _Trade$bestTradeExact4 !== void 0 ? _Trade$bestTradeExact4 : null;\n        } // if current trade is best yet, save it\n\n\n        if (isTradeBetter(bestTradeSoFar, currentTrade, BETTER_TRADE_LESS_HOPS_THRESHOLD)) {\n          bestTradeSoFar = currentTrade;\n        }\n      }\n\n      return bestTradeSoFar;\n    }\n\n    return null;\n  }, [tradeType, amountSpecified, currencyIn, currencyOut, allowedPairs, maxHops]);\n}\n\n_s2(useBestV2Trade, \"fWpUmwkbuUVA9UXAa0xK4wOAu+Q=\", false, function () {\n  return [useAllCommonPairs];\n});","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/hooks/useBestV2Trade.ts"],"names":["TradeType","Trade","useMemo","isTradeBetter","BETTER_TRADE_LESS_HOPS_THRESHOLD","useAllCurrencyCombinations","PairState","useV2Pairs","useAllCommonPairs","currencyA","currencyB","allCurrencyCombinations","allPairs","Object","values","filter","result","Boolean","EXISTS","map","pair","MAX_HOPS","useBestV2Trade","tradeType","amountSpecified","otherCurrency","maxHops","currencyIn","currencyOut","EXACT_INPUT","currency","allowedPairs","length","options","maxNumResults","amountIn","bestTradeExactIn","amountOut","bestTradeExactOut","bestTradeSoFar","i","currentTrade"],"mappings":"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","sourcesContent":["import { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { Pair, Trade } from '@uniswap/v2-sdk'\nimport { useMemo } from 'react'\nimport { isTradeBetter } from 'utils/isTradeBetter'\n\nimport { BETTER_TRADE_LESS_HOPS_THRESHOLD } from '../constants/misc'\nimport { useAllCurrencyCombinations } from './useAllCurrencyCombinations'\nimport { PairState, useV2Pairs } from './useV2Pairs'\n\nfunction useAllCommonPairs(currencyA?: Currency, currencyB?: Currency): Pair[] {\n  const allCurrencyCombinations = useAllCurrencyCombinations(currencyA, currencyB)\n\n  const allPairs = useV2Pairs(allCurrencyCombinations)\n\n  return useMemo(\n    () =>\n      Object.values(\n        allPairs\n          // filter out invalid pairs\n          .filter((result): result is [PairState.EXISTS, Pair] => Boolean(result[0] === PairState.EXISTS && result[1]))\n          .map(([, pair]) => pair)\n      ),\n    [allPairs]\n  )\n}\n\nconst MAX_HOPS = 3\n\n/**\n * Returns the best v2 trade for a desired swap\n * @param tradeType whether the swap is an exact in/out\n * @param amountSpecified the exact amount to swap in/out\n * @param otherCurrency the desired output/payment currency\n */\nexport function useBestV2Trade(\n  tradeType: TradeType.EXACT_INPUT | TradeType.EXACT_OUTPUT,\n  amountSpecified?: CurrencyAmount<Currency>,\n  otherCurrency?: Currency,\n  { maxHops = MAX_HOPS } = {}\n): Trade<Currency, Currency, TradeType.EXACT_INPUT | TradeType.EXACT_OUTPUT> | null {\n  const [currencyIn, currencyOut] = useMemo(\n    () =>\n      tradeType === TradeType.EXACT_INPUT\n        ? [amountSpecified?.currency, otherCurrency]\n        : [otherCurrency, amountSpecified?.currency],\n    [tradeType, amountSpecified, otherCurrency]\n  )\n  const allowedPairs = useAllCommonPairs(currencyIn, currencyOut)\n\n  return useMemo(() => {\n    if (amountSpecified && currencyIn && currencyOut && allowedPairs.length > 0) {\n      if (maxHops === 1) {\n        const options = { maxHops: 1, maxNumResults: 1 }\n        if (tradeType === TradeType.EXACT_INPUT) {\n          const amountIn = amountSpecified\n          return Trade.bestTradeExactIn(allowedPairs, amountIn, currencyOut, options)[0] ?? null\n        } else {\n          const amountOut = amountSpecified\n          return Trade.bestTradeExactOut(allowedPairs, currencyIn, amountOut, options)[0] ?? null\n        }\n      }\n\n      // search through trades with varying hops, find best trade out of them\n      let bestTradeSoFar: Trade<Currency, Currency, TradeType.EXACT_INPUT | TradeType.EXACT_OUTPUT> | null = null\n      for (let i = 1; i <= maxHops; i++) {\n        const options = { maxHops: i, maxNumResults: 1 }\n        let currentTrade: Trade<Currency, Currency, TradeType.EXACT_INPUT | TradeType.EXACT_OUTPUT> | null\n\n        if (tradeType === TradeType.EXACT_INPUT) {\n          const amountIn = amountSpecified\n          currentTrade = Trade.bestTradeExactIn(allowedPairs, amountIn, currencyOut, options)[0] ?? null\n        } else {\n          const amountOut = amountSpecified\n          currentTrade = Trade.bestTradeExactOut(allowedPairs, currencyIn, amountOut, options)[0] ?? null\n        }\n\n        // if current trade is best yet, save it\n        if (isTradeBetter(bestTradeSoFar, currentTrade, BETTER_TRADE_LESS_HOPS_THRESHOLD)) {\n          bestTradeSoFar = currentTrade\n        }\n      }\n      return bestTradeSoFar\n    }\n\n    return null\n  }, [tradeType, amountSpecified, currencyIn, currencyOut, allowedPairs, maxHops])\n}\n"]},"metadata":{},"sourceType":"module"}