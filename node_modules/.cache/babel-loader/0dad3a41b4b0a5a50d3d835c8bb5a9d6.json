{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { CurrencyAmount, Percent } from '@uniswap/sdk-core';\nimport { SUPPORTED_GAS_ESTIMATE_CHAIN_IDS } from 'components/swap/GasEstimateBadge';\nimport { L2_CHAIN_IDS } from 'constants/chains';\nimport JSBI from 'jsbi';\nimport { useMemo } from 'react';\nimport { useUserSlippageToleranceWithDefault } from '../state/user/hooks';\nimport { useNativeCurrency } from './Tokens';\nimport useGasPrice from './useGasPrice';\nimport useUSDCPrice, { useUSDCValue } from './useUSDCPrice';\nimport { useActiveWeb3React } from './web3';\nconst V3_SWAP_DEFAULT_SLIPPAGE = new Percent(50, 10000); // .50%\n\nconst ONE_TENTHS_PERCENT = new Percent(10, 10000); // .10%\n\n/**\n * Return a guess of the gas cost used in computing slippage tolerance for a given trade\n * @param trade the trade for which to _guess_ the amount of gas it would cost to execute\n */\n\nfunction guesstimateGas(trade) {\n  if (!!trade) {\n    return 100000 + trade.swaps.reduce((memo, swap) => swap.route.pools.length + memo, 0) * 30000;\n  }\n\n  return undefined;\n}\n\nconst MIN_AUTO_SLIPPAGE_TOLERANCE = new Percent(5, 1000); // 0.5%\n\nconst MAX_AUTO_SLIPPAGE_TOLERANCE = new Percent(25, 100); // 25%\n\nexport default function useSwapSlippageTolerance(trade) {\n  _s();\n\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const onL2 = chainId && L2_CHAIN_IDS.includes(chainId);\n  const outputDollarValue = useUSDCValue(trade === null || trade === void 0 ? void 0 : trade.outputAmount);\n  const nativeGasPrice = useGasPrice();\n  const gasEstimate = guesstimateGas(trade);\n  const nativeCurrency = useNativeCurrency();\n  const nativeCurrencyPrice = useUSDCPrice(nativeCurrency !== null && nativeCurrency !== void 0 ? nativeCurrency : undefined);\n  const defaultSlippageTolerance = useMemo(() => {\n    if (!trade || onL2) return ONE_TENTHS_PERCENT;\n    const nativeGasCost = nativeGasPrice && typeof gasEstimate === 'number' ? JSBI.multiply(nativeGasPrice, JSBI.BigInt(gasEstimate)) : undefined;\n    const dollarGasCost = nativeCurrency && nativeGasCost && nativeCurrencyPrice ? nativeCurrencyPrice.quote(CurrencyAmount.fromRawAmount(nativeCurrency, nativeGasCost)) : undefined; // if valid estimate from api and using api trade, use gas estimate from api\n    // NOTE - dont use gas estimate for L2s yet - need to verify accuracy\n    // if not, use local heuristic\n\n    const dollarCostToUse = chainId && SUPPORTED_GAS_ESTIMATE_CHAIN_IDS.includes(chainId) && (trade === null || trade === void 0 ? void 0 : trade.gasUseEstimateUSD) ? trade.gasUseEstimateUSD : dollarGasCost;\n\n    if (outputDollarValue && dollarCostToUse) {\n      // the rationale is that a user will not want their trade to fail for a loss due to slippage that is less than\n      // the cost of the gas of the failed transaction\n      const fraction = dollarCostToUse.asFraction.divide(outputDollarValue.asFraction);\n      const result = new Percent(fraction.numerator, fraction.denominator);\n      if (result.greaterThan(MAX_AUTO_SLIPPAGE_TOLERANCE)) return MAX_AUTO_SLIPPAGE_TOLERANCE;\n      if (result.lessThan(MIN_AUTO_SLIPPAGE_TOLERANCE)) return MIN_AUTO_SLIPPAGE_TOLERANCE;\n      return result;\n    }\n\n    return V3_SWAP_DEFAULT_SLIPPAGE;\n  }, [trade, onL2, nativeGasPrice, gasEstimate, nativeCurrency, nativeCurrencyPrice, chainId, outputDollarValue]);\n  return useUserSlippageToleranceWithDefault(defaultSlippageTolerance);\n}\n\n_s(useSwapSlippageTolerance, \"zGGnmVha/HFCspN0fEhQNWarmBE=\", false, function () {\n  return [useActiveWeb3React, useUSDCValue, useGasPrice, useNativeCurrency, useUSDCPrice, useUserSlippageToleranceWithDefault];\n});","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/hooks/useSwapSlippageTolerance.ts"],"names":["CurrencyAmount","Percent","SUPPORTED_GAS_ESTIMATE_CHAIN_IDS","L2_CHAIN_IDS","JSBI","useMemo","useUserSlippageToleranceWithDefault","useNativeCurrency","useGasPrice","useUSDCPrice","useUSDCValue","useActiveWeb3React","V3_SWAP_DEFAULT_SLIPPAGE","ONE_TENTHS_PERCENT","guesstimateGas","trade","swaps","reduce","memo","swap","route","pools","length","undefined","MIN_AUTO_SLIPPAGE_TOLERANCE","MAX_AUTO_SLIPPAGE_TOLERANCE","useSwapSlippageTolerance","chainId","onL2","includes","outputDollarValue","outputAmount","nativeGasPrice","gasEstimate","nativeCurrency","nativeCurrencyPrice","defaultSlippageTolerance","nativeGasCost","multiply","BigInt","dollarGasCost","quote","fromRawAmount","dollarCostToUse","gasUseEstimateUSD","fraction","asFraction","divide","result","numerator","denominator","greaterThan","lessThan"],"mappings":"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","sourcesContent":["import { Trade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Percent, TradeType } from '@uniswap/sdk-core'\nimport { SUPPORTED_GAS_ESTIMATE_CHAIN_IDS } from 'components/swap/GasEstimateBadge'\nimport { L2_CHAIN_IDS } from 'constants/chains'\nimport JSBI from 'jsbi'\nimport { useMemo } from 'react'\nimport { InterfaceTrade } from 'state/routing/types'\n\nimport { useUserSlippageToleranceWithDefault } from '../state/user/hooks'\nimport { useNativeCurrency } from './Tokens'\nimport useGasPrice from './useGasPrice'\nimport useUSDCPrice, { useUSDCValue } from './useUSDCPrice'\nimport { useActiveWeb3React } from './web3'\n\nconst V3_SWAP_DEFAULT_SLIPPAGE = new Percent(50, 10_000) // .50%\nconst ONE_TENTHS_PERCENT = new Percent(10, 10_000) // .10%\n\n/**\n * Return a guess of the gas cost used in computing slippage tolerance for a given trade\n * @param trade the trade for which to _guess_ the amount of gas it would cost to execute\n */\nfunction guesstimateGas(trade: Trade<Currency, Currency, TradeType> | undefined): number | undefined {\n  if (!!trade) {\n    return 100_000 + trade.swaps.reduce((memo, swap) => swap.route.pools.length + memo, 0) * 30_000\n  }\n  return undefined\n}\n\nconst MIN_AUTO_SLIPPAGE_TOLERANCE = new Percent(5, 1000) // 0.5%\nconst MAX_AUTO_SLIPPAGE_TOLERANCE = new Percent(25, 100) // 25%\n\nexport default function useSwapSlippageTolerance(\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined\n): Percent {\n  const { chainId } = useActiveWeb3React()\n  const onL2 = chainId && L2_CHAIN_IDS.includes(chainId)\n  const outputDollarValue = useUSDCValue(trade?.outputAmount)\n  const nativeGasPrice = useGasPrice()\n\n  const gasEstimate = guesstimateGas(trade)\n  const nativeCurrency = useNativeCurrency()\n  const nativeCurrencyPrice = useUSDCPrice(nativeCurrency ?? undefined)\n\n  const defaultSlippageTolerance = useMemo(() => {\n    if (!trade || onL2) return ONE_TENTHS_PERCENT\n\n    const nativeGasCost =\n      nativeGasPrice && typeof gasEstimate === 'number'\n        ? JSBI.multiply(nativeGasPrice, JSBI.BigInt(gasEstimate))\n        : undefined\n    const dollarGasCost =\n      nativeCurrency && nativeGasCost && nativeCurrencyPrice\n        ? nativeCurrencyPrice.quote(CurrencyAmount.fromRawAmount(nativeCurrency, nativeGasCost))\n        : undefined\n\n    // if valid estimate from api and using api trade, use gas estimate from api\n    // NOTE - dont use gas estimate for L2s yet - need to verify accuracy\n    // if not, use local heuristic\n    const dollarCostToUse =\n      chainId && SUPPORTED_GAS_ESTIMATE_CHAIN_IDS.includes(chainId) && trade?.gasUseEstimateUSD\n        ? trade.gasUseEstimateUSD\n        : dollarGasCost\n\n    if (outputDollarValue && dollarCostToUse) {\n      // the rationale is that a user will not want their trade to fail for a loss due to slippage that is less than\n      // the cost of the gas of the failed transaction\n      const fraction = dollarCostToUse.asFraction.divide(outputDollarValue.asFraction)\n      const result = new Percent(fraction.numerator, fraction.denominator)\n      if (result.greaterThan(MAX_AUTO_SLIPPAGE_TOLERANCE)) return MAX_AUTO_SLIPPAGE_TOLERANCE\n      if (result.lessThan(MIN_AUTO_SLIPPAGE_TOLERANCE)) return MIN_AUTO_SLIPPAGE_TOLERANCE\n      return result\n    }\n\n    return V3_SWAP_DEFAULT_SLIPPAGE\n  }, [trade, onL2, nativeGasPrice, gasEstimate, nativeCurrency, nativeCurrencyPrice, chainId, outputDollarValue])\n\n  return useUserSlippageToleranceWithDefault(defaultSlippageTolerance)\n}\n"]},"metadata":{},"sourceType":"module"}