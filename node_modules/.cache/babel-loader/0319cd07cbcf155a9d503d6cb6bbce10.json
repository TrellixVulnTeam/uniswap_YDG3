{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import{CurrencyAmount,Fraction,Percent}from'@uniswap/sdk-core';import{Pair}from'@uniswap/v2-sdk';import{FeeAmount}from'@uniswap/v3-sdk';import JSBI from'jsbi';import{ALLOWED_PRICE_IMPACT_HIGH,ALLOWED_PRICE_IMPACT_LOW,ALLOWED_PRICE_IMPACT_MEDIUM,BLOCKED_PRICE_IMPACT_NON_EXPERT,ONE_HUNDRED_PERCENT,ZERO_PERCENT}from'../constants/misc';var THIRTY_BIPS_FEE=new Percent(JSBI.BigInt(30),JSBI.BigInt(10000));var INPUT_FRACTION_AFTER_FEE=ONE_HUNDRED_PERCENT.subtract(THIRTY_BIPS_FEE);// computes realized lp fee as a percent\nexport function computeRealizedLPFeePercent(trade){var percent;// Since routes are either all v2 or all v3 right now, calculate separately\nif(trade.swaps[0].route.pools instanceof Pair){// for each hop in our trade, take away the x*y=k price impact from 0.3% fees\n// e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1-.03))\npercent=ONE_HUNDRED_PERCENT.subtract(trade.swaps.reduce(function(currentFee){return currentFee.multiply(INPUT_FRACTION_AFTER_FEE);},ONE_HUNDRED_PERCENT));}else{percent=ZERO_PERCENT;var _iterator=_createForOfIteratorHelper(trade.swaps),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var swap=_step.value;var _swap$inputAmount$div=swap.inputAmount.divide(trade.inputAmount),numerator=_swap$inputAmount$div.numerator,denominator=_swap$inputAmount$div.denominator;var overallPercent=new Percent(numerator,denominator);var routeRealizedLPFeePercent=overallPercent.multiply(ONE_HUNDRED_PERCENT.subtract(swap.route.pools.reduce(function(currentFee,pool){var fee=pool instanceof Pair?// not currently possible given protocol check above, but not fatal\nFeeAmount.MEDIUM:pool.fee;return currentFee.multiply(ONE_HUNDRED_PERCENT.subtract(new Fraction(fee,1000000)));},ONE_HUNDRED_PERCENT)));percent=percent.add(routeRealizedLPFeePercent);}}catch(err){_iterator.e(err);}finally{_iterator.f();}}return new Percent(percent.numerator,percent.denominator);}// computes price breakdown for the trade\nexport function computeRealizedLPFeeAmount(trade){if(trade){var realizedLPFee=computeRealizedLPFeePercent(trade);// the amount of the input that accrues to LPs\nreturn CurrencyAmount.fromRawAmount(trade.inputAmount.currency,trade.inputAmount.multiply(realizedLPFee).quotient);}return undefined;}var IMPACT_TIERS=[BLOCKED_PRICE_IMPACT_NON_EXPERT,ALLOWED_PRICE_IMPACT_HIGH,ALLOWED_PRICE_IMPACT_MEDIUM,ALLOWED_PRICE_IMPACT_LOW];export function warningSeverity(priceImpact){if(!priceImpact)return 4;var impact=IMPACT_TIERS.length;var _iterator2=_createForOfIteratorHelper(IMPACT_TIERS),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var impactLevel=_step2.value;if(impactLevel.lessThan(priceImpact))return impact;impact--;}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}return 0;}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/utils/prices.ts"],"names":["CurrencyAmount","Fraction","Percent","Pair","FeeAmount","JSBI","ALLOWED_PRICE_IMPACT_HIGH","ALLOWED_PRICE_IMPACT_LOW","ALLOWED_PRICE_IMPACT_MEDIUM","BLOCKED_PRICE_IMPACT_NON_EXPERT","ONE_HUNDRED_PERCENT","ZERO_PERCENT","THIRTY_BIPS_FEE","BigInt","INPUT_FRACTION_AFTER_FEE","subtract","computeRealizedLPFeePercent","trade","percent","swaps","route","pools","reduce","currentFee","multiply","swap","inputAmount","divide","numerator","denominator","overallPercent","routeRealizedLPFeePercent","pool","fee","MEDIUM","add","computeRealizedLPFeeAmount","realizedLPFee","fromRawAmount","currency","quotient","undefined","IMPACT_TIERS","warningSeverity","priceImpact","impact","length","impactLevel","lessThan"],"mappings":"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","sourcesContent":["import { Trade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Fraction, Percent, TradeType } from '@uniswap/sdk-core'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { FeeAmount } from '@uniswap/v3-sdk'\nimport JSBI from 'jsbi'\n\nimport {\n  ALLOWED_PRICE_IMPACT_HIGH,\n  ALLOWED_PRICE_IMPACT_LOW,\n  ALLOWED_PRICE_IMPACT_MEDIUM,\n  BLOCKED_PRICE_IMPACT_NON_EXPERT,\n  ONE_HUNDRED_PERCENT,\n  ZERO_PERCENT,\n} from '../constants/misc'\n\nconst THIRTY_BIPS_FEE = new Percent(JSBI.BigInt(30), JSBI.BigInt(10000))\nconst INPUT_FRACTION_AFTER_FEE = ONE_HUNDRED_PERCENT.subtract(THIRTY_BIPS_FEE)\n\n// computes realized lp fee as a percent\nexport function computeRealizedLPFeePercent(trade: Trade<Currency, Currency, TradeType>): Percent {\n  let percent: Percent\n\n  // Since routes are either all v2 or all v3 right now, calculate separately\n  if (trade.swaps[0].route.pools instanceof Pair) {\n    // for each hop in our trade, take away the x*y=k price impact from 0.3% fees\n    // e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1-.03))\n    percent = ONE_HUNDRED_PERCENT.subtract(\n      trade.swaps.reduce<Percent>(\n        (currentFee: Percent): Percent => currentFee.multiply(INPUT_FRACTION_AFTER_FEE),\n        ONE_HUNDRED_PERCENT\n      )\n    )\n  } else {\n    percent = ZERO_PERCENT\n    for (const swap of trade.swaps) {\n      const { numerator, denominator } = swap.inputAmount.divide(trade.inputAmount)\n      const overallPercent = new Percent(numerator, denominator)\n\n      const routeRealizedLPFeePercent = overallPercent.multiply(\n        ONE_HUNDRED_PERCENT.subtract(\n          swap.route.pools.reduce<Percent>((currentFee: Percent, pool): Percent => {\n            const fee =\n              pool instanceof Pair\n                ? // not currently possible given protocol check above, but not fatal\n                  FeeAmount.MEDIUM\n                : pool.fee\n            return currentFee.multiply(ONE_HUNDRED_PERCENT.subtract(new Fraction(fee, 1_000_000)))\n          }, ONE_HUNDRED_PERCENT)\n        )\n      )\n\n      percent = percent.add(routeRealizedLPFeePercent)\n    }\n  }\n\n  return new Percent(percent.numerator, percent.denominator)\n}\n\n// computes price breakdown for the trade\nexport function computeRealizedLPFeeAmount(\n  trade?: Trade<Currency, Currency, TradeType> | null\n): CurrencyAmount<Currency> | undefined {\n  if (trade) {\n    const realizedLPFee = computeRealizedLPFeePercent(trade)\n\n    // the amount of the input that accrues to LPs\n    return CurrencyAmount.fromRawAmount(trade.inputAmount.currency, trade.inputAmount.multiply(realizedLPFee).quotient)\n  }\n\n  return undefined\n}\n\nconst IMPACT_TIERS = [\n  BLOCKED_PRICE_IMPACT_NON_EXPERT,\n  ALLOWED_PRICE_IMPACT_HIGH,\n  ALLOWED_PRICE_IMPACT_MEDIUM,\n  ALLOWED_PRICE_IMPACT_LOW,\n]\n\ntype WarningSeverity = 0 | 1 | 2 | 3 | 4\nexport function warningSeverity(priceImpact: Percent | undefined): WarningSeverity {\n  if (!priceImpact) return 4\n  let impact: WarningSeverity = IMPACT_TIERS.length as WarningSeverity\n  for (const impactLevel of IMPACT_TIERS) {\n    if (impactLevel.lessThan(priceImpact)) return impact\n    impact--\n  }\n  return 0\n}\n"]},"metadata":{},"sourceType":"module"}