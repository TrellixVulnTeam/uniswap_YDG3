{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useActiveWeb3React } from 'hooks/web3';\nimport { useCallback, useState } from 'react';\nimport { getTokenLogoURL } from './../components/CurrencyLogo/index';\nexport default function useAddTokenToMetamask(currencyToAdd) {\n  _s();\n\n  const {\n    library\n  } = useActiveWeb3React();\n  const token = currencyToAdd === null || currencyToAdd === void 0 ? void 0 : currencyToAdd.wrapped;\n  const [success, setSuccess] = useState();\n  const addToken = useCallback(() => {\n    if (library && library.provider.isMetaMask && library.provider.request && token) {\n      library.provider.request({\n        method: 'wallet_watchAsset',\n        params: {\n          //@ts-ignore // need this for incorrect ethers provider type\n          type: 'ERC20',\n          options: {\n            address: token.address,\n            symbol: token.symbol,\n            decimals: token.decimals,\n            image: getTokenLogoURL(token.address)\n          }\n        }\n      }).then(success => {\n        setSuccess(success);\n      }).catch(() => setSuccess(false));\n    } else {\n      setSuccess(false);\n    }\n  }, [library, token]);\n  return {\n    addToken,\n    success\n  };\n}\n\n_s(useAddTokenToMetamask, \"wwvDLsBaqWZk8ujyAA5qoGnY5XQ=\", false, function () {\n  return [useActiveWeb3React];\n});","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/hooks/useAddTokenToMetamask.ts"],"names":["useActiveWeb3React","useCallback","useState","getTokenLogoURL","useAddTokenToMetamask","currencyToAdd","library","token","wrapped","success","setSuccess","addToken","provider","isMetaMask","request","method","params","type","options","address","symbol","decimals","image","then","catch"],"mappings":";;AACA,SAASA,kBAAT,QAAmC,YAAnC;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAEA,SAASC,eAAT,QAAgC,oCAAhC;AAEA,eAAe,SAASC,qBAAT,CAA+BC,aAA/B,EAGb;AAAA;;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAcN,kBAAkB,EAAtC;AAEA,QAAMO,KAAwB,GAAGF,aAAH,aAAGA,aAAH,uBAAGA,aAAa,CAAEG,OAAhD;AAEA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,EAAtC;AAEA,QAAMS,QAAQ,GAAGV,WAAW,CAAC,MAAM;AACjC,QAAIK,OAAO,IAAIA,OAAO,CAACM,QAAR,CAAiBC,UAA5B,IAA0CP,OAAO,CAACM,QAAR,CAAiBE,OAA3D,IAAsEP,KAA1E,EAAiF;AAC/ED,MAAAA,OAAO,CAACM,QAAR,CACGE,OADH,CACW;AACPC,QAAAA,MAAM,EAAE,mBADD;AAEPC,QAAAA,MAAM,EAAE;AACN;AACAC,UAAAA,IAAI,EAAE,OAFA;AAGNC,UAAAA,OAAO,EAAE;AACPC,YAAAA,OAAO,EAAEZ,KAAK,CAACY,OADR;AAEPC,YAAAA,MAAM,EAAEb,KAAK,CAACa,MAFP;AAGPC,YAAAA,QAAQ,EAAEd,KAAK,CAACc,QAHT;AAIPC,YAAAA,KAAK,EAAEnB,eAAe,CAACI,KAAK,CAACY,OAAP;AAJf;AAHH;AAFD,OADX,EAcGI,IAdH,CAcSd,OAAD,IAAa;AACjBC,QAAAA,UAAU,CAACD,OAAD,CAAV;AACD,OAhBH,EAiBGe,KAjBH,CAiBS,MAAMd,UAAU,CAAC,KAAD,CAjBzB;AAkBD,KAnBD,MAmBO;AACLA,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,GAvB2B,EAuBzB,CAACJ,OAAD,EAAUC,KAAV,CAvByB,CAA5B;AAyBA,SAAO;AAAEI,IAAAA,QAAF;AAAYF,IAAAA;AAAZ,GAAP;AACD;;GApCuBL,qB;UAIFJ,kB","sourcesContent":["import { Currency, Token } from '@uniswap/sdk-core'\nimport { useActiveWeb3React } from 'hooks/web3'\nimport { useCallback, useState } from 'react'\n\nimport { getTokenLogoURL } from './../components/CurrencyLogo/index'\n\nexport default function useAddTokenToMetamask(currencyToAdd: Currency | undefined): {\n  addToken: () => void\n  success: boolean | undefined\n} {\n  const { library } = useActiveWeb3React()\n\n  const token: Token | undefined = currencyToAdd?.wrapped\n\n  const [success, setSuccess] = useState<boolean | undefined>()\n\n  const addToken = useCallback(() => {\n    if (library && library.provider.isMetaMask && library.provider.request && token) {\n      library.provider\n        .request({\n          method: 'wallet_watchAsset',\n          params: {\n            //@ts-ignore // need this for incorrect ethers provider type\n            type: 'ERC20',\n            options: {\n              address: token.address,\n              symbol: token.symbol,\n              decimals: token.decimals,\n              image: getTokenLogoURL(token.address),\n            },\n          },\n        })\n        .then((success) => {\n          setSuccess(success)\n        })\n        .catch(() => setSuccess(false))\n    } else {\n      setSuccess(false)\n    }\n  }, [library, token])\n\n  return { addToken, success }\n}\n"]},"metadata":{},"sourceType":"module"}