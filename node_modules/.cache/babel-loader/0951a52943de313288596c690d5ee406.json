{"ast":null,"code":"const EXPLORER_HOSTNAMES = {\n  'etherscan.io': true,\n  'ropsten.etherscan.io': true,\n  'rinkeby.etherscan.io': true,\n  'kovan.etherscan.io': true,\n  'goerli.etherscan.io': true,\n  'optimistic.etherscan.io': true,\n  'kovan-optimistic.etherscan.io': true,\n  'rinkeby-explorer.arbitrum.io': true,\n  'arbiscan.io': true\n};\n/**\n * Returns the anonymized version of the given href, i.e. one that does not leak user information\n * @param href the link to anonymize, i.e. remove any personal data from\n * @return string anonymized version of the given href\n */\n\nexport function anonymizeLink(href) {\n  try {\n    const url = new URL(href);\n\n    if (EXPLORER_HOSTNAMES[url.hostname]) {\n      const pathPieces = url.pathname.split('/');\n      const anonymizedPath = pathPieces.map(pc => /0x[a-fA-F0-9]+/.test(pc) ? '***' : pc).join('/');\n      return `${url.protocol}//${url.hostname}${anonymizedPath}`;\n    }\n\n    return href;\n  } catch (error) {\n    return href;\n  }\n}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/utils/anonymizeLink.ts"],"names":["EXPLORER_HOSTNAMES","anonymizeLink","href","url","URL","hostname","pathPieces","pathname","split","anonymizedPath","map","pc","test","join","protocol","error"],"mappings":"AAAA,MAAMA,kBAAgD,GAAG;AACvD,kBAAgB,IADuC;AAEvD,0BAAwB,IAF+B;AAGvD,0BAAwB,IAH+B;AAIvD,wBAAsB,IAJiC;AAKvD,yBAAuB,IALgC;AAMvD,6BAA2B,IAN4B;AAOvD,mCAAiC,IAPsB;AAQvD,kCAAgC,IARuB;AASvD,iBAAe;AATwC,CAAzD;AAYA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6C;AAClD,MAAI;AACF,UAAMC,GAAG,GAAG,IAAIC,GAAJ,CAAQF,IAAR,CAAZ;;AACA,QAAIF,kBAAkB,CAACG,GAAG,CAACE,QAAL,CAAtB,EAAsC;AACpC,YAAMC,UAAU,GAAGH,GAAG,CAACI,QAAJ,CAAaC,KAAb,CAAmB,GAAnB,CAAnB;AAEA,YAAMC,cAAc,GAAGH,UAAU,CAACI,GAAX,CAAgBC,EAAD,IAAS,iBAAiBC,IAAjB,CAAsBD,EAAtB,IAA4B,KAA5B,GAAoCA,EAA5D,EAAiEE,IAAjE,CAAsE,GAAtE,CAAvB;AAEA,aAAQ,GAAEV,GAAG,CAACW,QAAS,KAAIX,GAAG,CAACE,QAAS,GAAEI,cAAe,EAAzD;AACD;;AACD,WAAOP,IAAP;AACD,GAVD,CAUE,OAAOa,KAAP,EAAc;AACd,WAAOb,IAAP;AACD;AACF","sourcesContent":["const EXPLORER_HOSTNAMES: { [hostname: string]: true } = {\n  'etherscan.io': true,\n  'ropsten.etherscan.io': true,\n  'rinkeby.etherscan.io': true,\n  'kovan.etherscan.io': true,\n  'goerli.etherscan.io': true,\n  'optimistic.etherscan.io': true,\n  'kovan-optimistic.etherscan.io': true,\n  'rinkeby-explorer.arbitrum.io': true,\n  'arbiscan.io': true,\n}\n\n/**\n * Returns the anonymized version of the given href, i.e. one that does not leak user information\n * @param href the link to anonymize, i.e. remove any personal data from\n * @return string anonymized version of the given href\n */\nexport function anonymizeLink(href: string): string {\n  try {\n    const url = new URL(href)\n    if (EXPLORER_HOSTNAMES[url.hostname]) {\n      const pathPieces = url.pathname.split('/')\n\n      const anonymizedPath = pathPieces.map((pc) => (/0x[a-fA-F0-9]+/.test(pc) ? '***' : pc)).join('/')\n\n      return `${url.protocol}//${url.hostname}${anonymizedPath}`\n    }\n    return href\n  } catch (error) {\n    return href\n  }\n}\n"]},"metadata":{},"sourceType":"module"}