{"ast":null,"code":"/**\n * Mnemonist SparseMap\n * ====================\n *\n * JavaScript sparse map implemented on top of byte arrays.\n *\n * [Reference]: https://research.swtch.com/sparse\n */\nvar Iterator = require('obliterator/iterator'),\n    getPointerArray = require('./utils/typed-arrays.js').getPointerArray;\n/**\n * SparseMap.\n *\n * @constructor\n */\n\n\nfunction SparseMap(Values, length) {\n  if (arguments.length < 2) {\n    length = Values;\n    Values = Array;\n  }\n\n  var ByteArray = getPointerArray(length); // Properties\n\n  this.size = 0;\n  this.length = length;\n  this.dense = new ByteArray(length);\n  this.sparse = new ByteArray(length);\n  this.vals = new Values(length);\n}\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\n\n\nSparseMap.prototype.clear = function () {\n  this.size = 0;\n};\n/**\n * Method used to check the existence of a member in the set.\n *\n * @param  {number} member - Member to test.\n * @return {SparseMap}\n */\n\n\nSparseMap.prototype.has = function (member) {\n  var index = this.sparse[member];\n  return index < this.size && this.dense[index] === member;\n};\n/**\n * Method used to get the value associated to a member in the set.\n *\n * @param  {number} member - Member to test.\n * @return {any}\n */\n\n\nSparseMap.prototype.get = function (member) {\n  var index = this.sparse[member];\n  if (index < this.size && this.dense[index] === member) return this.vals[index];\n  return;\n};\n/**\n * Method used to set a value into the map.\n *\n * @param  {number} member - Member to set.\n * @param  {any}    value  - Associated value.\n * @return {SparseMap}\n */\n\n\nSparseMap.prototype.set = function (member, value) {\n  var index = this.sparse[member];\n\n  if (index < this.size && this.dense[index] === member) {\n    this.vals[index] = value;\n    return this;\n  }\n\n  this.dense[this.size] = member;\n  this.sparse[member] = this.size;\n  this.vals[this.size] = value;\n  this.size++;\n  return this;\n};\n/**\n * Method used to remove a member from the set.\n *\n * @param  {number} member - Member to delete.\n * @return {boolean}\n */\n\n\nSparseMap.prototype.delete = function (member) {\n  var index = this.sparse[member];\n  if (index >= this.size || this.dense[index] !== member) return false;\n  index = this.dense[this.size - 1];\n  this.dense[this.sparse[member]] = index;\n  this.sparse[index] = this.sparse[member];\n  this.size--;\n  return true;\n};\n/**\n * Method used to iterate over the set's values.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\n\n\nSparseMap.prototype.forEach = function (callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  for (var i = 0; i < this.size; i++) {\n    callback.call(scope, this.vals[i], this.dense[i]);\n  }\n};\n/**\n * Method used to create an iterator over a set's members.\n *\n * @return {Iterator}\n */\n\n\nSparseMap.prototype.keys = function () {\n  var size = this.size,\n      dense = this.dense,\n      i = 0;\n  return new Iterator(function () {\n    if (i < size) {\n      var item = dense[i];\n      i++;\n      return {\n        value: item\n      };\n    }\n\n    return {\n      done: true\n    };\n  });\n};\n/**\n * Method used to create an iterator over a set's values.\n *\n * @return {Iterator}\n */\n\n\nSparseMap.prototype.values = function () {\n  var size = this.size,\n      values = this.vals,\n      i = 0;\n  return new Iterator(function () {\n    if (i < size) {\n      var item = values[i];\n      i++;\n      return {\n        value: item\n      };\n    }\n\n    return {\n      done: true\n    };\n  });\n};\n/**\n * Method used to create an iterator over a set's entries.\n *\n * @return {Iterator}\n */\n\n\nSparseMap.prototype.entries = function () {\n  var size = this.size,\n      dense = this.dense,\n      values = this.vals,\n      i = 0;\n  return new Iterator(function () {\n    if (i < size) {\n      var item = [dense[i], values[i]];\n      i++;\n      return {\n        value: item\n      };\n    }\n\n    return {\n      done: true\n    };\n  });\n};\n/**\n * Attaching the #.entries method to Symbol.iterator if possible.\n */\n\n\nif (typeof Symbol !== 'undefined') SparseMap.prototype[Symbol.iterator] = SparseMap.prototype.entries;\n/**\n * Convenience known methods.\n */\n\nSparseMap.prototype.inspect = function () {\n  var proxy = new Map();\n\n  for (var i = 0; i < this.size; i++) {\n    proxy.set(this.dense[i], this.vals[i]);\n  } // Trick so that node displays the name of the constructor\n\n\n  Object.defineProperty(proxy, 'constructor', {\n    value: SparseMap,\n    enumerable: false\n  });\n  proxy.length = this.length;\n  if (this.vals.constructor !== Array) proxy.type = this.vals.constructor.name;\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined') SparseMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = SparseMap.prototype.inspect;\n/**\n * Exporting.\n */\n\nmodule.exports = SparseMap;","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/node_modules/mnemonist/sparse-map.js"],"names":["Iterator","require","getPointerArray","SparseMap","Values","length","arguments","Array","ByteArray","size","dense","sparse","vals","prototype","clear","has","member","index","get","set","value","delete","forEach","callback","scope","i","call","keys","item","done","values","entries","Symbol","iterator","inspect","proxy","Map","Object","defineProperty","enumerable","constructor","type","name","for","module","exports"],"mappings":"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","sourcesContent":["/**\n * Mnemonist SparseMap\n * ====================\n *\n * JavaScript sparse map implemented on top of byte arrays.\n *\n * [Reference]: https://research.swtch.com/sparse\n */\nvar Iterator = require('obliterator/iterator'),\n    getPointerArray = require('./utils/typed-arrays.js').getPointerArray;\n\n/**\n * SparseMap.\n *\n * @constructor\n */\nfunction SparseMap(Values, length) {\n  if (arguments.length < 2) {\n    length = Values;\n    Values = Array;\n  }\n\n  var ByteArray = getPointerArray(length);\n\n  // Properties\n  this.size = 0;\n  this.length = length;\n  this.dense = new ByteArray(length);\n  this.sparse = new ByteArray(length);\n  this.vals = new Values(length);\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nSparseMap.prototype.clear = function() {\n  this.size = 0;\n};\n\n/**\n * Method used to check the existence of a member in the set.\n *\n * @param  {number} member - Member to test.\n * @return {SparseMap}\n */\nSparseMap.prototype.has = function(member) {\n  var index = this.sparse[member];\n\n  return (\n    index < this.size &&\n    this.dense[index] === member\n  );\n};\n\n/**\n * Method used to get the value associated to a member in the set.\n *\n * @param  {number} member - Member to test.\n * @return {any}\n */\nSparseMap.prototype.get = function(member) {\n  var index = this.sparse[member];\n\n  if (index < this.size && this.dense[index] === member)\n    return this.vals[index];\n\n  return;\n};\n\n/**\n * Method used to set a value into the map.\n *\n * @param  {number} member - Member to set.\n * @param  {any}    value  - Associated value.\n * @return {SparseMap}\n */\nSparseMap.prototype.set = function(member, value) {\n  var index = this.sparse[member];\n\n  if (index < this.size && this.dense[index] === member) {\n    this.vals[index] = value;\n    return this;\n  }\n\n  this.dense[this.size] = member;\n  this.sparse[member] = this.size;\n  this.vals[this.size] = value;\n  this.size++;\n\n  return this;\n};\n\n/**\n * Method used to remove a member from the set.\n *\n * @param  {number} member - Member to delete.\n * @return {boolean}\n */\nSparseMap.prototype.delete = function(member) {\n  var index = this.sparse[member];\n\n  if (index >= this.size || this.dense[index] !== member)\n    return false;\n\n  index = this.dense[this.size - 1];\n  this.dense[this.sparse[member]] = index;\n  this.sparse[index] = this.sparse[member];\n  this.size--;\n\n  return true;\n};\n\n/**\n * Method used to iterate over the set's values.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nSparseMap.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  for (var i = 0; i < this.size; i++)\n    callback.call(scope, this.vals[i], this.dense[i]);\n};\n\n/**\n * Method used to create an iterator over a set's members.\n *\n * @return {Iterator}\n */\nSparseMap.prototype.keys = function() {\n  var size = this.size,\n      dense = this.dense,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i < size) {\n      var item = dense[i];\n      i++;\n\n      return {\n        value: item\n      };\n    }\n\n    return {\n      done: true\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over a set's values.\n *\n * @return {Iterator}\n */\nSparseMap.prototype.values = function() {\n  var size = this.size,\n      values = this.vals,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i < size) {\n      var item = values[i];\n      i++;\n\n      return {\n        value: item\n      };\n    }\n\n    return {\n      done: true\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over a set's entries.\n *\n * @return {Iterator}\n */\nSparseMap.prototype.entries = function() {\n  var size = this.size,\n      dense = this.dense,\n      values = this.vals,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i < size) {\n      var item = [dense[i], values[i]];\n      i++;\n\n      return {\n        value: item\n      };\n    }\n\n    return {\n      done: true\n    };\n  });\n};\n\n/**\n * Attaching the #.entries method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  SparseMap.prototype[Symbol.iterator] = SparseMap.prototype.entries;\n\n/**\n * Convenience known methods.\n */\nSparseMap.prototype.inspect = function() {\n  var proxy = new Map();\n\n  for (var i = 0; i < this.size; i++)\n    proxy.set(this.dense[i], this.vals[i]);\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(proxy, 'constructor', {\n    value: SparseMap,\n    enumerable: false\n  });\n\n  proxy.length = this.length;\n\n  if (this.vals.constructor !== Array)\n    proxy.type = this.vals.constructor.name;\n\n  return proxy;\n};\n\nif (typeof Symbol !== 'undefined')\n  SparseMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = SparseMap.prototype.inspect;\n\n/**\n * Exporting.\n */\nmodule.exports = SparseMap;\n"]},"metadata":{},"sourceType":"script"}