{"ast":null,"code":"import { Interface } from '@ethersproject/abi';\nimport { toHex } from '@uniswap/v3-sdk';\nconst ERC20_INTERFACE = new Interface([{\n  constant: false,\n  inputs: [{\n    name: '_spender',\n    type: 'address'\n  }, {\n    name: '_value',\n    type: 'uint256'\n  }],\n  name: 'approve',\n  outputs: [{\n    name: '',\n    type: 'bool'\n  }],\n  payable: false,\n  stateMutability: 'nonpayable',\n  type: 'function'\n}]);\nexport default function approveAmountCalldata(amount, spender) {\n  if (!amount.currency.isToken) throw new Error('Must call with an amount of token');\n  const approveData = ERC20_INTERFACE.encodeFunctionData('approve', [spender, toHex(amount.quotient)]);\n  return {\n    to: amount.currency.address,\n    data: approveData,\n    value: '0x0'\n  };\n}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/utils/approveAmountCalldata.ts"],"names":["Interface","toHex","ERC20_INTERFACE","constant","inputs","name","type","outputs","payable","stateMutability","approveAmountCalldata","amount","spender","currency","isToken","Error","approveData","encodeFunctionData","quotient","to","address","data","value"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AAEA,SAASC,KAAT,QAAsB,iBAAtB;AAIA,MAAMC,eAAe,GAAG,IAAIF,SAAJ,CAAc,CACpC;AACEG,EAAAA,QAAQ,EAAE,KADZ;AAEEC,EAAAA,MAAM,EAAE,CACN;AAAEC,IAAAA,IAAI,EAAE,UAAR;AAAoBC,IAAAA,IAAI,EAAE;AAA1B,GADM,EAEN;AAAED,IAAAA,IAAI,EAAE,QAAR;AAAkBC,IAAAA,IAAI,EAAE;AAAxB,GAFM,CAFV;AAMED,EAAAA,IAAI,EAAE,SANR;AAOEE,EAAAA,OAAO,EAAE,CAAC;AAAEF,IAAAA,IAAI,EAAE,EAAR;AAAYC,IAAAA,IAAI,EAAE;AAAlB,GAAD,CAPX;AAQEE,EAAAA,OAAO,EAAE,KARX;AASEC,EAAAA,eAAe,EAAE,YATnB;AAUEH,EAAAA,IAAI,EAAE;AAVR,CADoC,CAAd,CAAxB;AAeA,eAAe,SAASI,qBAAT,CACbC,MADa,EAEbC,OAFa,EAG+B;AAC5C,MAAI,CAACD,MAAM,CAACE,QAAP,CAAgBC,OAArB,EAA8B,MAAM,IAAIC,KAAJ,CAAU,mCAAV,CAAN;AAC9B,QAAMC,WAAW,GAAGd,eAAe,CAACe,kBAAhB,CAAmC,SAAnC,EAA8C,CAACL,OAAD,EAAUX,KAAK,CAACU,MAAM,CAACO,QAAR,CAAf,CAA9C,CAApB;AACA,SAAO;AACLC,IAAAA,EAAE,EAAER,MAAM,CAACE,QAAP,CAAgBO,OADf;AAELC,IAAAA,IAAI,EAAEL,WAFD;AAGLM,IAAAA,KAAK,EAAE;AAHF,GAAP;AAKD","sourcesContent":["import { Interface } from '@ethersproject/abi'\nimport { Currency, CurrencyAmount } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\n\nimport { Erc20Interface } from '../abis/types/Erc20'\n\nconst ERC20_INTERFACE = new Interface([\n  {\n    constant: false,\n    inputs: [\n      { name: '_spender', type: 'address' },\n      { name: '_value', type: 'uint256' },\n    ],\n    name: 'approve',\n    outputs: [{ name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n]) as Erc20Interface\n\nexport default function approveAmountCalldata(\n  amount: CurrencyAmount<Currency>,\n  spender: string\n): { to: string; data: string; value: '0x0' } {\n  if (!amount.currency.isToken) throw new Error('Must call with an amount of token')\n  const approveData = ERC20_INTERFACE.encodeFunctionData('approve', [spender, toHex(amount.quotient)])\n  return {\n    to: amount.currency.address,\n    data: approveData,\n    value: '0x0',\n  }\n}\n"]},"metadata":{},"sourceType":"module"}