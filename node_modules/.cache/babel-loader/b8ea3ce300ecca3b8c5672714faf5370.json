{"ast":null,"code":"import _styled from \"styled-components\";\n\nvar _jsxFileName = \"/Users/safahi/Downloads/interface-4.30.1/src/components/LiquidityChartRangeInput/Brush.tsx\",\n    _s = $RefreshSig$();\n\nimport { brushHandleAccentPath, brushHandlePath, OffScreenHandle } from 'components/LiquidityChartRangeInput/svg';\nimport { brushX, select } from 'd3';\nimport usePrevious from 'hooks/usePrevious';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Handle = _styled.path.withConfig({\n  displayName: \"Brush__Handle\",\n  componentId: \"sc-1hckctp-0\"\n})([\"cursor:ew-resize;pointer-events:none;stroke-width:3;stroke:\", \";fill:\", \";\"], ({\n  color\n}) => color, ({\n  color\n}) => color);\n\nconst HandleAccent = _styled.path.withConfig({\n  displayName: \"Brush__HandleAccent\",\n  componentId: \"sc-1hckctp-1\"\n})([\"cursor:ew-resize;pointer-events:none;stroke-width:1.5;stroke:\", \";opacity:0.6;\"], ({\n  theme\n}) => theme.white);\n\nconst LabelGroup = _styled.g.withConfig({\n  displayName: \"Brush__LabelGroup\",\n  componentId: \"sc-1hckctp-2\"\n})([\"opacity:\", \";transition:opacity 300ms;\"], ({\n  visible\n}) => visible ? '1' : '0');\n\nconst TooltipBackground = _styled.rect.withConfig({\n  displayName: \"Brush__TooltipBackground\",\n  componentId: \"sc-1hckctp-3\"\n})([\"fill:\", \";\"], ({\n  theme\n}) => theme.bg2);\n\nconst Tooltip = _styled.text.withConfig({\n  displayName: \"Brush__Tooltip\",\n  componentId: \"sc-1hckctp-4\"\n})([\"text-anchor:middle;font-size:13px;fill:\", \";\"], ({\n  theme\n}) => theme.text1); // flips the handles draggers when close to the container edges\n\n\nconst FLIP_HANDLE_THRESHOLD_PX = 20; // margin to prevent tick snapping from putting the brush off screen\n\nconst BRUSH_EXTENT_MARGIN_PX = 2;\n/**\n * Returns true if every element in `a` maps to the\n * same pixel coordinate as elements in `b`\n */\n\nconst compare = (a, b, xScale) => {\n  // normalize pixels to 1 decimals\n  const aNorm = a.map(x => xScale(x).toFixed(1));\n  const bNorm = b.map(x => xScale(x).toFixed(1));\n  return aNorm.every((v, i) => v === bNorm[i]);\n};\n\nexport const Brush = ({\n  id,\n  xScale,\n  interactive,\n  brushLabelValue,\n  brushExtent,\n  setBrushExtent,\n  innerWidth,\n  innerHeight,\n  westHandleColor,\n  eastHandleColor\n}) => {\n  _s();\n\n  const brushRef = useRef(null);\n  const brushBehavior = useRef(null); // only used to drag the handles on brush for performance\n\n  const [localBrushExtent, setLocalBrushExtent] = useState(brushExtent);\n  const [showLabels, setShowLabels] = useState(false);\n  const [hovering, setHovering] = useState(false);\n  const previousBrushExtent = usePrevious(brushExtent);\n  const brushed = useCallback(event => {\n    const {\n      type,\n      selection,\n      mode\n    } = event;\n\n    if (!selection) {\n      setLocalBrushExtent(null);\n      return;\n    }\n\n    const scaled = selection.map(xScale.invert); // avoid infinite render loop by checking for change\n\n    if (type === 'end' && !compare(brushExtent, scaled, xScale)) {\n      setBrushExtent(scaled, mode);\n    }\n\n    setLocalBrushExtent(scaled);\n  }, [xScale, brushExtent, setBrushExtent]); // keep local and external brush extent in sync\n  // i.e. snap to ticks on bruhs end\n\n  useEffect(() => {\n    setLocalBrushExtent(brushExtent);\n  }, [brushExtent]); // initialize the brush\n\n  useEffect(() => {\n    if (!brushRef.current) return;\n    brushBehavior.current = brushX().extent([[Math.max(0 + BRUSH_EXTENT_MARGIN_PX, xScale(0)), 0], [innerWidth - BRUSH_EXTENT_MARGIN_PX, innerHeight]]).handleSize(30).filter(() => interactive).on('brush end', brushed);\n    brushBehavior.current(select(brushRef.current));\n\n    if (previousBrushExtent && compare(brushExtent, previousBrushExtent, xScale)) {\n      select(brushRef.current).transition().call(brushBehavior.current.move, brushExtent.map(xScale));\n    } // brush linear gradient\n\n\n    select(brushRef.current).selectAll('.selection').attr('stroke', 'none').attr('fill-opacity', '0.1').attr('fill', `url(#${id}-gradient-selection)`);\n  }, [brushExtent, brushed, id, innerHeight, innerWidth, interactive, previousBrushExtent, xScale]); // respond to xScale changes only\n\n  useEffect(() => {\n    if (!brushRef.current || !brushBehavior.current) return;\n    brushBehavior.current.move(select(brushRef.current), brushExtent.map(xScale));\n  }, [brushExtent, xScale]); // show labels when local brush changes\n\n  useEffect(() => {\n    setShowLabels(true);\n    const timeout = setTimeout(() => setShowLabels(false), 1500);\n    return () => clearTimeout(timeout);\n  }, [localBrushExtent]); // variables to help render the SVGs\n\n  const flipWestHandle = localBrushExtent && xScale(localBrushExtent[0]) > FLIP_HANDLE_THRESHOLD_PX;\n  const flipEastHandle = localBrushExtent && xScale(localBrushExtent[1]) > innerWidth - FLIP_HANDLE_THRESHOLD_PX;\n  const showWestArrow = localBrushExtent && (xScale(localBrushExtent[0]) < 0 || xScale(localBrushExtent[1]) < 0);\n  const showEastArrow = localBrushExtent && (xScale(localBrushExtent[0]) > innerWidth || xScale(localBrushExtent[1]) > innerWidth);\n  const westHandleInView = localBrushExtent && xScale(localBrushExtent[0]) >= 0 && xScale(localBrushExtent[0]) <= innerWidth;\n  const eastHandleInView = localBrushExtent && xScale(localBrushExtent[1]) >= 0 && xScale(localBrushExtent[1]) <= innerWidth;\n  return useMemo(() => /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n      children: [/*#__PURE__*/_jsxDEV(\"linearGradient\", {\n        id: `${id}-gradient-selection`,\n        x1: \"0%\",\n        y1: \"100%\",\n        x2: \"100%\",\n        y2: \"100%\",\n        children: [/*#__PURE__*/_jsxDEV(\"stop\", {\n          stopColor: westHandleColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"stop\", {\n          stopColor: eastHandleColor,\n          offset: \"1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"clipPath\", {\n        id: `${id}-brush-clip`,\n        children: /*#__PURE__*/_jsxDEV(\"rect\", {\n          x: \"0\",\n          y: \"0\",\n          width: innerWidth,\n          height: innerHeight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n      ref: brushRef,\n      clipPath: `url(#${id}-brush-clip)`,\n      onMouseEnter: () => setHovering(true),\n      onMouseLeave: () => setHovering(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }, this), localBrushExtent && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [westHandleInView ? /*#__PURE__*/_jsxDEV(\"g\", {\n        transform: `translate(${Math.max(0, xScale(localBrushExtent[0]))}, 0), scale(${flipWestHandle ? '-1' : '1'}, 1)`,\n        children: [/*#__PURE__*/_jsxDEV(\"g\", {\n          children: [/*#__PURE__*/_jsxDEV(Handle, {\n            color: westHandleColor,\n            d: brushHandlePath(innerHeight)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(HandleAccent, {\n            d: brushHandleAccentPath()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(LabelGroup, {\n          transform: `translate(50,0), scale(${flipWestHandle ? '1' : '-1'}, 1)`,\n          visible: showLabels || hovering,\n          children: [/*#__PURE__*/_jsxDEV(TooltipBackground, {\n            y: \"0\",\n            x: \"-30\",\n            height: \"30\",\n            width: \"60\",\n            rx: \"8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            transform: `scale(-1, 1)`,\n            y: \"15\",\n            dominantBaseline: \"middle\",\n            children: brushLabelValue('w', localBrushExtent[0])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 15\n      }, this) : null, eastHandleInView ? /*#__PURE__*/_jsxDEV(\"g\", {\n        transform: `translate(${xScale(localBrushExtent[1])}, 0), scale(${flipEastHandle ? '-1' : '1'}, 1)`,\n        children: [/*#__PURE__*/_jsxDEV(\"g\", {\n          children: [/*#__PURE__*/_jsxDEV(Handle, {\n            color: eastHandleColor,\n            d: brushHandlePath(innerHeight)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(HandleAccent, {\n            d: brushHandleAccentPath()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(LabelGroup, {\n          transform: `translate(50,0), scale(${flipEastHandle ? '-1' : '1'}, 1)`,\n          visible: showLabels || hovering,\n          children: [/*#__PURE__*/_jsxDEV(TooltipBackground, {\n            y: \"0\",\n            x: \"-30\",\n            height: \"30\",\n            width: \"60\",\n            rx: \"8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            y: \"15\",\n            dominantBaseline: \"middle\",\n            children: brushLabelValue('e', localBrushExtent[1])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 15\n      }, this) : null, showWestArrow && /*#__PURE__*/_jsxDEV(OffScreenHandle, {\n        color: westHandleColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 31\n      }, this), showEastArrow && /*#__PURE__*/_jsxDEV(\"g\", {\n        transform: `translate(${innerWidth}, 0) scale(-1, 1)`,\n        children: /*#__PURE__*/_jsxDEV(OffScreenHandle, {\n          color: eastHandleColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true), [brushLabelValue, eastHandleColor, eastHandleInView, flipEastHandle, flipWestHandle, hovering, id, innerHeight, innerWidth, localBrushExtent, showEastArrow, showLabels, showWestArrow, westHandleColor, westHandleInView, xScale]);\n};\n\n_s(Brush, \"oJl743GmG8ZPLA5DPnYJrV/aZTg=\", false, function () {\n  return [usePrevious];\n});\n\n_c = Brush;\n\nvar _c;\n\n$RefreshReg$(_c, \"Brush\");","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/components/LiquidityChartRangeInput/Brush.tsx"],"names":["brushHandleAccentPath","brushHandlePath","OffScreenHandle","brushX","select","usePrevious","React","useCallback","useEffect","useMemo","useRef","useState","Handle","styled","path","color","HandleAccent","theme","white","LabelGroup","g","visible","TooltipBackground","rect","bg2","Tooltip","text","text1","FLIP_HANDLE_THRESHOLD_PX","BRUSH_EXTENT_MARGIN_PX","compare","a","b","xScale","aNorm","map","x","toFixed","bNorm","every","v","i","Brush","id","interactive","brushLabelValue","brushExtent","setBrushExtent","innerWidth","innerHeight","westHandleColor","eastHandleColor","brushRef","brushBehavior","localBrushExtent","setLocalBrushExtent","showLabels","setShowLabels","hovering","setHovering","previousBrushExtent","brushed","event","type","selection","mode","scaled","invert","current","extent","Math","max","handleSize","filter","on","transition","call","move","selectAll","attr","timeout","setTimeout","clearTimeout","flipWestHandle","flipEastHandle","showWestArrow","showEastArrow","westHandleInView","eastHandleInView"],"mappings":"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","sourcesContent":["import { brushHandleAccentPath, brushHandlePath, OffScreenHandle } from 'components/LiquidityChartRangeInput/svg'\nimport { BrushBehavior, brushX, D3BrushEvent, ScaleLinear, select } from 'd3'\nimport usePrevious from 'hooks/usePrevious'\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport styled from 'styled-components/macro'\n\nconst Handle = styled.path<{ color: string }>`\n  cursor: ew-resize;\n  pointer-events: none;\n\n  stroke-width: 3;\n  stroke: ${({ color }) => color};\n  fill: ${({ color }) => color};\n`\n\nconst HandleAccent = styled.path`\n  cursor: ew-resize;\n  pointer-events: none;\n\n  stroke-width: 1.5;\n  stroke: ${({ theme }) => theme.white};\n  opacity: 0.6;\n`\n\nconst LabelGroup = styled.g<{ visible: boolean }>`\n  opacity: ${({ visible }) => (visible ? '1' : '0')};\n  transition: opacity 300ms;\n`\n\nconst TooltipBackground = styled.rect`\n  fill: ${({ theme }) => theme.bg2};\n`\n\nconst Tooltip = styled.text`\n  text-anchor: middle;\n  font-size: 13px;\n  fill: ${({ theme }) => theme.text1};\n`\n\n// flips the handles draggers when close to the container edges\nconst FLIP_HANDLE_THRESHOLD_PX = 20\n\n// margin to prevent tick snapping from putting the brush off screen\nconst BRUSH_EXTENT_MARGIN_PX = 2\n\n/**\n * Returns true if every element in `a` maps to the\n * same pixel coordinate as elements in `b`\n */\nconst compare = (a: [number, number], b: [number, number], xScale: ScaleLinear<number, number>): boolean => {\n  // normalize pixels to 1 decimals\n  const aNorm = a.map((x) => xScale(x).toFixed(1))\n  const bNorm = b.map((x) => xScale(x).toFixed(1))\n  return aNorm.every((v, i) => v === bNorm[i])\n}\n\nexport const Brush = ({\n  id,\n  xScale,\n  interactive,\n  brushLabelValue,\n  brushExtent,\n  setBrushExtent,\n  innerWidth,\n  innerHeight,\n  westHandleColor,\n  eastHandleColor,\n}: {\n  id: string\n  xScale: ScaleLinear<number, number>\n  interactive: boolean\n  brushLabelValue: (d: 'w' | 'e', x: number) => string\n  brushExtent: [number, number]\n  setBrushExtent: (extent: [number, number], mode: string | undefined) => void\n  innerWidth: number\n  innerHeight: number\n  westHandleColor: string\n  eastHandleColor: string\n}) => {\n  const brushRef = useRef<SVGGElement | null>(null)\n  const brushBehavior = useRef<BrushBehavior<SVGGElement> | null>(null)\n\n  // only used to drag the handles on brush for performance\n  const [localBrushExtent, setLocalBrushExtent] = useState<[number, number] | null>(brushExtent)\n  const [showLabels, setShowLabels] = useState(false)\n  const [hovering, setHovering] = useState(false)\n\n  const previousBrushExtent = usePrevious(brushExtent)\n\n  const brushed = useCallback(\n    (event: D3BrushEvent<unknown>) => {\n      const { type, selection, mode } = event\n\n      if (!selection) {\n        setLocalBrushExtent(null)\n        return\n      }\n\n      const scaled = (selection as [number, number]).map(xScale.invert) as [number, number]\n\n      // avoid infinite render loop by checking for change\n      if (type === 'end' && !compare(brushExtent, scaled, xScale)) {\n        setBrushExtent(scaled, mode)\n      }\n\n      setLocalBrushExtent(scaled)\n    },\n    [xScale, brushExtent, setBrushExtent]\n  )\n\n  // keep local and external brush extent in sync\n  // i.e. snap to ticks on bruhs end\n  useEffect(() => {\n    setLocalBrushExtent(brushExtent)\n  }, [brushExtent])\n\n  // initialize the brush\n  useEffect(() => {\n    if (!brushRef.current) return\n\n    brushBehavior.current = brushX<SVGGElement>()\n      .extent([\n        [Math.max(0 + BRUSH_EXTENT_MARGIN_PX, xScale(0)), 0],\n        [innerWidth - BRUSH_EXTENT_MARGIN_PX, innerHeight],\n      ])\n      .handleSize(30)\n      .filter(() => interactive)\n      .on('brush end', brushed)\n\n    brushBehavior.current(select(brushRef.current))\n\n    if (previousBrushExtent && compare(brushExtent, previousBrushExtent, xScale)) {\n      select(brushRef.current)\n        .transition()\n        .call(brushBehavior.current.move as any, brushExtent.map(xScale))\n    }\n\n    // brush linear gradient\n    select(brushRef.current)\n      .selectAll('.selection')\n      .attr('stroke', 'none')\n      .attr('fill-opacity', '0.1')\n      .attr('fill', `url(#${id}-gradient-selection)`)\n  }, [brushExtent, brushed, id, innerHeight, innerWidth, interactive, previousBrushExtent, xScale])\n\n  // respond to xScale changes only\n  useEffect(() => {\n    if (!brushRef.current || !brushBehavior.current) return\n\n    brushBehavior.current.move(select(brushRef.current) as any, brushExtent.map(xScale) as any)\n  }, [brushExtent, xScale])\n\n  // show labels when local brush changes\n  useEffect(() => {\n    setShowLabels(true)\n    const timeout = setTimeout(() => setShowLabels(false), 1500)\n    return () => clearTimeout(timeout)\n  }, [localBrushExtent])\n\n  // variables to help render the SVGs\n  const flipWestHandle = localBrushExtent && xScale(localBrushExtent[0]) > FLIP_HANDLE_THRESHOLD_PX\n  const flipEastHandle = localBrushExtent && xScale(localBrushExtent[1]) > innerWidth - FLIP_HANDLE_THRESHOLD_PX\n\n  const showWestArrow = localBrushExtent && (xScale(localBrushExtent[0]) < 0 || xScale(localBrushExtent[1]) < 0)\n  const showEastArrow =\n    localBrushExtent && (xScale(localBrushExtent[0]) > innerWidth || xScale(localBrushExtent[1]) > innerWidth)\n\n  const westHandleInView =\n    localBrushExtent && xScale(localBrushExtent[0]) >= 0 && xScale(localBrushExtent[0]) <= innerWidth\n  const eastHandleInView =\n    localBrushExtent && xScale(localBrushExtent[1]) >= 0 && xScale(localBrushExtent[1]) <= innerWidth\n\n  return useMemo(\n    () => (\n      <>\n        <defs>\n          <linearGradient id={`${id}-gradient-selection`} x1=\"0%\" y1=\"100%\" x2=\"100%\" y2=\"100%\">\n            <stop stopColor={westHandleColor} />\n            <stop stopColor={eastHandleColor} offset=\"1\" />\n          </linearGradient>\n\n          {/* clips at exactly the svg area */}\n          <clipPath id={`${id}-brush-clip`}>\n            <rect x=\"0\" y=\"0\" width={innerWidth} height={innerHeight} />\n          </clipPath>\n        </defs>\n\n        {/* will host the d3 brush */}\n        <g\n          ref={brushRef}\n          clipPath={`url(#${id}-brush-clip)`}\n          onMouseEnter={() => setHovering(true)}\n          onMouseLeave={() => setHovering(false)}\n        />\n\n        {/* custom brush handles */}\n        {localBrushExtent && (\n          <>\n            {/* west handle */}\n            {westHandleInView ? (\n              <g\n                transform={`translate(${Math.max(0, xScale(localBrushExtent[0]))}, 0), scale(${\n                  flipWestHandle ? '-1' : '1'\n                }, 1)`}\n              >\n                <g>\n                  <Handle color={westHandleColor} d={brushHandlePath(innerHeight)} />\n                  <HandleAccent d={brushHandleAccentPath()} />\n                </g>\n\n                <LabelGroup\n                  transform={`translate(50,0), scale(${flipWestHandle ? '1' : '-1'}, 1)`}\n                  visible={showLabels || hovering}\n                >\n                  <TooltipBackground y=\"0\" x=\"-30\" height=\"30\" width=\"60\" rx=\"8\" />\n                  <Tooltip transform={`scale(-1, 1)`} y=\"15\" dominantBaseline=\"middle\">\n                    {brushLabelValue('w', localBrushExtent[0])}\n                  </Tooltip>\n                </LabelGroup>\n              </g>\n            ) : null}\n\n            {/* east handle */}\n            {eastHandleInView ? (\n              <g transform={`translate(${xScale(localBrushExtent[1])}, 0), scale(${flipEastHandle ? '-1' : '1'}, 1)`}>\n                <g>\n                  <Handle color={eastHandleColor} d={brushHandlePath(innerHeight)} />\n                  <HandleAccent d={brushHandleAccentPath()} />\n                </g>\n\n                <LabelGroup\n                  transform={`translate(50,0), scale(${flipEastHandle ? '-1' : '1'}, 1)`}\n                  visible={showLabels || hovering}\n                >\n                  <TooltipBackground y=\"0\" x=\"-30\" height=\"30\" width=\"60\" rx=\"8\" />\n                  <Tooltip y=\"15\" dominantBaseline=\"middle\">\n                    {brushLabelValue('e', localBrushExtent[1])}\n                  </Tooltip>\n                </LabelGroup>\n              </g>\n            ) : null}\n\n            {showWestArrow && <OffScreenHandle color={westHandleColor} />}\n\n            {showEastArrow && (\n              <g transform={`translate(${innerWidth}, 0) scale(-1, 1)`}>\n                <OffScreenHandle color={eastHandleColor} />\n              </g>\n            )}\n          </>\n        )}\n      </>\n    ),\n    [\n      brushLabelValue,\n      eastHandleColor,\n      eastHandleInView,\n      flipEastHandle,\n      flipWestHandle,\n      hovering,\n      id,\n      innerHeight,\n      innerWidth,\n      localBrushExtent,\n      showEastArrow,\n      showLabels,\n      showWestArrow,\n      westHandleColor,\n      westHandleInView,\n      xScale,\n    ]\n  )\n}\n"]},"metadata":{},"sourceType":"module"}