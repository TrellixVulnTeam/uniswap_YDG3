{"ast":null,"code":"import _objectSpread from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{TradeType}from'@uniswap/sdk-core';import{TradeState}from'state/routing/types';import{useRoutingAPITrade}from'state/routing/useRoutingAPITrade';import useAutoRouterSupported from'./useAutoRouterSupported';import{useClientSideV3Trade}from'./useClientSideV3Trade';import useDebounce from'./useDebounce';import useIsWindowVisible from'./useIsWindowVisible';/**\n * Returns the best v2+v3 trade for a desired swap.\n * @param tradeType whether the swap is an exact in/out\n * @param amountSpecified the exact amount to swap in/out\n * @param otherCurrency the desired output/payment currency\n */export function useBestTrade(tradeType,amountSpecified,otherCurrency){var autoRouterSupported=useAutoRouterSupported();var isWindowVisible=useIsWindowVisible();var _useDebounce=useDebounce([amountSpecified,otherCurrency],200),_useDebounce2=_slicedToArray(_useDebounce,2),debouncedAmount=_useDebounce2[0],debouncedOtherCurrency=_useDebounce2[1];var routingAPITrade=useRoutingAPITrade(tradeType,autoRouterSupported&&isWindowVisible?debouncedAmount:undefined,debouncedOtherCurrency);var isLoading=amountSpecified!==undefined&&debouncedAmount===undefined;// consider trade debouncing when inputs/outputs do not match\nvar debouncing=routingAPITrade.trade&&amountSpecified&&(tradeType===TradeType.EXACT_INPUT?!routingAPITrade.trade.inputAmount.equalTo(amountSpecified)||!amountSpecified.currency.equals(routingAPITrade.trade.inputAmount.currency)||!(debouncedOtherCurrency===null||debouncedOtherCurrency===void 0?void 0:debouncedOtherCurrency.equals(routingAPITrade.trade.outputAmount.currency)):!routingAPITrade.trade.outputAmount.equalTo(amountSpecified)||!amountSpecified.currency.equals(routingAPITrade.trade.outputAmount.currency)||!(debouncedOtherCurrency===null||debouncedOtherCurrency===void 0?void 0:debouncedOtherCurrency.equals(routingAPITrade.trade.inputAmount.currency)));var useFallback=!autoRouterSupported||!debouncing&&routingAPITrade.state===TradeState.NO_ROUTE_FOUND;// only use client side router if routing api trade failed or is not supported\nvar bestV3Trade=useClientSideV3Trade(tradeType,useFallback?debouncedAmount:undefined,useFallback?debouncedOtherCurrency:undefined);// only return gas estimate from api if routing api trade is used\nreturn _objectSpread(_objectSpread(_objectSpread({},useFallback?bestV3Trade:routingAPITrade),debouncing?{state:TradeState.SYNCING}:{}),isLoading?{state:TradeState.LOADING}:{});}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/hooks/useBestTrade.ts"],"names":["TradeType","TradeState","useRoutingAPITrade","useAutoRouterSupported","useClientSideV3Trade","useDebounce","useIsWindowVisible","useBestTrade","tradeType","amountSpecified","otherCurrency","autoRouterSupported","isWindowVisible","debouncedAmount","debouncedOtherCurrency","routingAPITrade","undefined","isLoading","debouncing","trade","EXACT_INPUT","inputAmount","equalTo","currency","equals","outputAmount","useFallback","state","NO_ROUTE_FOUND","bestV3Trade","SYNCING","LOADING"],"mappings":"6TAAA,OAAmCA,SAAnC,KAAoD,mBAApD,CACA,OAAyBC,UAAzB,KAA2C,qBAA3C,CACA,OAASC,kBAAT,KAAmC,kCAAnC,CAEA,MAAOC,CAAAA,sBAAP,KAAmC,0BAAnC,CACA,OAASC,oBAAT,KAAqC,wBAArC,CACA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,CACA,MAAOC,CAAAA,kBAAP,KAA+B,sBAA/B,CAEA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASC,CAAAA,YAAT,CACLC,SADK,CAELC,eAFK,CAGLC,aAHK,CAOL,CACA,GAAMC,CAAAA,mBAAmB,CAAGR,sBAAsB,EAAlD,CACA,GAAMS,CAAAA,eAAe,CAAGN,kBAAkB,EAA1C,CAEA,iBAAkDD,WAAW,CAAC,CAACI,eAAD,CAAkBC,aAAlB,CAAD,CAAmC,GAAnC,CAA7D,8CAAOG,eAAP,kBAAwBC,sBAAxB,kBAEA,GAAMC,CAAAA,eAAe,CAAGb,kBAAkB,CACxCM,SADwC,CAExCG,mBAAmB,EAAIC,eAAvB,CAAyCC,eAAzC,CAA2DG,SAFnB,CAGxCF,sBAHwC,CAA1C,CAMA,GAAMG,CAAAA,SAAS,CAAGR,eAAe,GAAKO,SAApB,EAAiCH,eAAe,GAAKG,SAAvE,CAEA;AACA,GAAME,CAAAA,UAAU,CACdH,eAAe,CAACI,KAAhB,EACAV,eADA,GAECD,SAAS,GAAKR,SAAS,CAACoB,WAAxB,CACG,CAACL,eAAe,CAACI,KAAhB,CAAsBE,WAAtB,CAAkCC,OAAlC,CAA0Cb,eAA1C,CAAD,EACA,CAACA,eAAe,CAACc,QAAhB,CAAyBC,MAAzB,CAAgCT,eAAe,CAACI,KAAhB,CAAsBE,WAAtB,CAAkCE,QAAlE,CADD,EAEA,EAACT,sBAAD,SAACA,sBAAD,iBAACA,sBAAsB,CAAEU,MAAxB,CAA+BT,eAAe,CAACI,KAAhB,CAAsBM,YAAtB,CAAmCF,QAAlE,CAAD,CAHH,CAIG,CAACR,eAAe,CAACI,KAAhB,CAAsBM,YAAtB,CAAmCH,OAAnC,CAA2Cb,eAA3C,CAAD,EACA,CAACA,eAAe,CAACc,QAAhB,CAAyBC,MAAzB,CAAgCT,eAAe,CAACI,KAAhB,CAAsBM,YAAtB,CAAmCF,QAAnE,CADD,EAEA,EAACT,sBAAD,SAACA,sBAAD,iBAACA,sBAAsB,CAAEU,MAAxB,CAA+BT,eAAe,CAACI,KAAhB,CAAsBE,WAAtB,CAAkCE,QAAjE,CAAD,CARJ,CADF,CAWA,GAAMG,CAAAA,WAAW,CAAG,CAACf,mBAAD,EAAyB,CAACO,UAAD,EAAeH,eAAe,CAACY,KAAhB,GAA0B1B,UAAU,CAAC2B,cAAjG,CAEA;AACA,GAAMC,CAAAA,WAAW,CAAGzB,oBAAoB,CACtCI,SADsC,CAEtCkB,WAAW,CAAGb,eAAH,CAAqBG,SAFM,CAGtCU,WAAW,CAAGZ,sBAAH,CAA4BE,SAHD,CAAxC,CAMA;AACA,oDACMU,WAAW,CAAGG,WAAH,CAAiBd,eADlC,EAEMG,UAAU,CAAG,CAAES,KAAK,CAAE1B,UAAU,CAAC6B,OAApB,CAAH,CAAmC,EAFnD,EAGMb,SAAS,CAAG,CAAEU,KAAK,CAAE1B,UAAU,CAAC8B,OAApB,CAAH,CAAmC,EAHlD,EAKD","sourcesContent":["import { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { InterfaceTrade, TradeState } from 'state/routing/types'\nimport { useRoutingAPITrade } from 'state/routing/useRoutingAPITrade'\n\nimport useAutoRouterSupported from './useAutoRouterSupported'\nimport { useClientSideV3Trade } from './useClientSideV3Trade'\nimport useDebounce from './useDebounce'\nimport useIsWindowVisible from './useIsWindowVisible'\n\n/**\n * Returns the best v2+v3 trade for a desired swap.\n * @param tradeType whether the swap is an exact in/out\n * @param amountSpecified the exact amount to swap in/out\n * @param otherCurrency the desired output/payment currency\n */\nexport function useBestTrade(\n  tradeType: TradeType,\n  amountSpecified?: CurrencyAmount<Currency>,\n  otherCurrency?: Currency\n): {\n  state: TradeState\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined\n} {\n  const autoRouterSupported = useAutoRouterSupported()\n  const isWindowVisible = useIsWindowVisible()\n\n  const [debouncedAmount, debouncedOtherCurrency] = useDebounce([amountSpecified, otherCurrency], 200)\n\n  const routingAPITrade = useRoutingAPITrade(\n    tradeType,\n    autoRouterSupported && isWindowVisible ? debouncedAmount : undefined,\n    debouncedOtherCurrency\n  )\n\n  const isLoading = amountSpecified !== undefined && debouncedAmount === undefined\n\n  // consider trade debouncing when inputs/outputs do not match\n  const debouncing =\n    routingAPITrade.trade &&\n    amountSpecified &&\n    (tradeType === TradeType.EXACT_INPUT\n      ? !routingAPITrade.trade.inputAmount.equalTo(amountSpecified) ||\n        !amountSpecified.currency.equals(routingAPITrade.trade.inputAmount.currency) ||\n        !debouncedOtherCurrency?.equals(routingAPITrade.trade.outputAmount.currency)\n      : !routingAPITrade.trade.outputAmount.equalTo(amountSpecified) ||\n        !amountSpecified.currency.equals(routingAPITrade.trade.outputAmount.currency) ||\n        !debouncedOtherCurrency?.equals(routingAPITrade.trade.inputAmount.currency))\n\n  const useFallback = !autoRouterSupported || (!debouncing && routingAPITrade.state === TradeState.NO_ROUTE_FOUND)\n\n  // only use client side router if routing api trade failed or is not supported\n  const bestV3Trade = useClientSideV3Trade(\n    tradeType,\n    useFallback ? debouncedAmount : undefined,\n    useFallback ? debouncedOtherCurrency : undefined\n  )\n\n  // only return gas estimate from api if routing api trade is used\n  return {\n    ...(useFallback ? bestV3Trade : routingAPITrade),\n    ...(debouncing ? { state: TradeState.SYNCING } : {}),\n    ...(isLoading ? { state: TradeState.LOADING } : {}),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}