{"ast":null,"code":"/**\n * Mnemonist DefaultWeakMap\n * =========================\n *\n * JavaScript implementation of a default weak map that will return a constructed\n * value any time one tries to access an non-existing key. It is similar to\n * DefaultMap but uses ES6 WeakMap that only holds weak reference to keys.\n */\n\n/**\n * DefaultWeakMap.\n *\n * @constructor\n */\nfunction DefaultWeakMap(factory) {\n  if (typeof factory !== 'function') throw new Error('mnemonist/DefaultWeakMap.constructor: expecting a function.');\n  this.items = new WeakMap();\n  this.factory = factory;\n}\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\n\n\nDefaultWeakMap.prototype.clear = function () {\n  // Properties\n  this.items = new WeakMap();\n};\n/**\n * Method used to get the value set for given key. If the key does not exist,\n * the value will be created using the provided factory.\n *\n * @param  {any} key - Target key.\n * @return {any}\n */\n\n\nDefaultWeakMap.prototype.get = function (key) {\n  var value = this.items.get(key);\n\n  if (typeof value === 'undefined') {\n    value = this.factory(key);\n    this.items.set(key, value);\n  }\n\n  return value;\n};\n/**\n * Method used to get the value set for given key. If the key does not exist,\n * a value won't be created.\n *\n * @param  {any} key - Target key.\n * @return {any}\n */\n\n\nDefaultWeakMap.prototype.peek = function (key) {\n  return this.items.get(key);\n};\n/**\n * Method used to set a value for given key.\n *\n * @param  {any} key   - Target key.\n * @param  {any} value - Value.\n * @return {DefaultMap}\n */\n\n\nDefaultWeakMap.prototype.set = function (key, value) {\n  this.items.set(key, value);\n  return this;\n};\n/**\n * Method used to test the existence of a key in the map.\n *\n * @param  {any} key   - Target key.\n * @return {boolean}\n */\n\n\nDefaultWeakMap.prototype.has = function (key) {\n  return this.items.has(key);\n};\n/**\n * Method used to delete target key.\n *\n * @param  {any} key   - Target key.\n * @return {boolean}\n */\n\n\nDefaultWeakMap.prototype.delete = function (key) {\n  return this.items.delete(key);\n};\n/**\n * Convenience known methods.\n */\n\n\nDefaultWeakMap.prototype.inspect = function () {\n  return this.items;\n};\n\nif (typeof Symbol !== 'undefined') DefaultWeakMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = DefaultWeakMap.prototype.inspect;\n/**\n * Exporting.\n */\n\nmodule.exports = DefaultWeakMap;","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/node_modules/mnemonist/default-weak-map.js"],"names":["DefaultWeakMap","factory","Error","items","WeakMap","prototype","clear","get","key","value","set","peek","has","delete","inspect","Symbol","for","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASA,cAAT,CAAwBC,OAAxB,EAAiC;AAC/B,MAAI,OAAOA,OAAP,KAAmB,UAAvB,EACE,MAAM,IAAIC,KAAJ,CAAU,6DAAV,CAAN;AAEF,OAAKC,KAAL,GAAa,IAAIC,OAAJ,EAAb;AACA,OAAKH,OAAL,GAAeA,OAAf;AACD;AAED;AACA;AACA;AACA;AACA;;;AACAD,cAAc,CAACK,SAAf,CAAyBC,KAAzB,GAAiC,YAAW;AAE1C;AACA,OAAKH,KAAL,GAAa,IAAIC,OAAJ,EAAb;AACD,CAJD;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAJ,cAAc,CAACK,SAAf,CAAyBE,GAAzB,GAA+B,UAASC,GAAT,EAAc;AAC3C,MAAIC,KAAK,GAAG,KAAKN,KAAL,CAAWI,GAAX,CAAeC,GAAf,CAAZ;;AAEA,MAAI,OAAOC,KAAP,KAAiB,WAArB,EAAkC;AAChCA,IAAAA,KAAK,GAAG,KAAKR,OAAL,CAAaO,GAAb,CAAR;AACA,SAAKL,KAAL,CAAWO,GAAX,CAAeF,GAAf,EAAoBC,KAApB;AACD;;AAED,SAAOA,KAAP;AACD,CATD;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAT,cAAc,CAACK,SAAf,CAAyBM,IAAzB,GAAgC,UAASH,GAAT,EAAc;AAC5C,SAAO,KAAKL,KAAL,CAAWI,GAAX,CAAeC,GAAf,CAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAR,cAAc,CAACK,SAAf,CAAyBK,GAAzB,GAA+B,UAASF,GAAT,EAAcC,KAAd,EAAqB;AAClD,OAAKN,KAAL,CAAWO,GAAX,CAAeF,GAAf,EAAoBC,KAApB;AACA,SAAO,IAAP;AACD,CAHD;AAKA;AACA;AACA;AACA;AACA;AACA;;;AACAT,cAAc,CAACK,SAAf,CAAyBO,GAAzB,GAA+B,UAASJ,GAAT,EAAc;AAC3C,SAAO,KAAKL,KAAL,CAAWS,GAAX,CAAeJ,GAAf,CAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACAR,cAAc,CAACK,SAAf,CAAyBQ,MAAzB,GAAkC,UAASL,GAAT,EAAc;AAC9C,SAAO,KAAKL,KAAL,CAAWU,MAAX,CAAkBL,GAAlB,CAAP;AACD,CAFD;AAIA;AACA;AACA;;;AACAR,cAAc,CAACK,SAAf,CAAyBS,OAAzB,GAAmC,YAAW;AAC5C,SAAO,KAAKX,KAAZ;AACD,CAFD;;AAIA,IAAI,OAAOY,MAAP,KAAkB,WAAtB,EACEf,cAAc,CAACK,SAAf,CAAyBU,MAAM,CAACC,GAAP,CAAW,4BAAX,CAAzB,IAAqEhB,cAAc,CAACK,SAAf,CAAyBS,OAA9F;AAEF;AACA;AACA;;AACAG,MAAM,CAACC,OAAP,GAAiBlB,cAAjB","sourcesContent":["/**\n * Mnemonist DefaultWeakMap\n * =========================\n *\n * JavaScript implementation of a default weak map that will return a constructed\n * value any time one tries to access an non-existing key. It is similar to\n * DefaultMap but uses ES6 WeakMap that only holds weak reference to keys.\n */\n\n/**\n * DefaultWeakMap.\n *\n * @constructor\n */\nfunction DefaultWeakMap(factory) {\n  if (typeof factory !== 'function')\n    throw new Error('mnemonist/DefaultWeakMap.constructor: expecting a function.');\n\n  this.items = new WeakMap();\n  this.factory = factory;\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nDefaultWeakMap.prototype.clear = function() {\n\n  // Properties\n  this.items = new WeakMap();\n};\n\n/**\n * Method used to get the value set for given key. If the key does not exist,\n * the value will be created using the provided factory.\n *\n * @param  {any} key - Target key.\n * @return {any}\n */\nDefaultWeakMap.prototype.get = function(key) {\n  var value = this.items.get(key);\n\n  if (typeof value === 'undefined') {\n    value = this.factory(key);\n    this.items.set(key, value);\n  }\n\n  return value;\n};\n\n/**\n * Method used to get the value set for given key. If the key does not exist,\n * a value won't be created.\n *\n * @param  {any} key - Target key.\n * @return {any}\n */\nDefaultWeakMap.prototype.peek = function(key) {\n  return this.items.get(key);\n};\n\n/**\n * Method used to set a value for given key.\n *\n * @param  {any} key   - Target key.\n * @param  {any} value - Value.\n * @return {DefaultMap}\n */\nDefaultWeakMap.prototype.set = function(key, value) {\n  this.items.set(key, value);\n  return this;\n};\n\n/**\n * Method used to test the existence of a key in the map.\n *\n * @param  {any} key   - Target key.\n * @return {boolean}\n */\nDefaultWeakMap.prototype.has = function(key) {\n  return this.items.has(key);\n};\n\n/**\n * Method used to delete target key.\n *\n * @param  {any} key   - Target key.\n * @return {boolean}\n */\nDefaultWeakMap.prototype.delete = function(key) {\n  return this.items.delete(key);\n};\n\n/**\n * Convenience known methods.\n */\nDefaultWeakMap.prototype.inspect = function() {\n  return this.items;\n};\n\nif (typeof Symbol !== 'undefined')\n  DefaultWeakMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = DefaultWeakMap.prototype.inspect;\n\n/**\n * Exporting.\n */\nmodule.exports = DefaultWeakMap;\n"]},"metadata":{},"sourceType":"script"}