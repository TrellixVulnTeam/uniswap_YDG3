{"ast":null,"code":"import { CurrencyAmount, Token, TradeType } from '@uniswap/sdk-core';\nimport { AlphaRouter } from '@uniswap/smart-order-router';\nimport JSBI from 'jsbi';\nimport { transformSwapRouteToGetQuoteResult } from 'utils/transformSwapRouteToGetQuoteResult';\nimport { buildDependencies } from './dependencies';\nconst routerParamsByChain = buildDependencies();\nexport async function getQuote({\n  type,\n  chainId,\n  tokenIn,\n  tokenOut,\n  amount: amountRaw\n}, alphaRouterConfig) {\n  const params = routerParamsByChain[chainId];\n\n  if (!params) {\n    throw new Error('Router dependencies not initialized.');\n  }\n\n  const router = new AlphaRouter(params);\n  const currencyIn = new Token(tokenIn.chainId, tokenIn.address, tokenIn.decimals, tokenIn.symbol);\n  const currencyOut = new Token(tokenOut.chainId, tokenOut.address, tokenOut.decimals, tokenOut.symbol);\n  const baseCurrency = type === 'exactIn' ? currencyIn : currencyOut;\n  const quoteCurrency = type === 'exactIn' ? currencyOut : currencyIn;\n  const amount = CurrencyAmount.fromRawAmount(baseCurrency, JSBI.BigInt(amountRaw));\n  const swapRoute = await router.route(amount, quoteCurrency, type === 'exactIn' ? TradeType.EXACT_INPUT : TradeType.EXACT_OUTPUT,\n  /*swapConfig=*/\n  undefined, alphaRouterConfig);\n  if (!swapRoute) throw new Error('Failed to generate client side quote');\n  return {\n    data: transformSwapRouteToGetQuoteResult(type, amount, swapRoute)\n  };\n}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/state/routing/clientSideSmartOrderRouter/index.ts"],"names":["CurrencyAmount","Token","TradeType","AlphaRouter","JSBI","transformSwapRouteToGetQuoteResult","buildDependencies","routerParamsByChain","getQuote","type","chainId","tokenIn","tokenOut","amount","amountRaw","alphaRouterConfig","params","Error","router","currencyIn","address","decimals","symbol","currencyOut","baseCurrency","quoteCurrency","fromRawAmount","BigInt","swapRoute","route","EXACT_INPUT","EXACT_OUTPUT","undefined","data"],"mappings":"AAAA,SAAoBA,cAApB,EAAoCC,KAApC,EAA2CC,SAA3C,QAA4D,mBAA5D;AACA,SAASC,WAAT,QAAwD,6BAAxD;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,SAASC,kCAAT,QAAmD,0CAAnD;AAEA,SAASC,iBAAT,QAAkC,gBAAlC;AAEA,MAAMC,mBAAmB,GAAGD,iBAAiB,EAA7C;AAEA,OAAO,eAAeE,QAAf,CACL;AACEC,EAAAA,IADF;AAEEC,EAAAA,OAFF;AAGEC,EAAAA,OAHF;AAIEC,EAAAA,QAJF;AAKEC,EAAAA,MAAM,EAAEC;AALV,CADK,EAcLC,iBAdK,EAe+C;AACpD,QAAMC,MAAM,GAAGT,mBAAmB,CAACG,OAAD,CAAlC;;AACA,MAAI,CAACM,MAAL,EAAa;AACX,UAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAED,QAAMC,MAAM,GAAG,IAAIf,WAAJ,CAAgBa,MAAhB,CAAf;AAEA,QAAMG,UAAU,GAAG,IAAIlB,KAAJ,CAAUU,OAAO,CAACD,OAAlB,EAA2BC,OAAO,CAACS,OAAnC,EAA4CT,OAAO,CAACU,QAApD,EAA8DV,OAAO,CAACW,MAAtE,CAAnB;AACA,QAAMC,WAAW,GAAG,IAAItB,KAAJ,CAAUW,QAAQ,CAACF,OAAnB,EAA4BE,QAAQ,CAACQ,OAArC,EAA8CR,QAAQ,CAACS,QAAvD,EAAiET,QAAQ,CAACU,MAA1E,CAApB;AAEA,QAAME,YAAY,GAAGf,IAAI,KAAK,SAAT,GAAqBU,UAArB,GAAkCI,WAAvD;AACA,QAAME,aAAa,GAAGhB,IAAI,KAAK,SAAT,GAAqBc,WAArB,GAAmCJ,UAAzD;AACA,QAAMN,MAAM,GAAGb,cAAc,CAAC0B,aAAf,CAA6BF,YAA7B,EAA2CpB,IAAI,CAACuB,MAAL,CAAYb,SAAZ,CAA3C,CAAf;AAEA,QAAMc,SAAS,GAAG,MAAMV,MAAM,CAACW,KAAP,CACtBhB,MADsB,EAEtBY,aAFsB,EAGtBhB,IAAI,KAAK,SAAT,GAAqBP,SAAS,CAAC4B,WAA/B,GAA6C5B,SAAS,CAAC6B,YAHjC;AAItB;AAAgBC,EAAAA,SAJM,EAKtBjB,iBALsB,CAAxB;AAQA,MAAI,CAACa,SAAL,EAAgB,MAAM,IAAIX,KAAJ,CAAU,sCAAV,CAAN;AAEhB,SAAO;AAAEgB,IAAAA,IAAI,EAAE5B,kCAAkC,CAACI,IAAD,EAAOI,MAAP,EAAee,SAAf;AAA1C,GAAP;AACD","sourcesContent":["import { BigintIsh, CurrencyAmount, Token, TradeType } from '@uniswap/sdk-core'\nimport { AlphaRouter, AlphaRouterConfig, ChainId } from '@uniswap/smart-order-router'\nimport JSBI from 'jsbi'\nimport { GetQuoteResult } from 'state/routing/types'\nimport { transformSwapRouteToGetQuoteResult } from 'utils/transformSwapRouteToGetQuoteResult'\n\nimport { buildDependencies } from './dependencies'\n\nconst routerParamsByChain = buildDependencies()\n\nexport async function getQuote(\n  {\n    type,\n    chainId,\n    tokenIn,\n    tokenOut,\n    amount: amountRaw,\n  }: {\n    type: 'exactIn' | 'exactOut'\n    chainId: ChainId\n    tokenIn: { address: string; chainId: number; decimals: number; symbol?: string }\n    tokenOut: { address: string; chainId: number; decimals: number; symbol?: string }\n    amount: BigintIsh\n  },\n  alphaRouterConfig: Partial<AlphaRouterConfig>\n): Promise<{ data: GetQuoteResult; error?: unknown }> {\n  const params = routerParamsByChain[chainId]\n  if (!params) {\n    throw new Error('Router dependencies not initialized.')\n  }\n\n  const router = new AlphaRouter(params)\n\n  const currencyIn = new Token(tokenIn.chainId, tokenIn.address, tokenIn.decimals, tokenIn.symbol)\n  const currencyOut = new Token(tokenOut.chainId, tokenOut.address, tokenOut.decimals, tokenOut.symbol)\n\n  const baseCurrency = type === 'exactIn' ? currencyIn : currencyOut\n  const quoteCurrency = type === 'exactIn' ? currencyOut : currencyIn\n  const amount = CurrencyAmount.fromRawAmount(baseCurrency, JSBI.BigInt(amountRaw))\n\n  const swapRoute = await router.route(\n    amount,\n    quoteCurrency,\n    type === 'exactIn' ? TradeType.EXACT_INPUT : TradeType.EXACT_OUTPUT,\n    /*swapConfig=*/ undefined,\n    alphaRouterConfig\n  )\n\n  if (!swapRoute) throw new Error('Failed to generate client side quote')\n\n  return { data: transformSwapRouteToGetQuoteResult(type, amount, swapRoute) }\n}\n"]},"metadata":{},"sourceType":"module"}