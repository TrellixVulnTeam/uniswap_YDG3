{"ast":null,"code":"import _styled from \"styled-components\";\n\nvar _jsxFileName = \"/Users/safahi/Downloads/interface-4.30.1/src/components/LiquidityChartRangeInput/Area.tsx\",\n    _s = $RefreshSig$();\n\nimport { area, curveStepAfter } from 'd3';\nimport React, { useMemo } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Path = _styled.path.withConfig({\n  displayName: \"Area__Path\",\n  componentId: \"sc-112grg1-0\"\n})([\"opacity:0.5;stroke:\", \";fill:\", \";\"], ({\n  fill,\n  theme\n}) => fill !== null && fill !== void 0 ? fill : theme.blue2, ({\n  fill,\n  theme\n}) => fill !== null && fill !== void 0 ? fill : theme.blue2);\n\nexport const Area = ({\n  series,\n  xScale,\n  yScale,\n  xValue,\n  yValue,\n  fill\n}) => {\n  _s();\n\n  return useMemo(() => {\n    var _area$curve$x$y1$y;\n\n    return /*#__PURE__*/_jsxDEV(Path, {\n      fill: fill,\n      d: (_area$curve$x$y1$y = area().curve(curveStepAfter).x(d => xScale(xValue(d))).y1(d => yScale(yValue(d))).y0(yScale(0))(series.filter(d => {\n        const value = xScale(xValue(d));\n        return value > 0 && value <= window.innerWidth;\n      }))) !== null && _area$curve$x$y1$y !== void 0 ? _area$curve$x$y1$y : undefined\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this);\n  }, [fill, series, xScale, xValue, yScale, yValue]);\n};\n\n_s(Area, \"nwk+m61qLgjDVUp4IGV/072DDN4=\");\n\n_c = Area;\n\nvar _c;\n\n$RefreshReg$(_c, \"Area\");","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/components/LiquidityChartRangeInput/Area.tsx"],"names":["area","curveStepAfter","React","useMemo","Path","styled","path","fill","theme","blue2","Area","series","xScale","yScale","xValue","yValue","curve","x","d","y1","y0","filter","value","window","innerWidth","undefined"],"mappings":";;;;;AAAA,SAASA,IAAT,EAAeC,cAAf,QAAkD,IAAlD;AACA,OAAOC,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;;;AAKA,MAAMC,IAAI,GAAGC,OAAM,CAACC,IAAV;AAAA;AAAA;AAAA,2CAEE,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAqBD,IAArB,aAAqBA,IAArB,cAAqBA,IAArB,GAA6BC,KAAK,CAACC,KAFrC,EAGA,CAAC;AAAEF,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAqBD,IAArB,aAAqBA,IAArB,cAAqBA,IAArB,GAA6BC,KAAK,CAACC,KAHnC,CAAV;;AAMA,OAAO,MAAMC,IAAI,GAAG,CAAC;AACnBC,EAAAA,MADmB;AAEnBC,EAAAA,MAFmB;AAGnBC,EAAAA,MAHmB;AAInBC,EAAAA,MAJmB;AAKnBC,EAAAA,MALmB;AAMnBR,EAAAA;AANmB,CAAD;AAAA;;AAAA,SAelBJ,OAAO,CACL;AAAA;;AAAA,wBACE,QAAC,IAAD;AACE,MAAA,IAAI,EAAEI,IADR;AAEE,MAAA,CAAC,wBACCP,IAAI,GACDgB,KADH,CACSf,cADT,EAEGgB,CAFH,CAEMC,CAAD,IAAgBN,MAAM,CAACE,MAAM,CAACI,CAAD,CAAP,CAF3B,EAGGC,EAHH,CAGOD,CAAD,IAAgBL,MAAM,CAACE,MAAM,CAACG,CAAD,CAAP,CAH5B,EAIGE,EAJH,CAIMP,MAAM,CAAC,CAAD,CAJZ,EAKEF,MAAM,CAACU,MAAP,CAAeH,CAAD,IAAO;AACnB,cAAMI,KAAK,GAAGV,MAAM,CAACE,MAAM,CAACI,CAAD,CAAP,CAApB;AACA,eAAOI,KAAK,GAAG,CAAR,IAAaA,KAAK,IAAIC,MAAM,CAACC,UAApC;AACD,OAHD,CALF,CADD,mEAUMC;AAZT;AAAA;AAAA;AAAA;AAAA,YADF;AAAA,GADK,EAkBL,CAAClB,IAAD,EAAOI,MAAP,EAAeC,MAAf,EAAuBE,MAAvB,EAA+BD,MAA/B,EAAuCE,MAAvC,CAlBK,CAfW;AAAA,CAAb;;GAAML,I;;KAAAA,I","sourcesContent":["import { area, curveStepAfter, ScaleLinear } from 'd3'\nimport React, { useMemo } from 'react'\nimport styled from 'styled-components/macro'\n\nimport { ChartEntry } from './types'\n\nconst Path = styled.path<{ fill: string | undefined }>`\n  opacity: 0.5;\n  stroke: ${({ fill, theme }) => fill ?? theme.blue2};\n  fill: ${({ fill, theme }) => fill ?? theme.blue2};\n`\n\nexport const Area = ({\n  series,\n  xScale,\n  yScale,\n  xValue,\n  yValue,\n  fill,\n}: {\n  series: ChartEntry[]\n  xScale: ScaleLinear<number, number>\n  yScale: ScaleLinear<number, number>\n  xValue: (d: ChartEntry) => number\n  yValue: (d: ChartEntry) => number\n  fill?: string | undefined\n}) =>\n  useMemo(\n    () => (\n      <Path\n        fill={fill}\n        d={\n          area()\n            .curve(curveStepAfter)\n            .x((d: unknown) => xScale(xValue(d as ChartEntry)))\n            .y1((d: unknown) => yScale(yValue(d as ChartEntry)))\n            .y0(yScale(0))(\n            series.filter((d) => {\n              const value = xScale(xValue(d))\n              return value > 0 && value <= window.innerWidth\n            }) as Iterable<[number, number]>\n          ) ?? undefined\n        }\n      />\n    ),\n    [fill, series, xScale, xValue, yScale, yValue]\n  )\n"]},"metadata":{},"sourceType":"module"}