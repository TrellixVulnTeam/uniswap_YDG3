{"ast":null,"code":"import { CurrencyAmount, Fraction, Percent } from '@uniswap/sdk-core';\nimport { Pair } from '@uniswap/v2-sdk';\nimport { FeeAmount } from '@uniswap/v3-sdk';\nimport JSBI from 'jsbi';\nimport { ALLOWED_PRICE_IMPACT_HIGH, ALLOWED_PRICE_IMPACT_LOW, ALLOWED_PRICE_IMPACT_MEDIUM, BLOCKED_PRICE_IMPACT_NON_EXPERT, ONE_HUNDRED_PERCENT, ZERO_PERCENT } from '../constants/misc';\nconst THIRTY_BIPS_FEE = new Percent(JSBI.BigInt(30), JSBI.BigInt(10000));\nconst INPUT_FRACTION_AFTER_FEE = ONE_HUNDRED_PERCENT.subtract(THIRTY_BIPS_FEE); // computes realized lp fee as a percent\n\n_c = INPUT_FRACTION_AFTER_FEE;\nexport function computeRealizedLPFeePercent(trade) {\n  let percent; // Since routes are either all v2 or all v3 right now, calculate separately\n\n  if (trade.swaps[0].route.pools instanceof Pair) {\n    // for each hop in our trade, take away the x*y=k price impact from 0.3% fees\n    // e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1-.03))\n    percent = ONE_HUNDRED_PERCENT.subtract(trade.swaps.reduce(currentFee => currentFee.multiply(INPUT_FRACTION_AFTER_FEE), ONE_HUNDRED_PERCENT));\n  } else {\n    percent = ZERO_PERCENT;\n\n    for (const swap of trade.swaps) {\n      const {\n        numerator,\n        denominator\n      } = swap.inputAmount.divide(trade.inputAmount);\n      const overallPercent = new Percent(numerator, denominator);\n      const routeRealizedLPFeePercent = overallPercent.multiply(ONE_HUNDRED_PERCENT.subtract(swap.route.pools.reduce((currentFee, pool) => {\n        const fee = pool instanceof Pair ? // not currently possible given protocol check above, but not fatal\n        FeeAmount.MEDIUM : pool.fee;\n        return currentFee.multiply(ONE_HUNDRED_PERCENT.subtract(new Fraction(fee, 1000000)));\n      }, ONE_HUNDRED_PERCENT)));\n      percent = percent.add(routeRealizedLPFeePercent);\n    }\n  }\n\n  return new Percent(percent.numerator, percent.denominator);\n} // computes price breakdown for the trade\n\nexport function computeRealizedLPFeeAmount(trade) {\n  if (trade) {\n    const realizedLPFee = computeRealizedLPFeePercent(trade); // the amount of the input that accrues to LPs\n\n    return CurrencyAmount.fromRawAmount(trade.inputAmount.currency, trade.inputAmount.multiply(realizedLPFee).quotient);\n  }\n\n  return undefined;\n}\nconst IMPACT_TIERS = [BLOCKED_PRICE_IMPACT_NON_EXPERT, ALLOWED_PRICE_IMPACT_HIGH, ALLOWED_PRICE_IMPACT_MEDIUM, ALLOWED_PRICE_IMPACT_LOW];\nexport function warningSeverity(priceImpact) {\n  if (!priceImpact) return 4;\n  let impact = IMPACT_TIERS.length;\n\n  for (const impactLevel of IMPACT_TIERS) {\n    if (impactLevel.lessThan(priceImpact)) return impact;\n    impact--;\n  }\n\n  return 0;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"INPUT_FRACTION_AFTER_FEE\");","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/utils/prices.ts"],"names":["CurrencyAmount","Fraction","Percent","Pair","FeeAmount","JSBI","ALLOWED_PRICE_IMPACT_HIGH","ALLOWED_PRICE_IMPACT_LOW","ALLOWED_PRICE_IMPACT_MEDIUM","BLOCKED_PRICE_IMPACT_NON_EXPERT","ONE_HUNDRED_PERCENT","ZERO_PERCENT","THIRTY_BIPS_FEE","BigInt","INPUT_FRACTION_AFTER_FEE","subtract","computeRealizedLPFeePercent","trade","percent","swaps","route","pools","reduce","currentFee","multiply","swap","numerator","denominator","inputAmount","divide","overallPercent","routeRealizedLPFeePercent","pool","fee","MEDIUM","add","computeRealizedLPFeeAmount","realizedLPFee","fromRawAmount","currency","quotient","undefined","IMPACT_TIERS","warningSeverity","priceImpact","impact","length","impactLevel","lessThan"],"mappings":"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","sourcesContent":["import { Trade } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, Fraction, Percent, TradeType } from '@uniswap/sdk-core'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { FeeAmount } from '@uniswap/v3-sdk'\nimport JSBI from 'jsbi'\n\nimport {\n  ALLOWED_PRICE_IMPACT_HIGH,\n  ALLOWED_PRICE_IMPACT_LOW,\n  ALLOWED_PRICE_IMPACT_MEDIUM,\n  BLOCKED_PRICE_IMPACT_NON_EXPERT,\n  ONE_HUNDRED_PERCENT,\n  ZERO_PERCENT,\n} from '../constants/misc'\n\nconst THIRTY_BIPS_FEE = new Percent(JSBI.BigInt(30), JSBI.BigInt(10000))\nconst INPUT_FRACTION_AFTER_FEE = ONE_HUNDRED_PERCENT.subtract(THIRTY_BIPS_FEE)\n\n// computes realized lp fee as a percent\nexport function computeRealizedLPFeePercent(trade: Trade<Currency, Currency, TradeType>): Percent {\n  let percent: Percent\n\n  // Since routes are either all v2 or all v3 right now, calculate separately\n  if (trade.swaps[0].route.pools instanceof Pair) {\n    // for each hop in our trade, take away the x*y=k price impact from 0.3% fees\n    // e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1-.03))\n    percent = ONE_HUNDRED_PERCENT.subtract(\n      trade.swaps.reduce<Percent>(\n        (currentFee: Percent): Percent => currentFee.multiply(INPUT_FRACTION_AFTER_FEE),\n        ONE_HUNDRED_PERCENT\n      )\n    )\n  } else {\n    percent = ZERO_PERCENT\n    for (const swap of trade.swaps) {\n      const { numerator, denominator } = swap.inputAmount.divide(trade.inputAmount)\n      const overallPercent = new Percent(numerator, denominator)\n\n      const routeRealizedLPFeePercent = overallPercent.multiply(\n        ONE_HUNDRED_PERCENT.subtract(\n          swap.route.pools.reduce<Percent>((currentFee: Percent, pool): Percent => {\n            const fee =\n              pool instanceof Pair\n                ? // not currently possible given protocol check above, but not fatal\n                  FeeAmount.MEDIUM\n                : pool.fee\n            return currentFee.multiply(ONE_HUNDRED_PERCENT.subtract(new Fraction(fee, 1_000_000)))\n          }, ONE_HUNDRED_PERCENT)\n        )\n      )\n\n      percent = percent.add(routeRealizedLPFeePercent)\n    }\n  }\n\n  return new Percent(percent.numerator, percent.denominator)\n}\n\n// computes price breakdown for the trade\nexport function computeRealizedLPFeeAmount(\n  trade?: Trade<Currency, Currency, TradeType> | null\n): CurrencyAmount<Currency> | undefined {\n  if (trade) {\n    const realizedLPFee = computeRealizedLPFeePercent(trade)\n\n    // the amount of the input that accrues to LPs\n    return CurrencyAmount.fromRawAmount(trade.inputAmount.currency, trade.inputAmount.multiply(realizedLPFee).quotient)\n  }\n\n  return undefined\n}\n\nconst IMPACT_TIERS = [\n  BLOCKED_PRICE_IMPACT_NON_EXPERT,\n  ALLOWED_PRICE_IMPACT_HIGH,\n  ALLOWED_PRICE_IMPACT_MEDIUM,\n  ALLOWED_PRICE_IMPACT_LOW,\n]\n\ntype WarningSeverity = 0 | 1 | 2 | 3 | 4\nexport function warningSeverity(priceImpact: Percent | undefined): WarningSeverity {\n  if (!priceImpact) return 4\n  let impact: WarningSeverity = IMPACT_TIERS.length as WarningSeverity\n  for (const impactLevel of IMPACT_TIERS) {\n    if (impactLevel.lessThan(priceImpact)) return impact\n    impact--\n  }\n  return 0\n}\n"]},"metadata":{},"sourceType":"module"}