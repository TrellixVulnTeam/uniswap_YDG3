{"ast":null,"code":"import { log } from '../../util/log';\n/**\n * Provider for getting V3 pools, with functionality for caching the results.\n *\n * @export\n * @class CachingV3PoolProvider\n */\n\nexport class CachingV3PoolProvider {\n  /**\n   * Creates an instance of CachingV3PoolProvider.\n   * @param chainId The chain id to use.\n   * @param poolProvider The provider to use to get the pools when not in the cache.\n   * @param cache Cache instance to hold cached pools.\n   */\n  constructor(chainId, poolProvider, cache) {\n    this.chainId = chainId;\n    this.poolProvider = poolProvider;\n    this.cache = cache;\n\n    this.POOL_KEY = (chainId, address) => `pool-${chainId}-${address}`;\n  }\n\n  async getPools(tokenPairs, providerConfig) {\n    const poolAddressSet = new Set();\n    const poolsToGetTokenPairs = [];\n    const poolsToGetAddresses = [];\n    const poolAddressToPool = {};\n\n    for (const [tokenA, tokenB, feeAmount] of tokenPairs) {\n      const {\n        poolAddress,\n        token0,\n        token1\n      } = this.getPoolAddress(tokenA, tokenB, feeAmount);\n\n      if (poolAddressSet.has(poolAddress)) {\n        continue;\n      }\n\n      poolAddressSet.add(poolAddress);\n      const cachedPool = await this.cache.get(this.POOL_KEY(this.chainId, poolAddress));\n\n      if (cachedPool) {\n        poolAddressToPool[poolAddress] = cachedPool;\n        continue;\n      }\n\n      poolsToGetTokenPairs.push([token0, token1, feeAmount]);\n      poolsToGetAddresses.push(poolAddress);\n    }\n\n    log.info(`Found ${Object.keys(poolAddressToPool).length} pools already in local cache. About to get liquidity and slot0s for ${poolsToGetTokenPairs.length} pools.`);\n\n    if (poolsToGetAddresses.length > 0) {\n      const poolAccessor = await this.poolProvider.getPools(poolsToGetTokenPairs, providerConfig);\n\n      for (const address of poolsToGetAddresses) {\n        const pool = poolAccessor.getPoolByAddress(address);\n\n        if (pool) {\n          poolAddressToPool[address] = pool;\n          await this.cache.set(this.POOL_KEY(this.chainId, address), pool);\n        }\n      }\n    }\n\n    return {\n      getPool: (tokenA, tokenB, feeAmount) => {\n        const {\n          poolAddress\n        } = this.getPoolAddress(tokenA, tokenB, feeAmount);\n        return poolAddressToPool[poolAddress];\n      },\n      getPoolByAddress: address => poolAddressToPool[address],\n      getAllPools: () => Object.values(poolAddressToPool)\n    };\n  }\n\n  getPoolAddress(tokenA, tokenB, feeAmount) {\n    return this.poolProvider.getPoolAddress(tokenA, tokenB, feeAmount);\n  }\n\n}","map":{"version":3,"sources":["../../../../../src/providers/v3/caching-pool-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { log } from '../../util/log';\n/**\n * Provider for getting V3 pools, with functionality for caching the results.\n *\n * @export\n * @class CachingV3PoolProvider\n */\nexport class CachingV3PoolProvider {\n    /**\n     * Creates an instance of CachingV3PoolProvider.\n     * @param chainId The chain id to use.\n     * @param poolProvider The provider to use to get the pools when not in the cache.\n     * @param cache Cache instance to hold cached pools.\n     */\n    constructor(chainId, poolProvider, cache) {\n        this.chainId = chainId;\n        this.poolProvider = poolProvider;\n        this.cache = cache;\n        this.POOL_KEY = (chainId, address) => `pool-${chainId}-${address}`;\n    }\n    async getPools(tokenPairs, providerConfig) {\n        const poolAddressSet = new Set();\n        const poolsToGetTokenPairs = [];\n        const poolsToGetAddresses = [];\n        const poolAddressToPool = {};\n        for (const [tokenA, tokenB, feeAmount] of tokenPairs) {\n            const { poolAddress, token0, token1 } = this.getPoolAddress(tokenA, tokenB, feeAmount);\n            if (poolAddressSet.has(poolAddress)) {\n                continue;\n            }\n            poolAddressSet.add(poolAddress);\n            const cachedPool = await this.cache.get(this.POOL_KEY(this.chainId, poolAddress));\n            if (cachedPool) {\n                poolAddressToPool[poolAddress] = cachedPool;\n                continue;\n            }\n            poolsToGetTokenPairs.push([token0, token1, feeAmount]);\n            poolsToGetAddresses.push(poolAddress);\n        }\n        log.info(`Found ${Object.keys(poolAddressToPool).length} pools already in local cache. About to get liquidity and slot0s for ${poolsToGetTokenPairs.length} pools.`);\n        if (poolsToGetAddresses.length > 0) {\n            const poolAccessor = await this.poolProvider.getPools(poolsToGetTokenPairs, providerConfig);\n            for (const address of poolsToGetAddresses) {\n                const pool = poolAccessor.getPoolByAddress(address);\n                if (pool) {\n                    poolAddressToPool[address] = pool;\n                    await this.cache.set(this.POOL_KEY(this.chainId, address), pool);\n                }\n            }\n        }\n        return {\n            getPool: (tokenA, tokenB, feeAmount) => {\n                const { poolAddress } = this.getPoolAddress(tokenA, tokenB, feeAmount);\n                return poolAddressToPool[poolAddress];\n            },\n            getPoolByAddress: (address) => poolAddressToPool[address],\n            getAllPools: () => Object.values(poolAddressToPool),\n        };\n    }\n    getPoolAddress(tokenA, tokenB, feeAmount) {\n        return this.poolProvider.getPoolAddress(tokenA, tokenB, feeAmount);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGluZy1wb29sLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3Byb3ZpZGVycy92My9jYWNoaW5nLXBvb2wtcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBS3JDOzs7OztHQUtHO0FBQ0gsTUFBTSxPQUFPLHFCQUFxQjtJQUloQzs7Ozs7T0FLRztJQUNILFlBQ1ksT0FBZ0IsRUFDaEIsWUFBNkIsRUFDL0IsS0FBbUI7UUFGakIsWUFBTyxHQUFQLE9BQU8sQ0FBUztRQUNoQixpQkFBWSxHQUFaLFlBQVksQ0FBaUI7UUFDL0IsVUFBSyxHQUFMLEtBQUssQ0FBYztRQVpyQixhQUFRLEdBQUcsQ0FBQyxPQUFnQixFQUFFLE9BQWUsRUFBRSxFQUFFLENBQ3ZELFFBQVEsT0FBTyxJQUFJLE9BQU8sRUFBRSxDQUFDO0lBWTVCLENBQUM7SUFFRyxLQUFLLENBQUMsUUFBUSxDQUNuQixVQUF1QyxFQUN2QyxjQUErQjtRQUUvQixNQUFNLGNBQWMsR0FBZ0IsSUFBSSxHQUFHLEVBQVUsQ0FBQztRQUN0RCxNQUFNLG9CQUFvQixHQUFxQyxFQUFFLENBQUM7UUFDbEUsTUFBTSxtQkFBbUIsR0FBYSxFQUFFLENBQUM7UUFDekMsTUFBTSxpQkFBaUIsR0FBb0MsRUFBRSxDQUFDO1FBRTlELEtBQUssTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDLElBQUksVUFBVSxFQUFFO1lBQ3BELE1BQU0sRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQ3pELE1BQU0sRUFDTixNQUFNLEVBQ04sU0FBUyxDQUNWLENBQUM7WUFFRixJQUFJLGNBQWMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUU7Z0JBQ25DLFNBQVM7YUFDVjtZQUVELGNBQWMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7WUFFaEMsTUFBTSxVQUFVLEdBQUcsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FDckMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUN6QyxDQUFDO1lBQ0YsSUFBSSxVQUFVLEVBQUU7Z0JBQ2QsaUJBQWlCLENBQUMsV0FBVyxDQUFDLEdBQUcsVUFBVSxDQUFDO2dCQUM1QyxTQUFTO2FBQ1Y7WUFFRCxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7WUFDdkQsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ3ZDO1FBRUQsR0FBRyxDQUFDLElBQUksQ0FDTixTQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxNQUNqQyx3RUFDRSxvQkFBb0IsQ0FBQyxNQUN2QixTQUFTLENBQ1YsQ0FBQztRQUVGLElBQUksbUJBQW1CLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNsQyxNQUFNLFlBQVksR0FBRyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUNuRCxvQkFBb0IsRUFDcEIsY0FBYyxDQUNmLENBQUM7WUFDRixLQUFLLE1BQU0sT0FBTyxJQUFJLG1CQUFtQixFQUFFO2dCQUN6QyxNQUFNLElBQUksR0FBRyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ3BELElBQUksSUFBSSxFQUFFO29CQUNSLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQztvQkFDbEMsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7aUJBQ2xFO2FBQ0Y7U0FDRjtRQUVELE9BQU87WUFDTCxPQUFPLEVBQUUsQ0FDUCxNQUFhLEVBQ2IsTUFBYSxFQUNiLFNBQW9CLEVBQ0YsRUFBRTtnQkFDcEIsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztnQkFDdkUsT0FBTyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUN4QyxDQUFDO1lBQ0QsZ0JBQWdCLEVBQUUsQ0FBQyxPQUFlLEVBQW9CLEVBQUUsQ0FDdEQsaUJBQWlCLENBQUMsT0FBTyxDQUFDO1lBQzVCLFdBQVcsRUFBRSxHQUFXLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDO1NBQzVELENBQUM7SUFDSixDQUFDO0lBRU0sY0FBYyxDQUNuQixNQUFhLEVBQ2IsTUFBYSxFQUNiLFNBQW9CO1FBRXBCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNyRSxDQUFDO0NBQ0YifQ=="]},"metadata":{},"sourceType":"module"}