{"ast":null,"code":"import _styled from \"styled-components\";\n\nvar _jsxFileName = \"/Users/safahi/Downloads/interface-4.30.1/src/components/CurrencyLogo/index.tsx\",\n    _s = $RefreshSig$();\n\nimport EthereumLogo from 'assets/images/ethereum-logo.png';\nimport MaticLogo from \"assets/svg/matic-token-icon.svg\";\nimport { SupportedChainId } from 'constants/chains';\nimport useHttpLocations from 'hooks/useHttpLocations';\nimport React, { useMemo } from 'react';\nimport { WrappedTokenInfo } from 'state/lists/wrappedTokenInfo';\nimport Logo from '../Logo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction chainIdToNetworkName(networkId) {\n  switch (networkId) {\n    case SupportedChainId.MAINNET:\n      return 'ethereum';\n\n    case SupportedChainId.ARBITRUM_ONE:\n      return 'arbitrum';\n\n    case SupportedChainId.OPTIMISM:\n      return 'optimism';\n\n    default:\n      return 'ethereum';\n  }\n}\n\nexport const getTokenLogoURL = (address, chainId = SupportedChainId.MAINNET) => {\n  const networkName = chainIdToNetworkName(chainId);\n  const networksWithUrls = [SupportedChainId.ARBITRUM_ONE, SupportedChainId.MAINNET, SupportedChainId.OPTIMISM];\n\n  if (networksWithUrls.includes(chainId)) {\n    return `https://raw.githubusercontent.com/Uniswap/assets/master/blockchains/${networkName}/assets/${address}/logo.png`;\n  }\n};\n\nconst StyledNativeLogo = _styled.img.withConfig({\n  displayName: \"CurrencyLogo__StyledNativeLogo\",\n  componentId: \"sc-1fvnadz-0\"\n})([\"width:\", \";height:\", \";background:radial-gradient(white 50%,#ffffff00 calc(75% + 1px),#ffffff00 100%);border-radius:50%;-mox-box-shadow:0 0 1px white;-webkit-box-shadow:0 0 1px white;box-shadow:0 0 1px white;border:0px solid rgba(255,255,255,0);\"], ({\n  size\n}) => size, ({\n  size\n}) => size);\n\nconst StyledLogo = _styled(Logo).withConfig({\n  displayName: \"CurrencyLogo__StyledLogo\",\n  componentId: \"sc-1fvnadz-1\"\n})([\"width:\", \";height:\", \";background:radial-gradient(white 50%,#ffffff00 calc(75% + 1px),#ffffff00 100%);border-radius:50%;-mox-box-shadow:0 0 1px black;-webkit-box-shadow:0 0 1px black;box-shadow:0 0 1px black;border:0px solid rgba(255,255,255,0);\"], ({\n  size\n}) => size, ({\n  size\n}) => size);\n\nexport default function CurrencyLogo({\n  currency,\n  size = '24px',\n  style,\n  ...rest\n}) {\n  _s();\n\n  var _currency$symbol;\n\n  const uriLocations = useHttpLocations(currency instanceof WrappedTokenInfo ? currency.logoURI : undefined);\n  const srcs = useMemo(() => {\n    if (!currency || currency.isNative) return [];\n\n    if (currency.isToken) {\n      const defaultUrls = [];\n      const url = getTokenLogoURL(currency.address, currency.chainId);\n\n      if (url) {\n        defaultUrls.push(url);\n      }\n\n      if (currency instanceof WrappedTokenInfo) {\n        return [...uriLocations, ...defaultUrls];\n      }\n\n      return defaultUrls;\n    }\n\n    return [];\n  }, [currency, uriLocations]);\n\n  if (currency === null || currency === void 0 ? void 0 : currency.isNative) {\n    let nativeLogoUrl;\n\n    switch (currency.chainId) {\n      case SupportedChainId.POLYGON_MUMBAI:\n      case SupportedChainId.POLYGON:\n        nativeLogoUrl = MaticLogo;\n        break;\n\n      default:\n        nativeLogoUrl = EthereumLogo;\n        break;\n    }\n\n    return /*#__PURE__*/_jsxDEV(StyledNativeLogo, {\n      src: nativeLogoUrl,\n      alt: \"ethereum logo\",\n      size: size,\n      style: style,\n      ...rest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(StyledLogo, {\n    size: size,\n    srcs: srcs,\n    alt: `${(_currency$symbol = currency === null || currency === void 0 ? void 0 : currency.symbol) !== null && _currency$symbol !== void 0 ? _currency$symbol : 'token'} logo`,\n    style: style,\n    ...rest\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 10\n  }, this);\n}\n\n_s(CurrencyLogo, \"jo2gP9fsIv3AxI3dA7ElsR2yU5g=\", false, function () {\n  return [useHttpLocations];\n});\n\n_c = CurrencyLogo;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrencyLogo\");","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/components/CurrencyLogo/index.tsx"],"names":["EthereumLogo","SupportedChainId","useHttpLocations","React","useMemo","WrappedTokenInfo","Logo","chainIdToNetworkName","networkId","MAINNET","ARBITRUM_ONE","OPTIMISM","getTokenLogoURL","address","chainId","networkName","networksWithUrls","includes","StyledNativeLogo","styled","img","size","StyledLogo","CurrencyLogo","currency","style","rest","uriLocations","logoURI","undefined","srcs","isNative","isToken","defaultUrls","url","push","nativeLogoUrl","POLYGON_MUMBAI","POLYGON","MaticLogo","symbol"],"mappings":"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","sourcesContent":["import { Currency } from '@uniswap/sdk-core'\nimport EthereumLogo from 'assets/images/ethereum-logo.png'\nimport MaticLogo from 'assets/svg/matic-token-icon.svg'\nimport { SupportedChainId } from 'constants/chains'\nimport useHttpLocations from 'hooks/useHttpLocations'\nimport React, { useMemo } from 'react'\nimport { WrappedTokenInfo } from 'state/lists/wrappedTokenInfo'\nimport styled from 'styled-components/macro'\n\nimport Logo from '../Logo'\n\ntype Network = 'ethereum' | 'arbitrum' | 'optimism'\n\nfunction chainIdToNetworkName(networkId: SupportedChainId): Network {\n  switch (networkId) {\n    case SupportedChainId.MAINNET:\n      return 'ethereum'\n    case SupportedChainId.ARBITRUM_ONE:\n      return 'arbitrum'\n    case SupportedChainId.OPTIMISM:\n      return 'optimism'\n    default:\n      return 'ethereum'\n  }\n}\n\nexport const getTokenLogoURL = (\n  address: string,\n  chainId: SupportedChainId = SupportedChainId.MAINNET\n): string | void => {\n  const networkName = chainIdToNetworkName(chainId)\n  const networksWithUrls = [SupportedChainId.ARBITRUM_ONE, SupportedChainId.MAINNET, SupportedChainId.OPTIMISM]\n  if (networksWithUrls.includes(chainId)) {\n    return `https://raw.githubusercontent.com/Uniswap/assets/master/blockchains/${networkName}/assets/${address}/logo.png`\n  }\n}\n\nconst StyledNativeLogo = styled.img<{ size: string }>`\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n  background: radial-gradient(white 50%, #ffffff00 calc(75% + 1px), #ffffff00 100%);\n\n  border-radius: 50%;\n  -mox-box-shadow: 0 0 1px white;\n  -webkit-box-shadow: 0 0 1px white;\n  box-shadow: 0 0 1px white;\n  border: 0px solid rgba(255, 255, 255, 0);\n`\n\nconst StyledLogo = styled(Logo)<{ size: string }>`\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n  background: radial-gradient(white 50%, #ffffff00 calc(75% + 1px), #ffffff00 100%);\n  border-radius: 50%;\n  -mox-box-shadow: 0 0 1px black;\n  -webkit-box-shadow: 0 0 1px black;\n  box-shadow: 0 0 1px black;\n  border: 0px solid rgba(255, 255, 255, 0);\n`\n\nexport default function CurrencyLogo({\n  currency,\n  size = '24px',\n  style,\n  ...rest\n}: {\n  currency?: Currency | null\n  size?: string\n  style?: React.CSSProperties\n}) {\n  const uriLocations = useHttpLocations(currency instanceof WrappedTokenInfo ? currency.logoURI : undefined)\n\n  const srcs: string[] = useMemo(() => {\n    if (!currency || currency.isNative) return []\n\n    if (currency.isToken) {\n      const defaultUrls = []\n      const url = getTokenLogoURL(currency.address, currency.chainId)\n      if (url) {\n        defaultUrls.push(url)\n      }\n      if (currency instanceof WrappedTokenInfo) {\n        return [...uriLocations, ...defaultUrls]\n      }\n      return defaultUrls\n    }\n    return []\n  }, [currency, uriLocations])\n\n  if (currency?.isNative) {\n    let nativeLogoUrl: string\n    switch (currency.chainId) {\n      case SupportedChainId.POLYGON_MUMBAI:\n      case SupportedChainId.POLYGON:\n        nativeLogoUrl = MaticLogo\n        break\n      default:\n        nativeLogoUrl = EthereumLogo\n        break\n    }\n    return <StyledNativeLogo src={nativeLogoUrl} alt=\"ethereum logo\" size={size} style={style} {...rest} />\n  }\n\n  return <StyledLogo size={size} srcs={srcs} alt={`${currency?.symbol ?? 'token'} logo`} style={style} {...rest} />\n}\n"]},"metadata":{},"sourceType":"module"}