{"ast":null,"code":"import _regeneratorRuntime from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { BigNumber } from 'ethers';\nimport _ from 'lodash';\nimport { log } from '../util/log';\nimport { IGasPriceProvider } from './gas-price-provider'; // We get the Xth percentile of priority fees for transactions successfully included in previous blocks.\n\nvar DEFAULT_PRIORITY_FEE_PERCENTILE = 50; // Infura docs say only past 4 blocks guaranteed to be available: https://infura.io/docs/ethereum#operation/eth_feeHistory\n\nvar DEFAULT_BLOCKS_TO_LOOK_BACK = 4;\n/**\n * Computes a gas estimate using on-chain data from the eth_feeHistory RPC endpoint.\n *\n * Takes the average priority fee from the past `blocksToConsider` blocks, and adds it\n * to the current base fee.\n *\n * @export\n * @class EIP1559GasPriceProvider\n */\n\nexport var EIP1559GasPriceProvider = /*#__PURE__*/function (_IGasPriceProvider) {\n  _inherits(EIP1559GasPriceProvider, _IGasPriceProvider);\n\n  var _super = _createSuper(EIP1559GasPriceProvider);\n\n  function EIP1559GasPriceProvider(provider) {\n    var _this;\n\n    var priorityFeePercentile = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_PRIORITY_FEE_PERCENTILE;\n    var blocksToConsider = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_BLOCKS_TO_LOOK_BACK;\n\n    _classCallCheck(this, EIP1559GasPriceProvider);\n\n    _this = _super.call(this);\n    _this.provider = provider;\n    _this.priorityFeePercentile = priorityFeePercentile;\n    _this.blocksToConsider = blocksToConsider;\n    return _this;\n  }\n\n  _createClass(EIP1559GasPriceProvider, [{\n    key: \"getGasPrice\",\n    value: function () {\n      var _getGasPrice = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var feeHistoryRaw, feeHistory, nextBlockBaseFeePerGas, averagePriorityFeePerGas, gasPriceWei, blockNumber;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.provider.send('eth_feeHistory', [this.blocksToConsider, 'latest', [this.priorityFeePercentile]]);\n\n              case 2:\n                feeHistoryRaw = _context.sent;\n                feeHistory = {\n                  baseFeePerGas: _.map(feeHistoryRaw.baseFeePerGas, function (b) {\n                    return BigNumber.from(b);\n                  }),\n                  gasUsedRatio: feeHistoryRaw.gasUsedRatio,\n                  oldestBlock: BigNumber.from(feeHistoryRaw.oldestBlock),\n                  reward: _.map(feeHistoryRaw.reward, function (b) {\n                    return BigNumber.from(b[0]);\n                  })\n                };\n                nextBlockBaseFeePerGas = feeHistory.baseFeePerGas[feeHistory.baseFeePerGas.length - 1];\n                averagePriorityFeePerGas = _.reduce(feeHistory.reward, function (sum, cur) {\n                  return sum.add(cur);\n                }, BigNumber.from(0)).div(feeHistory.reward.length);\n                log.info({\n                  feeHistory: feeHistory,\n                  feeHistoryReadable: {\n                    baseFeePerGas: _.map(feeHistory.baseFeePerGas, function (f) {\n                      return f.toString();\n                    }),\n                    oldestBlock: feeHistory.oldestBlock.toString(),\n                    reward: _.map(feeHistory.reward, function (r) {\n                      return r.toString();\n                    })\n                  },\n                  nextBlockBaseFeePerGas: nextBlockBaseFeePerGas.toString(),\n                  averagePriorityFeePerGas: averagePriorityFeePerGas.toString()\n                }, 'Got fee history from provider and computed gas estimate');\n                gasPriceWei = nextBlockBaseFeePerGas.add(averagePriorityFeePerGas);\n                blockNumber = feeHistory.oldestBlock.add(this.blocksToConsider);\n                log.info(\"Estimated gas price in wei: \".concat(gasPriceWei, \" as of block \").concat(blockNumber.toString()));\n                return _context.abrupt(\"return\", {\n                  gasPriceWei: gasPriceWei\n                });\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getGasPrice() {\n        return _getGasPrice.apply(this, arguments);\n      }\n\n      return getGasPrice;\n    }()\n  }]);\n\n  return EIP1559GasPriceProvider;\n}(IGasPriceProvider);","map":{"version":3,"sources":["../../../../src/providers/eip-1559-gas-price-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { BigNumber } from 'ethers';\nimport _ from 'lodash';\nimport { log } from '../util/log';\nimport { IGasPriceProvider } from './gas-price-provider';\n// We get the Xth percentile of priority fees for transactions successfully included in previous blocks.\nconst DEFAULT_PRIORITY_FEE_PERCENTILE = 50;\n// Infura docs say only past 4 blocks guaranteed to be available: https://infura.io/docs/ethereum#operation/eth_feeHistory\nconst DEFAULT_BLOCKS_TO_LOOK_BACK = 4;\n/**\n * Computes a gas estimate using on-chain data from the eth_feeHistory RPC endpoint.\n *\n * Takes the average priority fee from the past `blocksToConsider` blocks, and adds it\n * to the current base fee.\n *\n * @export\n * @class EIP1559GasPriceProvider\n */\nexport class EIP1559GasPriceProvider extends IGasPriceProvider {\n    constructor(provider, priorityFeePercentile = DEFAULT_PRIORITY_FEE_PERCENTILE, blocksToConsider = DEFAULT_BLOCKS_TO_LOOK_BACK) {\n        super();\n        this.provider = provider;\n        this.priorityFeePercentile = priorityFeePercentile;\n        this.blocksToConsider = blocksToConsider;\n    }\n    async getGasPrice() {\n        const feeHistoryRaw = (await this.provider.send('eth_feeHistory', [\n            this.blocksToConsider,\n            'latest',\n            [this.priorityFeePercentile],\n        ]));\n        const feeHistory = {\n            baseFeePerGas: _.map(feeHistoryRaw.baseFeePerGas, (b) => BigNumber.from(b)),\n            gasUsedRatio: feeHistoryRaw.gasUsedRatio,\n            oldestBlock: BigNumber.from(feeHistoryRaw.oldestBlock),\n            reward: _.map(feeHistoryRaw.reward, (b) => BigNumber.from(b[0])),\n        };\n        const nextBlockBaseFeePerGas = feeHistory.baseFeePerGas[feeHistory.baseFeePerGas.length - 1];\n        const averagePriorityFeePerGas = _.reduce(feeHistory.reward, (sum, cur) => sum.add(cur), BigNumber.from(0)).div(feeHistory.reward.length);\n        log.info({\n            feeHistory,\n            feeHistoryReadable: {\n                baseFeePerGas: _.map(feeHistory.baseFeePerGas, (f) => f.toString()),\n                oldestBlock: feeHistory.oldestBlock.toString(),\n                reward: _.map(feeHistory.reward, (r) => r.toString()),\n            },\n            nextBlockBaseFeePerGas: nextBlockBaseFeePerGas.toString(),\n            averagePriorityFeePerGas: averagePriorityFeePerGas.toString(),\n        }, 'Got fee history from provider and computed gas estimate');\n        const gasPriceWei = nextBlockBaseFeePerGas.add(averagePriorityFeePerGas);\n        const blockNumber = feeHistory.oldestBlock.add(this.blocksToConsider);\n        log.info(`Estimated gas price in wei: ${gasPriceWei} as of block ${blockNumber.toString()}`);\n        return { gasPriceWei: gasPriceWei };\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWlwLTE1NTktZ2FzLXByaWNlLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3Byb3ZpZGVycy9laXAtMTU1OS1nYXMtcHJpY2UtcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBYSxNQUFNLFFBQVEsQ0FBQztBQUM5QyxPQUFPLENBQUMsTUFBTSxRQUFRLENBQUM7QUFDdkIsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNsQyxPQUFPLEVBQVksaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQWdCbkUsd0dBQXdHO0FBQ3hHLE1BQU0sK0JBQStCLEdBQUcsRUFBRSxDQUFDO0FBQzNDLDBIQUEwSDtBQUMxSCxNQUFNLDJCQUEyQixHQUFHLENBQUMsQ0FBQztBQUV0Qzs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sT0FBTyx1QkFBd0IsU0FBUSxpQkFBaUI7SUFDNUQsWUFDWSxRQUFtQyxFQUNyQyx3QkFBZ0MsK0JBQStCLEVBQy9ELG1CQUEyQiwyQkFBMkI7UUFFOUQsS0FBSyxFQUFFLENBQUM7UUFKRSxhQUFRLEdBQVIsUUFBUSxDQUEyQjtRQUNyQywwQkFBcUIsR0FBckIscUJBQXFCLENBQTBDO1FBQy9ELHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBc0M7SUFHaEUsQ0FBQztJQUVNLEtBQUssQ0FBQyxXQUFXO1FBQ3RCLE1BQU0sYUFBYSxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUNoRSxJQUFJLENBQUMsZ0JBQWdCO1lBQ3JCLFFBQVE7WUFDUixDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQztTQUM3QixDQUFDLENBQTBCLENBQUM7UUFFN0IsTUFBTSxVQUFVLEdBQXVCO1lBQ3JDLGFBQWEsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUN0RCxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUNsQjtZQUNELFlBQVksRUFBRSxhQUFhLENBQUMsWUFBWTtZQUN4QyxXQUFXLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO1lBQ3RELE1BQU0sRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDakUsQ0FBQztRQUVGLE1BQU0sc0JBQXNCLEdBQzFCLFVBQVUsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFFLENBQUM7UUFFakUsTUFBTSx3QkFBd0IsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUN2QyxVQUFVLENBQUMsTUFBTSxFQUNqQixDQUFDLEdBQWMsRUFBRSxHQUFjLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQ2hELFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQ2xCLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFaEMsR0FBRyxDQUFDLElBQUksQ0FDTjtZQUNFLFVBQVU7WUFDVixrQkFBa0IsRUFBRTtnQkFDbEIsYUFBYSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUNuRSxXQUFXLEVBQUUsVUFBVSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUU7Z0JBQzlDLE1BQU0sRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQzthQUN0RDtZQUNELHNCQUFzQixFQUFFLHNCQUFzQixDQUFDLFFBQVEsRUFBRTtZQUN6RCx3QkFBd0IsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLEVBQUU7U0FDOUQsRUFDRCx5REFBeUQsQ0FDMUQsQ0FBQztRQUVGLE1BQU0sV0FBVyxHQUFHLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBRXpFLE1BQU0sV0FBVyxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBRXRFLEdBQUcsQ0FBQyxJQUFJLENBQ04sK0JBQStCLFdBQVcsZ0JBQWdCLFdBQVcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUNuRixDQUFDO1FBRUYsT0FBTyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsQ0FBQztJQUN0QyxDQUFDO0NBQ0YifQ=="]},"metadata":{},"sourceType":"module"}