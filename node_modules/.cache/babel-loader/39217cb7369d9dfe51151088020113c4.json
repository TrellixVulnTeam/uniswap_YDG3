{"ast":null,"code":"import { default as retry } from 'async-retry';\nimport axios from 'axios';\nimport { BigNumber } from 'ethers';\nimport { log } from '../util/log';\nimport { IGasPriceProvider } from './gas-price-provider';\nexport class ETHGasStationInfoProvider extends IGasPriceProvider {\n  constructor(url) {\n    super();\n    this.url = url;\n  }\n\n  async getGasPrice() {\n    log.info(`About to get gas prices from gas station ${this.url}`);\n    const response = await retry(async () => {\n      return axios.get(this.url);\n    }, {\n      retries: 1\n    });\n    const {\n      data: gasPriceResponse,\n      status\n    } = response;\n\n    if (status != 200) {\n      log.error({\n        response\n      }, `Unabled to get gas price from ${this.url}.`);\n      throw new Error(`Unable to get gas price from ${this.url}`);\n    }\n\n    log.info({\n      gasPriceResponse\n    }, 'Gas price response from API. About to parse \"fast\" to big number'); // Gas prices from ethgasstation are in GweiX10.\n\n    const gasPriceWei = BigNumber.from(gasPriceResponse.fast).div(BigNumber.from(10)).mul(BigNumber.from(10).pow(9));\n    log.info(`Gas price in wei: ${gasPriceWei} as of block ${gasPriceResponse.blockNum}`);\n    return {\n      gasPriceWei: gasPriceWei\n    };\n  }\n\n}","map":{"version":3,"sources":["../../../../src/providers/eth-gas-station-info-gas-price-provider.ts"],"names":[],"mappings":"AAAA,SAAS,OAAO,IAAI,KAApB,QAAiC,aAAjC;AACA,OAAO,KAAP,MAAkB,OAAlB;AACA,SAAS,SAAT,QAA0B,QAA1B;AACA,SAAS,GAAT,QAAoB,aAApB;AACA,SAAmB,iBAAnB,QAA4C,sBAA5C;AAiBA,OAAM,MAAO,yBAAP,SAAyC,iBAAzC,CAA0D;AAE9D,EAAA,WAAA,CAAY,GAAZ,EAAuB;AACrB;AACA,SAAK,GAAL,GAAW,GAAX;AACD;;AAEuB,QAAX,WAAW,GAAA;AACtB,IAAA,GAAG,CAAC,IAAJ,CAAS,4CAA4C,KAAK,GAAG,EAA7D;AACA,UAAM,QAAQ,GAAG,MAAM,KAAK,CAC1B,YAAW;AACT,aAAO,KAAK,CAAC,GAAN,CAAiC,KAAK,GAAtC,CAAP;AACD,KAHyB,EAI1B;AAAE,MAAA,OAAO,EAAE;AAAX,KAJ0B,CAA5B;AAOA,UAAM;AAAE,MAAA,IAAI,EAAE,gBAAR;AAA0B,MAAA;AAA1B,QAAqC,QAA3C;;AAEA,QAAI,MAAM,IAAI,GAAd,EAAmB;AACjB,MAAA,GAAG,CAAC,KAAJ,CAAU;AAAE,QAAA;AAAF,OAAV,EAAwB,iCAAiC,KAAK,GAAG,GAAjE;AAEA,YAAM,IAAI,KAAJ,CAAU,gCAAgC,KAAK,GAAG,EAAlD,CAAN;AACD;;AAED,IAAA,GAAG,CAAC,IAAJ,CACE;AAAE,MAAA;AAAF,KADF,EAEE,kEAFF,EAjBsB,CAsBtB;;AACA,UAAM,WAAW,GAAG,SAAS,CAAC,IAAV,CAAe,gBAAgB,CAAC,IAAhC,EACjB,GADiB,CACb,SAAS,CAAC,IAAV,CAAe,EAAf,CADa,EAEjB,GAFiB,CAEb,SAAS,CAAC,IAAV,CAAe,EAAf,EAAmB,GAAnB,CAAuB,CAAvB,CAFa,CAApB;AAIA,IAAA,GAAG,CAAC,IAAJ,CACE,qBAAqB,WAAW,gBAAgB,gBAAgB,CAAC,QAAQ,EAD3E;AAIA,WAAO;AAAE,MAAA,WAAW,EAAE;AAAf,KAAP;AACD;;AAvC6D","sourceRoot":"","sourcesContent":["import { default as retry } from 'async-retry';\nimport axios from 'axios';\nimport { BigNumber } from 'ethers';\nimport { log } from '../util/log';\nimport { IGasPriceProvider } from './gas-price-provider';\nexport class ETHGasStationInfoProvider extends IGasPriceProvider {\n    constructor(url) {\n        super();\n        this.url = url;\n    }\n    async getGasPrice() {\n        log.info(`About to get gas prices from gas station ${this.url}`);\n        const response = await retry(async () => {\n            return axios.get(this.url);\n        }, { retries: 1 });\n        const { data: gasPriceResponse, status } = response;\n        if (status != 200) {\n            log.error({ response }, `Unabled to get gas price from ${this.url}.`);\n            throw new Error(`Unable to get gas price from ${this.url}`);\n        }\n        log.info({ gasPriceResponse }, 'Gas price response from API. About to parse \"fast\" to big number');\n        // Gas prices from ethgasstation are in GweiX10.\n        const gasPriceWei = BigNumber.from(gasPriceResponse.fast)\n            .div(BigNumber.from(10))\n            .mul(BigNumber.from(10).pow(9));\n        log.info(`Gas price in wei: ${gasPriceWei} as of block ${gasPriceResponse.blockNum}`);\n        return { gasPriceWei: gasPriceWei };\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXRoLWdhcy1zdGF0aW9uLWluZm8tZ2FzLXByaWNlLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3Byb3ZpZGVycy9ldGgtZ2FzLXN0YXRpb24taW5mby1nYXMtcHJpY2UtcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sSUFBSSxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDL0MsT0FBTyxLQUFLLE1BQU0sT0FBTyxDQUFDO0FBQzFCLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDbkMsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNsQyxPQUFPLEVBQVksaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQWlCbkUsTUFBTSxPQUFPLHlCQUEwQixTQUFRLGlCQUFpQjtJQUU5RCxZQUFZLEdBQVc7UUFDckIsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztJQUNqQixDQUFDO0lBRU0sS0FBSyxDQUFDLFdBQVc7UUFDdEIsR0FBRyxDQUFDLElBQUksQ0FBQyw0Q0FBNEMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDakUsTUFBTSxRQUFRLEdBQUcsTUFBTSxLQUFLLENBQzFCLEtBQUssSUFBSSxFQUFFO1lBQ1QsT0FBTyxLQUFLLENBQUMsR0FBRyxDQUF3QixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDcEQsQ0FBQyxFQUNELEVBQUUsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUNmLENBQUM7UUFFRixNQUFNLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQztRQUVwRCxJQUFJLE1BQU0sSUFBSSxHQUFHLEVBQUU7WUFDakIsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLGlDQUFpQyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztZQUV0RSxNQUFNLElBQUksS0FBSyxDQUFDLGdDQUFnQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztTQUM3RDtRQUVELEdBQUcsQ0FBQyxJQUFJLENBQ04sRUFBRSxnQkFBZ0IsRUFBRSxFQUNwQixrRUFBa0UsQ0FDbkUsQ0FBQztRQUVGLGdEQUFnRDtRQUNoRCxNQUFNLFdBQVcsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQzthQUN0RCxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUN2QixHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVsQyxHQUFHLENBQUMsSUFBSSxDQUNOLHFCQUFxQixXQUFXLGdCQUFnQixnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsQ0FDNUUsQ0FBQztRQUVGLE9BQU8sRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLENBQUM7SUFDdEMsQ0FBQztDQUNGIn0="]},"metadata":{},"sourceType":"module"}