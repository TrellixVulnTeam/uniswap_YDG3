{"ast":null,"code":"import{createReducer}from'@reduxjs/toolkit';import{updateVersion}from'../global/actions';import{addTransaction,checkedTransaction,clearAllTransactions,finalizeTransaction}from'./actions';var now=function now(){return new Date().getTime();};export var initialState={};export default createReducer(initialState,function(builder){return builder.addCase(updateVersion,function(transactions){// in case there are any transactions in the store with the old format, remove them\nObject.keys(transactions).forEach(function(chainId){var chainTransactions=transactions[chainId];Object.keys(chainTransactions).forEach(function(hash){if(!('info'in chainTransactions[hash])){// clear old transactions that don't have the right format\ndelete chainTransactions[hash];}});});}).addCase(addTransaction,function(transactions,_ref){var _transactions$chainId,_transactions$chainId2;var _ref$payload=_ref.payload,chainId=_ref$payload.chainId,from=_ref$payload.from,hash=_ref$payload.hash,info=_ref$payload.info;if((_transactions$chainId=transactions[chainId])===null||_transactions$chainId===void 0?void 0:_transactions$chainId[hash]){throw Error('Attempted to add existing transaction.');}var txs=(_transactions$chainId2=transactions[chainId])!==null&&_transactions$chainId2!==void 0?_transactions$chainId2:{};txs[hash]={hash:hash,info:info,from:from,addedTime:now()};transactions[chainId]=txs;}).addCase(clearAllTransactions,function(transactions,_ref2){var chainId=_ref2.payload.chainId;if(!transactions[chainId])return;transactions[chainId]={};}).addCase(checkedTransaction,function(transactions,_ref3){var _transactions$chainId3;var _ref3$payload=_ref3.payload,chainId=_ref3$payload.chainId,hash=_ref3$payload.hash,blockNumber=_ref3$payload.blockNumber;var tx=(_transactions$chainId3=transactions[chainId])===null||_transactions$chainId3===void 0?void 0:_transactions$chainId3[hash];if(!tx){return;}if(!tx.lastCheckedBlockNumber){tx.lastCheckedBlockNumber=blockNumber;}else{tx.lastCheckedBlockNumber=Math.max(blockNumber,tx.lastCheckedBlockNumber);}}).addCase(finalizeTransaction,function(transactions,_ref4){var _transactions$chainId4;var _ref4$payload=_ref4.payload,hash=_ref4$payload.hash,chainId=_ref4$payload.chainId,receipt=_ref4$payload.receipt;var tx=(_transactions$chainId4=transactions[chainId])===null||_transactions$chainId4===void 0?void 0:_transactions$chainId4[hash];if(!tx){return;}tx.receipt=receipt;tx.confirmedTime=now();});});","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/state/transactions/reducer.ts"],"names":["createReducer","updateVersion","addTransaction","checkedTransaction","clearAllTransactions","finalizeTransaction","now","Date","getTime","initialState","builder","addCase","transactions","Object","keys","forEach","chainId","chainTransactions","hash","payload","from","info","Error","txs","addedTime","blockNumber","tx","lastCheckedBlockNumber","Math","max","receipt","confirmedTime"],"mappings":"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","sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\n\nimport { updateVersion } from '../global/actions'\nimport {\n  addTransaction,\n  checkedTransaction,\n  clearAllTransactions,\n  finalizeTransaction,\n  SerializableTransactionReceipt,\n  TransactionInfo,\n} from './actions'\n\nconst now = () => new Date().getTime()\n\nexport interface TransactionDetails {\n  hash: string\n  receipt?: SerializableTransactionReceipt\n  lastCheckedBlockNumber?: number\n  addedTime: number\n  confirmedTime?: number\n  from: string\n  info: TransactionInfo\n}\n\nexport interface TransactionState {\n  [chainId: number]: {\n    [txHash: string]: TransactionDetails\n  }\n}\n\nexport const initialState: TransactionState = {}\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(updateVersion, (transactions) => {\n      // in case there are any transactions in the store with the old format, remove them\n      Object.keys(transactions).forEach((chainId) => {\n        const chainTransactions = transactions[chainId as unknown as number]\n        Object.keys(chainTransactions).forEach((hash) => {\n          if (!('info' in chainTransactions[hash])) {\n            // clear old transactions that don't have the right format\n            delete chainTransactions[hash]\n          }\n        })\n      })\n    })\n    .addCase(addTransaction, (transactions, { payload: { chainId, from, hash, info } }) => {\n      if (transactions[chainId]?.[hash]) {\n        throw Error('Attempted to add existing transaction.')\n      }\n      const txs = transactions[chainId] ?? {}\n      txs[hash] = { hash, info, from, addedTime: now() }\n      transactions[chainId] = txs\n    })\n    .addCase(clearAllTransactions, (transactions, { payload: { chainId } }) => {\n      if (!transactions[chainId]) return\n      transactions[chainId] = {}\n    })\n    .addCase(checkedTransaction, (transactions, { payload: { chainId, hash, blockNumber } }) => {\n      const tx = transactions[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      if (!tx.lastCheckedBlockNumber) {\n        tx.lastCheckedBlockNumber = blockNumber\n      } else {\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber)\n      }\n    })\n    .addCase(finalizeTransaction, (transactions, { payload: { hash, chainId, receipt } }) => {\n      const tx = transactions[chainId]?.[hash]\n      if (!tx) {\n        return\n      }\n      tx.receipt = receipt\n      tx.confirmedTime = now()\n    })\n)\n"]},"metadata":{},"sourceType":"module"}