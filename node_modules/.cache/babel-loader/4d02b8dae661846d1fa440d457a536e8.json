{"ast":null,"code":"import { CurrencyAmount } from '@uniswap/sdk-core';\nimport JSBI from 'jsbi';\nconst MIN_NATIVE_CURRENCY_FOR_GAS = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)); // .01 ETH\n\n/**\n * Given some token amount, return the max that can be spent of it\n * @param currencyAmount to return max of\n */\n\nexport function maxAmountSpend(currencyAmount) {\n  if (!currencyAmount) return undefined;\n\n  if (currencyAmount.currency.isNative) {\n    if (JSBI.greaterThan(currencyAmount.quotient, MIN_NATIVE_CURRENCY_FOR_GAS)) {\n      return CurrencyAmount.fromRawAmount(currencyAmount.currency, JSBI.subtract(currencyAmount.quotient, MIN_NATIVE_CURRENCY_FOR_GAS));\n    } else {\n      return CurrencyAmount.fromRawAmount(currencyAmount.currency, JSBI.BigInt(0));\n    }\n  }\n\n  return currencyAmount;\n}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/utils/maxAmountSpend.ts"],"names":["CurrencyAmount","JSBI","MIN_NATIVE_CURRENCY_FOR_GAS","exponentiate","BigInt","maxAmountSpend","currencyAmount","undefined","currency","isNative","greaterThan","quotient","fromRawAmount","subtract"],"mappings":"AAAA,SAAmBA,cAAnB,QAAyC,mBAAzC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,MAAMC,2BAAiC,GAAGD,IAAI,CAACE,YAAL,CAAkBF,IAAI,CAACG,MAAL,CAAY,EAAZ,CAAlB,EAAmCH,IAAI,CAACG,MAAL,CAAY,EAAZ,CAAnC,CAA1C,C,CAA8F;;AAC9F;AACA;AACA;AACA;;AACA,OAAO,SAASC,cAAT,CAAwBC,cAAxB,EAAyG;AAC9G,MAAI,CAACA,cAAL,EAAqB,OAAOC,SAAP;;AACrB,MAAID,cAAc,CAACE,QAAf,CAAwBC,QAA5B,EAAsC;AACpC,QAAIR,IAAI,CAACS,WAAL,CAAiBJ,cAAc,CAACK,QAAhC,EAA0CT,2BAA1C,CAAJ,EAA4E;AAC1E,aAAOF,cAAc,CAACY,aAAf,CACLN,cAAc,CAACE,QADV,EAELP,IAAI,CAACY,QAAL,CAAcP,cAAc,CAACK,QAA7B,EAAuCT,2BAAvC,CAFK,CAAP;AAID,KALD,MAKO;AACL,aAAOF,cAAc,CAACY,aAAf,CAA6BN,cAAc,CAACE,QAA5C,EAAsDP,IAAI,CAACG,MAAL,CAAY,CAAZ,CAAtD,CAAP;AACD;AACF;;AACD,SAAOE,cAAP;AACD","sourcesContent":["import { Currency, CurrencyAmount } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\n\nconst MIN_NATIVE_CURRENCY_FOR_GAS: JSBI = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)) // .01 ETH\n/**\n * Given some token amount, return the max that can be spent of it\n * @param currencyAmount to return max of\n */\nexport function maxAmountSpend(currencyAmount?: CurrencyAmount<Currency>): CurrencyAmount<Currency> | undefined {\n  if (!currencyAmount) return undefined\n  if (currencyAmount.currency.isNative) {\n    if (JSBI.greaterThan(currencyAmount.quotient, MIN_NATIVE_CURRENCY_FOR_GAS)) {\n      return CurrencyAmount.fromRawAmount(\n        currencyAmount.currency,\n        JSBI.subtract(currencyAmount.quotient, MIN_NATIVE_CURRENCY_FOR_GAS)\n      )\n    } else {\n      return CurrencyAmount.fromRawAmount(currencyAmount.currency, JSBI.BigInt(0))\n    }\n  }\n  return currencyAmount\n}\n"]},"metadata":{},"sourceType":"module"}