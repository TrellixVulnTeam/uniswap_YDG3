{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { nanoid } from '@reduxjs/toolkit';\nimport { useCallback } from 'react';\nimport { useAppDispatch } from 'state/hooks';\nimport { getNetworkLibrary } from '../connectors';\nimport { fetchTokenList } from '../state/lists/actions';\nimport getTokenList from '../utils/getTokenList';\nimport resolveENSContentHash from '../utils/resolveENSContentHash';\nimport { useActiveWeb3React } from './web3';\nexport function useFetchListCallback() {\n  _s();\n\n  const {\n    chainId,\n    library\n  } = useActiveWeb3React();\n  const dispatch = useAppDispatch();\n  const ensResolver = useCallback(async ensName => {\n    if (!library || chainId !== 1) {\n      const networkLibrary = getNetworkLibrary();\n      const network = await networkLibrary.getNetwork();\n\n      if (networkLibrary && network.chainId === 1) {\n        return resolveENSContentHash(ensName, networkLibrary);\n      }\n\n      throw new Error('Could not construct mainnet ENS resolver');\n    }\n\n    return resolveENSContentHash(ensName, library);\n  }, [chainId, library]); // note: prevent dispatch if using for list search or unsupported list\n\n  return useCallback(async (listUrl, sendDispatch = true) => {\n    const requestId = nanoid();\n    sendDispatch && dispatch(fetchTokenList.pending({\n      requestId,\n      url: listUrl\n    }));\n    return getTokenList(listUrl, ensResolver).then(tokenList => {\n      sendDispatch && dispatch(fetchTokenList.fulfilled({\n        url: listUrl,\n        tokenList,\n        requestId\n      }));\n      return tokenList;\n    }).catch(error => {\n      console.debug(`Failed to get list at url ${listUrl}`, error);\n      sendDispatch && dispatch(fetchTokenList.rejected({\n        url: listUrl,\n        requestId,\n        errorMessage: error.message\n      }));\n      throw error;\n    });\n  }, [dispatch, ensResolver]);\n}\n\n_s(useFetchListCallback, \"WMCZYzlCyeuYTd1w7Yqk6j8rlGM=\", false, function () {\n  return [useActiveWeb3React, useAppDispatch];\n});","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/hooks/useFetchListCallback.ts"],"names":["nanoid","useCallback","useAppDispatch","getNetworkLibrary","fetchTokenList","getTokenList","resolveENSContentHash","useActiveWeb3React","useFetchListCallback","chainId","library","dispatch","ensResolver","ensName","networkLibrary","network","getNetwork","Error","listUrl","sendDispatch","requestId","pending","url","then","tokenList","fulfilled","catch","error","console","debug","rejected","errorMessage","message"],"mappings":";;AAAA,SAASA,MAAT,QAAuB,kBAAvB;AAEA,SAASC,WAAT,QAA4B,OAA5B;AACA,SAASC,cAAT,QAA+B,aAA/B;AAEA,SAASC,iBAAT,QAAkC,eAAlC;AACA,SAASC,cAAT,QAA+B,wBAA/B;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,qBAAP,MAAkC,gCAAlC;AACA,SAASC,kBAAT,QAAmC,QAAnC;AAEA,OAAO,SAASC,oBAAT,GAAiG;AAAA;;AACtG,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBH,kBAAkB,EAA/C;AACA,QAAMI,QAAQ,GAAGT,cAAc,EAA/B;AAEA,QAAMU,WAAW,GAAGX,WAAW,CAC7B,MAAOY,OAAP,IAA2B;AACzB,QAAI,CAACH,OAAD,IAAYD,OAAO,KAAK,CAA5B,EAA+B;AAC7B,YAAMK,cAAc,GAAGX,iBAAiB,EAAxC;AACA,YAAMY,OAAO,GAAG,MAAMD,cAAc,CAACE,UAAf,EAAtB;;AACA,UAAIF,cAAc,IAAIC,OAAO,CAACN,OAAR,KAAoB,CAA1C,EAA6C;AAC3C,eAAOH,qBAAqB,CAACO,OAAD,EAAUC,cAAV,CAA5B;AACD;;AACD,YAAM,IAAIG,KAAJ,CAAU,0CAAV,CAAN;AACD;;AACD,WAAOX,qBAAqB,CAACO,OAAD,EAAUH,OAAV,CAA5B;AACD,GAX4B,EAY7B,CAACD,OAAD,EAAUC,OAAV,CAZ6B,CAA/B,CAJsG,CAmBtG;;AACA,SAAOT,WAAW,CAChB,OAAOiB,OAAP,EAAwBC,YAAY,GAAG,IAAvC,KAAgD;AAC9C,UAAMC,SAAS,GAAGpB,MAAM,EAAxB;AACAmB,IAAAA,YAAY,IAAIR,QAAQ,CAACP,cAAc,CAACiB,OAAf,CAAuB;AAAED,MAAAA,SAAF;AAAaE,MAAAA,GAAG,EAAEJ;AAAlB,KAAvB,CAAD,CAAxB;AACA,WAAOb,YAAY,CAACa,OAAD,EAAUN,WAAV,CAAZ,CACJW,IADI,CACEC,SAAD,IAAe;AACnBL,MAAAA,YAAY,IAAIR,QAAQ,CAACP,cAAc,CAACqB,SAAf,CAAyB;AAAEH,QAAAA,GAAG,EAAEJ,OAAP;AAAgBM,QAAAA,SAAhB;AAA2BJ,QAAAA;AAA3B,OAAzB,CAAD,CAAxB;AACA,aAAOI,SAAP;AACD,KAJI,EAKJE,KALI,CAKGC,KAAD,IAAW;AAChBC,MAAAA,OAAO,CAACC,KAAR,CAAe,6BAA4BX,OAAQ,EAAnD,EAAsDS,KAAtD;AACAR,MAAAA,YAAY,IAAIR,QAAQ,CAACP,cAAc,CAAC0B,QAAf,CAAwB;AAAER,QAAAA,GAAG,EAAEJ,OAAP;AAAgBE,QAAAA,SAAhB;AAA2BW,QAAAA,YAAY,EAAEJ,KAAK,CAACK;AAA/C,OAAxB,CAAD,CAAxB;AACA,YAAML,KAAN;AACD,KATI,CAAP;AAUD,GAde,EAehB,CAAChB,QAAD,EAAWC,WAAX,CAfgB,CAAlB;AAiBD;;GArCeJ,oB;UACeD,kB,EACZL,c","sourcesContent":["import { nanoid } from '@reduxjs/toolkit'\nimport { TokenList } from '@uniswap/token-lists'\nimport { useCallback } from 'react'\nimport { useAppDispatch } from 'state/hooks'\n\nimport { getNetworkLibrary } from '../connectors'\nimport { fetchTokenList } from '../state/lists/actions'\nimport getTokenList from '../utils/getTokenList'\nimport resolveENSContentHash from '../utils/resolveENSContentHash'\nimport { useActiveWeb3React } from './web3'\n\nexport function useFetchListCallback(): (listUrl: string, sendDispatch?: boolean) => Promise<TokenList> {\n  const { chainId, library } = useActiveWeb3React()\n  const dispatch = useAppDispatch()\n\n  const ensResolver = useCallback(\n    async (ensName: string) => {\n      if (!library || chainId !== 1) {\n        const networkLibrary = getNetworkLibrary()\n        const network = await networkLibrary.getNetwork()\n        if (networkLibrary && network.chainId === 1) {\n          return resolveENSContentHash(ensName, networkLibrary)\n        }\n        throw new Error('Could not construct mainnet ENS resolver')\n      }\n      return resolveENSContentHash(ensName, library)\n    },\n    [chainId, library]\n  )\n\n  // note: prevent dispatch if using for list search or unsupported list\n  return useCallback(\n    async (listUrl: string, sendDispatch = true) => {\n      const requestId = nanoid()\n      sendDispatch && dispatch(fetchTokenList.pending({ requestId, url: listUrl }))\n      return getTokenList(listUrl, ensResolver)\n        .then((tokenList) => {\n          sendDispatch && dispatch(fetchTokenList.fulfilled({ url: listUrl, tokenList, requestId }))\n          return tokenList\n        })\n        .catch((error) => {\n          console.debug(`Failed to get list at url ${listUrl}`, error)\n          sendDispatch && dispatch(fetchTokenList.rejected({ url: listUrl, requestId, errorMessage: error.message }))\n          throw error\n        })\n    },\n    [dispatch, ensResolver]\n  )\n}\n"]},"metadata":{},"sourceType":"module"}