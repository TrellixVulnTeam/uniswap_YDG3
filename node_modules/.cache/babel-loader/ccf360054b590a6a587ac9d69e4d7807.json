{"ast":null,"code":"import { BigNumber } from 'ethers';\nimport _ from 'lodash';\nimport { log } from '../util/log';\nimport { IGasPriceProvider } from './gas-price-provider'; // We get the Xth percentile of priority fees for transactions successfully included in previous blocks.\n\nconst DEFAULT_PRIORITY_FEE_PERCENTILE = 50; // Infura docs say only past 4 blocks guaranteed to be available: https://infura.io/docs/ethereum#operation/eth_feeHistory\n\nconst DEFAULT_BLOCKS_TO_LOOK_BACK = 4;\n/**\n * Computes a gas estimate using on-chain data from the eth_feeHistory RPC endpoint.\n *\n * Takes the average priority fee from the past `blocksToConsider` blocks, and adds it\n * to the current base fee.\n *\n * @export\n * @class EIP1559GasPriceProvider\n */\n\nexport class EIP1559GasPriceProvider extends IGasPriceProvider {\n  constructor(provider, priorityFeePercentile = DEFAULT_PRIORITY_FEE_PERCENTILE, blocksToConsider = DEFAULT_BLOCKS_TO_LOOK_BACK) {\n    super();\n    this.provider = provider;\n    this.priorityFeePercentile = priorityFeePercentile;\n    this.blocksToConsider = blocksToConsider;\n  }\n\n  async getGasPrice() {\n    const feeHistoryRaw = await this.provider.send('eth_feeHistory', [this.blocksToConsider, 'latest', [this.priorityFeePercentile]]);\n    const feeHistory = {\n      baseFeePerGas: _.map(feeHistoryRaw.baseFeePerGas, b => BigNumber.from(b)),\n      gasUsedRatio: feeHistoryRaw.gasUsedRatio,\n      oldestBlock: BigNumber.from(feeHistoryRaw.oldestBlock),\n      reward: _.map(feeHistoryRaw.reward, b => BigNumber.from(b[0]))\n    };\n    const nextBlockBaseFeePerGas = feeHistory.baseFeePerGas[feeHistory.baseFeePerGas.length - 1];\n\n    const averagePriorityFeePerGas = _.reduce(feeHistory.reward, (sum, cur) => sum.add(cur), BigNumber.from(0)).div(feeHistory.reward.length);\n\n    log.info({\n      feeHistory,\n      feeHistoryReadable: {\n        baseFeePerGas: _.map(feeHistory.baseFeePerGas, f => f.toString()),\n        oldestBlock: feeHistory.oldestBlock.toString(),\n        reward: _.map(feeHistory.reward, r => r.toString())\n      },\n      nextBlockBaseFeePerGas: nextBlockBaseFeePerGas.toString(),\n      averagePriorityFeePerGas: averagePriorityFeePerGas.toString()\n    }, 'Got fee history from provider and computed gas estimate');\n    const gasPriceWei = nextBlockBaseFeePerGas.add(averagePriorityFeePerGas);\n    const blockNumber = feeHistory.oldestBlock.add(this.blocksToConsider);\n    log.info(`Estimated gas price in wei: ${gasPriceWei} as of block ${blockNumber.toString()}`);\n    return {\n      gasPriceWei: gasPriceWei\n    };\n  }\n\n}","map":{"version":3,"sources":["../../../../src/providers/eip-1559-gas-price-provider.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,QAAqC,QAArC;AACA,OAAO,CAAP,MAAc,QAAd;AACA,SAAS,GAAT,QAAoB,aAApB;AACA,SAAmB,iBAAnB,QAA4C,sBAA5C,C,CAgBA;;AACA,MAAM,+BAA+B,GAAG,EAAxC,C,CACA;;AACA,MAAM,2BAA2B,GAAG,CAApC;AAEA;;;;;;;;AAQG;;AACH,OAAM,MAAO,uBAAP,SAAuC,iBAAvC,CAAwD;AAC5D,EAAA,WAAA,CACY,QADZ,EAEU,qBAAA,GAAgC,+BAF1C,EAGU,gBAAA,GAA2B,2BAHrC,EAGgE;AAE9D;AAJU,SAAA,QAAA,GAAA,QAAA;AACF,SAAA,qBAAA,GAAA,qBAAA;AACA,SAAA,gBAAA,GAAA,gBAAA;AAGT;;AAEuB,QAAX,WAAW,GAAA;AACtB,UAAM,aAAa,GAAI,MAAM,KAAK,QAAL,CAAc,IAAd,CAAmB,gBAAnB,EAAqC,CAChE,KAAK,gBAD2D,EAEhE,QAFgE,EAGhE,CAAC,KAAK,qBAAN,CAHgE,CAArC,CAA7B;AAMA,UAAM,UAAU,GAAuB;AACrC,MAAA,aAAa,EAAE,CAAC,CAAC,GAAF,CAAM,aAAa,CAAC,aAApB,EAAoC,CAAD,IAChD,SAAS,CAAC,IAAV,CAAe,CAAf,CADa,CADsB;AAIrC,MAAA,YAAY,EAAE,aAAa,CAAC,YAJS;AAKrC,MAAA,WAAW,EAAE,SAAS,CAAC,IAAV,CAAe,aAAa,CAAC,WAA7B,CALwB;AAMrC,MAAA,MAAM,EAAE,CAAC,CAAC,GAAF,CAAM,aAAa,CAAC,MAApB,EAA6B,CAAD,IAAO,SAAS,CAAC,IAAV,CAAe,CAAC,CAAC,CAAD,CAAhB,CAAnC;AAN6B,KAAvC;AASA,UAAM,sBAAsB,GAC1B,UAAU,CAAC,aAAX,CAAyB,UAAU,CAAC,aAAX,CAAyB,MAAzB,GAAkC,CAA3D,CADF;;AAGA,UAAM,wBAAwB,GAAG,CAAC,CAAC,MAAF,CAC/B,UAAU,CAAC,MADoB,EAE/B,CAAC,GAAD,EAAiB,GAAjB,KAAoC,GAAG,CAAC,GAAJ,CAAQ,GAAR,CAFL,EAG/B,SAAS,CAAC,IAAV,CAAe,CAAf,CAH+B,EAI/B,GAJ+B,CAI3B,UAAU,CAAC,MAAX,CAAkB,MAJS,CAAjC;;AAMA,IAAA,GAAG,CAAC,IAAJ,CACE;AACE,MAAA,UADF;AAEE,MAAA,kBAAkB,EAAE;AAClB,QAAA,aAAa,EAAE,CAAC,CAAC,GAAF,CAAM,UAAU,CAAC,aAAjB,EAAiC,CAAD,IAAO,CAAC,CAAC,QAAF,EAAvC,CADG;AAElB,QAAA,WAAW,EAAE,UAAU,CAAC,WAAX,CAAuB,QAAvB,EAFK;AAGlB,QAAA,MAAM,EAAE,CAAC,CAAC,GAAF,CAAM,UAAU,CAAC,MAAjB,EAA0B,CAAD,IAAO,CAAC,CAAC,QAAF,EAAhC;AAHU,OAFtB;AAOE,MAAA,sBAAsB,EAAE,sBAAsB,CAAC,QAAvB,EAP1B;AAQE,MAAA,wBAAwB,EAAE,wBAAwB,CAAC,QAAzB;AAR5B,KADF,EAWE,yDAXF;AAcA,UAAM,WAAW,GAAG,sBAAsB,CAAC,GAAvB,CAA2B,wBAA3B,CAApB;AAEA,UAAM,WAAW,GAAG,UAAU,CAAC,WAAX,CAAuB,GAAvB,CAA2B,KAAK,gBAAhC,CAApB;AAEA,IAAA,GAAG,CAAC,IAAJ,CACE,+BAA+B,WAAW,gBAAgB,WAAW,CAAC,QAAZ,EAAsB,EADlF;AAIA,WAAO;AAAE,MAAA,WAAW,EAAE;AAAf,KAAP;AACD;;AAzD2D","sourceRoot":"","sourcesContent":["import { BigNumber } from 'ethers';\nimport _ from 'lodash';\nimport { log } from '../util/log';\nimport { IGasPriceProvider } from './gas-price-provider';\n// We get the Xth percentile of priority fees for transactions successfully included in previous blocks.\nconst DEFAULT_PRIORITY_FEE_PERCENTILE = 50;\n// Infura docs say only past 4 blocks guaranteed to be available: https://infura.io/docs/ethereum#operation/eth_feeHistory\nconst DEFAULT_BLOCKS_TO_LOOK_BACK = 4;\n/**\n * Computes a gas estimate using on-chain data from the eth_feeHistory RPC endpoint.\n *\n * Takes the average priority fee from the past `blocksToConsider` blocks, and adds it\n * to the current base fee.\n *\n * @export\n * @class EIP1559GasPriceProvider\n */\nexport class EIP1559GasPriceProvider extends IGasPriceProvider {\n    constructor(provider, priorityFeePercentile = DEFAULT_PRIORITY_FEE_PERCENTILE, blocksToConsider = DEFAULT_BLOCKS_TO_LOOK_BACK) {\n        super();\n        this.provider = provider;\n        this.priorityFeePercentile = priorityFeePercentile;\n        this.blocksToConsider = blocksToConsider;\n    }\n    async getGasPrice() {\n        const feeHistoryRaw = (await this.provider.send('eth_feeHistory', [\n            this.blocksToConsider,\n            'latest',\n            [this.priorityFeePercentile],\n        ]));\n        const feeHistory = {\n            baseFeePerGas: _.map(feeHistoryRaw.baseFeePerGas, (b) => BigNumber.from(b)),\n            gasUsedRatio: feeHistoryRaw.gasUsedRatio,\n            oldestBlock: BigNumber.from(feeHistoryRaw.oldestBlock),\n            reward: _.map(feeHistoryRaw.reward, (b) => BigNumber.from(b[0])),\n        };\n        const nextBlockBaseFeePerGas = feeHistory.baseFeePerGas[feeHistory.baseFeePerGas.length - 1];\n        const averagePriorityFeePerGas = _.reduce(feeHistory.reward, (sum, cur) => sum.add(cur), BigNumber.from(0)).div(feeHistory.reward.length);\n        log.info({\n            feeHistory,\n            feeHistoryReadable: {\n                baseFeePerGas: _.map(feeHistory.baseFeePerGas, (f) => f.toString()),\n                oldestBlock: feeHistory.oldestBlock.toString(),\n                reward: _.map(feeHistory.reward, (r) => r.toString()),\n            },\n            nextBlockBaseFeePerGas: nextBlockBaseFeePerGas.toString(),\n            averagePriorityFeePerGas: averagePriorityFeePerGas.toString(),\n        }, 'Got fee history from provider and computed gas estimate');\n        const gasPriceWei = nextBlockBaseFeePerGas.add(averagePriorityFeePerGas);\n        const blockNumber = feeHistory.oldestBlock.add(this.blocksToConsider);\n        log.info(`Estimated gas price in wei: ${gasPriceWei} as of block ${blockNumber.toString()}`);\n        return { gasPriceWei: gasPriceWei };\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWlwLTE1NTktZ2FzLXByaWNlLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3Byb3ZpZGVycy9laXAtMTU1OS1nYXMtcHJpY2UtcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBYSxNQUFNLFFBQVEsQ0FBQztBQUM5QyxPQUFPLENBQUMsTUFBTSxRQUFRLENBQUM7QUFDdkIsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNsQyxPQUFPLEVBQVksaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQWdCbkUsd0dBQXdHO0FBQ3hHLE1BQU0sK0JBQStCLEdBQUcsRUFBRSxDQUFDO0FBQzNDLDBIQUEwSDtBQUMxSCxNQUFNLDJCQUEyQixHQUFHLENBQUMsQ0FBQztBQUV0Qzs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sT0FBTyx1QkFBd0IsU0FBUSxpQkFBaUI7SUFDNUQsWUFDWSxRQUFtQyxFQUNyQyx3QkFBZ0MsK0JBQStCLEVBQy9ELG1CQUEyQiwyQkFBMkI7UUFFOUQsS0FBSyxFQUFFLENBQUM7UUFKRSxhQUFRLEdBQVIsUUFBUSxDQUEyQjtRQUNyQywwQkFBcUIsR0FBckIscUJBQXFCLENBQTBDO1FBQy9ELHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBc0M7SUFHaEUsQ0FBQztJQUVNLEtBQUssQ0FBQyxXQUFXO1FBQ3RCLE1BQU0sYUFBYSxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUNoRSxJQUFJLENBQUMsZ0JBQWdCO1lBQ3JCLFFBQVE7WUFDUixDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQztTQUM3QixDQUFDLENBQTBCLENBQUM7UUFFN0IsTUFBTSxVQUFVLEdBQXVCO1lBQ3JDLGFBQWEsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUN0RCxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUNsQjtZQUNELFlBQVksRUFBRSxhQUFhLENBQUMsWUFBWTtZQUN4QyxXQUFXLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO1lBQ3RELE1BQU0sRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDakUsQ0FBQztRQUVGLE1BQU0sc0JBQXNCLEdBQzFCLFVBQVUsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFFLENBQUM7UUFFakUsTUFBTSx3QkFBd0IsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUN2QyxVQUFVLENBQUMsTUFBTSxFQUNqQixDQUFDLEdBQWMsRUFBRSxHQUFjLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQ2hELFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQ2xCLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFaEMsR0FBRyxDQUFDLElBQUksQ0FDTjtZQUNFLFVBQVU7WUFDVixrQkFBa0IsRUFBRTtnQkFDbEIsYUFBYSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUNuRSxXQUFXLEVBQUUsVUFBVSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUU7Z0JBQzlDLE1BQU0sRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQzthQUN0RDtZQUNELHNCQUFzQixFQUFFLHNCQUFzQixDQUFDLFFBQVEsRUFBRTtZQUN6RCx3QkFBd0IsRUFBRSx3QkFBd0IsQ0FBQyxRQUFRLEVBQUU7U0FDOUQsRUFDRCx5REFBeUQsQ0FDMUQsQ0FBQztRQUVGLE1BQU0sV0FBVyxHQUFHLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBRXpFLE1BQU0sV0FBVyxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBRXRFLEdBQUcsQ0FBQyxJQUFJLENBQ04sK0JBQStCLFdBQVcsZ0JBQWdCLFdBQVcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUNuRixDQUFDO1FBRUYsT0FBTyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsQ0FBQztJQUN0QyxDQUFDO0NBQ0YifQ=="]},"metadata":{},"sourceType":"module"}