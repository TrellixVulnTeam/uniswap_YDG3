{"ast":null,"code":"import { Pair } from '@uniswap/v2-sdk';\nimport _ from 'lodash';\nimport { ChainId, WRAPPED_NATIVE_CURRENCY } from '../../util/chains';\nimport { log } from '../../util/log';\nimport { DAI_MAINNET, DAI_RINKEBY_1, DAI_RINKEBY_2, USDC_MAINNET, USDT_MAINNET, WBTC_MAINNET } from '../token-provider';\nconst BASES_TO_CHECK_TRADES_AGAINST = {\n  [ChainId.MAINNET]: [WRAPPED_NATIVE_CURRENCY[ChainId.MAINNET], DAI_MAINNET, USDC_MAINNET, USDT_MAINNET, WBTC_MAINNET],\n  [ChainId.ROPSTEN]: [WRAPPED_NATIVE_CURRENCY[ChainId.ROPSTEN]],\n  [ChainId.RINKEBY]: [WRAPPED_NATIVE_CURRENCY[ChainId.RINKEBY], DAI_RINKEBY_1, DAI_RINKEBY_2],\n  [ChainId.GÖRLI]: [WRAPPED_NATIVE_CURRENCY[ChainId.GÖRLI]],\n  [ChainId.KOVAN]: [WRAPPED_NATIVE_CURRENCY[ChainId.KOVAN]],\n  //v2 not deployed on optimism/arbitrum or their testnets\n  [ChainId.OPTIMISM]: [],\n  [ChainId.ARBITRUM_ONE]: [],\n  [ChainId.ARBITRUM_RINKEBY]: [],\n  [ChainId.OPTIMISTIC_KOVAN]: [],\n  [ChainId.POLYGON]: [],\n  [ChainId.POLYGON_MUMBAI]: []\n};\n/**\n * Provider that does not get data from an external source and instead returns\n * a hardcoded list of Subgraph pools.\n *\n * Since the pools are hardcoded, the liquidity/price values are dummys and should not\n * be depended on.\n *\n * Useful for instances where other data sources are unavailable. E.g. subgraph not available.\n *\n * @export\n * @class StaticV2SubgraphProvider\n */\n\nexport class StaticV2SubgraphProvider {\n  constructor(chainId) {\n    this.chainId = chainId;\n  }\n\n  async getPools(tokenIn, tokenOut) {\n    log.info('In static subgraph provider for V2');\n    const bases = BASES_TO_CHECK_TRADES_AGAINST[this.chainId];\n\n    let basePairs = _.flatMap(bases, base => bases.map(otherBase => [base, otherBase]));\n\n    if (tokenIn && tokenOut) {\n      basePairs.push([tokenIn, tokenOut], ...bases.map(base => [tokenIn, base]), ...bases.map(base => [tokenOut, base]));\n    }\n\n    const pairs = _(basePairs).filter(tokens => Boolean(tokens[0] && tokens[1])).filter(([tokenA, tokenB]) => tokenA.address !== tokenB.address && !tokenA.equals(tokenB)).value();\n\n    const poolAddressSet = new Set();\n\n    const subgraphPools = _(pairs).map(([tokenA, tokenB]) => {\n      const poolAddress = Pair.getAddress(tokenA, tokenB);\n\n      if (poolAddressSet.has(poolAddress)) {\n        return undefined;\n      }\n\n      poolAddressSet.add(poolAddress);\n      const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA];\n      return {\n        id: poolAddress,\n        liquidity: '100',\n        token0: {\n          id: token0.address\n        },\n        token1: {\n          id: token1.address\n        },\n        supply: 100,\n        reserve: 100\n      };\n    }).compact().value();\n\n    return subgraphPools;\n  }\n\n}","map":{"version":3,"sources":["../../../../../src/providers/v2/static-subgraph-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Pair } from '@uniswap/v2-sdk';\nimport _ from 'lodash';\nimport { ChainId, WRAPPED_NATIVE_CURRENCY } from '../../util/chains';\nimport { log } from '../../util/log';\nimport { DAI_MAINNET, DAI_RINKEBY_1, DAI_RINKEBY_2, USDC_MAINNET, USDT_MAINNET, WBTC_MAINNET, } from '../token-provider';\nconst BASES_TO_CHECK_TRADES_AGAINST = {\n    [ChainId.MAINNET]: [\n        WRAPPED_NATIVE_CURRENCY[ChainId.MAINNET],\n        DAI_MAINNET,\n        USDC_MAINNET,\n        USDT_MAINNET,\n        WBTC_MAINNET,\n    ],\n    [ChainId.ROPSTEN]: [WRAPPED_NATIVE_CURRENCY[ChainId.ROPSTEN]],\n    [ChainId.RINKEBY]: [\n        WRAPPED_NATIVE_CURRENCY[ChainId.RINKEBY],\n        DAI_RINKEBY_1,\n        DAI_RINKEBY_2,\n    ],\n    [ChainId.GÖRLI]: [WRAPPED_NATIVE_CURRENCY[ChainId.GÖRLI]],\n    [ChainId.KOVAN]: [WRAPPED_NATIVE_CURRENCY[ChainId.KOVAN]],\n    //v2 not deployed on optimism/arbitrum or their testnets\n    [ChainId.OPTIMISM]: [],\n    [ChainId.ARBITRUM_ONE]: [],\n    [ChainId.ARBITRUM_RINKEBY]: [],\n    [ChainId.OPTIMISTIC_KOVAN]: [],\n    [ChainId.POLYGON]: [],\n    [ChainId.POLYGON_MUMBAI]: [],\n};\n/**\n * Provider that does not get data from an external source and instead returns\n * a hardcoded list of Subgraph pools.\n *\n * Since the pools are hardcoded, the liquidity/price values are dummys and should not\n * be depended on.\n *\n * Useful for instances where other data sources are unavailable. E.g. subgraph not available.\n *\n * @export\n * @class StaticV2SubgraphProvider\n */\nexport class StaticV2SubgraphProvider {\n    constructor(chainId) {\n        this.chainId = chainId;\n    }\n    async getPools(tokenIn, tokenOut) {\n        log.info('In static subgraph provider for V2');\n        const bases = BASES_TO_CHECK_TRADES_AGAINST[this.chainId];\n        let basePairs = _.flatMap(bases, (base) => bases.map((otherBase) => [base, otherBase]));\n        if (tokenIn && tokenOut) {\n            basePairs.push([tokenIn, tokenOut], ...bases.map((base) => [tokenIn, base]), ...bases.map((base) => [tokenOut, base]));\n        }\n        const pairs = _(basePairs)\n            .filter((tokens) => Boolean(tokens[0] && tokens[1]))\n            .filter(([tokenA, tokenB]) => tokenA.address !== tokenB.address && !tokenA.equals(tokenB))\n            .value();\n        const poolAddressSet = new Set();\n        const subgraphPools = _(pairs)\n            .map(([tokenA, tokenB]) => {\n            const poolAddress = Pair.getAddress(tokenA, tokenB);\n            if (poolAddressSet.has(poolAddress)) {\n                return undefined;\n            }\n            poolAddressSet.add(poolAddress);\n            const [token0, token1] = tokenA.sortsBefore(tokenB)\n                ? [tokenA, tokenB]\n                : [tokenB, tokenA];\n            return {\n                id: poolAddress,\n                liquidity: '100',\n                token0: {\n                    id: token0.address,\n                },\n                token1: {\n                    id: token1.address,\n                },\n                supply: 100,\n                reserve: 100,\n            };\n        })\n            .compact()\n            .value();\n        return subgraphPools;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGljLXN1YmdyYXBoLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3Byb3ZpZGVycy92Mi9zdGF0aWMtc3ViZ3JhcGgtcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZDLE9BQU8sQ0FBQyxNQUFNLFFBQVEsQ0FBQztBQUN2QixPQUFPLEVBQUUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDckUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFDTCxXQUFXLEVBQ1gsYUFBYSxFQUNiLGFBQWEsRUFDYixZQUFZLEVBQ1osWUFBWSxFQUNaLFlBQVksR0FDYixNQUFNLG1CQUFtQixDQUFDO0FBTzNCLE1BQU0sNkJBQTZCLEdBQW1CO0lBQ3BELENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ2pCLHVCQUF1QixDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUU7UUFDekMsV0FBVztRQUNYLFlBQVk7UUFDWixZQUFZO1FBQ1osWUFBWTtLQUNiO0lBQ0QsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFFLENBQUM7SUFDOUQsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDakIsdUJBQXVCLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBRTtRQUN6QyxhQUFhO1FBQ2IsYUFBYTtLQUNkO0lBQ0QsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFFLENBQUM7SUFDMUQsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFFLENB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"]},"metadata":{},"sourceType":"module"}