{"ast":null,"code":"import{useMemo}from'react';import{useUnsupportedTokens}from'./Tokens';/**\n * Returns true if the input currency or output currency cannot be traded in the interface\n * @param currencyIn the input currency to check\n * @param currencyOut the output currency to check\n */export function useIsSwapUnsupported(currencyIn,currencyOut){var unsupportedTokens=useUnsupportedTokens();return useMemo(function(){if(!unsupportedTokens){return false;}var currencyInUnsupported=Boolean((currencyIn===null||currencyIn===void 0?void 0:currencyIn.isToken)&&unsupportedTokens[currencyIn.address]);var currencyOutUnsupported=Boolean((currencyOut===null||currencyOut===void 0?void 0:currencyOut.isToken)&&unsupportedTokens[currencyOut.address]);return currencyInUnsupported||currencyOutUnsupported;},[currencyIn,currencyOut,unsupportedTokens]);}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/hooks/useIsSwapUnsupported.ts"],"names":["useMemo","useUnsupportedTokens","useIsSwapUnsupported","currencyIn","currencyOut","unsupportedTokens","currencyInUnsupported","Boolean","isToken","address","currencyOutUnsupported"],"mappings":"AACA,OAASA,OAAT,KAAwB,OAAxB,CAEA,OAASC,oBAAT,KAAqC,UAArC,CAEA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASC,CAAAA,oBAAT,CAA8BC,UAA9B,CAA4DC,WAA5D,CAAoG,CACzG,GAAMC,CAAAA,iBAAiB,CAAGJ,oBAAoB,EAA9C,CACA,MAAOD,CAAAA,OAAO,CAAC,UAAM,CACnB,GAAI,CAACK,iBAAL,CAAwB,CACtB,MAAO,MAAP,CACD,CACD,GAAMC,CAAAA,qBAAqB,CAAGC,OAAO,CAAC,CAAAJ,UAAU,OAAV,EAAAA,UAAU,SAAV,QAAAA,UAAU,CAAEK,OAAZ,GAAuBH,iBAAiB,CAACF,UAAU,CAACM,OAAZ,CAAzC,CAArC,CACA,GAAMC,CAAAA,sBAAsB,CAAGH,OAAO,CAAC,CAAAH,WAAW,OAAX,EAAAA,WAAW,SAAX,QAAAA,WAAW,CAAEI,OAAb,GAAwBH,iBAAiB,CAACD,WAAW,CAACK,OAAb,CAA1C,CAAtC,CACA,MAAOH,CAAAA,qBAAqB,EAAII,sBAAhC,CACD,CAPa,CAOX,CAACP,UAAD,CAAaC,WAAb,CAA0BC,iBAA1B,CAPW,CAAd,CAQD","sourcesContent":["import { Currency } from '@uniswap/sdk-core'\nimport { useMemo } from 'react'\n\nimport { useUnsupportedTokens } from './Tokens'\n\n/**\n * Returns true if the input currency or output currency cannot be traded in the interface\n * @param currencyIn the input currency to check\n * @param currencyOut the output currency to check\n */\nexport function useIsSwapUnsupported(currencyIn?: Currency | null, currencyOut?: Currency | null): boolean {\n  const unsupportedTokens = useUnsupportedTokens()\n  return useMemo(() => {\n    if (!unsupportedTokens) {\n      return false\n    }\n    const currencyInUnsupported = Boolean(currencyIn?.isToken && unsupportedTokens[currencyIn.address])\n    const currencyOutUnsupported = Boolean(currencyOut?.isToken && unsupportedTokens[currencyOut.address])\n    return currencyInUnsupported || currencyOutUnsupported\n  }, [currencyIn, currencyOut, unsupportedTokens])\n}\n"]},"metadata":{},"sourceType":"module"}