{"ast":null,"code":"/**\n * Mnemonist BiMap\n * ================\n *\n * JavaScript implementation of a BiMap.\n */\nvar forEach = require('obliterator/foreach');\n/**\n * Inverse Map.\n *\n * @constructor\n */\n\n\nfunction InverseMap(original) {\n  this.size = 0;\n  this.items = new Map();\n  this.inverse = original;\n}\n/**\n * BiMap.\n *\n * @constructor\n */\n\n\nfunction BiMap() {\n  this.size = 0;\n  this.items = new Map();\n  this.inverse = new InverseMap(this);\n}\n/**\n * Method used to clear the map.\n *\n * @return {undefined}\n */\n\n\nfunction clear() {\n  this.size = 0;\n  this.items.clear();\n  this.inverse.items.clear();\n}\n\nBiMap.prototype.clear = clear;\nInverseMap.prototype.clear = clear;\n/**\n * Method used to set a relation.\n *\n * @param  {any} key - Key.\n * @param  {any} value - Value.\n * @return {BiMap|InverseMap}\n */\n\nfunction set(key, value) {\n  // First we need to attempt to see if the relation is not flawed\n  if (this.items.has(key)) {\n    var currentValue = this.items.get(key); // The relation already exists, we do nothing\n\n    if (currentValue === value) return this;else this.inverse.items.delete(currentValue);\n  }\n\n  if (this.inverse.items.has(value)) {\n    var currentKey = this.inverse.items.get(value);\n    if (currentKey === key) return this;else this.items.delete(currentKey);\n  } // Here we actually add the relation\n\n\n  this.items.set(key, value);\n  this.inverse.items.set(value, key); // Size\n\n  this.size = this.items.size;\n  this.inverse.size = this.inverse.items.size;\n  return this;\n}\n\nBiMap.prototype.set = set;\nInverseMap.prototype.set = set;\n/**\n * Method used to delete a relation.\n *\n * @param  {any} key - Key.\n * @return {boolean}\n */\n\nfunction del(key) {\n  if (this.items.has(key)) {\n    var currentValue = this.items.get(key);\n    this.items.delete(key);\n    this.inverse.items.delete(currentValue); // Size\n\n    this.size = this.items.size;\n    this.inverse.size = this.inverse.items.size;\n    return true;\n  }\n\n  return false;\n}\n\nBiMap.prototype.delete = del;\nInverseMap.prototype.delete = del;\n/**\n * Mapping some Map prototype function unto our two classes.\n */\n\nvar METHODS = ['has', 'get', 'forEach', 'keys', 'values', 'entries'];\nMETHODS.forEach(function (name) {\n  BiMap.prototype[name] = InverseMap.prototype[name] = function () {\n    return Map.prototype[name].apply(this.items, arguments);\n  };\n});\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\n\nif (typeof Symbol !== 'undefined') {\n  BiMap.prototype[Symbol.iterator] = BiMap.prototype.entries;\n  InverseMap.prototype[Symbol.iterator] = InverseMap.prototype.entries;\n}\n/**\n * Convenience known methods.\n */\n\n\nBiMap.prototype.inspect = function () {\n  var dummy = {\n    left: this.items,\n    right: this.inverse.items\n  }; // Trick so that node displays the name of the constructor\n\n  Object.defineProperty(dummy, 'constructor', {\n    value: BiMap,\n    enumerable: false\n  });\n  return dummy;\n};\n\nif (typeof Symbol !== 'undefined') BiMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = BiMap.prototype.inspect;\n\nInverseMap.prototype.inspect = function () {\n  var dummy = {\n    left: this.inverse.items,\n    right: this.items\n  }; // Trick so that node displays the name of the constructor\n\n  Object.defineProperty(dummy, 'constructor', {\n    value: InverseMap,\n    enumerable: false\n  });\n  return dummy;\n};\n\nif (typeof Symbol !== 'undefined') InverseMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = InverseMap.prototype.inspect;\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a bimap.\n *\n * @param  {Iterable} iterable - Target iterable.\n * @return {BiMap}\n */\n\nBiMap.from = function (iterable) {\n  var bimap = new BiMap();\n  forEach(iterable, function (value, key) {\n    bimap.set(key, value);\n  });\n  return bimap;\n};\n/**\n * Exporting.\n */\n\n\nmodule.exports = BiMap;","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/node_modules/mnemonist/bi-map.js"],"names":["forEach","require","InverseMap","original","size","items","Map","inverse","BiMap","clear","prototype","set","key","value","has","currentValue","get","delete","currentKey","del","METHODS","name","apply","arguments","Symbol","iterator","entries","inspect","dummy","left","right","Object","defineProperty","enumerable","for","from","iterable","bimap","module","exports"],"mappings":"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","sourcesContent":["/**\n * Mnemonist BiMap\n * ================\n *\n * JavaScript implementation of a BiMap.\n */\nvar forEach = require('obliterator/foreach');\n\n/**\n * Inverse Map.\n *\n * @constructor\n */\nfunction InverseMap(original) {\n\n  this.size = 0;\n  this.items = new Map();\n  this.inverse = original;\n}\n\n/**\n * BiMap.\n *\n * @constructor\n */\nfunction BiMap() {\n\n  this.size = 0;\n  this.items = new Map();\n  this.inverse = new InverseMap(this);\n}\n\n/**\n * Method used to clear the map.\n *\n * @return {undefined}\n */\nfunction clear() {\n  this.size = 0;\n  this.items.clear();\n  this.inverse.items.clear();\n}\n\nBiMap.prototype.clear = clear;\nInverseMap.prototype.clear = clear;\n\n/**\n * Method used to set a relation.\n *\n * @param  {any} key - Key.\n * @param  {any} value - Value.\n * @return {BiMap|InverseMap}\n */\nfunction set(key, value) {\n\n  // First we need to attempt to see if the relation is not flawed\n  if (this.items.has(key)) {\n    var currentValue = this.items.get(key);\n\n    // The relation already exists, we do nothing\n    if (currentValue === value)\n      return this;\n    else\n      this.inverse.items.delete(currentValue);\n  }\n\n  if (this.inverse.items.has(value)) {\n    var currentKey = this.inverse.items.get(value);\n\n    if (currentKey === key)\n      return this;\n    else\n      this.items.delete(currentKey);\n  }\n\n  // Here we actually add the relation\n  this.items.set(key, value);\n  this.inverse.items.set(value, key);\n\n  // Size\n  this.size = this.items.size;\n  this.inverse.size = this.inverse.items.size;\n\n  return this;\n}\n\nBiMap.prototype.set = set;\nInverseMap.prototype.set = set;\n\n/**\n * Method used to delete a relation.\n *\n * @param  {any} key - Key.\n * @return {boolean}\n */\nfunction del(key) {\n  if (this.items.has(key)) {\n    var currentValue = this.items.get(key);\n\n    this.items.delete(key);\n    this.inverse.items.delete(currentValue);\n\n    // Size\n    this.size = this.items.size;\n    this.inverse.size = this.inverse.items.size;\n\n    return true;\n  }\n\n  return false;\n}\n\nBiMap.prototype.delete = del;\nInverseMap.prototype.delete = del;\n\n/**\n * Mapping some Map prototype function unto our two classes.\n */\nvar METHODS = ['has', 'get', 'forEach', 'keys', 'values', 'entries'];\n\nMETHODS.forEach(function(name) {\n  BiMap.prototype[name] = InverseMap.prototype[name] = function() {\n    return Map.prototype[name].apply(this.items, arguments);\n  };\n});\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined') {\n  BiMap.prototype[Symbol.iterator] = BiMap.prototype.entries;\n  InverseMap.prototype[Symbol.iterator] = InverseMap.prototype.entries;\n}\n\n/**\n * Convenience known methods.\n */\nBiMap.prototype.inspect = function() {\n  var dummy = {\n    left: this.items,\n    right: this.inverse.items\n  };\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(dummy, 'constructor', {\n    value: BiMap,\n    enumerable: false\n  });\n\n  return dummy;\n};\n\nif (typeof Symbol !== 'undefined')\n  BiMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = BiMap.prototype.inspect;\n\nInverseMap.prototype.inspect = function() {\n  var dummy = {\n    left: this.inverse.items,\n    right: this.items\n  };\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(dummy, 'constructor', {\n    value: InverseMap,\n    enumerable: false\n  });\n\n  return dummy;\n};\n\nif (typeof Symbol !== 'undefined')\n  InverseMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = InverseMap.prototype.inspect;\n\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a bimap.\n *\n * @param  {Iterable} iterable - Target iterable.\n * @return {BiMap}\n */\nBiMap.from = function(iterable) {\n  var bimap = new BiMap();\n\n  forEach(iterable, function(value, key) {\n    bimap.set(key, value);\n  });\n\n  return bimap;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = BiMap;\n"]},"metadata":{},"sourceType":"script"}