{"ast":null,"code":"import{useMemo}from'react';import{safeNamehash}from'utils/safeNamehash';import{useSingleCallResult}from'../state/multicall/hooks';import isZero from'../utils/isZero';import{useENSRegistrarContract,useENSResolverContract}from'./useContract';import useDebounce from'./useDebounce';/**\n * Does a lookup for an ENS name to find its address.\n */export default function useENSAddress(ensName){var _resolverAddress$resu;var debouncedName=useDebounce(ensName,200);var ensNodeArgument=useMemo(function(){return[debouncedName===null?undefined:safeNamehash(debouncedName)];},[debouncedName]);var registrarContract=useENSRegistrarContract(false);var resolverAddress=useSingleCallResult(registrarContract,'resolver',ensNodeArgument);var resolverAddressResult=(_resolverAddress$resu=resolverAddress.result)===null||_resolverAddress$resu===void 0?void 0:_resolverAddress$resu[0];var resolverContract=useENSResolverContract(resolverAddressResult&&!isZero(resolverAddressResult)?resolverAddressResult:undefined,false);var addr=useSingleCallResult(resolverContract,'addr',ensNodeArgument);var changed=debouncedName!==ensName;return useMemo(function(){var _addr$result$,_addr$result;return{address:changed?null:(_addr$result$=(_addr$result=addr.result)===null||_addr$result===void 0?void 0:_addr$result[0])!==null&&_addr$result$!==void 0?_addr$result$:null,loading:changed||resolverAddress.loading||addr.loading};},[addr.loading,addr.result,changed,resolverAddress.loading]);}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/hooks/useENSAddress.ts"],"names":["useMemo","safeNamehash","useSingleCallResult","isZero","useENSRegistrarContract","useENSResolverContract","useDebounce","useENSAddress","ensName","debouncedName","ensNodeArgument","undefined","registrarContract","resolverAddress","resolverAddressResult","result","resolverContract","addr","changed","address","loading"],"mappings":"AAAA,OAASA,OAAT,KAAwB,OAAxB,CACA,OAASC,YAAT,KAA6B,oBAA7B,CAEA,OAASC,mBAAT,KAAoC,0BAApC,CACA,MAAOC,CAAAA,MAAP,KAAmB,iBAAnB,CACA,OAASC,uBAAT,CAAkCC,sBAAlC,KAAgE,eAAhE,CACA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,CAEA;AACA;AACA,GACA,cAAe,SAASC,CAAAA,aAAT,CAAuBC,OAAvB,CAA8F,2BAC3G,GAAMC,CAAAA,aAAa,CAAGH,WAAW,CAACE,OAAD,CAAU,GAAV,CAAjC,CACA,GAAME,CAAAA,eAAe,CAAGV,OAAO,CAC7B,iBAAM,CAACS,aAAa,GAAK,IAAlB,CAAyBE,SAAzB,CAAqCV,YAAY,CAACQ,aAAD,CAAlD,CAAN,EAD6B,CAE7B,CAACA,aAAD,CAF6B,CAA/B,CAIA,GAAMG,CAAAA,iBAAiB,CAAGR,uBAAuB,CAAC,KAAD,CAAjD,CACA,GAAMS,CAAAA,eAAe,CAAGX,mBAAmB,CAACU,iBAAD,CAAoB,UAApB,CAAgCF,eAAhC,CAA3C,CACA,GAAMI,CAAAA,qBAAqB,wBAAGD,eAAe,CAACE,MAAnB,gDAAG,sBAAyB,CAAzB,CAA9B,CACA,GAAMC,CAAAA,gBAAgB,CAAGX,sBAAsB,CAC7CS,qBAAqB,EAAI,CAACX,MAAM,CAACW,qBAAD,CAAhC,CAA0DA,qBAA1D,CAAkFH,SADrC,CAE7C,KAF6C,CAA/C,CAIA,GAAMM,CAAAA,IAAI,CAAGf,mBAAmB,CAACc,gBAAD,CAAmB,MAAnB,CAA2BN,eAA3B,CAAhC,CAEA,GAAMQ,CAAAA,OAAO,CAAGT,aAAa,GAAKD,OAAlC,CACA,MAAOR,CAAAA,OAAO,CACZ,gDAAO,CACLmB,OAAO,CAAED,OAAO,CAAG,IAAH,8BAAUD,IAAI,CAACF,MAAf,uCAAU,aAAc,CAAd,CAAV,+CAA8B,IADzC,CAELK,OAAO,CAAEF,OAAO,EAAIL,eAAe,CAACO,OAA3B,EAAsCH,IAAI,CAACG,OAF/C,CAAP,EADY,CAKZ,CAACH,IAAI,CAACG,OAAN,CAAeH,IAAI,CAACF,MAApB,CAA4BG,OAA5B,CAAqCL,eAAe,CAACO,OAArD,CALY,CAAd,CAOD","sourcesContent":["import { useMemo } from 'react'\nimport { safeNamehash } from 'utils/safeNamehash'\n\nimport { useSingleCallResult } from '../state/multicall/hooks'\nimport isZero from '../utils/isZero'\nimport { useENSRegistrarContract, useENSResolverContract } from './useContract'\nimport useDebounce from './useDebounce'\n\n/**\n * Does a lookup for an ENS name to find its address.\n */\nexport default function useENSAddress(ensName?: string | null): { loading: boolean; address: string | null } {\n  const debouncedName = useDebounce(ensName, 200)\n  const ensNodeArgument = useMemo(\n    () => [debouncedName === null ? undefined : safeNamehash(debouncedName)],\n    [debouncedName]\n  )\n  const registrarContract = useENSRegistrarContract(false)\n  const resolverAddress = useSingleCallResult(registrarContract, 'resolver', ensNodeArgument)\n  const resolverAddressResult = resolverAddress.result?.[0]\n  const resolverContract = useENSResolverContract(\n    resolverAddressResult && !isZero(resolverAddressResult) ? resolverAddressResult : undefined,\n    false\n  )\n  const addr = useSingleCallResult(resolverContract, 'addr', ensNodeArgument)\n\n  const changed = debouncedName !== ensName\n  return useMemo(\n    () => ({\n      address: changed ? null : addr.result?.[0] ?? null,\n      loading: changed || resolverAddress.loading || addr.loading,\n    }),\n    [addr.loading, addr.result, changed, resolverAddress.loading]\n  )\n}\n"]},"metadata":{},"sourceType":"module"}