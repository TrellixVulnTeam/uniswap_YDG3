{"ast":null,"code":"import { Fraction } from '@uniswap/sdk-core';\nimport JSBI from 'jsbi';\nexport function formatCurrencyAmount(amount, sigFigs) {\n  if (!amount) {\n    return '-';\n  }\n\n  if (JSBI.equal(amount.quotient, JSBI.BigInt(0))) {\n    return '0';\n  }\n\n  if (amount.divide(amount.decimalScale).lessThan(new Fraction(1, 100000))) {\n    return '<0.00001';\n  }\n\n  return amount.toSignificant(sigFigs);\n}\nexport function formatPrice(price, sigFigs) {\n  if (!price) {\n    return '-';\n  }\n\n  if (parseFloat(price.toFixed(sigFigs)) < 0.0001) {\n    return '<0.0001';\n  }\n\n  return price.toSignificant(sigFigs);\n}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/utils/formatCurrencyAmount.ts"],"names":["Fraction","JSBI","formatCurrencyAmount","amount","sigFigs","equal","quotient","BigInt","divide","decimalScale","lessThan","toSignificant","formatPrice","price","parseFloat","toFixed"],"mappings":"AAAA,SAAmCA,QAAnC,QAA0D,mBAA1D;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,OAAO,SAASC,oBAAT,CAA8BC,MAA9B,EAA4EC,OAA5E,EAA6F;AAClG,MAAI,CAACD,MAAL,EAAa;AACX,WAAO,GAAP;AACD;;AAED,MAAIF,IAAI,CAACI,KAAL,CAAWF,MAAM,CAACG,QAAlB,EAA4BL,IAAI,CAACM,MAAL,CAAY,CAAZ,CAA5B,CAAJ,EAAiD;AAC/C,WAAO,GAAP;AACD;;AAED,MAAIJ,MAAM,CAACK,MAAP,CAAcL,MAAM,CAACM,YAArB,EAAmCC,QAAnC,CAA4C,IAAIV,QAAJ,CAAa,CAAb,EAAgB,MAAhB,CAA5C,CAAJ,EAA0E;AACxE,WAAO,UAAP;AACD;;AAED,SAAOG,MAAM,CAACQ,aAAP,CAAqBP,OAArB,CAAP;AACD;AAED,OAAO,SAASQ,WAAT,CAAqBC,KAArB,EAAmET,OAAnE,EAAoF;AACzF,MAAI,CAACS,KAAL,EAAY;AACV,WAAO,GAAP;AACD;;AAED,MAAIC,UAAU,CAACD,KAAK,CAACE,OAAN,CAAcX,OAAd,CAAD,CAAV,GAAqC,MAAzC,EAAiD;AAC/C,WAAO,SAAP;AACD;;AAED,SAAOS,KAAK,CAACF,aAAN,CAAoBP,OAApB,CAAP;AACD","sourcesContent":["import { Currency, CurrencyAmount, Fraction, Price } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\n\nexport function formatCurrencyAmount(amount: CurrencyAmount<Currency> | undefined, sigFigs: number) {\n  if (!amount) {\n    return '-'\n  }\n\n  if (JSBI.equal(amount.quotient, JSBI.BigInt(0))) {\n    return '0'\n  }\n\n  if (amount.divide(amount.decimalScale).lessThan(new Fraction(1, 100000))) {\n    return '<0.00001'\n  }\n\n  return amount.toSignificant(sigFigs)\n}\n\nexport function formatPrice(price: Price<Currency, Currency> | undefined, sigFigs: number) {\n  if (!price) {\n    return '-'\n  }\n\n  if (parseFloat(price.toFixed(sigFigs)) < 0.0001) {\n    return '<0.0001'\n  }\n\n  return price.toSignificant(sigFigs)\n}\n"]},"metadata":{},"sourceType":"module"}