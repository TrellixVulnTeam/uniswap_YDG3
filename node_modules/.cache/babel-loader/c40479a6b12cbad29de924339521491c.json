{"ast":null,"code":"import _slicedToArray from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _regeneratorRuntime from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { TradeType } from '@uniswap/sdk-core';\nimport { InsufficientInputAmountError, InsufficientReservesError } from '@uniswap/v2-sdk';\nimport { BigNumber } from 'ethers';\n/**\n * Computes quotes for V2 off-chain. Quotes are computed using the balances\n * of the pools within each route provided.\n *\n * @export\n * @class V2QuoteProvider\n */\n\nexport var V2QuoteProvider = /*#__PURE__*/function () {\n  function V2QuoteProvider() {\n    _classCallCheck(this, V2QuoteProvider);\n  }\n\n  _createClass(V2QuoteProvider, [{\n    key: \"getQuotesManyExactIn\",\n    value: function () {\n      var _getQuotesManyExactIn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(amountIns, routes) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this.getQuotes(amountIns, routes, TradeType.EXACT_INPUT));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getQuotesManyExactIn(_x, _x2) {\n        return _getQuotesManyExactIn.apply(this, arguments);\n      }\n\n      return getQuotesManyExactIn;\n    }()\n  }, {\n    key: \"getQuotesManyExactOut\",\n    value: function () {\n      var _getQuotesManyExactOut = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(amountOuts, routes) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.getQuotes(amountOuts, routes, TradeType.EXACT_OUTPUT));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getQuotesManyExactOut(_x3, _x4) {\n        return _getQuotesManyExactOut.apply(this, arguments);\n      }\n\n      return getQuotesManyExactOut;\n    }()\n  }, {\n    key: \"getQuotes\",\n    value: function () {\n      var _getQuotes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(amounts, routes, tradeType) {\n        var routesWithQuotes, _iterator, _step, route, amountQuotes, _iterator2, _step2, amount, outputAmount, _iterator3, _step3, pair, _pair$getOutputAmount, _pair$getOutputAmount2, outputAmountNew, inputAmount, i, _pair, _pair$getInputAmount, _pair$getInputAmount2;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                routesWithQuotes = [];\n                _iterator = _createForOfIteratorHelper(routes);\n                _context3.prev = 2;\n\n                _iterator.s();\n\n              case 4:\n                if ((_step = _iterator.n()).done) {\n                  _context3.next = 36;\n                  break;\n                }\n\n                route = _step.value;\n                amountQuotes = [];\n                _iterator2 = _createForOfIteratorHelper(amounts);\n                _context3.prev = 8;\n\n                _iterator2.s();\n\n              case 10:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context3.next = 25;\n                  break;\n                }\n\n                amount = _step2.value;\n                _context3.prev = 12;\n\n                if (tradeType == TradeType.EXACT_INPUT) {\n                  outputAmount = amount.wrapped;\n                  _iterator3 = _createForOfIteratorHelper(route.pairs);\n\n                  try {\n                    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                      pair = _step3.value;\n                      _pair$getOutputAmount = pair.getOutputAmount(outputAmount), _pair$getOutputAmount2 = _slicedToArray(_pair$getOutputAmount, 1), outputAmountNew = _pair$getOutputAmount2[0];\n                      outputAmount = outputAmountNew;\n                    }\n                  } catch (err) {\n                    _iterator3.e(err);\n                  } finally {\n                    _iterator3.f();\n                  }\n\n                  amountQuotes.push({\n                    amount: amount,\n                    quote: BigNumber.from(outputAmount.quotient.toString())\n                  });\n                } else {\n                  inputAmount = amount.wrapped;\n\n                  for (i = route.pairs.length - 1; i >= 0; i--) {\n                    _pair = route.pairs[i];\n                    _pair$getInputAmount = _pair.getInputAmount(inputAmount);\n                    _pair$getInputAmount2 = _slicedToArray(_pair$getInputAmount, 1);\n                    inputAmount = _pair$getInputAmount2[0];\n                  }\n\n                  amountQuotes.push({\n                    amount: amount,\n                    quote: BigNumber.from(inputAmount.quotient.toString())\n                  });\n                }\n\n                _context3.next = 23;\n                break;\n\n              case 16:\n                _context3.prev = 16;\n                _context3.t0 = _context3[\"catch\"](12);\n\n                if (!(_context3.t0 instanceof InsufficientInputAmountError || _context3.t0 instanceof InsufficientReservesError)) {\n                  _context3.next = 22;\n                  break;\n                }\n\n                amountQuotes.push({\n                  amount: amount,\n                  quote: null\n                });\n                _context3.next = 23;\n                break;\n\n              case 22:\n                throw _context3.t0;\n\n              case 23:\n                _context3.next = 10;\n                break;\n\n              case 25:\n                _context3.next = 30;\n                break;\n\n              case 27:\n                _context3.prev = 27;\n                _context3.t1 = _context3[\"catch\"](8);\n\n                _iterator2.e(_context3.t1);\n\n              case 30:\n                _context3.prev = 30;\n\n                _iterator2.f();\n\n                return _context3.finish(30);\n\n              case 33:\n                routesWithQuotes.push([route, amountQuotes]);\n\n              case 34:\n                _context3.next = 4;\n                break;\n\n              case 36:\n                _context3.next = 41;\n                break;\n\n              case 38:\n                _context3.prev = 38;\n                _context3.t2 = _context3[\"catch\"](2);\n\n                _iterator.e(_context3.t2);\n\n              case 41:\n                _context3.prev = 41;\n\n                _iterator.f();\n\n                return _context3.finish(41);\n\n              case 44:\n                return _context3.abrupt(\"return\", {\n                  routesWithQuotes: routesWithQuotes\n                });\n\n              case 45:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[2, 38, 41, 44], [8, 27, 30, 33], [12, 16]]);\n      }));\n\n      function getQuotes(_x5, _x6, _x7) {\n        return _getQuotes.apply(this, arguments);\n      }\n\n      return getQuotes;\n    }()\n  }]);\n\n  return V2QuoteProvider;\n}();","map":{"version":3,"sources":["../../../../../src/providers/v2/quote-provider.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { TradeType } from '@uniswap/sdk-core';\nimport { InsufficientInputAmountError, InsufficientReservesError, } from '@uniswap/v2-sdk';\nimport { BigNumber } from 'ethers';\n/**\n * Computes quotes for V2 off-chain. Quotes are computed using the balances\n * of the pools within each route provided.\n *\n * @export\n * @class V2QuoteProvider\n */\nexport class V2QuoteProvider {\n    constructor() { }\n    async getQuotesManyExactIn(amountIns, routes) {\n        return this.getQuotes(amountIns, routes, TradeType.EXACT_INPUT);\n    }\n    async getQuotesManyExactOut(amountOuts, routes) {\n        return this.getQuotes(amountOuts, routes, TradeType.EXACT_OUTPUT);\n    }\n    async getQuotes(amounts, routes, tradeType) {\n        const routesWithQuotes = [];\n        for (const route of routes) {\n            const amountQuotes = [];\n            for (const amount of amounts) {\n                try {\n                    if (tradeType == TradeType.EXACT_INPUT) {\n                        let outputAmount = amount.wrapped;\n                        for (const pair of route.pairs) {\n                            const [outputAmountNew] = pair.getOutputAmount(outputAmount);\n                            outputAmount = outputAmountNew;\n                        }\n                        amountQuotes.push({\n                            amount,\n                            quote: BigNumber.from(outputAmount.quotient.toString()),\n                        });\n                    }\n                    else {\n                        let inputAmount = amount.wrapped;\n                        for (let i = route.pairs.length - 1; i >= 0; i--) {\n                            const pair = route.pairs[i];\n                            [inputAmount] = pair.getInputAmount(inputAmount);\n                        }\n                        amountQuotes.push({\n                            amount,\n                            quote: BigNumber.from(inputAmount.quotient.toString()),\n                        });\n                    }\n                }\n                catch (err) {\n                    // Can fail to get quotes, e.g. throws InsufficientReservesError or InsufficientInputAmountError.\n                    if (err instanceof InsufficientInputAmountError ||\n                        err instanceof InsufficientReservesError) {\n                        amountQuotes.push({ amount, quote: null });\n                    }\n                    else {\n                        throw err;\n                    }\n                }\n            }\n            routesWithQuotes.push([route, amountQuotes]);\n        }\n        return {\n            routesWithQuotes,\n        };\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVvdGUtcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvcHJvdmlkZXJzL3YyL3F1b3RlLXByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM5QyxPQUFPLEVBQ0wsNEJBQTRCLEVBQzVCLHlCQUF5QixHQUMxQixNQUFNLGlCQUFpQixDQUFDO0FBQ3pCLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxRQUFRLENBQUM7QUF3Qm5DOzs7Ozs7R0FNRztBQUNILE1BQU0sT0FBTyxlQUFlO0lBQzFCLGdCQUFlLENBQUM7SUFFVCxLQUFLLENBQUMsb0JBQW9CLENBQy9CLFNBQTJCLEVBQzNCLE1BQWlCO1FBRWpCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBRU0sS0FBSyxDQUFDLHFCQUFxQixDQUNoQyxVQUE0QixFQUM1QixNQUFpQjtRQUVqQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVPLEtBQUssQ0FBQyxTQUFTLENBQ3JCLE9BQXlCLEVBQ3pCLE1BQWlCLEVBQ2pCLFNBQW9CO1FBRXBCLE1BQU0sZ0JBQWdCLEdBQXdCLEVBQUUsQ0FBQztRQUVqRCxLQUFLLE1BQU0sS0FBSyxJQUFJLE1BQU0sRUFBRTtZQUMxQixNQUFNLFlBQVksR0FBb0IsRUFBRSxDQUFDO1lBRXpDLEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFO2dCQUM1QixJQUFJO29CQUNGLElBQUksU0FBUyxJQUFJLFNBQVMsQ0FBQyxXQUFXLEVBQUU7d0JBQ3RDLElBQUksWUFBWSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7d0JBRWxDLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxDQUFDLEtBQUssRUFBRTs0QkFDOUIsTUFBTSxDQUFDLGVBQWUsQ0FBQyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLENBQUM7NEJBQzdELFlBQVksR0FBRyxlQUFlLENBQUM7eUJBQ2hDO3dCQUVELFlBQVksQ0FBQyxJQUFJLENBQUM7NEJBQ2hCLE1BQU07NEJBQ04sS0FBSyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQzt5QkFDeEQsQ0FBQyxDQUFDO3FCQUNKO3lCQUFNO3dCQUNMLElBQUksV0FBVyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUM7d0JBRWpDLEtBQUssSUFBSSxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7NEJBQ2hELE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFFLENBQUM7NEJBQzdCLENBQUMsV0FBVyxDQUFDLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQzt5QkFDbEQ7d0JBRUQsWUFBWSxDQUFDLElBQUksQ0FBQzs0QkFDaEIsTUFBTTs0QkFDTixLQUFLLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO3lCQUN2RCxDQUFDLENBQUM7cUJBQ0o7aUJBQ0Y7Z0JBQUMsT0FBTyxHQUFHLEVBQUU7b0JBQ1osaUdBQWlHO29CQUNqRyxJQUNFLEdBQUcsWUFBWSw0QkFBNEI7d0JBQzNDLEdBQUcsWUFBWSx5QkFBeUIsRUFDeEM7d0JBQ0EsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztxQkFDNUM7eUJBQU07d0JBQ0wsTUFBTSxHQUFHLENBQUM7cUJBQ1g7aUJBQ0Y7YUFDRjtZQUVELGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO1NBQzlDO1FBRUQsT0FBTztZQUNMLGdCQUFnQjtTQUNqQixDQUFDO0lBQ0osQ0FBQztDQUNGIn0="]},"metadata":{},"sourceType":"module"}