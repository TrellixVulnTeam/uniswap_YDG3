{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { FeeAmount } from '@uniswap/v3-sdk';\nimport { SupportedChainId } from 'constants/chains';\nimport { useMemo } from 'react';\nimport { useAllCurrencyCombinations } from './useAllCurrencyCombinations';\nimport { PoolState, usePools } from './usePools';\nimport { useActiveWeb3React } from './web3';\n/**\n * Returns all the existing pools that should be considered for swapping between an input currency and an output currency\n * @param currencyIn the input currency\n * @param currencyOut the output currency\n */\n\nexport function useV3SwapPools(currencyIn, currencyOut) {\n  _s();\n\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const allCurrencyCombinations = useAllCurrencyCombinations(currencyIn, currencyOut);\n  const allCurrencyCombinationsWithAllFees = useMemo(() => allCurrencyCombinations.reduce((list, [tokenA, tokenB]) => {\n    return chainId === SupportedChainId.MAINNET ? list.concat([[tokenA, tokenB, FeeAmount.LOW], [tokenA, tokenB, FeeAmount.MEDIUM], [tokenA, tokenB, FeeAmount.HIGH]]) : list.concat([[tokenA, tokenB, FeeAmount.LOWEST], [tokenA, tokenB, FeeAmount.LOW], [tokenA, tokenB, FeeAmount.MEDIUM], [tokenA, tokenB, FeeAmount.HIGH]]);\n  }, []), [allCurrencyCombinations, chainId]);\n  const pools = usePools(allCurrencyCombinationsWithAllFees);\n  return useMemo(() => {\n    return {\n      pools: pools.filter(tuple => {\n        return tuple[0] === PoolState.EXISTS && tuple[1] !== null;\n      }).map(([, pool]) => pool),\n      loading: pools.some(([state]) => state === PoolState.LOADING)\n    };\n  }, [pools]);\n}\n\n_s(useV3SwapPools, \"5585H7UDiS429VyqU09O7b3dXGE=\", false, function () {\n  return [useActiveWeb3React, useAllCurrencyCombinations, usePools];\n});","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/hooks/useV3SwapPools.ts"],"names":["FeeAmount","SupportedChainId","useMemo","useAllCurrencyCombinations","PoolState","usePools","useActiveWeb3React","useV3SwapPools","currencyIn","currencyOut","chainId","allCurrencyCombinations","allCurrencyCombinationsWithAllFees","reduce","list","tokenA","tokenB","MAINNET","concat","LOW","MEDIUM","HIGH","LOWEST","pools","filter","tuple","EXISTS","map","pool","loading","some","state","LOADING"],"mappings":";;AACA,SAASA,SAAT,QAAgC,iBAAhC;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,SAASC,OAAT,QAAwB,OAAxB;AAEA,SAASC,0BAAT,QAA2C,8BAA3C;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,YAApC;AACA,SAASC,kBAAT,QAAmC,QAAnC;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,cAAT,CACLC,UADK,EAELC,WAFK,EAML;AAAA;;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAcJ,kBAAkB,EAAtC;AAEA,QAAMK,uBAAuB,GAAGR,0BAA0B,CAACK,UAAD,EAAaC,WAAb,CAA1D;AAEA,QAAMG,kCAA+D,GAAGV,OAAO,CAC7E,MACES,uBAAuB,CAACE,MAAxB,CAA4D,CAACC,IAAD,EAAO,CAACC,MAAD,EAASC,MAAT,CAAP,KAA4B;AACtF,WAAON,OAAO,KAAKT,gBAAgB,CAACgB,OAA7B,GACHH,IAAI,CAACI,MAAL,CAAY,CACV,CAACH,MAAD,EAASC,MAAT,EAAiBhB,SAAS,CAACmB,GAA3B,CADU,EAEV,CAACJ,MAAD,EAASC,MAAT,EAAiBhB,SAAS,CAACoB,MAA3B,CAFU,EAGV,CAACL,MAAD,EAASC,MAAT,EAAiBhB,SAAS,CAACqB,IAA3B,CAHU,CAAZ,CADG,GAMHP,IAAI,CAACI,MAAL,CAAY,CACV,CAACH,MAAD,EAASC,MAAT,EAAiBhB,SAAS,CAACsB,MAA3B,CADU,EAEV,CAACP,MAAD,EAASC,MAAT,EAAiBhB,SAAS,CAACmB,GAA3B,CAFU,EAGV,CAACJ,MAAD,EAASC,MAAT,EAAiBhB,SAAS,CAACoB,MAA3B,CAHU,EAIV,CAACL,MAAD,EAASC,MAAT,EAAiBhB,SAAS,CAACqB,IAA3B,CAJU,CAAZ,CANJ;AAYD,GAbD,EAaG,EAbH,CAF2E,EAgB7E,CAACV,uBAAD,EAA0BD,OAA1B,CAhB6E,CAA/E;AAmBA,QAAMa,KAAK,GAAGlB,QAAQ,CAACO,kCAAD,CAAtB;AAEA,SAAOV,OAAO,CAAC,MAAM;AACnB,WAAO;AACLqB,MAAAA,KAAK,EAAEA,KAAK,CACTC,MADI,CACIC,KAAD,IAA8C;AACpD,eAAOA,KAAK,CAAC,CAAD,CAAL,KAAarB,SAAS,CAACsB,MAAvB,IAAiCD,KAAK,CAAC,CAAD,CAAL,KAAa,IAArD;AACD,OAHI,EAIJE,GAJI,CAIA,CAAC,GAAGC,IAAH,CAAD,KAAcA,IAJd,CADF;AAMLC,MAAAA,OAAO,EAAEN,KAAK,CAACO,IAAN,CAAW,CAAC,CAACC,KAAD,CAAD,KAAaA,KAAK,KAAK3B,SAAS,CAAC4B,OAA5C;AANJ,KAAP;AAQD,GATa,EASX,CAACT,KAAD,CATW,CAAd;AAUD;;GA1CehB,c;UAOMD,kB,EAEYH,0B,EAqBlBE,Q","sourcesContent":["import { Currency, Token } from '@uniswap/sdk-core'\nimport { FeeAmount, Pool } from '@uniswap/v3-sdk'\nimport { SupportedChainId } from 'constants/chains'\nimport { useMemo } from 'react'\n\nimport { useAllCurrencyCombinations } from './useAllCurrencyCombinations'\nimport { PoolState, usePools } from './usePools'\nimport { useActiveWeb3React } from './web3'\n\n/**\n * Returns all the existing pools that should be considered for swapping between an input currency and an output currency\n * @param currencyIn the input currency\n * @param currencyOut the output currency\n */\nexport function useV3SwapPools(\n  currencyIn?: Currency,\n  currencyOut?: Currency\n): {\n  pools: Pool[]\n  loading: boolean\n} {\n  const { chainId } = useActiveWeb3React()\n\n  const allCurrencyCombinations = useAllCurrencyCombinations(currencyIn, currencyOut)\n\n  const allCurrencyCombinationsWithAllFees: [Token, Token, FeeAmount][] = useMemo(\n    () =>\n      allCurrencyCombinations.reduce<[Token, Token, FeeAmount][]>((list, [tokenA, tokenB]) => {\n        return chainId === SupportedChainId.MAINNET\n          ? list.concat([\n              [tokenA, tokenB, FeeAmount.LOW],\n              [tokenA, tokenB, FeeAmount.MEDIUM],\n              [tokenA, tokenB, FeeAmount.HIGH],\n            ])\n          : list.concat([\n              [tokenA, tokenB, FeeAmount.LOWEST],\n              [tokenA, tokenB, FeeAmount.LOW],\n              [tokenA, tokenB, FeeAmount.MEDIUM],\n              [tokenA, tokenB, FeeAmount.HIGH],\n            ])\n      }, []),\n    [allCurrencyCombinations, chainId]\n  )\n\n  const pools = usePools(allCurrencyCombinationsWithAllFees)\n\n  return useMemo(() => {\n    return {\n      pools: pools\n        .filter((tuple): tuple is [PoolState.EXISTS, Pool] => {\n          return tuple[0] === PoolState.EXISTS && tuple[1] !== null\n        })\n        .map(([, pool]) => pool),\n      loading: pools.some(([state]) => state === PoolState.LOADING),\n    }\n  }, [pools])\n}\n"]},"metadata":{},"sourceType":"module"}