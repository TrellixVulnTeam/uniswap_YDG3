{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { filterToKey } from './utils';\nconst slice = createSlice({\n  name: 'logs',\n  initialState: {},\n  reducers: {\n    addListener(state, {\n      payload: {\n        chainId,\n        filter\n      }\n    }) {\n      if (!state[chainId]) state[chainId] = {};\n      const key = filterToKey(filter);\n      if (!state[chainId][key]) state[chainId][key] = {\n        listeners: 1\n      };else state[chainId][key].listeners++;\n    },\n\n    fetchingLogs(state, {\n      payload: {\n        chainId,\n        filters,\n        blockNumber\n      }\n    }) {\n      if (!state[chainId]) return;\n\n      for (const filter of filters) {\n        const key = filterToKey(filter);\n        if (!state[chainId][key]) continue;\n        state[chainId][key].fetchingBlockNumber = blockNumber;\n      }\n    },\n\n    fetchedLogs(state, {\n      payload: {\n        chainId,\n        filter,\n        results\n      }\n    }) {\n      if (!state[chainId]) return;\n      const key = filterToKey(filter);\n      const fetchState = state[chainId][key];\n      if (!fetchState || fetchState.results && fetchState.results.blockNumber > results.blockNumber) return;\n      fetchState.results = results;\n    },\n\n    fetchedLogsError(state, {\n      payload: {\n        chainId,\n        filter,\n        blockNumber\n      }\n    }) {\n      if (!state[chainId]) return;\n      const key = filterToKey(filter);\n      const fetchState = state[chainId][key];\n      if (!fetchState || fetchState.results && fetchState.results.blockNumber > blockNumber) return;\n      fetchState.results = {\n        blockNumber,\n        error: true\n      };\n    },\n\n    removeListener(state, {\n      payload: {\n        chainId,\n        filter\n      }\n    }) {\n      if (!state[chainId]) return;\n      const key = filterToKey(filter);\n      if (!state[chainId][key]) return;\n      state[chainId][key].listeners--;\n    }\n\n  }\n});\nexport default slice.reducer;\nexport const {\n  addListener,\n  removeListener,\n  fetchedLogs,\n  fetchedLogsError,\n  fetchingLogs\n} = slice.actions;","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/state/logs/slice.ts"],"names":["createSlice","filterToKey","slice","name","initialState","reducers","addListener","state","payload","chainId","filter","key","listeners","fetchingLogs","filters","blockNumber","fetchingBlockNumber","fetchedLogs","results","fetchState","fetchedLogsError","error","removeListener","reducer","actions"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAEA,SAAsBC,WAAtB,QAA8C,SAA9C;AAsBA,MAAMC,KAAK,GAAGF,WAAW,CAAC;AACxBG,EAAAA,IAAI,EAAE,MADkB;AAExBC,EAAAA,YAAY,EAAE,EAFU;AAGxBC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,CAACC,KAAD,EAAQ;AAAEC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX;AAAX,KAAR,EAAmG;AAC5G,UAAI,CAACH,KAAK,CAACE,OAAD,CAAV,EAAqBF,KAAK,CAACE,OAAD,CAAL,GAAiB,EAAjB;AACrB,YAAME,GAAG,GAAGV,WAAW,CAACS,MAAD,CAAvB;AACA,UAAI,CAACH,KAAK,CAACE,OAAD,CAAL,CAAeE,GAAf,CAAL,EACEJ,KAAK,CAACE,OAAD,CAAL,CAAeE,GAAf,IAAsB;AACpBC,QAAAA,SAAS,EAAE;AADS,OAAtB,CADF,KAIKL,KAAK,CAACE,OAAD,CAAL,CAAeE,GAAf,EAAoBC,SAApB;AACN,KATO;;AAURC,IAAAA,YAAY,CACVN,KADU,EAEV;AACEC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,OAAF;AAAWK,QAAAA,OAAX;AAAoBC,QAAAA;AAApB;AADX,KAFU,EAKV;AACA,UAAI,CAACR,KAAK,CAACE,OAAD,CAAV,EAAqB;;AACrB,WAAK,MAAMC,MAAX,IAAqBI,OAArB,EAA8B;AAC5B,cAAMH,GAAG,GAAGV,WAAW,CAACS,MAAD,CAAvB;AACA,YAAI,CAACH,KAAK,CAACE,OAAD,CAAL,CAAeE,GAAf,CAAL,EAA0B;AAC1BJ,QAAAA,KAAK,CAACE,OAAD,CAAL,CAAeE,GAAf,EAAoBK,mBAApB,GAA0CD,WAA1C;AACD;AACF,KAtBO;;AAuBRE,IAAAA,WAAW,CACTV,KADS,EAET;AACEC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,MAAX;AAAmBQ,QAAAA;AAAnB;AADX,KAFS,EAKT;AACA,UAAI,CAACX,KAAK,CAACE,OAAD,CAAV,EAAqB;AACrB,YAAME,GAAG,GAAGV,WAAW,CAACS,MAAD,CAAvB;AACA,YAAMS,UAAU,GAAGZ,KAAK,CAACE,OAAD,CAAL,CAAeE,GAAf,CAAnB;AACA,UAAI,CAACQ,UAAD,IAAgBA,UAAU,CAACD,OAAX,IAAsBC,UAAU,CAACD,OAAX,CAAmBH,WAAnB,GAAiCG,OAAO,CAACH,WAAnF,EAAiG;AACjGI,MAAAA,UAAU,CAACD,OAAX,GAAqBA,OAArB;AACD,KAlCO;;AAmCRE,IAAAA,gBAAgB,CACdb,KADc,EAEd;AACEC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,MAAX;AAAmBK,QAAAA;AAAnB;AADX,KAFc,EAKd;AACA,UAAI,CAACR,KAAK,CAACE,OAAD,CAAV,EAAqB;AACrB,YAAME,GAAG,GAAGV,WAAW,CAACS,MAAD,CAAvB;AACA,YAAMS,UAAU,GAAGZ,KAAK,CAACE,OAAD,CAAL,CAAeE,GAAf,CAAnB;AACA,UAAI,CAACQ,UAAD,IAAgBA,UAAU,CAACD,OAAX,IAAsBC,UAAU,CAACD,OAAX,CAAmBH,WAAnB,GAAiCA,WAA3E,EAAyF;AACzFI,MAAAA,UAAU,CAACD,OAAX,GAAqB;AACnBH,QAAAA,WADmB;AAEnBM,QAAAA,KAAK,EAAE;AAFY,OAArB;AAID,KAjDO;;AAkDRC,IAAAA,cAAc,CAACf,KAAD,EAAQ;AAAEC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX;AAAX,KAAR,EAAmG;AAC/G,UAAI,CAACH,KAAK,CAACE,OAAD,CAAV,EAAqB;AACrB,YAAME,GAAG,GAAGV,WAAW,CAACS,MAAD,CAAvB;AACA,UAAI,CAACH,KAAK,CAACE,OAAD,CAAL,CAAeE,GAAf,CAAL,EAA0B;AAC1BJ,MAAAA,KAAK,CAACE,OAAD,CAAL,CAAeE,GAAf,EAAoBC,SAApB;AACD;;AAvDO;AAHc,CAAD,CAAzB;AA8DA,eAAeV,KAAK,CAACqB,OAArB;AACA,OAAO,MAAM;AAAEjB,EAAAA,WAAF;AAAegB,EAAAA,cAAf;AAA+BL,EAAAA,WAA/B;AAA4CG,EAAAA,gBAA5C;AAA8DP,EAAAA;AAA9D,IAA+EX,KAAK,CAACsB,OAA3F","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nimport { EventFilter, filterToKey, Log } from './utils'\n\nexport interface LogsState {\n  [chainId: number]: {\n    [filterKey: string]: {\n      listeners: number\n      fetchingBlockNumber?: number\n      results?:\n        | {\n            blockNumber: number\n            logs: Log[]\n            error?: undefined\n          }\n        | {\n            blockNumber: number\n            logs?: undefined\n            error: true\n          }\n    }\n  }\n}\n\nconst slice = createSlice({\n  name: 'logs',\n  initialState: {} as LogsState,\n  reducers: {\n    addListener(state, { payload: { chainId, filter } }: PayloadAction<{ chainId: number; filter: EventFilter }>) {\n      if (!state[chainId]) state[chainId] = {}\n      const key = filterToKey(filter)\n      if (!state[chainId][key])\n        state[chainId][key] = {\n          listeners: 1,\n        }\n      else state[chainId][key].listeners++\n    },\n    fetchingLogs(\n      state,\n      {\n        payload: { chainId, filters, blockNumber },\n      }: PayloadAction<{ chainId: number; filters: EventFilter[]; blockNumber: number }>\n    ) {\n      if (!state[chainId]) return\n      for (const filter of filters) {\n        const key = filterToKey(filter)\n        if (!state[chainId][key]) continue\n        state[chainId][key].fetchingBlockNumber = blockNumber\n      }\n    },\n    fetchedLogs(\n      state,\n      {\n        payload: { chainId, filter, results },\n      }: PayloadAction<{ chainId: number; filter: EventFilter; results: { blockNumber: number; logs: Log[] } }>\n    ) {\n      if (!state[chainId]) return\n      const key = filterToKey(filter)\n      const fetchState = state[chainId][key]\n      if (!fetchState || (fetchState.results && fetchState.results.blockNumber > results.blockNumber)) return\n      fetchState.results = results\n    },\n    fetchedLogsError(\n      state,\n      {\n        payload: { chainId, filter, blockNumber },\n      }: PayloadAction<{ chainId: number; blockNumber: number; filter: EventFilter }>\n    ) {\n      if (!state[chainId]) return\n      const key = filterToKey(filter)\n      const fetchState = state[chainId][key]\n      if (!fetchState || (fetchState.results && fetchState.results.blockNumber > blockNumber)) return\n      fetchState.results = {\n        blockNumber,\n        error: true,\n      }\n    },\n    removeListener(state, { payload: { chainId, filter } }: PayloadAction<{ chainId: number; filter: EventFilter }>) {\n      if (!state[chainId]) return\n      const key = filterToKey(filter)\n      if (!state[chainId][key]) return\n      state[chainId][key].listeners--\n    },\n  },\n})\n\nexport default slice.reducer\nexport const { addListener, removeListener, fetchedLogs, fetchedLogsError, fetchingLogs } = slice.actions\n"]},"metadata":{},"sourceType":"module"}