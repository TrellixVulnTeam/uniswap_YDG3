{"ast":null,"code":"import _objectSpread from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectWithoutProperties from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import _styled from\"styled-components\";var _excluded=[\"currency\",\"size\",\"style\"];import EthereumLogo from'assets/images/ethereum-logo.png';import MaticLogo from\"assets/svg/matic-token-icon.svg\";import{SupportedChainId}from'constants/chains';import useHttpLocations from'hooks/useHttpLocations';import React,{useMemo}from'react';import{WrappedTokenInfo}from'state/lists/wrappedTokenInfo';import Logo from'../Logo';import{jsx as _jsx}from\"react/jsx-runtime\";function chainIdToNetworkName(networkId){switch(networkId){case SupportedChainId.MAINNET:return'ethereum';case SupportedChainId.ARBITRUM_ONE:return'arbitrum';case SupportedChainId.OPTIMISM:return'optimism';default:return'ethereum';}}export var getTokenLogoURL=function getTokenLogoURL(address){var chainId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:SupportedChainId.MAINNET;var networkName=chainIdToNetworkName(chainId);var networksWithUrls=[SupportedChainId.ARBITRUM_ONE,SupportedChainId.MAINNET,SupportedChainId.OPTIMISM];if(networksWithUrls.includes(chainId)){return\"https://raw.githubusercontent.com/Uniswap/assets/master/blockchains/\".concat(networkName,\"/assets/\").concat(address,\"/logo.png\");}};var StyledNativeLogo=_styled.img.withConfig({componentId:\"sc-1fvnadz-0\"})([\"width:\",\";height:\",\";background:radial-gradient(white 50%,#ffffff00 calc(75% + 1px),#ffffff00 100%);border-radius:50%;-mox-box-shadow:0 0 1px white;-webkit-box-shadow:0 0 1px white;box-shadow:0 0 1px white;border:0px solid rgba(255,255,255,0);\"],function(_ref){var size=_ref.size;return size;},function(_ref2){var size=_ref2.size;return size;});var StyledLogo=_styled(Logo).withConfig({componentId:\"sc-1fvnadz-1\"})([\"width:\",\";height:\",\";background:radial-gradient(white 50%,#ffffff00 calc(75% + 1px),#ffffff00 100%);border-radius:50%;-mox-box-shadow:0 0 1px black;-webkit-box-shadow:0 0 1px black;box-shadow:0 0 1px black;border:0px solid rgba(255,255,255,0);\"],function(_ref3){var size=_ref3.size;return size;},function(_ref4){var size=_ref4.size;return size;});export default function CurrencyLogo(_ref5){var _currency$symbol;var currency=_ref5.currency,_ref5$size=_ref5.size,size=_ref5$size===void 0?'24px':_ref5$size,style=_ref5.style,rest=_objectWithoutProperties(_ref5,_excluded);var uriLocations=useHttpLocations(currency instanceof WrappedTokenInfo?currency.logoURI:undefined);var srcs=useMemo(function(){if(!currency||currency.isNative)return[];if(currency.isToken){var defaultUrls=[];var url=getTokenLogoURL(currency.address,currency.chainId);if(url){defaultUrls.push(url);}if(currency instanceof WrappedTokenInfo){return[].concat(_toConsumableArray(uriLocations),defaultUrls);}return defaultUrls;}return[];},[currency,uriLocations]);if(currency===null||currency===void 0?void 0:currency.isNative){var nativeLogoUrl;switch(currency.chainId){case SupportedChainId.POLYGON_MUMBAI:case SupportedChainId.POLYGON:nativeLogoUrl=MaticLogo;break;default:nativeLogoUrl=EthereumLogo;break;}return/*#__PURE__*/_jsx(StyledNativeLogo,_objectSpread({src:nativeLogoUrl,alt:\"ethereum logo\",size:size,style:style},rest));}return/*#__PURE__*/_jsx(StyledLogo,_objectSpread({size:size,srcs:srcs,alt:\"\".concat((_currency$symbol=currency===null||currency===void 0?void 0:currency.symbol)!==null&&_currency$symbol!==void 0?_currency$symbol:'token',\" logo\"),style:style},rest));}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/components/CurrencyLogo/index.tsx"],"names":["EthereumLogo","SupportedChainId","useHttpLocations","React","useMemo","WrappedTokenInfo","Logo","chainIdToNetworkName","networkId","MAINNET","ARBITRUM_ONE","OPTIMISM","getTokenLogoURL","address","chainId","networkName","networksWithUrls","includes","StyledNativeLogo","styled","img","size","StyledLogo","CurrencyLogo","currency","style","rest","uriLocations","logoURI","undefined","srcs","isNative","isToken","defaultUrls","url","push","nativeLogoUrl","POLYGON_MUMBAI","POLYGON","MaticLogo","symbol"],"mappings":"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","sourcesContent":["import { Currency } from '@uniswap/sdk-core'\nimport EthereumLogo from 'assets/images/ethereum-logo.png'\nimport MaticLogo from 'assets/svg/matic-token-icon.svg'\nimport { SupportedChainId } from 'constants/chains'\nimport useHttpLocations from 'hooks/useHttpLocations'\nimport React, { useMemo } from 'react'\nimport { WrappedTokenInfo } from 'state/lists/wrappedTokenInfo'\nimport styled from 'styled-components/macro'\n\nimport Logo from '../Logo'\n\ntype Network = 'ethereum' | 'arbitrum' | 'optimism'\n\nfunction chainIdToNetworkName(networkId: SupportedChainId): Network {\n  switch (networkId) {\n    case SupportedChainId.MAINNET:\n      return 'ethereum'\n    case SupportedChainId.ARBITRUM_ONE:\n      return 'arbitrum'\n    case SupportedChainId.OPTIMISM:\n      return 'optimism'\n    default:\n      return 'ethereum'\n  }\n}\n\nexport const getTokenLogoURL = (\n  address: string,\n  chainId: SupportedChainId = SupportedChainId.MAINNET\n): string | void => {\n  const networkName = chainIdToNetworkName(chainId)\n  const networksWithUrls = [SupportedChainId.ARBITRUM_ONE, SupportedChainId.MAINNET, SupportedChainId.OPTIMISM]\n  if (networksWithUrls.includes(chainId)) {\n    return `https://raw.githubusercontent.com/Uniswap/assets/master/blockchains/${networkName}/assets/${address}/logo.png`\n  }\n}\n\nconst StyledNativeLogo = styled.img<{ size: string }>`\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n  background: radial-gradient(white 50%, #ffffff00 calc(75% + 1px), #ffffff00 100%);\n\n  border-radius: 50%;\n  -mox-box-shadow: 0 0 1px white;\n  -webkit-box-shadow: 0 0 1px white;\n  box-shadow: 0 0 1px white;\n  border: 0px solid rgba(255, 255, 255, 0);\n`\n\nconst StyledLogo = styled(Logo)<{ size: string }>`\n  width: ${({ size }) => size};\n  height: ${({ size }) => size};\n  background: radial-gradient(white 50%, #ffffff00 calc(75% + 1px), #ffffff00 100%);\n  border-radius: 50%;\n  -mox-box-shadow: 0 0 1px black;\n  -webkit-box-shadow: 0 0 1px black;\n  box-shadow: 0 0 1px black;\n  border: 0px solid rgba(255, 255, 255, 0);\n`\n\nexport default function CurrencyLogo({\n  currency,\n  size = '24px',\n  style,\n  ...rest\n}: {\n  currency?: Currency | null\n  size?: string\n  style?: React.CSSProperties\n}) {\n  const uriLocations = useHttpLocations(currency instanceof WrappedTokenInfo ? currency.logoURI : undefined)\n\n  const srcs: string[] = useMemo(() => {\n    if (!currency || currency.isNative) return []\n\n    if (currency.isToken) {\n      const defaultUrls = []\n      const url = getTokenLogoURL(currency.address, currency.chainId)\n      if (url) {\n        defaultUrls.push(url)\n      }\n      if (currency instanceof WrappedTokenInfo) {\n        return [...uriLocations, ...defaultUrls]\n      }\n      return defaultUrls\n    }\n    return []\n  }, [currency, uriLocations])\n\n  if (currency?.isNative) {\n    let nativeLogoUrl: string\n    switch (currency.chainId) {\n      case SupportedChainId.POLYGON_MUMBAI:\n      case SupportedChainId.POLYGON:\n        nativeLogoUrl = MaticLogo\n        break\n      default:\n        nativeLogoUrl = EthereumLogo\n        break\n    }\n    return <StyledNativeLogo src={nativeLogoUrl} alt=\"ethereum logo\" size={size} style={style} {...rest} />\n  }\n\n  return <StyledLogo size={size} srcs={srcs} alt={`${currency?.symbol ?? 'token'} logo`} style={style} {...rest} />\n}\n"]},"metadata":{},"sourceType":"module"}