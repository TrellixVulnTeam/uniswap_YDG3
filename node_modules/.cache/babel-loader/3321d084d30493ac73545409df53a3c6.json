{"ast":null,"code":"/**\n * Obliterator Iterator Class\n * ===========================\n *\n * Simple class representing the library's iterators.\n */\n\n/**\n * Iterator class.\n *\n * @constructor\n * @param {function} next - Next function.\n */\nfunction Iterator(next) {\n  // Hiding the given function\n  Object.defineProperty(this, '_next', {\n    writable: false,\n    enumerable: false,\n    value: next\n  }); // Is the iterator complete?\n\n  this.done = false;\n}\n/**\n * Next function.\n *\n * @return {object}\n */\n// NOTE: maybe this should dropped for performance?\n\n\nIterator.prototype.next = function () {\n  if (this.done) return {\n    done: true\n  };\n\n  var step = this._next();\n\n  if (step.done) this.done = true;\n  return step;\n};\n/**\n * If symbols are supported, we add `next` to `Symbol.iterator`.\n */\n\n\nif (typeof Symbol !== 'undefined') Iterator.prototype[Symbol.iterator] = function () {\n  return this;\n};\n/**\n * Returning an iterator of the given values.\n *\n * @param  {any...} values - Values.\n * @return {Iterator}\n */\n\nIterator.of = function () {\n  var args = arguments,\n      l = args.length,\n      i = 0;\n  return new Iterator(function () {\n    if (i >= l) return {\n      done: true\n    };\n    return {\n      done: false,\n      value: args[i++]\n    };\n  });\n};\n/**\n * Returning an empty iterator.\n *\n * @return {Iterator}\n */\n\n\nIterator.empty = function () {\n  var iterator = new Iterator(null);\n  iterator.done = true;\n  return iterator;\n};\n/**\n * Returning whether the given value is an iterator.\n *\n * @param  {any} value - Value.\n * @return {boolean}\n */\n\n\nIterator.is = function (value) {\n  if (value instanceof Iterator) return true;\n  return typeof value === 'object' && value !== null && typeof value.next === 'function';\n};\n/**\n * Exporting.\n */\n\n\nmodule.exports = Iterator;","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/node_modules/obliterator/iterator.js"],"names":["Iterator","next","Object","defineProperty","writable","enumerable","value","done","prototype","step","_next","Symbol","iterator","of","args","arguments","l","length","i","empty","is","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,QAAT,CAAkBC,IAAlB,EAAwB;AAEtB;AACAC,EAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,OAA5B,EAAqC;AACnCC,IAAAA,QAAQ,EAAE,KADyB;AAEnCC,IAAAA,UAAU,EAAE,KAFuB;AAGnCC,IAAAA,KAAK,EAAEL;AAH4B,GAArC,EAHsB,CAStB;;AACA,OAAKM,IAAL,GAAY,KAAZ;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACAP,QAAQ,CAACQ,SAAT,CAAmBP,IAAnB,GAA0B,YAAW;AACnC,MAAI,KAAKM,IAAT,EACE,OAAO;AAACA,IAAAA,IAAI,EAAE;AAAP,GAAP;;AAEF,MAAIE,IAAI,GAAG,KAAKC,KAAL,EAAX;;AAEA,MAAID,IAAI,CAACF,IAAT,EACE,KAAKA,IAAL,GAAY,IAAZ;AAEF,SAAOE,IAAP;AACD,CAVD;AAYA;AACA;AACA;;;AACA,IAAI,OAAOE,MAAP,KAAkB,WAAtB,EACEX,QAAQ,CAACQ,SAAT,CAAmBG,MAAM,CAACC,QAA1B,IAAsC,YAAW;AAC/C,SAAO,IAAP;AACD,CAFD;AAIF;AACA;AACA;AACA;AACA;AACA;;AACAZ,QAAQ,CAACa,EAAT,GAAc,YAAW;AACvB,MAAIC,IAAI,GAAGC,SAAX;AAAA,MACIC,CAAC,GAAGF,IAAI,CAACG,MADb;AAAA,MAEIC,CAAC,GAAG,CAFR;AAIA,SAAO,IAAIlB,QAAJ,CAAa,YAAW;AAC7B,QAAIkB,CAAC,IAAIF,CAAT,EACE,OAAO;AAACT,MAAAA,IAAI,EAAE;AAAP,KAAP;AAEF,WAAO;AAACA,MAAAA,IAAI,EAAE,KAAP;AAAcD,MAAAA,KAAK,EAAEQ,IAAI,CAACI,CAAC,EAAF;AAAzB,KAAP;AACD,GALM,CAAP;AAMD,CAXD;AAaA;AACA;AACA;AACA;AACA;;;AACAlB,QAAQ,CAACmB,KAAT,GAAiB,YAAW;AAC1B,MAAIP,QAAQ,GAAG,IAAIZ,QAAJ,CAAa,IAAb,CAAf;AACAY,EAAAA,QAAQ,CAACL,IAAT,GAAgB,IAAhB;AAEA,SAAOK,QAAP;AACD,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;;;AACAZ,QAAQ,CAACoB,EAAT,GAAc,UAASd,KAAT,EAAgB;AAC5B,MAAIA,KAAK,YAAYN,QAArB,EACE,OAAO,IAAP;AAEF,SACE,OAAOM,KAAP,KAAiB,QAAjB,IACAA,KAAK,KAAK,IADV,IAEA,OAAOA,KAAK,CAACL,IAAb,KAAsB,UAHxB;AAKD,CATD;AAWA;AACA;AACA;;;AACAoB,MAAM,CAACC,OAAP,GAAiBtB,QAAjB","sourcesContent":["/**\n * Obliterator Iterator Class\n * ===========================\n *\n * Simple class representing the library's iterators.\n */\n\n/**\n * Iterator class.\n *\n * @constructor\n * @param {function} next - Next function.\n */\nfunction Iterator(next) {\n\n  // Hiding the given function\n  Object.defineProperty(this, '_next', {\n    writable: false,\n    enumerable: false,\n    value: next\n  });\n\n  // Is the iterator complete?\n  this.done = false;\n}\n\n/**\n * Next function.\n *\n * @return {object}\n */\n// NOTE: maybe this should dropped for performance?\nIterator.prototype.next = function() {\n  if (this.done)\n    return {done: true};\n\n  var step = this._next();\n\n  if (step.done)\n    this.done = true;\n\n  return step;\n};\n\n/**\n * If symbols are supported, we add `next` to `Symbol.iterator`.\n */\nif (typeof Symbol !== 'undefined')\n  Iterator.prototype[Symbol.iterator] = function() {\n    return this;\n  };\n\n/**\n * Returning an iterator of the given values.\n *\n * @param  {any...} values - Values.\n * @return {Iterator}\n */\nIterator.of = function() {\n  var args = arguments,\n      l = args.length,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {done: true};\n\n    return {done: false, value: args[i++]};\n  });\n};\n\n/**\n * Returning an empty iterator.\n *\n * @return {Iterator}\n */\nIterator.empty = function() {\n  var iterator = new Iterator(null);\n  iterator.done = true;\n\n  return iterator;\n};\n\n/**\n * Returning whether the given value is an iterator.\n *\n * @param  {any} value - Value.\n * @return {boolean}\n */\nIterator.is = function(value) {\n  if (value instanceof Iterator)\n    return true;\n\n  return (\n    typeof value === 'object' &&\n    value !== null &&\n    typeof value.next === 'function'\n  );\n};\n\n/**\n * Exporting.\n */\nmodule.exports = Iterator;\n"]},"metadata":{},"sourceType":"script"}