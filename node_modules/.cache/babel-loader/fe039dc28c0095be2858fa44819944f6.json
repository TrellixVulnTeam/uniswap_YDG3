{"ast":null,"code":"import _regeneratorRuntime from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{Trans}from\"@lingui/react\";import{useMemo}from'react';import{WRAPPED_NATIVE_CURRENCY}from'../constants/tokens';import{tryParseAmount}from'../state/swap/hooks';import{TransactionType}from'../state/transactions/actions';import{useTransactionAdder}from'../state/transactions/hooks';import{useCurrencyBalance}from'../state/wallet/hooks';import{useNativeCurrency}from'./Tokens';import{useWETHContract}from'./useContract';import{useActiveWeb3React}from'./web3';import{jsx as _jsx}from\"react/jsx-runtime\";export var WrapType;(function(WrapType){WrapType[WrapType[\"NOT_APPLICABLE\"]=0]=\"NOT_APPLICABLE\";WrapType[WrapType[\"WRAP\"]=1]=\"WRAP\";WrapType[WrapType[\"UNWRAP\"]=2]=\"UNWRAP\";})(WrapType||(WrapType={}));var NOT_APPLICABLE={wrapType:WrapType.NOT_APPLICABLE};var WrapInputError;(function(WrapInputError){WrapInputError[WrapInputError[\"NO_ERROR\"]=0]=\"NO_ERROR\";WrapInputError[WrapInputError[\"ENTER_NATIVE_AMOUNT\"]=1]=\"ENTER_NATIVE_AMOUNT\";WrapInputError[WrapInputError[\"ENTER_WRAPPED_AMOUNT\"]=2]=\"ENTER_WRAPPED_AMOUNT\";WrapInputError[WrapInputError[\"INSUFFICIENT_NATIVE_BALANCE\"]=3]=\"INSUFFICIENT_NATIVE_BALANCE\";WrapInputError[WrapInputError[\"INSUFFICIENT_WRAPPED_BALANCE\"]=4]=\"INSUFFICIENT_WRAPPED_BALANCE\";})(WrapInputError||(WrapInputError={}));export function WrapErrorText(_ref){var wrapInputError=_ref.wrapInputError;var native=useNativeCurrency();var wrapped=native===null||native===void 0?void 0:native.wrapped;switch(wrapInputError){case WrapInputError.NO_ERROR:return null;case WrapInputError.ENTER_NATIVE_AMOUNT:return/*#__PURE__*/_jsx(Trans,{id:\"Enter {0} amount\",values:{0:native===null||native===void 0?void 0:native.symbol}});case WrapInputError.ENTER_WRAPPED_AMOUNT:return/*#__PURE__*/_jsx(Trans,{id:\"Enter {0} amount\",values:{0:wrapped===null||wrapped===void 0?void 0:wrapped.symbol}});case WrapInputError.INSUFFICIENT_NATIVE_BALANCE:return/*#__PURE__*/_jsx(Trans,{id:\"Insufficient {0} balance\",values:{0:native===null||native===void 0?void 0:native.symbol}});case WrapInputError.INSUFFICIENT_WRAPPED_BALANCE:return/*#__PURE__*/_jsx(Trans,{id:\"Insufficient {0} balance\",values:{0:wrapped===null||wrapped===void 0?void 0:wrapped.symbol}});}}/**\n * Given the selected input and output currency, return a wrap callback\n * @param inputCurrency the selected input currency\n * @param outputCurrency the selected output currency\n * @param typedValue the user input value\n */export default function useWrapCallback(inputCurrency,outputCurrency,typedValue){var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId,account=_useActiveWeb3React.account;var wethContract=useWETHContract();var balance=useCurrencyBalance(account!==null&&account!==void 0?account:undefined,inputCurrency!==null&&inputCurrency!==void 0?inputCurrency:undefined);// we can always parse the amount typed as the input currency, since wrapping is 1:1\nvar inputAmount=useMemo(function(){return tryParseAmount(typedValue,inputCurrency!==null&&inputCurrency!==void 0?inputCurrency:undefined);},[inputCurrency,typedValue]);var addTransaction=useTransactionAdder();return useMemo(function(){if(!wethContract||!chainId||!inputCurrency||!outputCurrency)return NOT_APPLICABLE;var weth=WRAPPED_NATIVE_CURRENCY[chainId];if(!weth)return NOT_APPLICABLE;var hasInputAmount=Boolean(inputAmount===null||inputAmount===void 0?void 0:inputAmount.greaterThan('0'));var sufficientBalance=inputAmount&&balance&&!balance.lessThan(inputAmount);if(inputCurrency.isNative&&weth.equals(outputCurrency)){return{wrapType:WrapType.WRAP,execute:sufficientBalance&&inputAmount?/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var txReceipt;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return wethContract.deposit({value:\"0x\".concat(inputAmount.quotient.toString(16))});case 3:txReceipt=_context.sent;addTransaction(txReceipt,{type:TransactionType.WRAP,unwrapped:false,currencyAmountRaw:inputAmount===null||inputAmount===void 0?void 0:inputAmount.quotient.toString(),chainId:chainId});_context.next=10;break;case 7:_context.prev=7;_context.t0=_context[\"catch\"](0);console.error('Could not deposit',_context.t0);case 10:case\"end\":return _context.stop();}}},_callee,null,[[0,7]]);})):undefined,inputError:sufficientBalance?undefined:hasInputAmount?WrapInputError.INSUFFICIENT_NATIVE_BALANCE:WrapInputError.ENTER_NATIVE_AMOUNT};}else if(weth.equals(inputCurrency)&&outputCurrency.isNative){return{wrapType:WrapType.UNWRAP,execute:sufficientBalance&&inputAmount?/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var txReceipt;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return wethContract.withdraw(\"0x\".concat(inputAmount.quotient.toString(16)));case 3:txReceipt=_context2.sent;addTransaction(txReceipt,{type:TransactionType.WRAP,unwrapped:true,currencyAmountRaw:inputAmount===null||inputAmount===void 0?void 0:inputAmount.quotient.toString(),chainId:chainId});_context2.next=10;break;case 7:_context2.prev=7;_context2.t0=_context2[\"catch\"](0);console.error('Could not withdraw',_context2.t0);case 10:case\"end\":return _context2.stop();}}},_callee2,null,[[0,7]]);})):undefined,inputError:sufficientBalance?undefined:hasInputAmount?WrapInputError.INSUFFICIENT_WRAPPED_BALANCE:WrapInputError.ENTER_WRAPPED_AMOUNT};}else{return NOT_APPLICABLE;}},[wethContract,chainId,inputCurrency,outputCurrency,inputAmount,balance,addTransaction]);}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/hooks/useWrapCallback.tsx"],"names":["useMemo","WRAPPED_NATIVE_CURRENCY","tryParseAmount","TransactionType","useTransactionAdder","useCurrencyBalance","useNativeCurrency","useWETHContract","useActiveWeb3React","WrapType","NOT_APPLICABLE","wrapType","WrapInputError","WrapErrorText","wrapInputError","native","wrapped","NO_ERROR","ENTER_NATIVE_AMOUNT","symbol","ENTER_WRAPPED_AMOUNT","INSUFFICIENT_NATIVE_BALANCE","INSUFFICIENT_WRAPPED_BALANCE","useWrapCallback","inputCurrency","outputCurrency","typedValue","chainId","account","wethContract","balance","undefined","inputAmount","addTransaction","weth","hasInputAmount","Boolean","greaterThan","sufficientBalance","lessThan","isNative","equals","WRAP","execute","deposit","value","quotient","toString","txReceipt","type","unwrapped","currencyAmountRaw","console","error","inputError","UNWRAP","withdraw"],"mappings":"4VAEA,OAASA,OAAT,KAAwB,OAAxB,CAEA,OAASC,uBAAT,KAAwC,qBAAxC,CACA,OAASC,cAAT,KAA+B,qBAA/B,CACA,OAASC,eAAT,KAAgC,+BAAhC,CACA,OAASC,mBAAT,KAAoC,6BAApC,CACA,OAASC,kBAAT,KAAmC,uBAAnC,CACA,OAASC,iBAAT,KAAkC,UAAlC,CACA,OAASC,eAAT,KAAgC,eAAhC,CACA,OAASC,kBAAT,KAAmC,QAAnC,C,2CAEA,UAAYC,CAAAA,QAAZ,C,UAAYA,Q,EAAAA,Q,CAAAA,Q,uCAAAA,Q,CAAAA,Q,mBAAAA,Q,CAAAA,Q,0BAAAA,Q,GAAAA,Q,MAMZ,GAAMC,CAAAA,cAAc,CAAG,CAAEC,QAAQ,CAAEF,QAAQ,CAACC,cAArB,CAAvB,C,GAEKE,CAAAA,c,WAAAA,c,EAAAA,c,CAAAA,c,2BAAAA,c,CAAAA,c,iDAAAA,c,CAAAA,c,mDAAAA,c,CAAAA,c,iEAAAA,c,CAAAA,c,sEAAAA,c,GAAAA,c,MAQL,MAAO,SAASC,CAAAA,aAAT,MAA+E,IAAtDC,CAAAA,cAAsD,MAAtDA,cAAsD,CACpF,GAAMC,CAAAA,MAAM,CAAGT,iBAAiB,EAAhC,CACA,GAAMU,CAAAA,OAAO,CAAGD,MAAH,SAAGA,MAAH,iBAAGA,MAAM,CAAEC,OAAxB,CAEA,OAAQF,cAAR,EACE,IAAKF,CAAAA,cAAc,CAACK,QAApB,CACE,MAAO,KAAP,CACF,IAAKL,CAAAA,cAAc,CAACM,mBAApB,CACE,mBAAO,4CAAcH,MAAd,SAAcA,MAAd,iBAAcA,MAAM,CAAEI,MAAtB,GAAP,CACF,IAAKP,CAAAA,cAAc,CAACQ,oBAApB,CACE,mBAAO,4CAAcJ,OAAd,SAAcA,OAAd,iBAAcA,OAAO,CAAEG,MAAvB,GAAP,CAEF,IAAKP,CAAAA,cAAc,CAACS,2BAApB,CACE,mBAAO,oDAAqBN,MAArB,SAAqBA,MAArB,iBAAqBA,MAAM,CAAEI,MAA7B,GAAP,CACF,IAAKP,CAAAA,cAAc,CAACU,4BAApB,CACE,mBAAO,oDAAqBN,OAArB,SAAqBA,OAArB,iBAAqBA,OAAO,CAAEG,MAA9B,GAAP,CAXJ,CAaD,CAED;AACA;AACA;AACA;AACA;AACA,GACA,cAAe,SAASI,CAAAA,eAAT,CACbC,aADa,CAEbC,cAFa,CAGbC,UAHa,CAIqF,CAClG,wBAA6BlB,kBAAkB,EAA/C,CAAQmB,OAAR,qBAAQA,OAAR,CAAiBC,OAAjB,qBAAiBA,OAAjB,CACA,GAAMC,CAAAA,YAAY,CAAGtB,eAAe,EAApC,CACA,GAAMuB,CAAAA,OAAO,CAAGzB,kBAAkB,CAACuB,OAAD,SAACA,OAAD,UAACA,OAAD,CAAYG,SAAZ,CAAuBP,aAAvB,SAAuBA,aAAvB,UAAuBA,aAAvB,CAAwCO,SAAxC,CAAlC,CACA;AACA,GAAMC,CAAAA,WAAW,CAAGhC,OAAO,CAAC,iBAAME,CAAAA,cAAc,CAACwB,UAAD,CAAaF,aAAb,SAAaA,aAAb,UAAaA,aAAb,CAA8BO,SAA9B,CAApB,EAAD,CAA+D,CAACP,aAAD,CAAgBE,UAAhB,CAA/D,CAA3B,CACA,GAAMO,CAAAA,cAAc,CAAG7B,mBAAmB,EAA1C,CAEA,MAAOJ,CAAAA,OAAO,CAAC,UAAM,CACnB,GAAI,CAAC6B,YAAD,EAAiB,CAACF,OAAlB,EAA6B,CAACH,aAA9B,EAA+C,CAACC,cAApD,CAAoE,MAAOf,CAAAA,cAAP,CACpE,GAAMwB,CAAAA,IAAI,CAAGjC,uBAAuB,CAAC0B,OAAD,CAApC,CACA,GAAI,CAACO,IAAL,CAAW,MAAOxB,CAAAA,cAAP,CAEX,GAAMyB,CAAAA,cAAc,CAAGC,OAAO,CAACJ,WAAD,SAACA,WAAD,iBAACA,WAAW,CAAEK,WAAb,CAAyB,GAAzB,CAAD,CAA9B,CACA,GAAMC,CAAAA,iBAAiB,CAAGN,WAAW,EAAIF,OAAf,EAA0B,CAACA,OAAO,CAACS,QAAR,CAAiBP,WAAjB,CAArD,CAEA,GAAIR,aAAa,CAACgB,QAAd,EAA0BN,IAAI,CAACO,MAAL,CAAYhB,cAAZ,CAA9B,CAA2D,CACzD,MAAO,CACLd,QAAQ,CAAEF,QAAQ,CAACiC,IADd,CAELC,OAAO,CACLL,iBAAiB,EAAIN,WAArB,sEACI,uLAE4BH,CAAAA,YAAY,CAACe,OAAb,CAAqB,CAAEC,KAAK,aAAOb,WAAW,CAACc,QAAZ,CAAqBC,QAArB,CAA8B,EAA9B,CAAP,CAAP,CAArB,CAF5B,QAEUC,SAFV,eAGIf,cAAc,CAACe,SAAD,CAAY,CACxBC,IAAI,CAAE9C,eAAe,CAACuC,IADE,CAExBQ,SAAS,CAAE,KAFa,CAGxBC,iBAAiB,CAAEnB,WAAF,SAAEA,WAAF,iBAAEA,WAAW,CAAEc,QAAb,CAAsBC,QAAtB,EAHK,CAIxBpB,OAAO,CAAPA,OAJwB,CAAZ,CAAd,CAHJ,+EAUIyB,OAAO,CAACC,KAAR,CAAc,mBAAd,cAVJ,oEADJ,GAcItB,SAjBD,CAkBLuB,UAAU,CAAEhB,iBAAiB,CACzBP,SADyB,CAEzBI,cAAc,CACdvB,cAAc,CAACS,2BADD,CAEdT,cAAc,CAACM,mBAtBd,CAAP,CAwBD,CAzBD,IAyBO,IAAIgB,IAAI,CAACO,MAAL,CAAYjB,aAAZ,GAA8BC,cAAc,CAACe,QAAjD,CAA2D,CAChE,MAAO,CACL7B,QAAQ,CAAEF,QAAQ,CAAC8C,MADd,CAELZ,OAAO,CACLL,iBAAiB,EAAIN,WAArB,sEACI,8LAE4BH,CAAAA,YAAY,CAAC2B,QAAb,aAA2BxB,WAAW,CAACc,QAAZ,CAAqBC,QAArB,CAA8B,EAA9B,CAA3B,EAF5B,QAEUC,SAFV,gBAGIf,cAAc,CAACe,SAAD,CAAY,CACxBC,IAAI,CAAE9C,eAAe,CAACuC,IADE,CAExBQ,SAAS,CAAE,IAFa,CAGxBC,iBAAiB,CAAEnB,WAAF,SAAEA,WAAF,iBAAEA,WAAW,CAAEc,QAAb,CAAsBC,QAAtB,EAHK,CAIxBpB,OAAO,CAAPA,OAJwB,CAAZ,CAAd,CAHJ,mFAUIyB,OAAO,CAACC,KAAR,CAAc,oBAAd,eAVJ,sEADJ,GAcItB,SAjBD,CAkBLuB,UAAU,CAAEhB,iBAAiB,CACzBP,SADyB,CAEzBI,cAAc,CACdvB,cAAc,CAACU,4BADD,CAEdV,cAAc,CAACQ,oBAtBd,CAAP,CAwBD,CAzBM,IAyBA,CACL,MAAOV,CAAAA,cAAP,CACD,CACF,CA7Da,CA6DX,CAACmB,YAAD,CAAeF,OAAf,CAAwBH,aAAxB,CAAuCC,cAAvC,CAAuDO,WAAvD,CAAoEF,OAApE,CAA6EG,cAA7E,CA7DW,CAAd,CA8DD","sourcesContent":["import { Trans } from '@lingui/macro'\nimport { Currency } from '@uniswap/sdk-core'\nimport { useMemo } from 'react'\n\nimport { WRAPPED_NATIVE_CURRENCY } from '../constants/tokens'\nimport { tryParseAmount } from '../state/swap/hooks'\nimport { TransactionType } from '../state/transactions/actions'\nimport { useTransactionAdder } from '../state/transactions/hooks'\nimport { useCurrencyBalance } from '../state/wallet/hooks'\nimport { useNativeCurrency } from './Tokens'\nimport { useWETHContract } from './useContract'\nimport { useActiveWeb3React } from './web3'\n\nexport enum WrapType {\n  NOT_APPLICABLE,\n  WRAP,\n  UNWRAP,\n}\n\nconst NOT_APPLICABLE = { wrapType: WrapType.NOT_APPLICABLE }\n\nenum WrapInputError {\n  NO_ERROR, // must be equal to 0 so all other errors are truthy\n  ENTER_NATIVE_AMOUNT,\n  ENTER_WRAPPED_AMOUNT,\n  INSUFFICIENT_NATIVE_BALANCE,\n  INSUFFICIENT_WRAPPED_BALANCE,\n}\n\nexport function WrapErrorText({ wrapInputError }: { wrapInputError: WrapInputError }) {\n  const native = useNativeCurrency()\n  const wrapped = native?.wrapped\n\n  switch (wrapInputError) {\n    case WrapInputError.NO_ERROR:\n      return null\n    case WrapInputError.ENTER_NATIVE_AMOUNT:\n      return <Trans>Enter {native?.symbol} amount</Trans>\n    case WrapInputError.ENTER_WRAPPED_AMOUNT:\n      return <Trans>Enter {wrapped?.symbol} amount</Trans>\n\n    case WrapInputError.INSUFFICIENT_NATIVE_BALANCE:\n      return <Trans>Insufficient {native?.symbol} balance</Trans>\n    case WrapInputError.INSUFFICIENT_WRAPPED_BALANCE:\n      return <Trans>Insufficient {wrapped?.symbol} balance</Trans>\n  }\n}\n\n/**\n * Given the selected input and output currency, return a wrap callback\n * @param inputCurrency the selected input currency\n * @param outputCurrency the selected output currency\n * @param typedValue the user input value\n */\nexport default function useWrapCallback(\n  inputCurrency: Currency | undefined | null,\n  outputCurrency: Currency | undefined | null,\n  typedValue: string | undefined\n): { wrapType: WrapType; execute?: undefined | (() => Promise<void>); inputError?: WrapInputError } {\n  const { chainId, account } = useActiveWeb3React()\n  const wethContract = useWETHContract()\n  const balance = useCurrencyBalance(account ?? undefined, inputCurrency ?? undefined)\n  // we can always parse the amount typed as the input currency, since wrapping is 1:1\n  const inputAmount = useMemo(() => tryParseAmount(typedValue, inputCurrency ?? undefined), [inputCurrency, typedValue])\n  const addTransaction = useTransactionAdder()\n\n  return useMemo(() => {\n    if (!wethContract || !chainId || !inputCurrency || !outputCurrency) return NOT_APPLICABLE\n    const weth = WRAPPED_NATIVE_CURRENCY[chainId]\n    if (!weth) return NOT_APPLICABLE\n\n    const hasInputAmount = Boolean(inputAmount?.greaterThan('0'))\n    const sufficientBalance = inputAmount && balance && !balance.lessThan(inputAmount)\n\n    if (inputCurrency.isNative && weth.equals(outputCurrency)) {\n      return {\n        wrapType: WrapType.WRAP,\n        execute:\n          sufficientBalance && inputAmount\n            ? async () => {\n                try {\n                  const txReceipt = await wethContract.deposit({ value: `0x${inputAmount.quotient.toString(16)}` })\n                  addTransaction(txReceipt, {\n                    type: TransactionType.WRAP,\n                    unwrapped: false,\n                    currencyAmountRaw: inputAmount?.quotient.toString(),\n                    chainId,\n                  })\n                } catch (error) {\n                  console.error('Could not deposit', error)\n                }\n              }\n            : undefined,\n        inputError: sufficientBalance\n          ? undefined\n          : hasInputAmount\n          ? WrapInputError.INSUFFICIENT_NATIVE_BALANCE\n          : WrapInputError.ENTER_NATIVE_AMOUNT,\n      }\n    } else if (weth.equals(inputCurrency) && outputCurrency.isNative) {\n      return {\n        wrapType: WrapType.UNWRAP,\n        execute:\n          sufficientBalance && inputAmount\n            ? async () => {\n                try {\n                  const txReceipt = await wethContract.withdraw(`0x${inputAmount.quotient.toString(16)}`)\n                  addTransaction(txReceipt, {\n                    type: TransactionType.WRAP,\n                    unwrapped: true,\n                    currencyAmountRaw: inputAmount?.quotient.toString(),\n                    chainId,\n                  })\n                } catch (error) {\n                  console.error('Could not withdraw', error)\n                }\n              }\n            : undefined,\n        inputError: sufficientBalance\n          ? undefined\n          : hasInputAmount\n          ? WrapInputError.INSUFFICIENT_WRAPPED_BALANCE\n          : WrapInputError.ENTER_WRAPPED_AMOUNT,\n      }\n    } else {\n      return NOT_APPLICABLE\n    }\n  }, [wethContract, chainId, inputCurrency, outputCurrency, inputAmount, balance, addTransaction])\n}\n"]},"metadata":{},"sourceType":"module"}