{"ast":null,"code":"import _slicedToArray from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useWeb3React}from'@web3-react/core';import{useEffect,useState}from'react';import{gnosisSafe,injected}from'../connectors';import{IS_IN_IFRAME,NetworkContextName}from'../constants/misc';import{isMobile}from'../utils/userAgent';export function useActiveWeb3React(){var context=useWeb3React();var contextNetwork=useWeb3React(NetworkContextName);return context.active?context:contextNetwork;}export function useEagerConnect(){var _useWeb3React=useWeb3React(),activate=_useWeb3React.activate,active=_useWeb3React.active;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),tried=_useState2[0],setTried=_useState2[1];// gnosisSafe.isSafeApp() races a timeout against postMessage, so it delays pageload if we are not in a safe app;\n// if we are not embedded in an iframe, it is not worth checking\nvar _useState3=useState(!IS_IN_IFRAME),_useState4=_slicedToArray(_useState3,2),triedSafe=_useState4[0],setTriedSafe=_useState4[1];// first, try connecting to a gnosis safe\nuseEffect(function(){if(!triedSafe){gnosisSafe.isSafeApp().then(function(loadedInSafe){if(loadedInSafe){activate(gnosisSafe,undefined,true).catch(function(){setTriedSafe(true);});}else{setTriedSafe(true);}});}},[activate,setTriedSafe,triedSafe]);// then, if that fails, try connecting to an injected connector\nuseEffect(function(){if(!active&&triedSafe){injected.isAuthorized().then(function(isAuthorized){if(isAuthorized){activate(injected,undefined,true).catch(function(){setTried(true);});}else{if(isMobile&&window.ethereum){activate(injected,undefined,true).catch(function(){setTried(true);});}else{setTried(true);}}});}},[activate,active,triedSafe]);// wait until we get confirmation of a connection to flip the flag\nuseEffect(function(){if(active){setTried(true);}},[active]);return tried;}/**\n * Use for network and injected - logs user in\n * and out after checking what network theyre on\n */export function useInactiveListener(){var suppress=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var _useWeb3React2=useWeb3React(),active=_useWeb3React2.active,error=_useWeb3React2.error,activate=_useWeb3React2.activate;useEffect(function(){var _window=window,ethereum=_window.ethereum;if(ethereum&&ethereum.on&&!active&&!error&&!suppress){var handleChainChanged=function handleChainChanged(){// eat errors\nactivate(injected,undefined,true).catch(function(error){console.error('Failed to activate after chain changed',error);});};var handleAccountsChanged=function handleAccountsChanged(accounts){if(accounts.length>0){// eat errors\nactivate(injected,undefined,true).catch(function(error){console.error('Failed to activate after accounts changed',error);});}};ethereum.on('chainChanged',handleChainChanged);ethereum.on('accountsChanged',handleAccountsChanged);return function(){if(ethereum.removeListener){ethereum.removeListener('chainChanged',handleChainChanged);ethereum.removeListener('accountsChanged',handleAccountsChanged);}};}return undefined;},[active,error,suppress,activate]);}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/hooks/web3.ts"],"names":["useWeb3React","useEffect","useState","gnosisSafe","injected","IS_IN_IFRAME","NetworkContextName","isMobile","useActiveWeb3React","context","contextNetwork","active","useEagerConnect","activate","tried","setTried","triedSafe","setTriedSafe","isSafeApp","then","loadedInSafe","undefined","catch","isAuthorized","window","ethereum","useInactiveListener","suppress","error","on","handleChainChanged","console","handleAccountsChanged","accounts","length","removeListener"],"mappings":"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","sourcesContent":["import { Web3Provider } from '@ethersproject/providers'\nimport { useWeb3React } from '@web3-react/core'\nimport { useEffect, useState } from 'react'\n\nimport { gnosisSafe, injected } from '../connectors'\nimport { IS_IN_IFRAME, NetworkContextName } from '../constants/misc'\nimport { isMobile } from '../utils/userAgent'\n\nexport function useActiveWeb3React() {\n  const context = useWeb3React<Web3Provider>()\n  const contextNetwork = useWeb3React<Web3Provider>(NetworkContextName)\n  return context.active ? context : contextNetwork\n}\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3React()\n  const [tried, setTried] = useState(false)\n\n  // gnosisSafe.isSafeApp() races a timeout against postMessage, so it delays pageload if we are not in a safe app;\n  // if we are not embedded in an iframe, it is not worth checking\n  const [triedSafe, setTriedSafe] = useState(!IS_IN_IFRAME)\n\n  // first, try connecting to a gnosis safe\n  useEffect(() => {\n    if (!triedSafe) {\n      gnosisSafe.isSafeApp().then((loadedInSafe) => {\n        if (loadedInSafe) {\n          activate(gnosisSafe, undefined, true).catch(() => {\n            setTriedSafe(true)\n          })\n        } else {\n          setTriedSafe(true)\n        }\n      })\n    }\n  }, [activate, setTriedSafe, triedSafe])\n\n  // then, if that fails, try connecting to an injected connector\n  useEffect(() => {\n    if (!active && triedSafe) {\n      injected.isAuthorized().then((isAuthorized) => {\n        if (isAuthorized) {\n          activate(injected, undefined, true).catch(() => {\n            setTried(true)\n          })\n        } else {\n          if (isMobile && window.ethereum) {\n            activate(injected, undefined, true).catch(() => {\n              setTried(true)\n            })\n          } else {\n            setTried(true)\n          }\n        }\n      })\n    }\n  }, [activate, active, triedSafe])\n\n  // wait until we get confirmation of a connection to flip the flag\n  useEffect(() => {\n    if (active) {\n      setTried(true)\n    }\n  }, [active])\n\n  return tried\n}\n\n/**\n * Use for network and injected - logs user in\n * and out after checking what network theyre on\n */\nexport function useInactiveListener(suppress = false) {\n  const { active, error, activate } = useWeb3React()\n\n  useEffect(() => {\n    const { ethereum } = window\n\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleChainChanged = () => {\n        // eat errors\n        activate(injected, undefined, true).catch((error) => {\n          console.error('Failed to activate after chain changed', error)\n        })\n      }\n\n      const handleAccountsChanged = (accounts: string[]) => {\n        if (accounts.length > 0) {\n          // eat errors\n          activate(injected, undefined, true).catch((error) => {\n            console.error('Failed to activate after accounts changed', error)\n          })\n        }\n      }\n\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n        }\n      }\n    }\n    return undefined\n  }, [active, error, suppress, activate])\n}\n"]},"metadata":{},"sourceType":"module"}