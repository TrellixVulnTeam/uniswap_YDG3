{"ast":null,"code":"import { Percent } from '@uniswap/sdk-core';\nimport JSBI from 'jsbi';\nimport { ONE_HUNDRED_PERCENT } from '../constants/misc';\nexport function computeFiatValuePriceImpact(fiatValueInput, fiatValueOutput) {\n  if (!fiatValueOutput || !fiatValueInput) return undefined;\n  if (!fiatValueInput.currency.equals(fiatValueOutput.currency)) return undefined;\n  if (JSBI.equal(fiatValueInput.quotient, JSBI.BigInt(0))) return undefined;\n  const pct = ONE_HUNDRED_PERCENT.subtract(fiatValueOutput.divide(fiatValueInput));\n  return new Percent(pct.numerator, pct.denominator);\n}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/utils/computeFiatValuePriceImpact.tsx"],"names":["Percent","JSBI","ONE_HUNDRED_PERCENT","computeFiatValuePriceImpact","fiatValueInput","fiatValueOutput","undefined","currency","equals","equal","quotient","BigInt","pct","subtract","divide","numerator","denominator"],"mappings":"AAAA,SAAyBA,OAAzB,QAA+C,mBAA/C;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,SAASC,mBAAT,QAAoC,mBAApC;AAEA,OAAO,SAASC,2BAAT,CACLC,cADK,EAELC,eAFK,EAGgB;AACrB,MAAI,CAACA,eAAD,IAAoB,CAACD,cAAzB,EAAyC,OAAOE,SAAP;AACzC,MAAI,CAACF,cAAc,CAACG,QAAf,CAAwBC,MAAxB,CAA+BH,eAAe,CAACE,QAA/C,CAAL,EAA+D,OAAOD,SAAP;AAC/D,MAAIL,IAAI,CAACQ,KAAL,CAAWL,cAAc,CAACM,QAA1B,EAAoCT,IAAI,CAACU,MAAL,CAAY,CAAZ,CAApC,CAAJ,EAAyD,OAAOL,SAAP;AACzD,QAAMM,GAAG,GAAGV,mBAAmB,CAACW,QAApB,CAA6BR,eAAe,CAACS,MAAhB,CAAuBV,cAAvB,CAA7B,CAAZ;AACA,SAAO,IAAIJ,OAAJ,CAAYY,GAAG,CAACG,SAAhB,EAA2BH,GAAG,CAACI,WAA/B,CAAP;AACD","sourcesContent":["import { CurrencyAmount, Percent, Token } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\n\nimport { ONE_HUNDRED_PERCENT } from '../constants/misc'\n\nexport function computeFiatValuePriceImpact(\n  fiatValueInput: CurrencyAmount<Token> | undefined | null,\n  fiatValueOutput: CurrencyAmount<Token> | undefined | null\n): Percent | undefined {\n  if (!fiatValueOutput || !fiatValueInput) return undefined\n  if (!fiatValueInput.currency.equals(fiatValueOutput.currency)) return undefined\n  if (JSBI.equal(fiatValueInput.quotient, JSBI.BigInt(0))) return undefined\n  const pct = ONE_HUNDRED_PERCENT.subtract(fiatValueOutput.divide(fiatValueInput))\n  return new Percent(pct.numerator, pct.denominator)\n}\n"]},"metadata":{},"sourceType":"module"}