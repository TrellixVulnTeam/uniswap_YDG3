{"ast":null,"code":"/**\n * Mnemonist FuzzyMultiMap\n * ========================\n *\n * Same as the fuzzy map but relying on a MultiMap rather than a Map.\n */\nvar MultiMap = require('./multi-map.js'),\n    forEach = require('obliterator/foreach');\n\nvar identity = function identity(x) {\n  return x;\n};\n/**\n * FuzzyMultiMap.\n *\n * @constructor\n * @param {array|function} descriptor - Hash functions descriptor.\n * @param {function}       Container  - Container to use.\n */\n\n\nfunction FuzzyMultiMap(descriptor, Container) {\n  this.items = new MultiMap(Container);\n  this.clear();\n\n  if (Array.isArray(descriptor)) {\n    this.writeHashFunction = descriptor[0];\n    this.readHashFunction = descriptor[1];\n  } else {\n    this.writeHashFunction = descriptor;\n    this.readHashFunction = descriptor;\n  }\n\n  if (!this.writeHashFunction) this.writeHashFunction = identity;\n  if (!this.readHashFunction) this.readHashFunction = identity;\n  if (typeof this.writeHashFunction !== 'function') throw new Error('mnemonist/FuzzyMultiMap.constructor: invalid hash function given.');\n  if (typeof this.readHashFunction !== 'function') throw new Error('mnemonist/FuzzyMultiMap.constructor: invalid hash function given.');\n}\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\n\n\nFuzzyMultiMap.prototype.clear = function () {\n  this.items.clear(); // Properties\n\n  this.size = 0;\n  this.dimension = 0;\n};\n/**\n * Method used to add an item to the index.\n *\n * @param  {any} item - Item to add.\n * @return {FuzzyMultiMap}\n */\n\n\nFuzzyMultiMap.prototype.add = function (item) {\n  var key = this.writeHashFunction(item);\n  this.items.set(key, item);\n  this.size = this.items.size;\n  this.dimension = this.items.dimension;\n  return this;\n};\n/**\n * Method used to set an item in the index using the given key.\n *\n * @param  {any} key  - Key to use.\n * @param  {any} item - Item to add.\n * @return {FuzzyMultiMap}\n */\n\n\nFuzzyMultiMap.prototype.set = function (key, item) {\n  key = this.writeHashFunction(key);\n  this.items.set(key, item);\n  this.size = this.items.size;\n  this.dimension = this.items.dimension;\n  return this;\n};\n/**\n * Method used to retrieve an item from the index.\n *\n * @param  {any} key - Key to use.\n * @return {any}\n */\n\n\nFuzzyMultiMap.prototype.get = function (key) {\n  key = this.readHashFunction(key);\n  return this.items.get(key);\n};\n/**\n * Method used to test the existence of an item in the map.\n *\n * @param  {any} key - Key to check.\n * @return {boolean}\n */\n\n\nFuzzyMultiMap.prototype.has = function (key) {\n  key = this.readHashFunction(key);\n  return this.items.has(key);\n};\n/**\n * Method used to iterate over each of the index's values.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\n\n\nFuzzyMultiMap.prototype.forEach = function (callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n  this.items.forEach(function (value) {\n    callback.call(scope, value, value);\n  });\n};\n/**\n * Method returning an iterator over the index's values.\n *\n * @return {FuzzyMultiMapIterator}\n */\n\n\nFuzzyMultiMap.prototype.values = function () {\n  return this.items.values();\n};\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\n\n\nif (typeof Symbol !== 'undefined') FuzzyMultiMap.prototype[Symbol.iterator] = FuzzyMultiMap.prototype.values;\n/**\n * Convenience known method.\n */\n\nFuzzyMultiMap.prototype.inspect = function () {\n  var array = Array.from(this);\n  Object.defineProperty(array, 'constructor', {\n    value: FuzzyMultiMap,\n    enumerable: false\n  });\n  return array;\n};\n\nif (typeof Symbol !== 'undefined') FuzzyMultiMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = FuzzyMultiMap.prototype.inspect;\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a structure.\n *\n * @param  {Iterable}       iterable   - Target iterable.\n * @param  {array|function} descriptor - Hash functions descriptor.\n * @param  {function}       Container  - Container to use.\n * @param  {boolean}        useSet     - Whether to use #.set or #.add\n * @return {FuzzyMultiMap}\n */\n\nFuzzyMultiMap.from = function (iterable, descriptor, Container, useSet) {\n  if (arguments.length === 3) {\n    if (typeof Container === 'boolean') {\n      useSet = Container;\n      Container = Array;\n    }\n  }\n\n  var map = new FuzzyMultiMap(descriptor, Container);\n  forEach(iterable, function (value, key) {\n    if (useSet) map.set(key, value);else map.add(value);\n  });\n  return map;\n};\n/**\n * Exporting.\n */\n\n\nmodule.exports = FuzzyMultiMap;","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/node_modules/mnemonist/fuzzy-multi-map.js"],"names":["MultiMap","require","forEach","identity","x","FuzzyMultiMap","descriptor","Container","items","clear","Array","isArray","writeHashFunction","readHashFunction","Error","prototype","size","dimension","add","item","key","set","get","has","callback","scope","arguments","length","value","call","values","Symbol","iterator","inspect","array","from","Object","defineProperty","enumerable","for","iterable","useSet","map","module","exports"],"mappings":"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","sourcesContent":["/**\n * Mnemonist FuzzyMultiMap\n * ========================\n *\n * Same as the fuzzy map but relying on a MultiMap rather than a Map.\n */\nvar MultiMap = require('./multi-map.js'),\n    forEach = require('obliterator/foreach');\n\nvar identity = function(x) {\n  return x;\n};\n\n/**\n * FuzzyMultiMap.\n *\n * @constructor\n * @param {array|function} descriptor - Hash functions descriptor.\n * @param {function}       Container  - Container to use.\n */\nfunction FuzzyMultiMap(descriptor, Container) {\n  this.items = new MultiMap(Container);\n  this.clear();\n\n  if (Array.isArray(descriptor)) {\n    this.writeHashFunction = descriptor[0];\n    this.readHashFunction = descriptor[1];\n  }\n  else {\n    this.writeHashFunction = descriptor;\n    this.readHashFunction = descriptor;\n  }\n\n  if (!this.writeHashFunction)\n    this.writeHashFunction = identity;\n  if (!this.readHashFunction)\n    this.readHashFunction = identity;\n\n  if (typeof this.writeHashFunction !== 'function')\n    throw new Error('mnemonist/FuzzyMultiMap.constructor: invalid hash function given.');\n\n  if (typeof this.readHashFunction !== 'function')\n    throw new Error('mnemonist/FuzzyMultiMap.constructor: invalid hash function given.');\n}\n\n/**\n * Method used to clear the structure.\n *\n * @return {undefined}\n */\nFuzzyMultiMap.prototype.clear = function() {\n  this.items.clear();\n\n  // Properties\n  this.size = 0;\n  this.dimension = 0;\n};\n\n/**\n * Method used to add an item to the index.\n *\n * @param  {any} item - Item to add.\n * @return {FuzzyMultiMap}\n */\nFuzzyMultiMap.prototype.add = function(item) {\n  var key = this.writeHashFunction(item);\n\n  this.items.set(key, item);\n  this.size = this.items.size;\n  this.dimension = this.items.dimension;\n\n  return this;\n};\n\n/**\n * Method used to set an item in the index using the given key.\n *\n * @param  {any} key  - Key to use.\n * @param  {any} item - Item to add.\n * @return {FuzzyMultiMap}\n */\nFuzzyMultiMap.prototype.set = function(key, item) {\n  key = this.writeHashFunction(key);\n\n  this.items.set(key, item);\n  this.size = this.items.size;\n  this.dimension = this.items.dimension;\n\n  return this;\n};\n\n/**\n * Method used to retrieve an item from the index.\n *\n * @param  {any} key - Key to use.\n * @return {any}\n */\nFuzzyMultiMap.prototype.get = function(key) {\n  key = this.readHashFunction(key);\n\n  return this.items.get(key);\n};\n\n/**\n * Method used to test the existence of an item in the map.\n *\n * @param  {any} key - Key to check.\n * @return {boolean}\n */\nFuzzyMultiMap.prototype.has = function(key) {\n  key = this.readHashFunction(key);\n\n  return this.items.has(key);\n};\n\n/**\n * Method used to iterate over each of the index's values.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nFuzzyMultiMap.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  this.items.forEach(function(value) {\n    callback.call(scope, value, value);\n  });\n};\n\n/**\n * Method returning an iterator over the index's values.\n *\n * @return {FuzzyMultiMapIterator}\n */\nFuzzyMultiMap.prototype.values = function() {\n  return this.items.values();\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  FuzzyMultiMap.prototype[Symbol.iterator] = FuzzyMultiMap.prototype.values;\n\n/**\n * Convenience known method.\n */\nFuzzyMultiMap.prototype.inspect = function() {\n  var array = Array.from(this);\n\n  Object.defineProperty(array, 'constructor', {\n    value: FuzzyMultiMap,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  FuzzyMultiMap.prototype[Symbol.for('nodejs.util.inspect.custom')] = FuzzyMultiMap.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a structure.\n *\n * @param  {Iterable}       iterable   - Target iterable.\n * @param  {array|function} descriptor - Hash functions descriptor.\n * @param  {function}       Container  - Container to use.\n * @param  {boolean}        useSet     - Whether to use #.set or #.add\n * @return {FuzzyMultiMap}\n */\nFuzzyMultiMap.from = function(iterable, descriptor, Container, useSet) {\n  if (arguments.length === 3) {\n    if (typeof Container === 'boolean') {\n      useSet = Container;\n      Container = Array;\n    }\n  }\n\n  var map = new FuzzyMultiMap(descriptor, Container);\n\n  forEach(iterable, function(value, key) {\n    if (useSet)\n      map.set(key, value);\n    else\n      map.add(value);\n  });\n\n  return map;\n};\n\n/**\n * Exporting.\n */\nmodule.exports = FuzzyMultiMap;\n"]},"metadata":{},"sourceType":"script"}