{"ast":null,"code":"import _styled from \"styled-components\";\n\nvar _jsxFileName = \"/Users/safahi/Downloads/interface-4.30.1/src/components/earn/StakingModal.tsx\",\n    _s = $RefreshSig$();\n\nimport { Trans } from \"@lingui/react\";\nimport { CurrencyAmount } from '@uniswap/sdk-core';\nimport { Pair } from '@uniswap/v2-sdk';\nimport { useCallback, useState } from 'react';\nimport { ApprovalState, useApproveCallback } from '../../hooks/useApproveCallback';\nimport { usePairContract, useStakingContract, useV2RouterContract } from '../../hooks/useContract';\nimport { useV2LiquidityTokenPermit } from '../../hooks/useERC20Permit';\nimport useTransactionDeadline from '../../hooks/useTransactionDeadline';\nimport { useActiveWeb3React } from '../../hooks/web3';\nimport { useDerivedStakeInfo } from '../../state/stake/hooks';\nimport { TransactionType } from '../../state/transactions/actions';\nimport { useTransactionAdder } from '../../state/transactions/hooks';\nimport { CloseIcon, ThemedText } from '../../theme';\nimport { formatCurrencyAmount } from '../../utils/formatCurrencyAmount';\nimport { maxAmountSpend } from '../../utils/maxAmountSpend';\nimport { ButtonConfirmed, ButtonError } from '../Button';\nimport { AutoColumn } from '../Column';\nimport CurrencyInputPanel from '../CurrencyInputPanel';\nimport Modal from '../Modal';\nimport { LoadingView, SubmittedView } from '../ModalViews';\nimport ProgressCircles from '../ProgressSteps';\nimport { RowBetween } from '../Row';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HypotheticalRewardRate = _styled.div.withConfig({\n  displayName: \"StakingModal__HypotheticalRewardRate\",\n  componentId: \"sc-1uketpd-0\"\n})([\"display:flex;justify-content:space-between;padding-right:20px;padding-left:20px;opacity:\", \";\"], ({\n  dim\n}) => dim ? 0.5 : 1);\n\nconst ContentWrapper = _styled(AutoColumn).withConfig({\n  displayName: \"StakingModal__ContentWrapper\",\n  componentId: \"sc-1uketpd-1\"\n})([\"width:100%;padding:1rem;\"]);\n\nexport default function StakingModal({\n  isOpen,\n  onDismiss,\n  stakingInfo,\n  userLiquidityUnstaked\n}) {\n  _s();\n\n  const {\n    library\n  } = useActiveWeb3React(); // track and parse user input\n\n  const [typedValue, setTypedValue] = useState('');\n  const {\n    parsedAmount,\n    error\n  } = useDerivedStakeInfo(typedValue, stakingInfo.stakedAmount.currency, userLiquidityUnstaked);\n  const parsedAmountWrapped = parsedAmount === null || parsedAmount === void 0 ? void 0 : parsedAmount.wrapped;\n  let hypotheticalRewardRate = CurrencyAmount.fromRawAmount(stakingInfo.rewardRate.currency, '0');\n\n  if (parsedAmountWrapped === null || parsedAmountWrapped === void 0 ? void 0 : parsedAmountWrapped.greaterThan('0')) {\n    hypotheticalRewardRate = stakingInfo.getHypotheticalRewardRate(stakingInfo.stakedAmount.add(parsedAmountWrapped), stakingInfo.totalStakedAmount.add(parsedAmountWrapped), stakingInfo.totalRewardRate);\n  } // state for pending and submitted txn views\n\n\n  const addTransaction = useTransactionAdder();\n  const [attempting, setAttempting] = useState(false);\n  const [hash, setHash] = useState();\n  const wrappedOnDismiss = useCallback(() => {\n    setHash(undefined);\n    setAttempting(false);\n    onDismiss();\n  }, [onDismiss]); // pair contract for this token to be staked\n\n  const dummyPair = new Pair(CurrencyAmount.fromRawAmount(stakingInfo.tokens[0], '0'), CurrencyAmount.fromRawAmount(stakingInfo.tokens[1], '0'));\n  const pairContract = usePairContract(dummyPair.liquidityToken.address); // approval data for stake\n\n  const deadline = useTransactionDeadline();\n  const router = useV2RouterContract();\n  const {\n    signatureData,\n    gatherPermitSignature\n  } = useV2LiquidityTokenPermit(parsedAmountWrapped, router === null || router === void 0 ? void 0 : router.address);\n  const [approval, approveCallback] = useApproveCallback(parsedAmount, stakingInfo.stakingRewardAddress);\n  const stakingContract = useStakingContract(stakingInfo.stakingRewardAddress);\n\n  async function onStake() {\n    setAttempting(true);\n\n    if (stakingContract && parsedAmount && deadline) {\n      if (approval === ApprovalState.APPROVED) {\n        await stakingContract.stake(`0x${parsedAmount.quotient.toString(16)}`, {\n          gasLimit: 350000\n        });\n      } else if (signatureData) {\n        stakingContract.stakeWithPermit(`0x${parsedAmount.quotient.toString(16)}`, signatureData.deadline, signatureData.v, signatureData.r, signatureData.s, {\n          gasLimit: 350000\n        }).then(response => {\n          addTransaction(response, {\n            type: TransactionType.DEPOSIT_LIQUIDITY_STAKING,\n            token0Address: stakingInfo.tokens[0].address,\n            token1Address: stakingInfo.tokens[1].address\n          });\n          setHash(response.hash);\n        }).catch(error => {\n          setAttempting(false);\n          console.log(error);\n        });\n      } else {\n        setAttempting(false);\n        throw new Error('Attempting to stake without approval or a signature. Please contact support.');\n      }\n    }\n  } // wrapped onUserInput to clear signatures\n\n\n  const onUserInput = useCallback(typedValue => {\n    setTypedValue(typedValue);\n  }, []); // used for max input button\n\n  const maxAmountInput = maxAmountSpend(userLiquidityUnstaked);\n  const atMaxAmount = Boolean(maxAmountInput && (parsedAmount === null || parsedAmount === void 0 ? void 0 : parsedAmount.equalTo(maxAmountInput)));\n  const handleMax = useCallback(() => {\n    maxAmountInput && onUserInput(maxAmountInput.toExact());\n  }, [maxAmountInput, onUserInput]);\n\n  async function onAttemptToApprove() {\n    if (!pairContract || !library || !deadline) throw new Error('missing dependencies');\n    if (!parsedAmount) throw new Error('missing liquidity amount');\n\n    if (gatherPermitSignature) {\n      try {\n        await gatherPermitSignature();\n      } catch (error) {\n        // try to approve if gatherPermitSignature failed for any reason other than the user rejecting it\n        if ((error === null || error === void 0 ? void 0 : error.code) !== 4001) {\n          await approveCallback();\n        }\n      }\n    } else {\n      await approveCallback();\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    isOpen: isOpen,\n    onDismiss: wrappedOnDismiss,\n    maxHeight: 90,\n    children: [!attempting && !hash && /*#__PURE__*/_jsxDEV(ContentWrapper, {\n      gap: \"lg\",\n      children: [/*#__PURE__*/_jsxDEV(RowBetween, {\n        children: [/*#__PURE__*/_jsxDEV(ThemedText.MediumHeader, {\n          children: /*#__PURE__*/_jsxDEV(Trans, {\n            id: \"Deposit\"\n          }, void 0, false, void 0, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CloseIcon, {\n          onClick: wrappedOnDismiss\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CurrencyInputPanel, {\n        value: typedValue,\n        onUserInput: onUserInput,\n        onMax: handleMax,\n        showMaxButton: !atMaxAmount,\n        currency: stakingInfo.stakedAmount.currency,\n        pair: dummyPair,\n        label: '',\n        renderBalance: amount => /*#__PURE__*/_jsxDEV(Trans, {\n          id: \"Available to deposit: {0}\",\n          values: {\n            0: formatCurrencyAmount(amount, 4)\n          }\n        }, void 0, false, void 0, this),\n        id: \"stake-liquidity-token\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(HypotheticalRewardRate, {\n        dim: !hypotheticalRewardRate.greaterThan('0'),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(ThemedText.Black, {\n            fontWeight: 600,\n            children: /*#__PURE__*/_jsxDEV(Trans, {\n              id: \"Weekly Rewards\"\n            }, void 0, false, void 0, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ThemedText.Black, {\n          children: /*#__PURE__*/_jsxDEV(Trans, {\n            id: \"{0} UNI / week\",\n            values: {\n              0: hypotheticalRewardRate.multiply((60 * 60 * 24 * 7).toString()).toSignificant(4, {\n                groupSeparator: ','\n              })\n            }\n          }, void 0, false, void 0, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(RowBetween, {\n        children: [/*#__PURE__*/_jsxDEV(ButtonConfirmed, {\n          mr: \"0.5rem\",\n          onClick: onAttemptToApprove,\n          confirmed: approval === ApprovalState.APPROVED || signatureData !== null,\n          disabled: approval !== ApprovalState.NOT_APPROVED || signatureData !== null,\n          children: /*#__PURE__*/_jsxDEV(Trans, {\n            id: \"Approve\"\n          }, void 0, false, void 0, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ButtonError, {\n          disabled: !!error || signatureData === null && approval !== ApprovalState.APPROVED,\n          error: !!error && !!parsedAmount,\n          onClick: onStake,\n          children: error !== null && error !== void 0 ? error : /*#__PURE__*/_jsxDEV(Trans, {\n            id: \"Deposit\"\n          }, void 0, false, void 0, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ProgressCircles, {\n        steps: [approval === ApprovalState.APPROVED || signatureData !== null],\n        disabled: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }, this), attempting && !hash && /*#__PURE__*/_jsxDEV(LoadingView, {\n      onDismiss: wrappedOnDismiss,\n      children: /*#__PURE__*/_jsxDEV(AutoColumn, {\n        gap: \"12px\",\n        justify: 'center',\n        children: [/*#__PURE__*/_jsxDEV(ThemedText.LargeHeader, {\n          children: /*#__PURE__*/_jsxDEV(Trans, {\n            id: \"Depositing Liquidity\"\n          }, void 0, false, void 0, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ThemedText.Body, {\n          fontSize: 20,\n          children: /*#__PURE__*/_jsxDEV(Trans, {\n            id: \"{0} UNI-V2\",\n            values: {\n              0: parsedAmount === null || parsedAmount === void 0 ? void 0 : parsedAmount.toSignificant(4)\n            }\n          }, void 0, false, void 0, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }, this), attempting && hash && /*#__PURE__*/_jsxDEV(SubmittedView, {\n      onDismiss: wrappedOnDismiss,\n      hash: hash,\n      children: /*#__PURE__*/_jsxDEV(AutoColumn, {\n        gap: \"12px\",\n        justify: 'center',\n        children: [/*#__PURE__*/_jsxDEV(ThemedText.LargeHeader, {\n          children: /*#__PURE__*/_jsxDEV(Trans, {\n            id: \"Transaction Submitted\"\n          }, void 0, false, void 0, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ThemedText.Body, {\n          fontSize: 20,\n          children: /*#__PURE__*/_jsxDEV(Trans, {\n            id: \"Deposited {0} UNI-V2\",\n            values: {\n              0: parsedAmount === null || parsedAmount === void 0 ? void 0 : parsedAmount.toSignificant(4)\n            }\n          }, void 0, false, void 0, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n}\n\n_s(StakingModal, \"UStKdCs/gPN5qoG3qB3TPwz8/FM=\", false, function () {\n  return [useActiveWeb3React, useDerivedStakeInfo, useTransactionAdder, usePairContract, useTransactionDeadline, useV2RouterContract, useV2LiquidityTokenPermit, useApproveCallback, useStakingContract];\n});\n\n_c = StakingModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"StakingModal\");","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/components/earn/StakingModal.tsx"],"names":["CurrencyAmount","Pair","useCallback","useState","ApprovalState","useApproveCallback","usePairContract","useStakingContract","useV2RouterContract","useV2LiquidityTokenPermit","useTransactionDeadline","useActiveWeb3React","useDerivedStakeInfo","TransactionType","useTransactionAdder","CloseIcon","ThemedText","formatCurrencyAmount","maxAmountSpend","ButtonConfirmed","ButtonError","AutoColumn","CurrencyInputPanel","Modal","LoadingView","SubmittedView","ProgressCircles","RowBetween","HypotheticalRewardRate","styled","div","dim","ContentWrapper","StakingModal","isOpen","onDismiss","stakingInfo","userLiquidityUnstaked","library","typedValue","setTypedValue","parsedAmount","error","stakedAmount","currency","parsedAmountWrapped","wrapped","hypotheticalRewardRate","fromRawAmount","rewardRate","greaterThan","getHypotheticalRewardRate","add","totalStakedAmount","totalRewardRate","addTransaction","attempting","setAttempting","hash","setHash","wrappedOnDismiss","undefined","dummyPair","tokens","pairContract","liquidityToken","address","deadline","router","signatureData","gatherPermitSignature","approval","approveCallback","stakingRewardAddress","stakingContract","onStake","APPROVED","stake","quotient","toString","gasLimit","stakeWithPermit","v","r","s","then","response","type","DEPOSIT_LIQUIDITY_STAKING","token0Address","token1Address","catch","console","log","Error","onUserInput","maxAmountInput","atMaxAmount","Boolean","equalTo","handleMax","toExact","onAttemptToApprove","code","amount","multiply","toSignificant","groupSeparator","NOT_APPROVED"],"mappings":"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","sourcesContent":["import { TransactionResponse } from '@ethersproject/providers'\nimport { Trans } from '@lingui/macro'\nimport { CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { useCallback, useState } from 'react'\nimport styled from 'styled-components/macro'\n\nimport { ApprovalState, useApproveCallback } from '../../hooks/useApproveCallback'\nimport { usePairContract, useStakingContract, useV2RouterContract } from '../../hooks/useContract'\nimport { useV2LiquidityTokenPermit } from '../../hooks/useERC20Permit'\nimport useTransactionDeadline from '../../hooks/useTransactionDeadline'\nimport { useActiveWeb3React } from '../../hooks/web3'\nimport { StakingInfo, useDerivedStakeInfo } from '../../state/stake/hooks'\nimport { TransactionType } from '../../state/transactions/actions'\nimport { useTransactionAdder } from '../../state/transactions/hooks'\nimport { CloseIcon, ThemedText } from '../../theme'\nimport { formatCurrencyAmount } from '../../utils/formatCurrencyAmount'\nimport { maxAmountSpend } from '../../utils/maxAmountSpend'\nimport { ButtonConfirmed, ButtonError } from '../Button'\nimport { AutoColumn } from '../Column'\nimport CurrencyInputPanel from '../CurrencyInputPanel'\nimport Modal from '../Modal'\nimport { LoadingView, SubmittedView } from '../ModalViews'\nimport ProgressCircles from '../ProgressSteps'\nimport { RowBetween } from '../Row'\n\nconst HypotheticalRewardRate = styled.div<{ dim: boolean }>`\n  display: flex;\n  justify-content: space-between;\n  padding-right: 20px;\n  padding-left: 20px;\n\n  opacity: ${({ dim }) => (dim ? 0.5 : 1)};\n`\n\nconst ContentWrapper = styled(AutoColumn)`\n  width: 100%;\n  padding: 1rem;\n`\n\ninterface StakingModalProps {\n  isOpen: boolean\n  onDismiss: () => void\n  stakingInfo: StakingInfo\n  userLiquidityUnstaked: CurrencyAmount<Token> | undefined\n}\n\nexport default function StakingModal({ isOpen, onDismiss, stakingInfo, userLiquidityUnstaked }: StakingModalProps) {\n  const { library } = useActiveWeb3React()\n\n  // track and parse user input\n  const [typedValue, setTypedValue] = useState('')\n  const { parsedAmount, error } = useDerivedStakeInfo(\n    typedValue,\n    stakingInfo.stakedAmount.currency,\n    userLiquidityUnstaked\n  )\n  const parsedAmountWrapped = parsedAmount?.wrapped\n\n  let hypotheticalRewardRate: CurrencyAmount<Token> = CurrencyAmount.fromRawAmount(stakingInfo.rewardRate.currency, '0')\n  if (parsedAmountWrapped?.greaterThan('0')) {\n    hypotheticalRewardRate = stakingInfo.getHypotheticalRewardRate(\n      stakingInfo.stakedAmount.add(parsedAmountWrapped),\n      stakingInfo.totalStakedAmount.add(parsedAmountWrapped),\n      stakingInfo.totalRewardRate\n    )\n  }\n\n  // state for pending and submitted txn views\n  const addTransaction = useTransactionAdder()\n  const [attempting, setAttempting] = useState<boolean>(false)\n  const [hash, setHash] = useState<string | undefined>()\n  const wrappedOnDismiss = useCallback(() => {\n    setHash(undefined)\n    setAttempting(false)\n    onDismiss()\n  }, [onDismiss])\n\n  // pair contract for this token to be staked\n  const dummyPair = new Pair(\n    CurrencyAmount.fromRawAmount(stakingInfo.tokens[0], '0'),\n    CurrencyAmount.fromRawAmount(stakingInfo.tokens[1], '0')\n  )\n  const pairContract = usePairContract(dummyPair.liquidityToken.address)\n\n  // approval data for stake\n  const deadline = useTransactionDeadline()\n  const router = useV2RouterContract()\n  const { signatureData, gatherPermitSignature } = useV2LiquidityTokenPermit(parsedAmountWrapped, router?.address)\n  const [approval, approveCallback] = useApproveCallback(parsedAmount, stakingInfo.stakingRewardAddress)\n\n  const stakingContract = useStakingContract(stakingInfo.stakingRewardAddress)\n  async function onStake() {\n    setAttempting(true)\n    if (stakingContract && parsedAmount && deadline) {\n      if (approval === ApprovalState.APPROVED) {\n        await stakingContract.stake(`0x${parsedAmount.quotient.toString(16)}`, { gasLimit: 350000 })\n      } else if (signatureData) {\n        stakingContract\n          .stakeWithPermit(\n            `0x${parsedAmount.quotient.toString(16)}`,\n            signatureData.deadline,\n            signatureData.v,\n            signatureData.r,\n            signatureData.s,\n            { gasLimit: 350000 }\n          )\n          .then((response: TransactionResponse) => {\n            addTransaction(response, {\n              type: TransactionType.DEPOSIT_LIQUIDITY_STAKING,\n              token0Address: stakingInfo.tokens[0].address,\n              token1Address: stakingInfo.tokens[1].address,\n            })\n            setHash(response.hash)\n          })\n          .catch((error: any) => {\n            setAttempting(false)\n            console.log(error)\n          })\n      } else {\n        setAttempting(false)\n        throw new Error('Attempting to stake without approval or a signature. Please contact support.')\n      }\n    }\n  }\n\n  // wrapped onUserInput to clear signatures\n  const onUserInput = useCallback((typedValue: string) => {\n    setTypedValue(typedValue)\n  }, [])\n\n  // used for max input button\n  const maxAmountInput = maxAmountSpend(userLiquidityUnstaked)\n  const atMaxAmount = Boolean(maxAmountInput && parsedAmount?.equalTo(maxAmountInput))\n  const handleMax = useCallback(() => {\n    maxAmountInput && onUserInput(maxAmountInput.toExact())\n  }, [maxAmountInput, onUserInput])\n\n  async function onAttemptToApprove() {\n    if (!pairContract || !library || !deadline) throw new Error('missing dependencies')\n    if (!parsedAmount) throw new Error('missing liquidity amount')\n\n    if (gatherPermitSignature) {\n      try {\n        await gatherPermitSignature()\n      } catch (error) {\n        // try to approve if gatherPermitSignature failed for any reason other than the user rejecting it\n        if (error?.code !== 4001) {\n          await approveCallback()\n        }\n      }\n    } else {\n      await approveCallback()\n    }\n  }\n\n  return (\n    <Modal isOpen={isOpen} onDismiss={wrappedOnDismiss} maxHeight={90}>\n      {!attempting && !hash && (\n        <ContentWrapper gap=\"lg\">\n          <RowBetween>\n            <ThemedText.MediumHeader>\n              <Trans>Deposit</Trans>\n            </ThemedText.MediumHeader>\n            <CloseIcon onClick={wrappedOnDismiss} />\n          </RowBetween>\n          <CurrencyInputPanel\n            value={typedValue}\n            onUserInput={onUserInput}\n            onMax={handleMax}\n            showMaxButton={!atMaxAmount}\n            currency={stakingInfo.stakedAmount.currency}\n            pair={dummyPair}\n            label={''}\n            renderBalance={(amount) => <Trans>Available to deposit: {formatCurrencyAmount(amount, 4)}</Trans>}\n            id=\"stake-liquidity-token\"\n          />\n\n          <HypotheticalRewardRate dim={!hypotheticalRewardRate.greaterThan('0')}>\n            <div>\n              <ThemedText.Black fontWeight={600}>\n                <Trans>Weekly Rewards</Trans>\n              </ThemedText.Black>\n            </div>\n\n            <ThemedText.Black>\n              <Trans>\n                {hypotheticalRewardRate\n                  .multiply((60 * 60 * 24 * 7).toString())\n                  .toSignificant(4, { groupSeparator: ',' })}{' '}\n                UNI / week\n              </Trans>\n            </ThemedText.Black>\n          </HypotheticalRewardRate>\n\n          <RowBetween>\n            <ButtonConfirmed\n              mr=\"0.5rem\"\n              onClick={onAttemptToApprove}\n              confirmed={approval === ApprovalState.APPROVED || signatureData !== null}\n              disabled={approval !== ApprovalState.NOT_APPROVED || signatureData !== null}\n            >\n              <Trans>Approve</Trans>\n            </ButtonConfirmed>\n            <ButtonError\n              disabled={!!error || (signatureData === null && approval !== ApprovalState.APPROVED)}\n              error={!!error && !!parsedAmount}\n              onClick={onStake}\n            >\n              {error ?? <Trans>Deposit</Trans>}\n            </ButtonError>\n          </RowBetween>\n          <ProgressCircles steps={[approval === ApprovalState.APPROVED || signatureData !== null]} disabled={true} />\n        </ContentWrapper>\n      )}\n      {attempting && !hash && (\n        <LoadingView onDismiss={wrappedOnDismiss}>\n          <AutoColumn gap=\"12px\" justify={'center'}>\n            <ThemedText.LargeHeader>\n              <Trans>Depositing Liquidity</Trans>\n            </ThemedText.LargeHeader>\n            <ThemedText.Body fontSize={20}>\n              <Trans>{parsedAmount?.toSignificant(4)} UNI-V2</Trans>\n            </ThemedText.Body>\n          </AutoColumn>\n        </LoadingView>\n      )}\n      {attempting && hash && (\n        <SubmittedView onDismiss={wrappedOnDismiss} hash={hash}>\n          <AutoColumn gap=\"12px\" justify={'center'}>\n            <ThemedText.LargeHeader>\n              <Trans>Transaction Submitted</Trans>\n            </ThemedText.LargeHeader>\n            <ThemedText.Body fontSize={20}>\n              <Trans>Deposited {parsedAmount?.toSignificant(4)} UNI-V2</Trans>\n            </ThemedText.Body>\n          </AutoColumn>\n        </SubmittedView>\n      )}\n    </Modal>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}