{"ast":null,"code":"import _defineProperty from\"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";var _STABLECOIN_AMOUNT_OU;import{CurrencyAmount,Price,TradeType}from'@uniswap/sdk-core';import{useMemo}from'react';import{tryParseAmount}from'state/swap/hooks';import{SupportedChainId}from'../constants/chains';import{DAI_OPTIMISM,USDC,USDC_ARBITRUM,USDC_POLYGON}from'../constants/tokens';import{useBestV2Trade}from'./useBestV2Trade';import{useClientSideV3Trade}from'./useClientSideV3Trade';import{useActiveWeb3React}from'./web3';// Stablecoin amounts used when calculating spot price for a given currency.\n// The amount is large enough to filter low liquidity pairs.\nexport var STABLECOIN_AMOUNT_OUT=(_STABLECOIN_AMOUNT_OU={},_defineProperty(_STABLECOIN_AMOUNT_OU,SupportedChainId.MAINNET,CurrencyAmount.fromRawAmount(USDC,100000e6)),_defineProperty(_STABLECOIN_AMOUNT_OU,SupportedChainId.ARBITRUM_ONE,CurrencyAmount.fromRawAmount(USDC_ARBITRUM,10000e6)),_defineProperty(_STABLECOIN_AMOUNT_OU,SupportedChainId.OPTIMISM,CurrencyAmount.fromRawAmount(DAI_OPTIMISM,10000e18)),_defineProperty(_STABLECOIN_AMOUNT_OU,SupportedChainId.POLYGON,CurrencyAmount.fromRawAmount(USDC_POLYGON,10000e6)),_STABLECOIN_AMOUNT_OU);/**\n * Returns the price in USDC of the input currency\n * @param currency currency to compute the USDC price of\n */export default function useUSDCPrice(currency){var chainId=currency===null||currency===void 0?void 0:currency.chainId;var amountOut=chainId?STABLECOIN_AMOUNT_OUT[chainId]:undefined;var stablecoin=amountOut===null||amountOut===void 0?void 0:amountOut.currency;// TODO(#2808): remove dependency on useBestV2Trade\nvar v2USDCTrade=useBestV2Trade(TradeType.EXACT_OUTPUT,amountOut,currency,{maxHops:2});var v3USDCTrade=useClientSideV3Trade(TradeType.EXACT_OUTPUT,amountOut,currency);return useMemo(function(){if(!currency||!stablecoin){return undefined;}// handle usdc\nif(currency===null||currency===void 0?void 0:currency.wrapped.equals(stablecoin)){return new Price(stablecoin,stablecoin,'1','1');}// use v2 price if available, v3 as fallback\nif(v2USDCTrade){var _v2USDCTrade$route$mi=v2USDCTrade.route.midPrice,numerator=_v2USDCTrade$route$mi.numerator,denominator=_v2USDCTrade$route$mi.denominator;return new Price(currency,stablecoin,denominator,numerator);}else if(v3USDCTrade.trade){var _v3USDCTrade$trade$ro=v3USDCTrade.trade.routes[0].midPrice,_numerator=_v3USDCTrade$trade$ro.numerator,_denominator=_v3USDCTrade$trade$ro.denominator;return new Price(currency,stablecoin,_denominator,_numerator);}return undefined;},[currency,stablecoin,v2USDCTrade,v3USDCTrade.trade]);}export function useUSDCValue(currencyAmount){var price=useUSDCPrice(currencyAmount===null||currencyAmount===void 0?void 0:currencyAmount.currency);return useMemo(function(){if(!price||!currencyAmount)return null;try{return price.quote(currencyAmount);}catch(error){return null;}},[currencyAmount,price]);}/**\n *\n * @param fiatValue string representation of a USD amount\n * @returns CurrencyAmount where currency is stablecoin on active chain\n */export function useStablecoinAmountFromFiatValue(fiatValue){var _STABLECOIN_AMOUNT_OU2;var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId;var stablecoin=chainId?(_STABLECOIN_AMOUNT_OU2=STABLECOIN_AMOUNT_OUT[chainId])===null||_STABLECOIN_AMOUNT_OU2===void 0?void 0:_STABLECOIN_AMOUNT_OU2.currency:undefined;if(fiatValue===null||fiatValue===undefined||!chainId||!stablecoin){return undefined;}// trim for decimal precision when parsing\nvar parsedForDecimals=parseFloat(fiatValue).toFixed(stablecoin.decimals).toString();try{// parse USD string into CurrencyAmount based on stablecoin decimals\nreturn tryParseAmount(parsedForDecimals,stablecoin);}catch(error){return undefined;}}","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/hooks/useUSDCPrice.ts"],"names":["CurrencyAmount","Price","TradeType","useMemo","tryParseAmount","SupportedChainId","DAI_OPTIMISM","USDC","USDC_ARBITRUM","USDC_POLYGON","useBestV2Trade","useClientSideV3Trade","useActiveWeb3React","STABLECOIN_AMOUNT_OUT","MAINNET","fromRawAmount","ARBITRUM_ONE","OPTIMISM","POLYGON","useUSDCPrice","currency","chainId","amountOut","undefined","stablecoin","v2USDCTrade","EXACT_OUTPUT","maxHops","v3USDCTrade","wrapped","equals","route","midPrice","numerator","denominator","trade","routes","useUSDCValue","currencyAmount","price","quote","error","useStablecoinAmountFromFiatValue","fiatValue","parsedForDecimals","parseFloat","toFixed","decimals","toString"],"mappings":"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","sourcesContent":["import { Currency, CurrencyAmount, Price, Token, TradeType } from '@uniswap/sdk-core'\nimport { useMemo } from 'react'\nimport { tryParseAmount } from 'state/swap/hooks'\n\nimport { SupportedChainId } from '../constants/chains'\nimport { DAI_OPTIMISM, USDC, USDC_ARBITRUM, USDC_POLYGON } from '../constants/tokens'\nimport { useBestV2Trade } from './useBestV2Trade'\nimport { useClientSideV3Trade } from './useClientSideV3Trade'\nimport { useActiveWeb3React } from './web3'\n\n// Stablecoin amounts used when calculating spot price for a given currency.\n// The amount is large enough to filter low liquidity pairs.\nexport const STABLECOIN_AMOUNT_OUT: { [chainId: number]: CurrencyAmount<Token> } = {\n  [SupportedChainId.MAINNET]: CurrencyAmount.fromRawAmount(USDC, 100_000e6),\n  [SupportedChainId.ARBITRUM_ONE]: CurrencyAmount.fromRawAmount(USDC_ARBITRUM, 10_000e6),\n  [SupportedChainId.OPTIMISM]: CurrencyAmount.fromRawAmount(DAI_OPTIMISM, 10_000e18),\n  [SupportedChainId.POLYGON]: CurrencyAmount.fromRawAmount(USDC_POLYGON, 10_000e6),\n}\n\n/**\n * Returns the price in USDC of the input currency\n * @param currency currency to compute the USDC price of\n */\nexport default function useUSDCPrice(currency?: Currency): Price<Currency, Token> | undefined {\n  const chainId = currency?.chainId\n\n  const amountOut = chainId ? STABLECOIN_AMOUNT_OUT[chainId] : undefined\n  const stablecoin = amountOut?.currency\n\n  // TODO(#2808): remove dependency on useBestV2Trade\n  const v2USDCTrade = useBestV2Trade(TradeType.EXACT_OUTPUT, amountOut, currency, {\n    maxHops: 2,\n  })\n  const v3USDCTrade = useClientSideV3Trade(TradeType.EXACT_OUTPUT, amountOut, currency)\n\n  return useMemo(() => {\n    if (!currency || !stablecoin) {\n      return undefined\n    }\n\n    // handle usdc\n    if (currency?.wrapped.equals(stablecoin)) {\n      return new Price(stablecoin, stablecoin, '1', '1')\n    }\n\n    // use v2 price if available, v3 as fallback\n    if (v2USDCTrade) {\n      const { numerator, denominator } = v2USDCTrade.route.midPrice\n      return new Price(currency, stablecoin, denominator, numerator)\n    } else if (v3USDCTrade.trade) {\n      const { numerator, denominator } = v3USDCTrade.trade.routes[0].midPrice\n      return new Price(currency, stablecoin, denominator, numerator)\n    }\n\n    return undefined\n  }, [currency, stablecoin, v2USDCTrade, v3USDCTrade.trade])\n}\n\nexport function useUSDCValue(currencyAmount: CurrencyAmount<Currency> | undefined | null) {\n  const price = useUSDCPrice(currencyAmount?.currency)\n\n  return useMemo(() => {\n    if (!price || !currencyAmount) return null\n    try {\n      return price.quote(currencyAmount)\n    } catch (error) {\n      return null\n    }\n  }, [currencyAmount, price])\n}\n\n/**\n *\n * @param fiatValue string representation of a USD amount\n * @returns CurrencyAmount where currency is stablecoin on active chain\n */\nexport function useStablecoinAmountFromFiatValue(fiatValue: string | null | undefined) {\n  const { chainId } = useActiveWeb3React()\n  const stablecoin = chainId ? STABLECOIN_AMOUNT_OUT[chainId]?.currency : undefined\n\n  if (fiatValue === null || fiatValue === undefined || !chainId || !stablecoin) {\n    return undefined\n  }\n\n  // trim for decimal precision when parsing\n  const parsedForDecimals = parseFloat(fiatValue).toFixed(stablecoin.decimals).toString()\n\n  try {\n    // parse USD string into CurrencyAmount based on stablecoin decimals\n    return tryParseAmount(parsedForDecimals, stablecoin)\n  } catch (error) {\n    return undefined\n  }\n}\n"]},"metadata":{},"sourceType":"module"}