{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { Field, resetMintState, setFullRange, typeInput, typeLeftRangeInput, typeRightRangeInput, typeStartPriceInput } from './actions';\nconst initialState = {\n  independentField: Field.CURRENCY_A,\n  typedValue: '',\n  startPriceTypedValue: '',\n  leftRangeTypedValue: '',\n  rightRangeTypedValue: ''\n};\nexport default createReducer(initialState, builder => builder.addCase(resetMintState, () => initialState).addCase(setFullRange, state => {\n  return { ...state,\n    leftRangeTypedValue: true,\n    rightRangeTypedValue: true\n  };\n}).addCase(typeStartPriceInput, (state, {\n  payload: {\n    typedValue\n  }\n}) => {\n  return { ...state,\n    startPriceTypedValue: typedValue\n  };\n}).addCase(typeLeftRangeInput, (state, {\n  payload: {\n    typedValue\n  }\n}) => {\n  return { ...state,\n    leftRangeTypedValue: typedValue\n  };\n}).addCase(typeRightRangeInput, (state, {\n  payload: {\n    typedValue\n  }\n}) => {\n  return { ...state,\n    rightRangeTypedValue: typedValue\n  };\n}).addCase(typeInput, (state, {\n  payload: {\n    field,\n    typedValue,\n    noLiquidity\n  }\n}) => {\n  if (noLiquidity) {\n    // they're typing into the field they've last typed in\n    if (field === state.independentField) {\n      return { ...state,\n        independentField: field,\n        typedValue\n      };\n    } // they're typing into a new field, store the other value\n    else {\n      return { ...state,\n        independentField: field,\n        typedValue\n      };\n    }\n  } else {\n    return { ...state,\n      independentField: field,\n      typedValue\n    };\n  }\n}));","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/state/mint/v3/reducer.ts"],"names":["createReducer","Field","resetMintState","setFullRange","typeInput","typeLeftRangeInput","typeRightRangeInput","typeStartPriceInput","initialState","independentField","CURRENCY_A","typedValue","startPriceTypedValue","leftRangeTypedValue","rightRangeTypedValue","builder","addCase","state","payload","field","noLiquidity"],"mappings":"AAAA,SAASA,aAAT,QAA8B,kBAA9B;AAEA,SACEC,KADF,EAEEC,cAFF,EAGEC,YAHF,EAIEC,SAJF,EAKEC,kBALF,EAMEC,mBANF,EAOEC,mBAPF,QAQO,WARP;AAoBA,MAAMC,YAAuB,GAAG;AAC9BC,EAAAA,gBAAgB,EAAER,KAAK,CAACS,UADM;AAE9BC,EAAAA,UAAU,EAAE,EAFkB;AAG9BC,EAAAA,oBAAoB,EAAE,EAHQ;AAI9BC,EAAAA,mBAAmB,EAAE,EAJS;AAK9BC,EAAAA,oBAAoB,EAAE;AALQ,CAAhC;AAQA,eAAed,aAAa,CAAYQ,YAAZ,EAA2BO,OAAD,IACpDA,OAAO,CACJC,OADH,CACWd,cADX,EAC2B,MAAMM,YADjC,EAEGQ,OAFH,CAEWb,YAFX,EAE0Bc,KAAD,IAAW;AAChC,SAAO,EACL,GAAGA,KADE;AAELJ,IAAAA,mBAAmB,EAAE,IAFhB;AAGLC,IAAAA,oBAAoB,EAAE;AAHjB,GAAP;AAKD,CARH,EASGE,OATH,CASWT,mBATX,EASgC,CAACU,KAAD,EAAQ;AAAEC,EAAAA,OAAO,EAAE;AAAEP,IAAAA;AAAF;AAAX,CAAR,KAAwC;AACpE,SAAO,EACL,GAAGM,KADE;AAELL,IAAAA,oBAAoB,EAAED;AAFjB,GAAP;AAID,CAdH,EAeGK,OAfH,CAeWX,kBAfX,EAe+B,CAACY,KAAD,EAAQ;AAAEC,EAAAA,OAAO,EAAE;AAAEP,IAAAA;AAAF;AAAX,CAAR,KAAwC;AACnE,SAAO,EACL,GAAGM,KADE;AAELJ,IAAAA,mBAAmB,EAAEF;AAFhB,GAAP;AAID,CApBH,EAqBGK,OArBH,CAqBWV,mBArBX,EAqBgC,CAACW,KAAD,EAAQ;AAAEC,EAAAA,OAAO,EAAE;AAAEP,IAAAA;AAAF;AAAX,CAAR,KAAwC;AACpE,SAAO,EACL,GAAGM,KADE;AAELH,IAAAA,oBAAoB,EAAEH;AAFjB,GAAP;AAID,CA1BH,EA2BGK,OA3BH,CA2BWZ,SA3BX,EA2BsB,CAACa,KAAD,EAAQ;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASR,IAAAA,UAAT;AAAqBS,IAAAA;AAArB;AAAX,CAAR,KAA4D;AAC9E,MAAIA,WAAJ,EAAiB;AACf;AACA,QAAID,KAAK,KAAKF,KAAK,CAACR,gBAApB,EAAsC;AACpC,aAAO,EACL,GAAGQ,KADE;AAELR,QAAAA,gBAAgB,EAAEU,KAFb;AAGLR,QAAAA;AAHK,OAAP;AAKD,KAND,CAOA;AAPA,SAQK;AACH,aAAO,EACL,GAAGM,KADE;AAELR,QAAAA,gBAAgB,EAAEU,KAFb;AAGLR,QAAAA;AAHK,OAAP;AAKD;AACF,GAjBD,MAiBO;AACL,WAAO,EACL,GAAGM,KADE;AAELR,MAAAA,gBAAgB,EAAEU,KAFb;AAGLR,MAAAA;AAHK,KAAP;AAKD;AACF,CApDH,CAD0B,CAA5B","sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\n\nimport {\n  Field,\n  resetMintState,\n  setFullRange,\n  typeInput,\n  typeLeftRangeInput,\n  typeRightRangeInput,\n  typeStartPriceInput,\n} from './actions'\n\nexport type FullRange = true\n\ninterface MintState {\n  readonly independentField: Field\n  readonly typedValue: string\n  readonly startPriceTypedValue: string // for the case when there's no liquidity\n  readonly leftRangeTypedValue: string | FullRange\n  readonly rightRangeTypedValue: string | FullRange\n}\n\nconst initialState: MintState = {\n  independentField: Field.CURRENCY_A,\n  typedValue: '',\n  startPriceTypedValue: '',\n  leftRangeTypedValue: '',\n  rightRangeTypedValue: '',\n}\n\nexport default createReducer<MintState>(initialState, (builder) =>\n  builder\n    .addCase(resetMintState, () => initialState)\n    .addCase(setFullRange, (state) => {\n      return {\n        ...state,\n        leftRangeTypedValue: true,\n        rightRangeTypedValue: true,\n      }\n    })\n    .addCase(typeStartPriceInput, (state, { payload: { typedValue } }) => {\n      return {\n        ...state,\n        startPriceTypedValue: typedValue,\n      }\n    })\n    .addCase(typeLeftRangeInput, (state, { payload: { typedValue } }) => {\n      return {\n        ...state,\n        leftRangeTypedValue: typedValue,\n      }\n    })\n    .addCase(typeRightRangeInput, (state, { payload: { typedValue } }) => {\n      return {\n        ...state,\n        rightRangeTypedValue: typedValue,\n      }\n    })\n    .addCase(typeInput, (state, { payload: { field, typedValue, noLiquidity } }) => {\n      if (noLiquidity) {\n        // they're typing into the field they've last typed in\n        if (field === state.independentField) {\n          return {\n            ...state,\n            independentField: field,\n            typedValue,\n          }\n        }\n        // they're typing into a new field, store the other value\n        else {\n          return {\n            ...state,\n            independentField: field,\n            typedValue,\n          }\n        }\n      } else {\n        return {\n          ...state,\n          independentField: field,\n          typedValue,\n        }\n      }\n    })\n)\n"]},"metadata":{},"sourceType":"module"}