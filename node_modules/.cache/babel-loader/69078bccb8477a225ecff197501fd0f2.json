{"ast":null,"code":"import _regeneratorRuntime from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/safahi/Downloads/interface-4.30.1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { default as retry } from 'async-retry';\nimport Timeout from 'await-timeout';\nimport axios from 'axios';\nimport { log } from '../util/log';\n/**\n * Gets subgraph pools from a URI. The URI shoudl contain a JSON\n * stringified array of V2SubgraphPool objects or V3SubgraphPool\n * objects.\n *\n * @export\n * @class URISubgraphProvider\n * @template TSubgraphPool\n */\n\nexport var URISubgraphProvider = /*#__PURE__*/function () {\n  function URISubgraphProvider(chainId, uri) {\n    var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 6000;\n    var retries = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2;\n\n    _classCallCheck(this, URISubgraphProvider);\n\n    this.chainId = chainId;\n    this.uri = uri;\n    this.timeout = timeout;\n    this.retries = retries;\n  }\n\n  _createClass(URISubgraphProvider, [{\n    key: \"getPools\",\n    value: function () {\n      var _getPools = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this = this;\n\n        var allPools;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                log.info({\n                  uri: this.uri\n                }, \"About to get subgraph pools from URI \".concat(this.uri));\n                allPools = [];\n                _context2.next = 4;\n                return retry( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                  var timeout, timerPromise, response, _response, poolsBuffer, status, pools;\n\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          timeout = new Timeout();\n                          timerPromise = timeout.set(_this.timeout).then(function () {\n                            throw new Error(\"Timed out getting pools from subgraph: \".concat(_this.timeout));\n                          });\n                          _context.prev = 2;\n                          _context.next = 5;\n                          return Promise.race([axios.get(_this.uri), timerPromise]);\n\n                        case 5:\n                          response = _context.sent;\n                          _context.next = 11;\n                          break;\n\n                        case 8:\n                          _context.prev = 8;\n                          _context.t0 = _context[\"catch\"](2);\n                          throw _context.t0;\n\n                        case 11:\n                          _context.prev = 11;\n                          timeout.clear();\n                          return _context.finish(11);\n\n                        case 14:\n                          _response = response, poolsBuffer = _response.data, status = _response.status;\n\n                          if (!(status != 200)) {\n                            _context.next = 18;\n                            break;\n                          }\n\n                          log.error({\n                            response: response\n                          }, \"Unabled to get pools from \".concat(_this.uri, \".\"));\n                          throw new Error(\"Unable to get pools from \".concat(_this.uri));\n\n                        case 18:\n                          pools = poolsBuffer;\n                          log.info({\n                            uri: _this.uri,\n                            chain: _this.chainId\n                          }, \"Got subgraph pools from uri. Num: \".concat(pools.length));\n                          allPools = pools;\n\n                        case 21:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, null, [[2, 8, 11, 14]]);\n                })), {\n                  retries: this.retries,\n                  onRetry: function onRetry(err, retry) {\n                    log.info({\n                      err: err\n                    }, \"Failed to get pools from uri \".concat(_this.uri, \". Retry attempt: \").concat(retry));\n                  }\n                });\n\n              case 4:\n                return _context2.abrupt(\"return\", allPools);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getPools() {\n        return _getPools.apply(this, arguments);\n      }\n\n      return getPools;\n    }()\n  }]);\n\n  return URISubgraphProvider;\n}();","map":{"version":3,"sources":["../../../../src/providers/uri-subgraph-provider.ts"],"names":[],"mappings":";;;;AAAA,SAAS,OAAO,IAAI,KAApB,QAAiC,aAAjC;AACA,OAAO,OAAP,MAAoB,eAApB;AACA,OAAO,KAAP,MAAkB,OAAlB;AAEA,SAAS,GAAT,QAAoB,aAApB;AAIA;;;;;;;;AAQG;;AACH,WAAa,mBAAb;AAGE,+BACU,OADV,EAEU,GAFV,EAIqB;AAAA,QADX,OACW,uEADD,IACC;AAAA,QAAX,OAAW,uEAAD,CAAC;;AAAA;;AAHX,SAAA,OAAA,GAAA,OAAA;AACA,SAAA,GAAA,GAAA,GAAA;AACA,SAAA,OAAA,GAAA,OAAA;AACA,SAAA,OAAA,GAAA,OAAA;AACN;;AARN;AAAA;AAAA;AAAA,+EAUS;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AACL,gBAAA,GAAG,CAAC,IAAJ,CACE;AAAE,kBAAA,GAAG,EAAE,KAAK;AAAZ,iBADF,iDAE0C,KAAK,GAF/C;AAKI,gBAAA,QANC,GAM2B,EAN3B;AAAA;AAAA,uBAQC,KAAK,wEACT;AAAA;;AAAA;AAAA;AAAA;AAAA;AACQ,0BAAA,OADR,GACkB,IAAI,OAAJ,EADlB;AAEQ,0BAAA,YAFR,GAEuB,OAAO,CAAC,GAAR,CAAY,KAAI,CAAC,OAAjB,EAA0B,IAA1B,CAA+B,YAAK;AACvD,kCAAM,IAAI,KAAJ,kDACsC,KAAI,CAAC,OAD3C,EAAN;AAGD,2BAJoB,CAFvB;AAAA;AAAA;AAAA,iCAWqB,OAAO,CAAC,IAAR,CAAa,CAAC,KAAK,CAAC,GAAN,CAAU,KAAI,CAAC,GAAf,CAAD,EAAsB,YAAtB,CAAb,CAXrB;;AAAA;AAWI,0BAAA,QAXJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAeI,0BAAA,OAAO,CAAC,KAAR;AAfJ;;AAAA;AAAA,sCAkBwC,QAlBxC,EAkBgB,WAlBhB,aAkBU,IAlBV,EAkB6B,MAlB7B,aAkB6B,MAlB7B;;AAAA,gCAoBM,MAAM,IAAI,GApBhB;AAAA;AAAA;AAAA;;AAqBI,0BAAA,GAAG,CAAC,KAAJ,CAAU;AAAE,4BAAA,QAAQ,EAAR;AAAF,2BAAV,sCAAqD,KAAI,CAAC,GAA1D;AArBJ,gCAuBU,IAAI,KAAJ,oCAAsC,KAAI,CAAC,GAA3C,EAvBV;;AAAA;AA0BQ,0BAAA,KA1BR,GA0BgB,WA1BhB;AA4BE,0BAAA,GAAG,CAAC,IAAJ,CACE;AAAE,4BAAA,GAAG,EAAE,KAAI,CAAC,GAAZ;AAAiB,4BAAA,KAAK,EAAE,KAAI,CAAC;AAA7B,2BADF,8CAEuC,KAAK,CAAC,MAF7C;AAKA,0BAAA,QAAQ,GAAG,KAAX;;AAjCF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADS,IAoCT;AACE,kBAAA,OAAO,EAAE,KAAK,OADhB;AAEE,kBAAA,OAAO,EAAE,iBAAC,GAAD,EAAM,KAAN,EAAe;AACtB,oBAAA,GAAG,CAAC,IAAJ,CACE;AAAE,sBAAA,GAAG,EAAH;AAAF,qBADF,yCAEkC,KAAI,CAAC,GAFvC,8BAE8D,KAF9D;AAID;AAPH,iBApCS,CARN;;AAAA;AAAA,kDAuDE,QAvDF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAVT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA","sourceRoot":"","sourcesContent":["import { default as retry } from 'async-retry';\nimport Timeout from 'await-timeout';\nimport axios from 'axios';\nimport { log } from '../util/log';\n/**\n * Gets subgraph pools from a URI. The URI shoudl contain a JSON\n * stringified array of V2SubgraphPool objects or V3SubgraphPool\n * objects.\n *\n * @export\n * @class URISubgraphProvider\n * @template TSubgraphPool\n */\nexport class URISubgraphProvider {\n    constructor(chainId, uri, timeout = 6000, retries = 2) {\n        this.chainId = chainId;\n        this.uri = uri;\n        this.timeout = timeout;\n        this.retries = retries;\n    }\n    async getPools() {\n        log.info({ uri: this.uri }, `About to get subgraph pools from URI ${this.uri}`);\n        let allPools = [];\n        await retry(async () => {\n            const timeout = new Timeout();\n            const timerPromise = timeout.set(this.timeout).then(() => {\n                throw new Error(`Timed out getting pools from subgraph: ${this.timeout}`);\n            });\n            let response;\n            try {\n                response = await Promise.race([axios.get(this.uri), timerPromise]);\n            }\n            catch (err) {\n                throw err;\n            }\n            finally {\n                timeout.clear();\n            }\n            const { data: poolsBuffer, status } = response;\n            if (status != 200) {\n                log.error({ response }, `Unabled to get pools from ${this.uri}.`);\n                throw new Error(`Unable to get pools from ${this.uri}`);\n            }\n            const pools = poolsBuffer;\n            log.info({ uri: this.uri, chain: this.chainId }, `Got subgraph pools from uri. Num: ${pools.length}`);\n            allPools = pools;\n        }, {\n            retries: this.retries,\n            onRetry: (err, retry) => {\n                log.info({ err }, `Failed to get pools from uri ${this.uri}. Retry attempt: ${retry}`);\n            },\n        });\n        return allPools;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJpLXN1YmdyYXBoLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3Byb3ZpZGVycy91cmktc3ViZ3JhcGgtcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sSUFBSSxLQUFLLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDL0MsT0FBTyxPQUFPLE1BQU0sZUFBZSxDQUFDO0FBQ3BDLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUUxQixPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBSWxDOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxPQUFPLG1CQUFtQjtJQUc5QixZQUNVLE9BQWdCLEVBQ2hCLEdBQVcsRUFDWCxVQUFVLElBQUksRUFDZCxVQUFVLENBQUM7UUFIWCxZQUFPLEdBQVAsT0FBTyxDQUFTO1FBQ2hCLFFBQUcsR0FBSCxHQUFHLENBQVE7UUFDWCxZQUFPLEdBQVAsT0FBTyxDQUFPO1FBQ2QsWUFBTyxHQUFQLE9BQU8sQ0FBSTtJQUNsQixDQUFDO0lBRUcsS0FBSyxDQUFDLFFBQVE7UUFDbkIsR0FBRyxDQUFDLElBQUksQ0FDTixFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQ2pCLHdDQUF3QyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQ25ELENBQUM7UUFFRixJQUFJLFFBQVEsR0FBb0IsRUFBRSxDQUFDO1FBRW5DLE1BQU0sS0FBSyxDQUNULEtBQUssSUFBSSxFQUFFO1lBQ1QsTUFBTSxPQUFPLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztZQUM5QixNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO2dCQUN2RCxNQUFNLElBQUksS0FBSyxDQUNiLDBDQUEwQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQ3pELENBQUM7WUFDSixDQUFDLENBQUMsQ0FBQztZQUVILElBQUksUUFBUSxDQUFDO1lBRWIsSUFBSTtnQkFDRixRQUFRLEdBQUcsTUFBTSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQzthQUNwRTtZQUFDLE9BQU8sR0FBRyxFQUFFO2dCQUNaLE1BQU0sR0FBRyxDQUFDO2FBQ1g7b0JBQVM7Z0JBQ1IsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO2FBQ2pCO1lBRUQsTUFBTSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLEdBQUcsUUFBUSxDQUFDO1lBRS9DLElBQUksTUFBTSxJQUFJLEdBQUcsRUFBRTtnQkFDakIsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLDZCQUE2QixJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztnQkFFbEUsTUFBTSxJQUFJLEtBQUssQ0FBQyw0QkFBNEIsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7YUFDekQ7WUFFRCxNQUFNLEtBQUssR0FBRyxXQUE4QixDQUFDO1lBRTdDLEdBQUcsQ0FBQyxJQUFJLENBQ04sRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUN0QyxxQ0FBcUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUNwRCxDQUFDO1lBRUYsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUNuQixDQUFDLEVBQ0Q7WUFDRSxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87WUFDckIsT0FBTyxFQUFFLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFO2dCQUN0QixHQUFHLENBQUMsSUFBSSxDQUNOLEVBQUUsR0FBRyxFQUFFLEVBQ1AsZ0NBQWdDLElBQUksQ0FBQyxHQUFHLG9CQUFvQixLQUFLLEVBQUUsQ0FDcEUsQ0FBQztZQUNKLENBQUM7U0FDRixDQUNGLENBQUM7UUFFRixPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0NBQ0YifQ=="]},"metadata":{},"sourceType":"module"}