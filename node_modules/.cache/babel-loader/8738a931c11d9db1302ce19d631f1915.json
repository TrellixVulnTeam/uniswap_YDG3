{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { getVersionUpgrade, VersionUpgrade } from '@uniswap/token-lists';\nimport { DEFAULT_ACTIVE_LIST_URLS } from '../../constants/lists';\nimport { DEFAULT_LIST_OF_LISTS } from '../../constants/lists';\nimport { updateVersion } from '../global/actions';\nimport { acceptListUpdate, addList, disableList, enableList, fetchTokenList, removeList } from './actions';\nconst NEW_LIST_STATE = {\n  error: null,\n  current: null,\n  loadingRequestId: null,\n  pendingUpdate: null\n};\nconst initialState = {\n  lastInitializedDefaultListOfLists: DEFAULT_LIST_OF_LISTS,\n  byUrl: { ...DEFAULT_LIST_OF_LISTS.reduce((memo, listUrl) => {\n      memo[listUrl] = NEW_LIST_STATE;\n      return memo;\n    }, {})\n  },\n  activeListUrls: DEFAULT_ACTIVE_LIST_URLS\n};\nexport default createReducer(initialState, builder => builder.addCase(fetchTokenList.pending, (state, {\n  payload: {\n    requestId,\n    url\n  }\n}) => {\n  var _state$byUrl$url$curr, _state$byUrl$url, _state$byUrl$url$pend, _state$byUrl$url2;\n\n  const current = (_state$byUrl$url$curr = (_state$byUrl$url = state.byUrl[url]) === null || _state$byUrl$url === void 0 ? void 0 : _state$byUrl$url.current) !== null && _state$byUrl$url$curr !== void 0 ? _state$byUrl$url$curr : null;\n  const pendingUpdate = (_state$byUrl$url$pend = (_state$byUrl$url2 = state.byUrl[url]) === null || _state$byUrl$url2 === void 0 ? void 0 : _state$byUrl$url2.pendingUpdate) !== null && _state$byUrl$url$pend !== void 0 ? _state$byUrl$url$pend : null;\n  state.byUrl[url] = {\n    current,\n    pendingUpdate,\n    loadingRequestId: requestId,\n    error: null\n  };\n}).addCase(fetchTokenList.fulfilled, (state, {\n  payload: {\n    requestId,\n    tokenList,\n    url\n  }\n}) => {\n  var _state$byUrl$url3, _state$byUrl$url4;\n\n  const current = (_state$byUrl$url3 = state.byUrl[url]) === null || _state$byUrl$url3 === void 0 ? void 0 : _state$byUrl$url3.current;\n  const loadingRequestId = (_state$byUrl$url4 = state.byUrl[url]) === null || _state$byUrl$url4 === void 0 ? void 0 : _state$byUrl$url4.loadingRequestId; // no-op if update does nothing\n\n  if (current) {\n    const upgradeType = getVersionUpgrade(current.version, tokenList.version);\n    if (upgradeType === VersionUpgrade.NONE) return;\n\n    if (loadingRequestId === null || loadingRequestId === requestId) {\n      state.byUrl[url] = {\n        current,\n        pendingUpdate: tokenList,\n        loadingRequestId: null,\n        error: null\n      };\n    }\n  } else {\n    // activate if on default active\n    if (DEFAULT_ACTIVE_LIST_URLS.includes(url)) {\n      var _state$activeListUrls;\n\n      (_state$activeListUrls = state.activeListUrls) === null || _state$activeListUrls === void 0 ? void 0 : _state$activeListUrls.push(url);\n    }\n\n    state.byUrl[url] = {\n      current: tokenList,\n      pendingUpdate: null,\n      loadingRequestId: null,\n      error: null\n    };\n  }\n}).addCase(fetchTokenList.rejected, (state, {\n  payload: {\n    url,\n    requestId,\n    errorMessage\n  }\n}) => {\n  var _state$byUrl$url5;\n\n  if (((_state$byUrl$url5 = state.byUrl[url]) === null || _state$byUrl$url5 === void 0 ? void 0 : _state$byUrl$url5.loadingRequestId) !== requestId) {\n    // no-op since it's not the latest request\n    return;\n  }\n\n  state.byUrl[url] = {\n    current: state.byUrl[url].current ? state.byUrl[url].current : null,\n    pendingUpdate: null,\n    loadingRequestId: null,\n    error: errorMessage\n  };\n}).addCase(addList, (state, {\n  payload: url\n}) => {\n  if (!state.byUrl[url]) {\n    state.byUrl[url] = NEW_LIST_STATE;\n  }\n}).addCase(removeList, (state, {\n  payload: url\n}) => {\n  if (state.byUrl[url]) {\n    delete state.byUrl[url];\n  } // remove list from active urls if needed\n\n\n  if (state.activeListUrls && state.activeListUrls.includes(url)) {\n    state.activeListUrls = state.activeListUrls.filter(u => u !== url);\n  }\n}).addCase(enableList, (state, {\n  payload: url\n}) => {\n  if (!state.byUrl[url]) {\n    state.byUrl[url] = NEW_LIST_STATE;\n  }\n\n  if (state.activeListUrls && !state.activeListUrls.includes(url)) {\n    state.activeListUrls.push(url);\n  }\n\n  if (!state.activeListUrls) {\n    state.activeListUrls = [url];\n  }\n}).addCase(disableList, (state, {\n  payload: url\n}) => {\n  if (state.activeListUrls && state.activeListUrls.includes(url)) {\n    state.activeListUrls = state.activeListUrls.filter(u => u !== url);\n  }\n}).addCase(acceptListUpdate, (state, {\n  payload: url\n}) => {\n  var _state$byUrl$url6;\n\n  if (!((_state$byUrl$url6 = state.byUrl[url]) === null || _state$byUrl$url6 === void 0 ? void 0 : _state$byUrl$url6.pendingUpdate)) {\n    throw new Error('accept list update called without pending update');\n  }\n\n  state.byUrl[url] = { ...state.byUrl[url],\n    current: state.byUrl[url].pendingUpdate,\n    pendingUpdate: null\n  };\n}).addCase(updateVersion, state => {\n  // state loaded from localStorage, but new lists have never been initialized\n  if (!state.lastInitializedDefaultListOfLists) {\n    state.byUrl = initialState.byUrl;\n    state.activeListUrls = initialState.activeListUrls;\n  } else if (state.lastInitializedDefaultListOfLists) {\n    const lastInitializedSet = state.lastInitializedDefaultListOfLists.reduce((s, l) => s.add(l), new Set());\n    const newListOfListsSet = DEFAULT_LIST_OF_LISTS.reduce((s, l) => s.add(l), new Set());\n    DEFAULT_LIST_OF_LISTS.forEach(listUrl => {\n      if (!lastInitializedSet.has(listUrl)) {\n        state.byUrl[listUrl] = NEW_LIST_STATE;\n      }\n    });\n    state.lastInitializedDefaultListOfLists.forEach(listUrl => {\n      if (!newListOfListsSet.has(listUrl)) {\n        delete state.byUrl[listUrl];\n      }\n    });\n  }\n\n  state.lastInitializedDefaultListOfLists = DEFAULT_LIST_OF_LISTS; // if no active lists, activate defaults\n\n  if (!state.activeListUrls) {\n    state.activeListUrls = DEFAULT_ACTIVE_LIST_URLS; // for each list on default list, initialize if needed\n\n    DEFAULT_ACTIVE_LIST_URLS.map(listUrl => {\n      if (!state.byUrl[listUrl]) {\n        state.byUrl[listUrl] = NEW_LIST_STATE;\n      }\n\n      return true;\n    });\n  }\n}));","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/state/lists/reducer.ts"],"names":["createReducer","getVersionUpgrade","VersionUpgrade","DEFAULT_ACTIVE_LIST_URLS","DEFAULT_LIST_OF_LISTS","updateVersion","acceptListUpdate","addList","disableList","enableList","fetchTokenList","removeList","NEW_LIST_STATE","error","current","loadingRequestId","pendingUpdate","initialState","lastInitializedDefaultListOfLists","byUrl","reduce","memo","listUrl","activeListUrls","builder","addCase","pending","state","payload","requestId","url","fulfilled","tokenList","upgradeType","version","NONE","includes","push","rejected","errorMessage","filter","u","Error","lastInitializedSet","s","l","add","Set","newListOfListsSet","forEach","has","map"],"mappings":"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","sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\nimport { getVersionUpgrade, TokenList, VersionUpgrade } from '@uniswap/token-lists'\n\nimport { DEFAULT_ACTIVE_LIST_URLS } from '../../constants/lists'\nimport { DEFAULT_LIST_OF_LISTS } from '../../constants/lists'\nimport { updateVersion } from '../global/actions'\nimport { acceptListUpdate, addList, disableList, enableList, fetchTokenList, removeList } from './actions'\n\nexport interface ListsState {\n  readonly byUrl: {\n    readonly [url: string]: {\n      readonly current: TokenList | null\n      readonly pendingUpdate: TokenList | null\n      readonly loadingRequestId: string | null\n      readonly error: string | null\n    }\n  }\n  // this contains the default list of lists from the last time the updateVersion was called, i.e. the app was reloaded\n  readonly lastInitializedDefaultListOfLists?: string[]\n\n  // currently active lists\n  readonly activeListUrls: string[] | undefined\n}\n\ntype ListState = ListsState['byUrl'][string]\n\nconst NEW_LIST_STATE: ListState = {\n  error: null,\n  current: null,\n  loadingRequestId: null,\n  pendingUpdate: null,\n}\n\ntype Mutable<T> = { -readonly [P in keyof T]: T[P] extends ReadonlyArray<infer U> ? U[] : T[P] }\n\nconst initialState: ListsState = {\n  lastInitializedDefaultListOfLists: DEFAULT_LIST_OF_LISTS,\n  byUrl: {\n    ...DEFAULT_LIST_OF_LISTS.reduce<Mutable<ListsState['byUrl']>>((memo, listUrl) => {\n      memo[listUrl] = NEW_LIST_STATE\n      return memo\n    }, {}),\n  },\n  activeListUrls: DEFAULT_ACTIVE_LIST_URLS,\n}\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(fetchTokenList.pending, (state, { payload: { requestId, url } }) => {\n      const current = state.byUrl[url]?.current ?? null\n      const pendingUpdate = state.byUrl[url]?.pendingUpdate ?? null\n\n      state.byUrl[url] = {\n        current,\n        pendingUpdate,\n        loadingRequestId: requestId,\n        error: null,\n      }\n    })\n    .addCase(fetchTokenList.fulfilled, (state, { payload: { requestId, tokenList, url } }) => {\n      const current = state.byUrl[url]?.current\n      const loadingRequestId = state.byUrl[url]?.loadingRequestId\n\n      // no-op if update does nothing\n      if (current) {\n        const upgradeType = getVersionUpgrade(current.version, tokenList.version)\n\n        if (upgradeType === VersionUpgrade.NONE) return\n        if (loadingRequestId === null || loadingRequestId === requestId) {\n          state.byUrl[url] = {\n            current,\n            pendingUpdate: tokenList,\n            loadingRequestId: null,\n            error: null,\n          }\n        }\n      } else {\n        // activate if on default active\n        if (DEFAULT_ACTIVE_LIST_URLS.includes(url)) {\n          state.activeListUrls?.push(url)\n        }\n\n        state.byUrl[url] = {\n          current: tokenList,\n          pendingUpdate: null,\n          loadingRequestId: null,\n          error: null,\n        }\n      }\n    })\n    .addCase(fetchTokenList.rejected, (state, { payload: { url, requestId, errorMessage } }) => {\n      if (state.byUrl[url]?.loadingRequestId !== requestId) {\n        // no-op since it's not the latest request\n        return\n      }\n\n      state.byUrl[url] = {\n        current: state.byUrl[url].current ? state.byUrl[url].current : null,\n        pendingUpdate: null,\n        loadingRequestId: null,\n        error: errorMessage,\n      }\n    })\n    .addCase(addList, (state, { payload: url }) => {\n      if (!state.byUrl[url]) {\n        state.byUrl[url] = NEW_LIST_STATE\n      }\n    })\n    .addCase(removeList, (state, { payload: url }) => {\n      if (state.byUrl[url]) {\n        delete state.byUrl[url]\n      }\n      // remove list from active urls if needed\n      if (state.activeListUrls && state.activeListUrls.includes(url)) {\n        state.activeListUrls = state.activeListUrls.filter((u) => u !== url)\n      }\n    })\n    .addCase(enableList, (state, { payload: url }) => {\n      if (!state.byUrl[url]) {\n        state.byUrl[url] = NEW_LIST_STATE\n      }\n\n      if (state.activeListUrls && !state.activeListUrls.includes(url)) {\n        state.activeListUrls.push(url)\n      }\n\n      if (!state.activeListUrls) {\n        state.activeListUrls = [url]\n      }\n    })\n    .addCase(disableList, (state, { payload: url }) => {\n      if (state.activeListUrls && state.activeListUrls.includes(url)) {\n        state.activeListUrls = state.activeListUrls.filter((u) => u !== url)\n      }\n    })\n    .addCase(acceptListUpdate, (state, { payload: url }) => {\n      if (!state.byUrl[url]?.pendingUpdate) {\n        throw new Error('accept list update called without pending update')\n      }\n      state.byUrl[url] = {\n        ...state.byUrl[url],\n        current: state.byUrl[url].pendingUpdate,\n        pendingUpdate: null,\n      }\n    })\n    .addCase(updateVersion, (state) => {\n      // state loaded from localStorage, but new lists have never been initialized\n      if (!state.lastInitializedDefaultListOfLists) {\n        state.byUrl = initialState.byUrl\n        state.activeListUrls = initialState.activeListUrls\n      } else if (state.lastInitializedDefaultListOfLists) {\n        const lastInitializedSet = state.lastInitializedDefaultListOfLists.reduce<Set<string>>(\n          (s, l) => s.add(l),\n          new Set()\n        )\n        const newListOfListsSet = DEFAULT_LIST_OF_LISTS.reduce<Set<string>>((s, l) => s.add(l), new Set())\n\n        DEFAULT_LIST_OF_LISTS.forEach((listUrl) => {\n          if (!lastInitializedSet.has(listUrl)) {\n            state.byUrl[listUrl] = NEW_LIST_STATE\n          }\n        })\n\n        state.lastInitializedDefaultListOfLists.forEach((listUrl) => {\n          if (!newListOfListsSet.has(listUrl)) {\n            delete state.byUrl[listUrl]\n          }\n        })\n      }\n\n      state.lastInitializedDefaultListOfLists = DEFAULT_LIST_OF_LISTS\n\n      // if no active lists, activate defaults\n      if (!state.activeListUrls) {\n        state.activeListUrls = DEFAULT_ACTIVE_LIST_URLS\n\n        // for each list on default list, initialize if needed\n        DEFAULT_ACTIVE_LIST_URLS.map((listUrl: string) => {\n          if (!state.byUrl[listUrl]) {\n            state.byUrl[listUrl] = NEW_LIST_STATE\n          }\n          return true\n        })\n      }\n    })\n)\n"]},"metadata":{},"sourceType":"module"}