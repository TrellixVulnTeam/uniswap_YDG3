{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SafeAppProvider = void 0;\n\nconst events_1 = require(\"events\");\n\nconst utils_1 = require(\"./utils\"); // The API is based on Ethereum JavaScript API Provider Standard. Link: https://eips.ethereum.org/EIPS/eip-1193\n\n\nclass SafeAppProvider {\n  constructor(safe, sdk) {\n    this.submittedTxs = new Map();\n    this.events = new events_1.EventEmitter();\n    this.safe = safe;\n    this.sdk = sdk;\n  }\n\n  async connect() {\n    this.events.emit('connect', {\n      chainId: this.chainId\n    });\n    return;\n  }\n\n  async disconnect() {\n    return;\n  }\n\n  on(event, listener) {\n    this.events.on(event, listener);\n  }\n\n  once(event, listener) {\n    this.events.once(event, listener);\n  }\n\n  off(event, listener) {\n    this.events.off(event, listener);\n  }\n\n  removeListener(event, listener) {\n    this.events.removeListener(event, listener);\n  }\n\n  get chainId() {\n    return this.safe.chainId;\n  } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n  async request(request) {\n    const {\n      method,\n      params = []\n    } = request;\n\n    switch (method) {\n      case 'eth_accounts':\n        return [this.safe.safeAddress];\n\n      case 'net_version':\n      case 'eth_chainId':\n        return `0x${this.chainId.toString(16)}`;\n\n      case 'eth_sendTransaction':\n        const tx = Object.assign({\n          value: '0',\n          data: '0x'\n        }, params[0]);\n        const resp = await this.sdk.txs.send({\n          txs: [tx]\n        }); // Store fake transaction\n\n        this.submittedTxs.set(resp.safeTxHash, {\n          from: this.safe.safeAddress,\n          hash: resp.safeTxHash,\n          gas: 0,\n          gasPrice: '0x00',\n          nonce: 0,\n          input: tx.data,\n          value: tx.value,\n          to: tx.to,\n          blockHash: null,\n          blockNumber: null,\n          transactionIndex: null\n        });\n        return resp.safeTxHash;\n\n      case 'eth_blockNumber':\n        const block = await this.sdk.eth.getBlockByNumber(['latest']);\n        return block.number;\n\n      case 'eth_getBalance':\n        return this.sdk.eth.getBalance([utils_1.getLowerCase(params[0]), params[1]]);\n\n      case 'eth_getCode':\n        return this.sdk.eth.getCode([utils_1.getLowerCase(params[0]), params[1]]);\n\n      case 'eth_getStorageAt':\n        return this.sdk.eth.getStorageAt([utils_1.getLowerCase(params[0]), params[1], params[2]]);\n\n      case 'eth_getBlockByNumber':\n        return this.sdk.eth.getBlockByNumber([params[0], params[1]]);\n\n      case 'eth_getBlockByHash':\n        return this.sdk.eth.getBlockByHash([params[0], params[1]]);\n\n      case 'eth_getTransactionByHash':\n        let txHash = params[0];\n\n        try {\n          const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n          txHash = resp.txHash || txHash;\n        } catch (e) {} // Use fake transaction if we don't have a real tx hash\n\n\n        if (this.submittedTxs.has(txHash)) {\n          return this.submittedTxs.get(txHash);\n        }\n\n        return this.sdk.eth.getTransactionByHash([txHash]).then(tx => {\n          // We set the tx hash to the one requested, as some provider assert this\n          if (tx) {\n            tx.hash = params[0];\n          }\n\n          return tx;\n        });\n\n      case 'eth_getTransactionReceipt':\n        {\n          let txHash = params[0];\n\n          try {\n            const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n            txHash = resp.txHash || txHash;\n          } catch (e) {}\n\n          return this.sdk.eth.getTransactionReceipt([txHash]).then(tx => {\n            // We set the tx hash to the one requested, as some provider assert this\n            if (tx) {\n              tx.transactionHash = params[0];\n            }\n\n            return tx;\n          });\n        }\n\n      case 'eth_estimateGas':\n        {\n          return 0;\n        }\n\n      case 'eth_call':\n        {\n          return this.sdk.eth.call([params[0], params[1]]);\n        }\n\n      case 'eth_getLogs':\n        return this.sdk.eth.getPastLogs([params[0]]);\n\n      default:\n        throw Error(`\"${request.method}\" not implemented`);\n    }\n  } // this method is needed for ethers v4\n  // https://github.com/ethers-io/ethers.js/blob/427e16826eb15d52d25c4f01027f8db22b74b76c/src.ts/providers/web3-provider.ts#L41-L55\n\n\n  send(request, callback) {\n    if (!request) callback('Undefined request');\n    this.request(request).then(result => callback(null, {\n      jsonrpc: '2.0',\n      id: request.id,\n      result\n    })).catch(error => callback(error, null));\n  }\n\n}\n\nexports.SafeAppProvider = SafeAppProvider;","map":{"version":3,"sources":["../src/provider.ts"],"names":[],"mappings":";;;;;;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA,C,CAEA;;;AACA,MAAa,eAAb,CAA4B;AAM1B,EAAA,WAAA,CAAY,IAAZ,EAA4B,GAA5B,EAA4C;AAHpC,SAAA,YAAA,GAAe,IAAI,GAAJ,EAAf;AACA,SAAA,MAAA,GAAS,IAAI,QAAA,CAAA,YAAJ,EAAT;AAGN,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,GAAL,GAAW,GAAX;AACD;;AAEY,QAAP,OAAO,GAAA;AACX,SAAK,MAAL,CAAY,IAAZ,CAAiB,SAAjB,EAA4B;AAAE,MAAA,OAAO,EAAE,KAAK;AAAhB,KAA5B;AACA;AACD;;AAEe,QAAV,UAAU,GAAA;AACd;AACD;;AAEM,EAAA,EAAE,CAAC,KAAD,EAAgB,QAAhB,EAA6B;AACpC,SAAK,MAAL,CAAY,EAAZ,CAAe,KAAf,EAAsB,QAAtB;AACD;;AAEM,EAAA,IAAI,CAAC,KAAD,EAAgB,QAAhB,EAA6B;AACtC,SAAK,MAAL,CAAY,IAAZ,CAAiB,KAAjB,EAAwB,QAAxB;AACD;;AAEM,EAAA,GAAG,CAAC,KAAD,EAAgB,QAAhB,EAA6B;AACrC,SAAK,MAAL,CAAY,GAAZ,CAAgB,KAAhB,EAAuB,QAAvB;AACD;;AAEM,EAAA,cAAc,CAAC,KAAD,EAAgB,QAAhB,EAA6B;AAChD,SAAK,MAAL,CAAY,cAAZ,CAA2B,KAA3B,EAAkC,QAAlC;AACD;;AAEiB,MAAP,OAAO,GAAA;AAChB,WAAO,KAAK,IAAL,CAAU,OAAjB;AACD,GAtCyB,CAwC1B;;;AACa,QAAP,OAAO,CAAC,OAAD,EAA4C;AACvD,UAAM;AAAE,MAAA,MAAF;AAAU,MAAA,MAAM,GAAG;AAAnB,QAA0B,OAAhC;;AAEA,YAAQ,MAAR;AACE,WAAK,cAAL;AACE,eAAO,CAAC,KAAK,IAAL,CAAU,WAAX,CAAP;;AAEF,WAAK,aAAL;AACA,WAAK,aAAL;AACE,eAAO,KAAK,KAAK,OAAL,CAAa,QAAb,CAAsB,EAAtB,CAAyB,EAArC;;AAEF,WAAK,qBAAL;AACE,cAAM,EAAE,GAAA,MAAA,CAAA,MAAA,CAAA;AACN,UAAA,KAAK,EAAE,GADD;AAEN,UAAA,IAAI,EAAE;AAFA,SAAA,EAGH,MAAM,CAAC,CAAD,CAHH,CAAR;AAMA,cAAM,IAAI,GAAG,MAAM,KAAK,GAAL,CAAS,GAAT,CAAa,IAAb,CAAkB;AACnC,UAAA,GAAG,EAAE,CAAC,EAAD;AAD8B,SAAlB,CAAnB,CAPF,CAUE;;AACA,aAAK,YAAL,CAAkB,GAAlB,CAAsB,IAAI,CAAC,UAA3B,EAAuC;AACrC,UAAA,IAAI,EAAE,KAAK,IAAL,CAAU,WADqB;AAErC,UAAA,IAAI,EAAE,IAAI,CAAC,UAF0B;AAGrC,UAAA,GAAG,EAAE,CAHgC;AAIrC,UAAA,QAAQ,EAAE,MAJ2B;AAKrC,UAAA,KAAK,EAAE,CAL8B;AAMrC,UAAA,KAAK,EAAE,EAAE,CAAC,IAN2B;AAOrC,UAAA,KAAK,EAAE,EAAE,CAAC,KAP2B;AAQrC,UAAA,EAAE,EAAE,EAAE,CAAC,EAR8B;AASrC,UAAA,SAAS,EAAE,IAT0B;AAUrC,UAAA,WAAW,EAAE,IAVwB;AAWrC,UAAA,gBAAgB,EAAE;AAXmB,SAAvC;AAaA,eAAO,IAAI,CAAC,UAAZ;;AAEF,WAAK,iBAAL;AACE,cAAM,KAAK,GAAG,MAAM,KAAK,GAAL,CAAS,GAAT,CAAa,gBAAb,CAA8B,CAAC,QAAD,CAA9B,CAApB;AAEA,eAAO,KAAK,CAAC,MAAb;;AAEF,WAAK,gBAAL;AACE,eAAO,KAAK,GAAL,CAAS,GAAT,CAAa,UAAb,CAAwB,CAAC,OAAA,CAAA,YAAA,CAAa,MAAM,CAAC,CAAD,CAAnB,CAAD,EAA0B,MAAM,CAAC,CAAD,CAAhC,CAAxB,CAAP;;AAEF,WAAK,aAAL;AACE,eAAO,KAAK,GAAL,CAAS,GAAT,CAAa,OAAb,CAAqB,CAAC,OAAA,CAAA,YAAA,CAAa,MAAM,CAAC,CAAD,CAAnB,CAAD,EAA0B,MAAM,CAAC,CAAD,CAAhC,CAArB,CAAP;;AAEF,WAAK,kBAAL;AACE,eAAO,KAAK,GAAL,CAAS,GAAT,CAAa,YAAb,CAA0B,CAAC,OAAA,CAAA,YAAA,CAAa,MAAM,CAAC,CAAD,CAAnB,CAAD,EAA0B,MAAM,CAAC,CAAD,CAAhC,EAAqC,MAAM,CAAC,CAAD,CAA3C,CAA1B,CAAP;;AAEF,WAAK,sBAAL;AACE,eAAO,KAAK,GAAL,CAAS,GAAT,CAAa,gBAAb,CAA8B,CAAC,MAAM,CAAC,CAAD,CAAP,EAAY,MAAM,CAAC,CAAD,CAAlB,CAA9B,CAAP;;AAEF,WAAK,oBAAL;AACE,eAAO,KAAK,GAAL,CAAS,GAAT,CAAa,cAAb,CAA4B,CAAC,MAAM,CAAC,CAAD,CAAP,EAAY,MAAM,CAAC,CAAD,CAAlB,CAA5B,CAAP;;AAEF,WAAK,0BAAL;AACE,YAAI,MAAM,GAAG,MAAM,CAAC,CAAD,CAAnB;;AACA,YAAI;AACF,gBAAM,IAAI,GAAG,MAAM,KAAK,GAAL,CAAS,GAAT,CAAa,eAAb,CAA6B,MAA7B,CAAnB;AACA,UAAA,MAAM,GAAG,IAAI,CAAC,MAAL,IAAe,MAAxB;AACD,SAHD,CAGE,OAAO,CAAP,EAAU,CAAE,CALhB,CAME;;;AACA,YAAI,KAAK,YAAL,CAAkB,GAAlB,CAAsB,MAAtB,CAAJ,EAAmC;AACjC,iBAAO,KAAK,YAAL,CAAkB,GAAlB,CAAsB,MAAtB,CAAP;AACD;;AACD,eAAO,KAAK,GAAL,CAAS,GAAT,CAAa,oBAAb,CAAkC,CAAC,MAAD,CAAlC,EAA4C,IAA5C,CAAkD,EAAD,IAAO;AAC7D;AACA,cAAI,EAAJ,EAAQ;AACN,YAAA,EAAE,CAAC,IAAH,GAAU,MAAM,CAAC,CAAD,CAAhB;AACD;;AACD,iBAAO,EAAP;AACD,SANM,CAAP;;AAQF,WAAK,2BAAL;AAAkC;AAChC,cAAI,MAAM,GAAG,MAAM,CAAC,CAAD,CAAnB;;AACA,cAAI;AACF,kBAAM,IAAI,GAAG,MAAM,KAAK,GAAL,CAAS,GAAT,CAAa,eAAb,CAA6B,MAA7B,CAAnB;AACA,YAAA,MAAM,GAAG,IAAI,CAAC,MAAL,IAAe,MAAxB;AACD,WAHD,CAGE,OAAO,CAAP,EAAU,CAAE;;AACd,iBAAO,KAAK,GAAL,CAAS,GAAT,CAAa,qBAAb,CAAmC,CAAC,MAAD,CAAnC,EAA6C,IAA7C,CAAmD,EAAD,IAAO;AAC9D;AACA,gBAAI,EAAJ,EAAQ;AACN,cAAA,EAAE,CAAC,eAAH,GAAqB,MAAM,CAAC,CAAD,CAA3B;AACD;;AACD,mBAAO,EAAP;AACD,WANM,CAAP;AAOD;;AAED,WAAK,iBAAL;AAAwB;AACtB,iBAAO,CAAP;AACD;;AAED,WAAK,UAAL;AAAiB;AACf,iBAAO,KAAK,GAAL,CAAS,GAAT,CAAa,IAAb,CAAkB,CAAC,MAAM,CAAC,CAAD,CAAP,EAAY,MAAM,CAAC,CAAD,CAAlB,CAAlB,CAAP;AACD;;AAED,WAAK,aAAL;AACE,eAAO,KAAK,GAAL,CAAS,GAAT,CAAa,WAAb,CAAyB,CAAC,MAAM,CAAC,CAAD,CAAP,CAAzB,CAAP;;AAEF;AACE,cAAM,KAAK,CAAC,IAAI,OAAO,CAAC,MAAM,mBAAnB,CAAX;AAnGJ;AAqGD,GAjJyB,CAmJ1B;AACA;;;AACA,EAAA,IAAI,CAAC,OAAD,EAAe,QAAf,EAA6D;AAC/D,QAAI,CAAC,OAAL,EAAc,QAAQ,CAAC,mBAAD,CAAR;AACd,SAAK,OAAL,CAAa,OAAb,EACG,IADH,CACS,MAAD,IAAY,QAAQ,CAAC,IAAD,EAAO;AAAE,MAAA,OAAO,EAAE,KAAX;AAAkB,MAAA,EAAE,EAAE,OAAO,CAAC,EAA9B;AAAkC,MAAA;AAAlC,KAAP,CAD5B,EAEG,KAFH,CAEU,KAAD,IAAW,QAAQ,CAAC,KAAD,EAAQ,IAAR,CAF5B;AAGD;;AA1JyB;;AAA5B,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SafeAppProvider = void 0;\nconst events_1 = require(\"events\");\nconst utils_1 = require(\"./utils\");\n// The API is based on Ethereum JavaScript API Provider Standard. Link: https://eips.ethereum.org/EIPS/eip-1193\nclass SafeAppProvider {\n    constructor(safe, sdk) {\n        this.submittedTxs = new Map();\n        this.events = new events_1.EventEmitter();\n        this.safe = safe;\n        this.sdk = sdk;\n    }\n    async connect() {\n        this.events.emit('connect', { chainId: this.chainId });\n        return;\n    }\n    async disconnect() {\n        return;\n    }\n    on(event, listener) {\n        this.events.on(event, listener);\n    }\n    once(event, listener) {\n        this.events.once(event, listener);\n    }\n    off(event, listener) {\n        this.events.off(event, listener);\n    }\n    removeListener(event, listener) {\n        this.events.removeListener(event, listener);\n    }\n    get chainId() {\n        return this.safe.chainId;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async request(request) {\n        const { method, params = [] } = request;\n        switch (method) {\n            case 'eth_accounts':\n                return [this.safe.safeAddress];\n            case 'net_version':\n            case 'eth_chainId':\n                return `0x${this.chainId.toString(16)}`;\n            case 'eth_sendTransaction':\n                const tx = Object.assign({ value: '0', data: '0x' }, params[0]);\n                const resp = await this.sdk.txs.send({\n                    txs: [tx],\n                });\n                // Store fake transaction\n                this.submittedTxs.set(resp.safeTxHash, {\n                    from: this.safe.safeAddress,\n                    hash: resp.safeTxHash,\n                    gas: 0,\n                    gasPrice: '0x00',\n                    nonce: 0,\n                    input: tx.data,\n                    value: tx.value,\n                    to: tx.to,\n                    blockHash: null,\n                    blockNumber: null,\n                    transactionIndex: null,\n                });\n                return resp.safeTxHash;\n            case 'eth_blockNumber':\n                const block = await this.sdk.eth.getBlockByNumber(['latest']);\n                return block.number;\n            case 'eth_getBalance':\n                return this.sdk.eth.getBalance([utils_1.getLowerCase(params[0]), params[1]]);\n            case 'eth_getCode':\n                return this.sdk.eth.getCode([utils_1.getLowerCase(params[0]), params[1]]);\n            case 'eth_getStorageAt':\n                return this.sdk.eth.getStorageAt([utils_1.getLowerCase(params[0]), params[1], params[2]]);\n            case 'eth_getBlockByNumber':\n                return this.sdk.eth.getBlockByNumber([params[0], params[1]]);\n            case 'eth_getBlockByHash':\n                return this.sdk.eth.getBlockByHash([params[0], params[1]]);\n            case 'eth_getTransactionByHash':\n                let txHash = params[0];\n                try {\n                    const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n                    txHash = resp.txHash || txHash;\n                }\n                catch (e) { }\n                // Use fake transaction if we don't have a real tx hash\n                if (this.submittedTxs.has(txHash)) {\n                    return this.submittedTxs.get(txHash);\n                }\n                return this.sdk.eth.getTransactionByHash([txHash]).then((tx) => {\n                    // We set the tx hash to the one requested, as some provider assert this\n                    if (tx) {\n                        tx.hash = params[0];\n                    }\n                    return tx;\n                });\n            case 'eth_getTransactionReceipt': {\n                let txHash = params[0];\n                try {\n                    const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n                    txHash = resp.txHash || txHash;\n                }\n                catch (e) { }\n                return this.sdk.eth.getTransactionReceipt([txHash]).then((tx) => {\n                    // We set the tx hash to the one requested, as some provider assert this\n                    if (tx) {\n                        tx.transactionHash = params[0];\n                    }\n                    return tx;\n                });\n            }\n            case 'eth_estimateGas': {\n                return 0;\n            }\n            case 'eth_call': {\n                return this.sdk.eth.call([params[0], params[1]]);\n            }\n            case 'eth_getLogs':\n                return this.sdk.eth.getPastLogs([params[0]]);\n            default:\n                throw Error(`\"${request.method}\" not implemented`);\n        }\n    }\n    // this method is needed for ethers v4\n    // https://github.com/ethers-io/ethers.js/blob/427e16826eb15d52d25c4f01027f8db22b74b76c/src.ts/providers/web3-provider.ts#L41-L55\n    send(request, callback) {\n        if (!request)\n            callback('Undefined request');\n        this.request(request)\n            .then((result) => callback(null, { jsonrpc: '2.0', id: request.id, result }))\n            .catch((error) => callback(error, null));\n    }\n}\nexports.SafeAppProvider = SafeAppProvider;\n//# sourceMappingURL=provider.js.map"]},"metadata":{},"sourceType":"script"}