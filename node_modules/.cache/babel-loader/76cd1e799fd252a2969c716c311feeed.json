{"ast":null,"code":"var _jsxFileName = \"/Users/safahi/Downloads/interface-4.30.1/src/components/LiquidityChartRangeInput/Chart.tsx\",\n    _s = $RefreshSig$();\n\nimport { max, scaleLinear } from 'd3';\nimport { useEffect, useMemo, useRef, useState } from 'react';\nimport { Bound } from 'state/mint/v3/actions';\nimport { Area } from './Area';\nimport { AxisBottom } from './AxisBottom';\nimport { Brush } from './Brush';\nimport { Line } from './Line';\nimport Zoom, { ZoomOverlay } from './Zoom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const xAccessor = d => d.price0;\nexport const yAccessor = d => d.activeLiquidity;\nexport function Chart({\n  id = 'liquidityChartRangeInput',\n  data: {\n    series,\n    current\n  },\n  ticksAtLimit,\n  styles,\n  dimensions: {\n    width,\n    height\n  },\n  margins,\n  interactive = true,\n  brushDomain,\n  brushLabels,\n  onBrushDomainChange,\n  zoomLevels\n}) {\n  _s();\n\n  const zoomRef = useRef(null);\n  const [zoom, setZoom] = useState(null);\n  const [innerHeight, innerWidth] = useMemo(() => [height - margins.top - margins.bottom, width - margins.left - margins.right], [width, height, margins]);\n  const {\n    xScale,\n    yScale\n  } = useMemo(() => {\n    const scales = {\n      xScale: scaleLinear().domain([current * zoomLevels.initialMin, current * zoomLevels.initialMax]).range([0, innerWidth]),\n      yScale: scaleLinear().domain([0, max(series, yAccessor)]).range([innerHeight, 0])\n    };\n\n    if (zoom) {\n      const newXscale = zoom.rescaleX(scales.xScale);\n      scales.xScale.domain(newXscale.domain());\n    }\n\n    return scales;\n  }, [current, zoomLevels.initialMin, zoomLevels.initialMax, innerWidth, series, innerHeight, zoom]);\n  useEffect(() => {\n    // reset zoom as necessary\n    setZoom(null);\n  }, [zoomLevels]);\n  useEffect(() => {\n    if (!brushDomain) {\n      onBrushDomainChange(xScale.domain(), undefined);\n    }\n  }, [brushDomain, onBrushDomainChange, xScale]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Zoom, {\n      svg: zoomRef.current,\n      xScale: xScale,\n      setZoom: setZoom,\n      width: innerWidth,\n      height: // allow zooming inside the x-axis\n      height,\n      resetBrush: () => {\n        onBrushDomainChange([current * zoomLevels.initialMin, current * zoomLevels.initialMax], 'reset');\n      },\n      showResetButton: Boolean(ticksAtLimit[Bound.LOWER] || ticksAtLimit[Bound.UPPER]),\n      zoomLevels: zoomLevels\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      width: \"100%\",\n      height: \"100%\",\n      viewBox: `0 0 ${width} ${height}`,\n      style: {\n        overflow: 'visible'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n        children: [/*#__PURE__*/_jsxDEV(\"clipPath\", {\n          id: `${id}-chart-clip`,\n          children: /*#__PURE__*/_jsxDEV(\"rect\", {\n            x: \"0\",\n            y: \"0\",\n            width: innerWidth,\n            height: height\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), brushDomain &&\n        /*#__PURE__*/\n        // mask to highlight selected area\n        _jsxDEV(\"mask\", {\n          id: `${id}-chart-area-mask`,\n          children: /*#__PURE__*/_jsxDEV(\"rect\", {\n            fill: \"white\",\n            x: xScale(brushDomain[0]),\n            y: \"0\",\n            width: xScale(brushDomain[1]) - xScale(brushDomain[0]),\n            height: innerHeight\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n        transform: `translate(${margins.left},${margins.top})`,\n        children: [/*#__PURE__*/_jsxDEV(\"g\", {\n          clipPath: `url(#${id}-chart-clip)`,\n          children: [/*#__PURE__*/_jsxDEV(Area, {\n            series: series,\n            xScale: xScale,\n            yScale: yScale,\n            xValue: xAccessor,\n            yValue: yAccessor\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this), brushDomain &&\n          /*#__PURE__*/\n          // duplicate area chart with mask for selected area\n          _jsxDEV(\"g\", {\n            mask: `url(#${id}-chart-area-mask)`,\n            children: /*#__PURE__*/_jsxDEV(Area, {\n              series: series,\n              xScale: xScale,\n              yScale: yScale,\n              xValue: xAccessor,\n              yValue: yAccessor,\n              fill: styles.area.selection\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            value: current,\n            xScale: xScale,\n            innerHeight: innerHeight\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AxisBottom, {\n            xScale: xScale,\n            innerHeight: innerHeight\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ZoomOverlay, {\n          width: innerWidth,\n          height: height,\n          ref: zoomRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Brush, {\n          id: id,\n          xScale: xScale,\n          interactive: interactive,\n          brushLabelValue: brushLabels,\n          brushExtent: brushDomain !== null && brushDomain !== void 0 ? brushDomain : xScale.domain(),\n          innerWidth: innerWidth,\n          innerHeight: innerHeight,\n          setBrushExtent: onBrushDomainChange,\n          westHandleColor: styles.brush.handle.west,\n          eastHandleColor: styles.brush.handle.east\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Chart, \"14d4tN53iqflNqMyXzjtmEKuQCw=\");\n\n_c = Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/components/LiquidityChartRangeInput/Chart.tsx"],"names":["max","scaleLinear","useEffect","useMemo","useRef","useState","Bound","Area","AxisBottom","Brush","Line","Zoom","ZoomOverlay","xAccessor","d","price0","yAccessor","activeLiquidity","Chart","id","data","series","current","ticksAtLimit","styles","dimensions","width","height","margins","interactive","brushDomain","brushLabels","onBrushDomainChange","zoomLevels","zoomRef","zoom","setZoom","innerHeight","innerWidth","top","bottom","left","right","xScale","yScale","scales","domain","initialMin","initialMax","range","newXscale","rescaleX","undefined","Boolean","LOWER","UPPER","overflow","area","selection","brush","handle","west","east"],"mappings":"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","sourcesContent":["import { max, scaleLinear, ZoomTransform } from 'd3'\nimport { useEffect, useMemo, useRef, useState } from 'react'\nimport { Bound } from 'state/mint/v3/actions'\n\nimport { Area } from './Area'\nimport { AxisBottom } from './AxisBottom'\nimport { Brush } from './Brush'\nimport { Line } from './Line'\nimport { ChartEntry, LiquidityChartRangeInputProps } from './types'\nimport Zoom, { ZoomOverlay } from './Zoom'\n\nexport const xAccessor = (d: ChartEntry) => d.price0\nexport const yAccessor = (d: ChartEntry) => d.activeLiquidity\n\nexport function Chart({\n  id = 'liquidityChartRangeInput',\n  data: { series, current },\n  ticksAtLimit,\n  styles,\n  dimensions: { width, height },\n  margins,\n  interactive = true,\n  brushDomain,\n  brushLabels,\n  onBrushDomainChange,\n  zoomLevels,\n}: LiquidityChartRangeInputProps) {\n  const zoomRef = useRef<SVGRectElement | null>(null)\n\n  const [zoom, setZoom] = useState<ZoomTransform | null>(null)\n\n  const [innerHeight, innerWidth] = useMemo(\n    () => [height - margins.top - margins.bottom, width - margins.left - margins.right],\n    [width, height, margins]\n  )\n\n  const { xScale, yScale } = useMemo(() => {\n    const scales = {\n      xScale: scaleLinear()\n        .domain([current * zoomLevels.initialMin, current * zoomLevels.initialMax] as number[])\n        .range([0, innerWidth]),\n      yScale: scaleLinear()\n        .domain([0, max(series, yAccessor)] as number[])\n        .range([innerHeight, 0]),\n    }\n\n    if (zoom) {\n      const newXscale = zoom.rescaleX(scales.xScale)\n      scales.xScale.domain(newXscale.domain())\n    }\n\n    return scales\n  }, [current, zoomLevels.initialMin, zoomLevels.initialMax, innerWidth, series, innerHeight, zoom])\n\n  useEffect(() => {\n    // reset zoom as necessary\n    setZoom(null)\n  }, [zoomLevels])\n\n  useEffect(() => {\n    if (!brushDomain) {\n      onBrushDomainChange(xScale.domain() as [number, number], undefined)\n    }\n  }, [brushDomain, onBrushDomainChange, xScale])\n\n  return (\n    <>\n      <Zoom\n        svg={zoomRef.current}\n        xScale={xScale}\n        setZoom={setZoom}\n        width={innerWidth}\n        height={\n          // allow zooming inside the x-axis\n          height\n        }\n        resetBrush={() => {\n          onBrushDomainChange(\n            [current * zoomLevels.initialMin, current * zoomLevels.initialMax] as [number, number],\n            'reset'\n          )\n        }}\n        showResetButton={Boolean(ticksAtLimit[Bound.LOWER] || ticksAtLimit[Bound.UPPER])}\n        zoomLevels={zoomLevels}\n      />\n      <svg width=\"100%\" height=\"100%\" viewBox={`0 0 ${width} ${height}`} style={{ overflow: 'visible' }}>\n        <defs>\n          <clipPath id={`${id}-chart-clip`}>\n            <rect x=\"0\" y=\"0\" width={innerWidth} height={height} />\n          </clipPath>\n\n          {brushDomain && (\n            // mask to highlight selected area\n            <mask id={`${id}-chart-area-mask`}>\n              <rect\n                fill=\"white\"\n                x={xScale(brushDomain[0])}\n                y=\"0\"\n                width={xScale(brushDomain[1]) - xScale(brushDomain[0])}\n                height={innerHeight}\n              />\n            </mask>\n          )}\n        </defs>\n\n        <g transform={`translate(${margins.left},${margins.top})`}>\n          <g clipPath={`url(#${id}-chart-clip)`}>\n            <Area series={series} xScale={xScale} yScale={yScale} xValue={xAccessor} yValue={yAccessor} />\n\n            {brushDomain && (\n              // duplicate area chart with mask for selected area\n              <g mask={`url(#${id}-chart-area-mask)`}>\n                <Area\n                  series={series}\n                  xScale={xScale}\n                  yScale={yScale}\n                  xValue={xAccessor}\n                  yValue={yAccessor}\n                  fill={styles.area.selection}\n                />\n              </g>\n            )}\n\n            <Line value={current} xScale={xScale} innerHeight={innerHeight} />\n\n            <AxisBottom xScale={xScale} innerHeight={innerHeight} />\n          </g>\n\n          <ZoomOverlay width={innerWidth} height={height} ref={zoomRef} />\n\n          <Brush\n            id={id}\n            xScale={xScale}\n            interactive={interactive}\n            brushLabelValue={brushLabels}\n            brushExtent={brushDomain ?? (xScale.domain() as [number, number])}\n            innerWidth={innerWidth}\n            innerHeight={innerHeight}\n            setBrushExtent={onBrushDomainChange}\n            westHandleColor={styles.brush.handle.west}\n            eastHandleColor={styles.brush.handle.east}\n          />\n        </g>\n      </svg>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}