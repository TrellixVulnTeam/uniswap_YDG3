{"ast":null,"code":"import _styled from \"styled-components\";\n\nvar _jsxFileName = \"/Users/safahi/Downloads/interface-4.30.1/src/components/swap/SwapRoute.tsx\",\n    _s = $RefreshSig$();\n\nimport { Trans } from \"@lingui/react\";\nimport { Percent, TradeType } from '@uniswap/sdk-core';\nimport { Pair } from '@uniswap/v2-sdk';\nimport AnimatedDropdown from 'components/AnimatedDropdown';\nimport { AutoColumn } from 'components/Column';\nimport { LoadingRows } from 'components/Loader/styled';\nimport RoutingDiagram from 'components/RoutingDiagram/RoutingDiagram';\nimport { AutoRow, RowBetween } from 'components/Row';\nimport useAutoRouterSupported from 'hooks/useAutoRouterSupported';\nimport { useActiveWeb3React } from 'hooks/web3';\nimport { memo, useState } from 'react';\nimport { Plus } from 'react-feather';\nimport { useDarkModeManager } from 'state/user/hooks';\nimport { Separator, ThemedText } from 'theme';\nimport { SUPPORTED_GAS_ESTIMATE_CHAIN_IDS } from './GasEstimateBadge';\nimport { AutoRouterLabel, AutoRouterLogo } from './RouterLabel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Wrapper = _styled(AutoColumn).withConfig({\n  displayName: \"SwapRoute__Wrapper\",\n  componentId: \"sc-176vpyh-0\"\n})([\"padding:\", \";border-radius:16px;border:1px solid \", \";cursor:pointer;\"], ({\n  fixedOpen\n}) => fixedOpen ? '12px' : '12px 8px 12px 12px', ({\n  theme,\n  fixedOpen\n}) => fixedOpen ? 'transparent' : theme.bg2);\n\nconst OpenCloseIcon = _styled(Plus).withConfig({\n  displayName: \"SwapRoute__OpenCloseIcon\",\n  componentId: \"sc-176vpyh-1\"\n})([\"margin-left:8px;height:20px;stroke-width:2px;transition:transform 0.1s;transform:\", \";stroke:\", \";cursor:pointer;:hover{opacity:0.8;}\"], ({\n  open\n}) => open ? 'rotate(45deg)' : 'none', ({\n  theme\n}) => theme.text3);\n\nconst V2_DEFAULT_FEE_TIER = 3000;\nexport default _c2 = /*#__PURE__*/memo(_c = _s(function SwapRoute({\n  trade,\n  syncing,\n  fixedOpen = false,\n  ...rest\n}) {\n  _s();\n\n  const autoRouterSupported = useAutoRouterSupported();\n  const routes = getTokenPath(trade);\n  const [open, setOpen] = useState(false);\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const [darkMode] = useDarkModeManager();\n  const formattedGasPriceString = (trade === null || trade === void 0 ? void 0 : trade.gasUseEstimateUSD) ? trade.gasUseEstimateUSD.toFixed(2) === '0.00' ? '<$0.01' : '$' + trade.gasUseEstimateUSD.toFixed(2) : undefined;\n  return /*#__PURE__*/_jsxDEV(Wrapper, { ...rest,\n    darkMode: darkMode,\n    fixedOpen: fixedOpen,\n    children: [/*#__PURE__*/_jsxDEV(RowBetween, {\n      onClick: () => setOpen(!open),\n      children: [/*#__PURE__*/_jsxDEV(AutoRow, {\n        gap: \"4px\",\n        width: \"auto\",\n        children: [/*#__PURE__*/_jsxDEV(AutoRouterLogo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AutoRouterLabel, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), fixedOpen ? null : /*#__PURE__*/_jsxDEV(OpenCloseIcon, {\n        open: open\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AnimatedDropdown, {\n      open: open || fixedOpen,\n      children: /*#__PURE__*/_jsxDEV(AutoRow, {\n        gap: \"4px\",\n        width: \"auto\",\n        style: {\n          paddingTop: '12px',\n          margin: 0\n        },\n        children: [syncing ? /*#__PURE__*/_jsxDEV(LoadingRows, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '400px',\n              height: '30px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(RoutingDiagram, {\n          currencyIn: trade.inputAmount.currency,\n          currencyOut: trade.outputAmount.currency,\n          routes: routes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), autoRouterSupported && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Separator, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this), syncing ? /*#__PURE__*/_jsxDEV(LoadingRows, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                width: '250px',\n                height: '15px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(ThemedText.Main, {\n            fontSize: 12,\n            width: 400,\n            margin: 0,\n            children: [(trade === null || trade === void 0 ? void 0 : trade.gasUseEstimateUSD) && chainId && SUPPORTED_GAS_ESTIMATE_CHAIN_IDS.includes(chainId) ? /*#__PURE__*/_jsxDEV(Trans, {\n              id: \"Best price route costs ~{formattedGasPriceString} in gas.\",\n              values: {\n                formattedGasPriceString: formattedGasPriceString\n              }\n            }, void 0, false, void 0, this) : null, ' ', /*#__PURE__*/_jsxDEV(Trans, {\n              id: \"This route optimizes your total output by considering split routes, multiple hops, and the gas cost of each step.\"\n            }, void 0, false, void 0, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}, \"VVgP3tUDsXboq557vWFQ2wGLav4=\", false, function () {\n  return [useAutoRouterSupported, useActiveWeb3React, useDarkModeManager];\n}));\n\nfunction getTokenPath(trade) {\n  return trade.swaps.map(({\n    route: {\n      path: tokenPath,\n      pools,\n      protocol\n    },\n    inputAmount,\n    outputAmount\n  }) => {\n    const portion = trade.tradeType === TradeType.EXACT_INPUT ? inputAmount.divide(trade.inputAmount) : outputAmount.divide(trade.outputAmount);\n    const percent = new Percent(portion.numerator, portion.denominator);\n    const path = [];\n\n    for (let i = 0; i < pools.length; i++) {\n      const nextPool = pools[i];\n      const tokenIn = tokenPath[i];\n      const tokenOut = tokenPath[i + 1];\n      const entry = [tokenIn, tokenOut, nextPool instanceof Pair ? V2_DEFAULT_FEE_TIER : nextPool.fee];\n      path.push(entry);\n    }\n\n    return {\n      percent,\n      path,\n      protocol\n    };\n  });\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"%default%$memo\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/components/swap/SwapRoute.tsx"],"names":["Percent","TradeType","Pair","AnimatedDropdown","AutoColumn","LoadingRows","RoutingDiagram","AutoRow","RowBetween","useAutoRouterSupported","useActiveWeb3React","memo","useState","Plus","useDarkModeManager","Separator","ThemedText","SUPPORTED_GAS_ESTIMATE_CHAIN_IDS","AutoRouterLabel","AutoRouterLogo","Wrapper","styled","fixedOpen","theme","bg2","OpenCloseIcon","open","text3","V2_DEFAULT_FEE_TIER","SwapRoute","trade","syncing","rest","autoRouterSupported","routes","getTokenPath","setOpen","chainId","darkMode","formattedGasPriceString","gasUseEstimateUSD","toFixed","undefined","paddingTop","margin","width","height","inputAmount","currency","outputAmount","includes","swaps","map","route","path","tokenPath","pools","protocol","portion","tradeType","EXACT_INPUT","divide","percent","numerator","denominator","i","length","nextPool","tokenIn","tokenOut","entry","fee","push"],"mappings":"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","sourcesContent":["import { Trans } from '@lingui/macro'\nimport { Trade } from '@uniswap/router-sdk'\nimport { Currency, Percent, TradeType } from '@uniswap/sdk-core'\nimport { Pair } from '@uniswap/v2-sdk'\nimport AnimatedDropdown from 'components/AnimatedDropdown'\nimport { AutoColumn } from 'components/Column'\nimport { LoadingRows } from 'components/Loader/styled'\nimport RoutingDiagram, { RoutingDiagramEntry } from 'components/RoutingDiagram/RoutingDiagram'\nimport { AutoRow, RowBetween } from 'components/Row'\nimport useAutoRouterSupported from 'hooks/useAutoRouterSupported'\nimport { useActiveWeb3React } from 'hooks/web3'\nimport { memo, useState } from 'react'\nimport { Plus } from 'react-feather'\nimport { InterfaceTrade } from 'state/routing/types'\nimport { useDarkModeManager } from 'state/user/hooks'\nimport styled from 'styled-components/macro'\nimport { Separator, ThemedText } from 'theme'\n\nimport { SUPPORTED_GAS_ESTIMATE_CHAIN_IDS } from './GasEstimateBadge'\nimport { AutoRouterLabel, AutoRouterLogo } from './RouterLabel'\n\nconst Wrapper = styled(AutoColumn)<{ darkMode?: boolean; fixedOpen?: boolean }>`\n  padding: ${({ fixedOpen }) => (fixedOpen ? '12px' : '12px 8px 12px 12px')};\n  border-radius: 16px;\n  border: 1px solid ${({ theme, fixedOpen }) => (fixedOpen ? 'transparent' : theme.bg2)};\n  cursor: pointer;\n`\n\nconst OpenCloseIcon = styled(Plus)<{ open?: boolean }>`\n  margin-left: 8px;\n  height: 20px;\n  stroke-width: 2px;\n  transition: transform 0.1s;\n  transform: ${({ open }) => (open ? 'rotate(45deg)' : 'none')};\n  stroke: ${({ theme }) => theme.text3};\n  cursor: pointer;\n  :hover {\n    opacity: 0.8;\n  }\n`\n\nconst V2_DEFAULT_FEE_TIER = 3000\n\ninterface SwapRouteProps extends React.HTMLAttributes<HTMLDivElement> {\n  trade: InterfaceTrade<Currency, Currency, TradeType>\n  syncing: boolean\n  fixedOpen?: boolean // fixed in open state, hide open/close icon\n}\n\nexport default memo(function SwapRoute({ trade, syncing, fixedOpen = false, ...rest }: SwapRouteProps) {\n  const autoRouterSupported = useAutoRouterSupported()\n  const routes = getTokenPath(trade)\n  const [open, setOpen] = useState(false)\n  const { chainId } = useActiveWeb3React()\n\n  const [darkMode] = useDarkModeManager()\n\n  const formattedGasPriceString = trade?.gasUseEstimateUSD\n    ? trade.gasUseEstimateUSD.toFixed(2) === '0.00'\n      ? '<$0.01'\n      : '$' + trade.gasUseEstimateUSD.toFixed(2)\n    : undefined\n\n  return (\n    <Wrapper {...rest} darkMode={darkMode} fixedOpen={fixedOpen}>\n      <RowBetween onClick={() => setOpen(!open)}>\n        <AutoRow gap=\"4px\" width=\"auto\">\n          <AutoRouterLogo />\n          <AutoRouterLabel />\n        </AutoRow>\n        {fixedOpen ? null : <OpenCloseIcon open={open} />}\n      </RowBetween>\n      <AnimatedDropdown open={open || fixedOpen}>\n        <AutoRow gap=\"4px\" width=\"auto\" style={{ paddingTop: '12px', margin: 0 }}>\n          {syncing ? (\n            <LoadingRows>\n              <div style={{ width: '400px', height: '30px' }} />\n            </LoadingRows>\n          ) : (\n            <RoutingDiagram\n              currencyIn={trade.inputAmount.currency}\n              currencyOut={trade.outputAmount.currency}\n              routes={routes}\n            />\n          )}\n\n          {autoRouterSupported && (\n            <>\n              <Separator />\n              {syncing ? (\n                <LoadingRows>\n                  <div style={{ width: '250px', height: '15px' }} />\n                </LoadingRows>\n              ) : (\n                <ThemedText.Main fontSize={12} width={400} margin={0}>\n                  {trade?.gasUseEstimateUSD && chainId && SUPPORTED_GAS_ESTIMATE_CHAIN_IDS.includes(chainId) ? (\n                    <Trans>Best price route costs ~{formattedGasPriceString} in gas. </Trans>\n                  ) : null}{' '}\n                  <Trans>\n                    This route optimizes your total output by considering split routes, multiple hops, and the gas cost\n                    of each step.\n                  </Trans>\n                </ThemedText.Main>\n              )}\n            </>\n          )}\n        </AutoRow>\n      </AnimatedDropdown>\n    </Wrapper>\n  )\n})\n\nfunction getTokenPath(trade: Trade<Currency, Currency, TradeType>): RoutingDiagramEntry[] {\n  return trade.swaps.map(({ route: { path: tokenPath, pools, protocol }, inputAmount, outputAmount }) => {\n    const portion =\n      trade.tradeType === TradeType.EXACT_INPUT\n        ? inputAmount.divide(trade.inputAmount)\n        : outputAmount.divide(trade.outputAmount)\n\n    const percent = new Percent(portion.numerator, portion.denominator)\n\n    const path: RoutingDiagramEntry['path'] = []\n    for (let i = 0; i < pools.length; i++) {\n      const nextPool = pools[i]\n      const tokenIn = tokenPath[i]\n      const tokenOut = tokenPath[i + 1]\n\n      const entry: RoutingDiagramEntry['path'][0] = [\n        tokenIn,\n        tokenOut,\n        nextPool instanceof Pair ? V2_DEFAULT_FEE_TIER : nextPool.fee,\n      ]\n\n      path.push(entry)\n    }\n\n    return {\n      percent,\n      path,\n      protocol,\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}