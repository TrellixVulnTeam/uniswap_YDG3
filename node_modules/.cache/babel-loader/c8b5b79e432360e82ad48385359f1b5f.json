{"ast":null,"code":"import { createReducer } from '@reduxjs/toolkit';\nimport { Field, resetMintState, typeInput } from './actions';\nexport const initialState = {\n  independentField: Field.CURRENCY_A,\n  typedValue: '',\n  otherTypedValue: '',\n  startPriceTypedValue: '',\n  leftRangeTypedValue: '',\n  rightRangeTypedValue: ''\n};\nexport default createReducer(initialState, builder => builder.addCase(resetMintState, () => initialState).addCase(typeInput, (state, {\n  payload: {\n    field,\n    typedValue,\n    noLiquidity\n  }\n}) => {\n  if (noLiquidity) {\n    // they're typing into the field they've last typed in\n    if (field === state.independentField) {\n      return { ...state,\n        independentField: field,\n        typedValue\n      };\n    } // they're typing into a new field, store the other value\n    else {\n      return { ...state,\n        independentField: field,\n        typedValue,\n        otherTypedValue: state.typedValue\n      };\n    }\n  } else {\n    return { ...state,\n      independentField: field,\n      typedValue,\n      otherTypedValue: ''\n    };\n  }\n}));","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/state/mint/reducer.ts"],"names":["createReducer","Field","resetMintState","typeInput","initialState","independentField","CURRENCY_A","typedValue","otherTypedValue","startPriceTypedValue","leftRangeTypedValue","rightRangeTypedValue","builder","addCase","state","payload","field","noLiquidity"],"mappings":"AAAA,SAASA,aAAT,QAA8B,kBAA9B;AAEA,SAASC,KAAT,EAAgBC,cAAhB,EAAgCC,SAAhC,QAAiD,WAAjD;AAWA,OAAO,MAAMC,YAAuB,GAAG;AACrCC,EAAAA,gBAAgB,EAAEJ,KAAK,CAACK,UADa;AAErCC,EAAAA,UAAU,EAAE,EAFyB;AAGrCC,EAAAA,eAAe,EAAE,EAHoB;AAIrCC,EAAAA,oBAAoB,EAAE,EAJe;AAKrCC,EAAAA,mBAAmB,EAAE,EALgB;AAMrCC,EAAAA,oBAAoB,EAAE;AANe,CAAhC;AASP,eAAeX,aAAa,CAAYI,YAAZ,EAA2BQ,OAAD,IACpDA,OAAO,CACJC,OADH,CACWX,cADX,EAC2B,MAAME,YADjC,EAEGS,OAFH,CAEWV,SAFX,EAEsB,CAACW,KAAD,EAAQ;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAAST,IAAAA,UAAT;AAAqBU,IAAAA;AAArB;AAAX,CAAR,KAA4D;AAC9E,MAAIA,WAAJ,EAAiB;AACf;AACA,QAAID,KAAK,KAAKF,KAAK,CAACT,gBAApB,EAAsC;AACpC,aAAO,EACL,GAAGS,KADE;AAELT,QAAAA,gBAAgB,EAAEW,KAFb;AAGLT,QAAAA;AAHK,OAAP;AAKD,KAND,CAOA;AAPA,SAQK;AACH,aAAO,EACL,GAAGO,KADE;AAELT,QAAAA,gBAAgB,EAAEW,KAFb;AAGLT,QAAAA,UAHK;AAILC,QAAAA,eAAe,EAAEM,KAAK,CAACP;AAJlB,OAAP;AAMD;AACF,GAlBD,MAkBO;AACL,WAAO,EACL,GAAGO,KADE;AAELT,MAAAA,gBAAgB,EAAEW,KAFb;AAGLT,MAAAA,UAHK;AAILC,MAAAA,eAAe,EAAE;AAJZ,KAAP;AAMD;AACF,CA7BH,CAD0B,CAA5B","sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\n\nimport { Field, resetMintState, typeInput } from './actions'\n\nexport interface MintState {\n  readonly independentField: Field\n  readonly typedValue: string\n  readonly otherTypedValue: string // for the case when there's no liquidity\n  readonly startPriceTypedValue: string // for the case when there's no liquidity\n  readonly leftRangeTypedValue: string\n  readonly rightRangeTypedValue: string\n}\n\nexport const initialState: MintState = {\n  independentField: Field.CURRENCY_A,\n  typedValue: '',\n  otherTypedValue: '',\n  startPriceTypedValue: '',\n  leftRangeTypedValue: '',\n  rightRangeTypedValue: '',\n}\n\nexport default createReducer<MintState>(initialState, (builder) =>\n  builder\n    .addCase(resetMintState, () => initialState)\n    .addCase(typeInput, (state, { payload: { field, typedValue, noLiquidity } }) => {\n      if (noLiquidity) {\n        // they're typing into the field they've last typed in\n        if (field === state.independentField) {\n          return {\n            ...state,\n            independentField: field,\n            typedValue,\n          }\n        }\n        // they're typing into a new field, store the other value\n        else {\n          return {\n            ...state,\n            independentField: field,\n            typedValue,\n            otherTypedValue: state.typedValue,\n          }\n        }\n      } else {\n        return {\n          ...state,\n          independentField: field,\n          typedValue,\n          otherTypedValue: '',\n        }\n      }\n    })\n)\n"]},"metadata":{},"sourceType":"module"}