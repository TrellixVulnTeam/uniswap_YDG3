{"ast":null,"code":"/* eslint no-fallthrough: 0 */\n\n/**\n * Mnemonist MurmurHash 3\n * =======================\n *\n * Straightforward implementation of the third version of MurmurHash.\n *\n * Note: this piece of code belong to haschisch.\n */\n\n/**\n * Various helpers.\n */\nfunction mul32(a, b) {\n  return (a & 0xffff) * b + (((a >>> 16) * b & 0xffff) << 16) & 0xffffffff;\n}\n\nfunction sum32(a, b) {\n  return (a & 0xffff) + (b >>> 16) + (((a >>> 16) + b & 0xffff) << 16) & 0xffffffff;\n}\n\nfunction rotl32(a, b) {\n  return a << b | a >>> 32 - b;\n}\n/**\n * MumurHash3 function.\n *\n * @param  {number}    seed - Seed.\n * @param  {ByteArray} data - Data.\n */\n\n\nmodule.exports = function murmurhash3(seed, data) {\n  var c1 = 0xcc9e2d51,\n      c2 = 0x1b873593,\n      r1 = 15,\n      r2 = 13,\n      m = 5,\n      n = 0x6b64e654;\n  var hash = seed,\n      k1,\n      i,\n      l;\n\n  for (i = 0, l = data.length - 4; i <= l; i += 4) {\n    k1 = data[i] | data[i + 1] << 8 | data[i + 2] << 16 | data[i + 3] << 24;\n    k1 = mul32(k1, c1);\n    k1 = rotl32(k1, r1);\n    k1 = mul32(k1, c2);\n    hash ^= k1;\n    hash = rotl32(hash, r2);\n    hash = mul32(hash, m);\n    hash = sum32(hash, n);\n  }\n\n  k1 = 0;\n\n  switch (data.length & 3) {\n    case 3:\n      k1 ^= data[i + 2] << 16;\n\n    case 2:\n      k1 ^= data[i + 1] << 8;\n\n    case 1:\n      k1 ^= data[i];\n      k1 = mul32(k1, c1);\n      k1 = rotl32(k1, r1);\n      k1 = mul32(k1, c2);\n      hash ^= k1;\n\n    default:\n  }\n\n  hash ^= data.length;\n  hash ^= hash >>> 16;\n  hash = mul32(hash, 0x85ebca6b);\n  hash ^= hash >>> 13;\n  hash = mul32(hash, 0xc2b2ae35);\n  hash ^= hash >>> 16;\n  return hash >>> 0;\n};","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/node_modules/mnemonist/utils/murmurhash3.js"],"names":["mul32","a","b","sum32","rotl32","module","exports","murmurhash3","seed","data","c1","c2","r1","r2","m","n","hash","k1","i","l","length"],"mappings":"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","sourcesContent":["/* eslint no-fallthrough: 0 */\n/**\n * Mnemonist MurmurHash 3\n * =======================\n *\n * Straightforward implementation of the third version of MurmurHash.\n *\n * Note: this piece of code belong to haschisch.\n */\n\n/**\n * Various helpers.\n */\nfunction mul32(a, b) {\n  return (a & 0xffff) * b + (((a >>> 16) * b & 0xffff) << 16) & 0xffffffff;\n}\n\nfunction sum32(a, b) {\n  return (a & 0xffff) + (b >>> 16) + (((a >>> 16) + b & 0xffff) << 16) & 0xffffffff;\n}\n\nfunction rotl32(a, b) {\n  return (a << b) | (a >>> (32 - b));\n}\n\n/**\n * MumurHash3 function.\n *\n * @param  {number}    seed - Seed.\n * @param  {ByteArray} data - Data.\n */\nmodule.exports = function murmurhash3(seed, data) {\n  var c1 = 0xcc9e2d51,\n      c2 = 0x1b873593,\n      r1 = 15,\n      r2 = 13,\n      m = 5,\n      n = 0x6b64e654;\n\n  var hash = seed,\n      k1,\n      i,\n      l;\n\n  for (i = 0, l = data.length - 4; i <= l; i += 4) {\n    k1 = (\n      data[i] |\n      (data[i + 1] << 8) |\n      (data[i + 2] << 16) |\n      (data[i + 3] << 24)\n    );\n\n    k1 = mul32(k1, c1);\n    k1 = rotl32(k1, r1);\n    k1 = mul32(k1, c2);\n\n    hash ^= k1;\n    hash = rotl32(hash, r2);\n    hash = mul32(hash, m);\n    hash = sum32(hash, n);\n  }\n\n  k1 = 0;\n\n  switch (data.length & 3) {\n    case 3:\n      k1 ^= data[i + 2] << 16;\n    case 2:\n      k1 ^= data[i + 1] << 8;\n    case 1:\n      k1 ^= data[i];\n      k1 = mul32(k1, c1);\n      k1 = rotl32(k1, r1);\n      k1 = mul32(k1, c2);\n      hash ^= k1;\n    default:\n  }\n\n  hash ^= data.length;\n  hash ^= hash >>> 16;\n  hash = mul32(hash, 0x85ebca6b);\n  hash ^= hash >>> 13;\n  hash = mul32(hash, 0xc2b2ae35);\n  hash ^= hash >>> 16;\n\n  return hash >>> 0;\n};\n"]},"metadata":{},"sourceType":"script"}