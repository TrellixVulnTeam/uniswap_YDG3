{"ast":null,"code":"/**\n * Mnemonist Iterable Function\n * ============================\n *\n * Harmonized iteration helpers over mixed iterable targets.\n */\nvar forEach = require('obliterator/foreach');\n\nvar typed = require('./typed-arrays.js');\n/**\n * Function used to determine whether the given object supports array-like\n * random access.\n *\n * @param  {any} target - Target object.\n * @return {boolean}\n */\n\n\nfunction isArrayLike(target) {\n  return Array.isArray(target) || typed.isTypedArray(target);\n}\n/**\n * Function used to guess the length of the structure over which we are going\n * to iterate.\n *\n * @param  {any} target - Target object.\n * @return {number|undefined}\n */\n\n\nfunction guessLength(target) {\n  if (typeof target.length === 'number') return target.length;\n  if (typeof target.size === 'number') return target.size;\n  return;\n}\n/**\n * Function used to convert an iterable to an array.\n *\n * @param  {any}   target - Iteration target.\n * @return {array}\n */\n\n\nfunction toArray(target) {\n  var l = guessLength(target);\n  var array = typeof l === 'number' ? new Array(l) : [];\n  var i = 0; // TODO: we could optimize when given target is array like\n\n  forEach(target, function (value) {\n    array[i++] = value;\n  });\n  return array;\n}\n/**\n * Same as above but returns a supplementary indices array.\n *\n * @param  {any}   target - Iteration target.\n * @return {array}\n */\n\n\nfunction toArrayWithIndices(target) {\n  var l = guessLength(target);\n  var IndexArray = typeof l === 'number' ? typed.getPointerArray(l) : Array;\n  var array = typeof l === 'number' ? new Array(l) : [];\n  var indices = typeof l === 'number' ? new IndexArray(l) : [];\n  var i = 0; // TODO: we could optimize when given target is array like\n\n  forEach(target, function (value) {\n    array[i] = value;\n    indices[i] = i++;\n  });\n  return [array, indices];\n}\n/**\n * Exporting.\n */\n\n\nexports.isArrayLike = isArrayLike;\nexports.guessLength = guessLength;\nexports.toArray = toArray;\nexports.toArrayWithIndices = toArrayWithIndices;","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/node_modules/mnemonist/utils/iterables.js"],"names":["forEach","require","typed","isArrayLike","target","Array","isArray","isTypedArray","guessLength","length","size","toArray","l","array","i","value","toArrayWithIndices","IndexArray","getPointerArray","indices","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,OAAO,GAAGC,OAAO,CAAC,qBAAD,CAArB;;AAEA,IAAIC,KAAK,GAAGD,OAAO,CAAC,mBAAD,CAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,WAAT,CAAqBC,MAArB,EAA6B;AAC3B,SAAOC,KAAK,CAACC,OAAN,CAAcF,MAAd,KAAyBF,KAAK,CAACK,YAAN,CAAmBH,MAAnB,CAAhC;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,WAAT,CAAqBJ,MAArB,EAA6B;AAC3B,MAAI,OAAOA,MAAM,CAACK,MAAd,KAAyB,QAA7B,EACE,OAAOL,MAAM,CAACK,MAAd;AAEF,MAAI,OAAOL,MAAM,CAACM,IAAd,KAAuB,QAA3B,EACE,OAAON,MAAM,CAACM,IAAd;AAEF;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,OAAT,CAAiBP,MAAjB,EAAyB;AACvB,MAAIQ,CAAC,GAAGJ,WAAW,CAACJ,MAAD,CAAnB;AAEA,MAAIS,KAAK,GAAG,OAAOD,CAAP,KAAa,QAAb,GAAwB,IAAIP,KAAJ,CAAUO,CAAV,CAAxB,GAAuC,EAAnD;AAEA,MAAIE,CAAC,GAAG,CAAR,CALuB,CAOvB;;AACAd,EAAAA,OAAO,CAACI,MAAD,EAAS,UAASW,KAAT,EAAgB;AAC9BF,IAAAA,KAAK,CAACC,CAAC,EAAF,CAAL,GAAaC,KAAb;AACD,GAFM,CAAP;AAIA,SAAOF,KAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,kBAAT,CAA4BZ,MAA5B,EAAoC;AAClC,MAAIQ,CAAC,GAAGJ,WAAW,CAACJ,MAAD,CAAnB;AAEA,MAAIa,UAAU,GAAG,OAAOL,CAAP,KAAa,QAAb,GACfV,KAAK,CAACgB,eAAN,CAAsBN,CAAtB,CADe,GAEfP,KAFF;AAIA,MAAIQ,KAAK,GAAG,OAAOD,CAAP,KAAa,QAAb,GAAwB,IAAIP,KAAJ,CAAUO,CAAV,CAAxB,GAAuC,EAAnD;AACA,MAAIO,OAAO,GAAG,OAAOP,CAAP,KAAa,QAAb,GAAwB,IAAIK,UAAJ,CAAeL,CAAf,CAAxB,GAA4C,EAA1D;AAEA,MAAIE,CAAC,GAAG,CAAR,CAVkC,CAYlC;;AACAd,EAAAA,OAAO,CAACI,MAAD,EAAS,UAASW,KAAT,EAAgB;AAC9BF,IAAAA,KAAK,CAACC,CAAD,CAAL,GAAWC,KAAX;AACAI,IAAAA,OAAO,CAACL,CAAD,CAAP,GAAaA,CAAC,EAAd;AACD,GAHM,CAAP;AAKA,SAAO,CAACD,KAAD,EAAQM,OAAR,CAAP;AACD;AAED;AACA;AACA;;;AACAC,OAAO,CAACjB,WAAR,GAAsBA,WAAtB;AACAiB,OAAO,CAACZ,WAAR,GAAsBA,WAAtB;AACAY,OAAO,CAACT,OAAR,GAAkBA,OAAlB;AACAS,OAAO,CAACJ,kBAAR,GAA6BA,kBAA7B","sourcesContent":["/**\n * Mnemonist Iterable Function\n * ============================\n *\n * Harmonized iteration helpers over mixed iterable targets.\n */\nvar forEach = require('obliterator/foreach');\n\nvar typed = require('./typed-arrays.js');\n\n/**\n * Function used to determine whether the given object supports array-like\n * random access.\n *\n * @param  {any} target - Target object.\n * @return {boolean}\n */\nfunction isArrayLike(target) {\n  return Array.isArray(target) || typed.isTypedArray(target);\n}\n\n/**\n * Function used to guess the length of the structure over which we are going\n * to iterate.\n *\n * @param  {any} target - Target object.\n * @return {number|undefined}\n */\nfunction guessLength(target) {\n  if (typeof target.length === 'number')\n    return target.length;\n\n  if (typeof target.size === 'number')\n    return target.size;\n\n  return;\n}\n\n/**\n * Function used to convert an iterable to an array.\n *\n * @param  {any}   target - Iteration target.\n * @return {array}\n */\nfunction toArray(target) {\n  var l = guessLength(target);\n\n  var array = typeof l === 'number' ? new Array(l) : [];\n\n  var i = 0;\n\n  // TODO: we could optimize when given target is array like\n  forEach(target, function(value) {\n    array[i++] = value;\n  });\n\n  return array;\n}\n\n/**\n * Same as above but returns a supplementary indices array.\n *\n * @param  {any}   target - Iteration target.\n * @return {array}\n */\nfunction toArrayWithIndices(target) {\n  var l = guessLength(target);\n\n  var IndexArray = typeof l === 'number' ?\n    typed.getPointerArray(l) :\n    Array;\n\n  var array = typeof l === 'number' ? new Array(l) : [];\n  var indices = typeof l === 'number' ? new IndexArray(l) : [];\n\n  var i = 0;\n\n  // TODO: we could optimize when given target is array like\n  forEach(target, function(value) {\n    array[i] = value;\n    indices[i] = i++;\n  });\n\n  return [array, indices];\n}\n\n/**\n * Exporting.\n */\nexports.isArrayLike = isArrayLike;\nexports.guessLength = guessLength;\nexports.toArray = toArray;\nexports.toArrayWithIndices = toArrayWithIndices;\n"]},"metadata":{},"sourceType":"script"}