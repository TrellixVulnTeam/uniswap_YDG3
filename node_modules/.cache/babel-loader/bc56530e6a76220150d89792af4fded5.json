{"ast":null,"code":"/**\n * Mnemonist Stack\n * ================\n *\n * Stack implementation relying on JavaScript arrays, which are fast enough &\n * correctly optimized for this kind of work.\n */\nvar Iterator = require('obliterator/iterator'),\n    forEach = require('obliterator/foreach');\n/**\n * Stack\n *\n * @constructor\n */\n\n\nfunction Stack() {\n  this.clear();\n}\n/**\n * Method used to clear the stack.\n *\n * @return {undefined}\n */\n\n\nStack.prototype.clear = function () {\n  // Properties\n  this.items = [];\n  this.size = 0;\n};\n/**\n * Method used to add an item to the stack.\n *\n * @param  {any}    item - Item to add.\n * @return {number}\n */\n\n\nStack.prototype.push = function (item) {\n  this.items.push(item);\n  return ++this.size;\n};\n/**\n * Method used to retrieve & remove the last item of the stack.\n *\n * @return {any}\n */\n\n\nStack.prototype.pop = function () {\n  if (this.size === 0) return;\n  this.size--;\n  return this.items.pop();\n};\n/**\n * Method used to get the last item of the stack.\n *\n * @return {any}\n */\n\n\nStack.prototype.peek = function () {\n  return this.items[this.size - 1];\n};\n/**\n * Method used to iterate over the stack.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\n\n\nStack.prototype.forEach = function (callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  for (var i = 0, l = this.items.length; i < l; i++) callback.call(scope, this.items[l - i - 1], i, this);\n};\n/**\n * Method used to convert the stack to a JavaScript array.\n *\n * @return {array}\n */\n\n\nStack.prototype.toArray = function () {\n  var array = new Array(this.size),\n      l = this.size - 1,\n      i = this.size;\n\n  while (i--) array[i] = this.items[l - i];\n\n  return array;\n};\n/**\n * Method used to create an iterator over a stack's values.\n *\n * @return {Iterator}\n */\n\n\nStack.prototype.values = function () {\n  var items = this.items,\n      l = items.length,\n      i = 0;\n  return new Iterator(function () {\n    if (i >= l) return {\n      done: true\n    };\n    var value = items[l - i - 1];\n    i++;\n    return {\n      value: value,\n      done: false\n    };\n  });\n};\n/**\n * Method used to create an iterator over a stack's entries.\n *\n * @return {Iterator}\n */\n\n\nStack.prototype.entries = function () {\n  var items = this.items,\n      l = items.length,\n      i = 0;\n  return new Iterator(function () {\n    if (i >= l) return {\n      done: true\n    };\n    var value = items[l - i - 1];\n    return {\n      value: [i++, value],\n      done: false\n    };\n  });\n};\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\n\n\nif (typeof Symbol !== 'undefined') Stack.prototype[Symbol.iterator] = Stack.prototype.values;\n/**\n * Convenience known methods.\n */\n\nStack.prototype.toString = function () {\n  return this.toArray().join(',');\n};\n\nStack.prototype.toJSON = function () {\n  return this.toArray();\n};\n\nStack.prototype.inspect = function () {\n  var array = this.toArray(); // Trick so that node displays the name of the constructor\n\n  Object.defineProperty(array, 'constructor', {\n    value: Stack,\n    enumerable: false\n  });\n  return array;\n};\n\nif (typeof Symbol !== 'undefined') Stack.prototype[Symbol.for('nodejs.util.inspect.custom')] = Stack.prototype.inspect;\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a stack.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @return {Stack}\n */\n\nStack.from = function (iterable) {\n  var stack = new Stack();\n  forEach(iterable, function (value) {\n    stack.push(value);\n  });\n  return stack;\n};\n/**\n * Static @.of function taking an arbitrary number of arguments & converting it\n * into a stack.\n *\n * @param  {...any} args\n * @return {Stack}\n */\n\n\nStack.of = function () {\n  return Stack.from(arguments);\n};\n/**\n * Exporting.\n */\n\n\nmodule.exports = Stack;","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/node_modules/mnemonist/stack.js"],"names":["Iterator","require","forEach","Stack","clear","prototype","items","size","push","item","pop","peek","callback","scope","arguments","length","i","l","call","toArray","array","Array","values","done","value","entries","Symbol","iterator","toString","join","toJSON","inspect","Object","defineProperty","enumerable","for","from","iterable","stack","of","module","exports"],"mappings":"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","sourcesContent":["/**\n * Mnemonist Stack\n * ================\n *\n * Stack implementation relying on JavaScript arrays, which are fast enough &\n * correctly optimized for this kind of work.\n */\nvar Iterator = require('obliterator/iterator'),\n    forEach = require('obliterator/foreach');\n\n/**\n * Stack\n *\n * @constructor\n */\nfunction Stack() {\n  this.clear();\n}\n\n/**\n * Method used to clear the stack.\n *\n * @return {undefined}\n */\nStack.prototype.clear = function() {\n\n  // Properties\n  this.items = [];\n  this.size = 0;\n};\n\n/**\n * Method used to add an item to the stack.\n *\n * @param  {any}    item - Item to add.\n * @return {number}\n */\nStack.prototype.push = function(item) {\n  this.items.push(item);\n  return ++this.size;\n};\n\n/**\n * Method used to retrieve & remove the last item of the stack.\n *\n * @return {any}\n */\nStack.prototype.pop = function() {\n  if (this.size === 0)\n    return;\n\n  this.size--;\n  return this.items.pop();\n};\n\n/**\n * Method used to get the last item of the stack.\n *\n * @return {any}\n */\nStack.prototype.peek = function() {\n  return this.items[this.size - 1];\n};\n\n/**\n * Method used to iterate over the stack.\n *\n * @param  {function}  callback - Function to call for each item.\n * @param  {object}    scope    - Optional scope.\n * @return {undefined}\n */\nStack.prototype.forEach = function(callback, scope) {\n  scope = arguments.length > 1 ? scope : this;\n\n  for (var i = 0, l = this.items.length; i < l; i++)\n    callback.call(scope, this.items[l - i - 1], i, this);\n};\n\n/**\n * Method used to convert the stack to a JavaScript array.\n *\n * @return {array}\n */\nStack.prototype.toArray = function() {\n  var array = new Array(this.size),\n      l = this.size - 1,\n      i = this.size;\n\n  while (i--)\n    array[i] = this.items[l - i];\n\n  return array;\n};\n\n/**\n * Method used to create an iterator over a stack's values.\n *\n * @return {Iterator}\n */\nStack.prototype.values = function() {\n  var items = this.items,\n      l = items.length,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {\n        done: true\n      };\n\n    var value = items[l - i - 1];\n    i++;\n\n    return {\n      value: value,\n      done: false\n    };\n  });\n};\n\n/**\n * Method used to create an iterator over a stack's entries.\n *\n * @return {Iterator}\n */\nStack.prototype.entries = function() {\n  var items = this.items,\n      l = items.length,\n      i = 0;\n\n  return new Iterator(function() {\n    if (i >= l)\n      return {\n        done: true\n      };\n\n    var value = items[l - i - 1];\n\n    return {\n      value: [i++, value],\n      done: false\n    };\n  });\n};\n\n/**\n * Attaching the #.values method to Symbol.iterator if possible.\n */\nif (typeof Symbol !== 'undefined')\n  Stack.prototype[Symbol.iterator] = Stack.prototype.values;\n\n\n/**\n * Convenience known methods.\n */\nStack.prototype.toString = function() {\n  return this.toArray().join(',');\n};\n\nStack.prototype.toJSON = function() {\n  return this.toArray();\n};\n\nStack.prototype.inspect = function() {\n  var array = this.toArray();\n\n  // Trick so that node displays the name of the constructor\n  Object.defineProperty(array, 'constructor', {\n    value: Stack,\n    enumerable: false\n  });\n\n  return array;\n};\n\nif (typeof Symbol !== 'undefined')\n  Stack.prototype[Symbol.for('nodejs.util.inspect.custom')] = Stack.prototype.inspect;\n\n/**\n * Static @.from function taking an arbitrary iterable & converting it into\n * a stack.\n *\n * @param  {Iterable} iterable   - Target iterable.\n * @return {Stack}\n */\nStack.from = function(iterable) {\n  var stack = new Stack();\n\n  forEach(iterable, function(value) {\n    stack.push(value);\n  });\n\n  return stack;\n};\n\n/**\n * Static @.of function taking an arbitrary number of arguments & converting it\n * into a stack.\n *\n * @param  {...any} args\n * @return {Stack}\n */\nStack.of = function() {\n  return Stack.from(arguments);\n};\n\n/**\n * Exporting.\n */\nmodule.exports = Stack;\n"]},"metadata":{},"sourceType":"script"}