{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { CurrencyAmount } from '@uniswap/sdk-core';\nimport { useMemo } from 'react';\nimport { useSingleCallResult } from '../state/multicall/hooks';\nimport { useTokenContract } from './useContract';\nexport function useTokenAllowance(token, owner, spender) {\n  _s();\n\n  const contract = useTokenContract(token === null || token === void 0 ? void 0 : token.address, false);\n  const inputs = useMemo(() => [owner, spender], [owner, spender]);\n  const allowance = useSingleCallResult(contract, 'allowance', inputs).result;\n  return useMemo(() => token && allowance ? CurrencyAmount.fromRawAmount(token, allowance.toString()) : undefined, [token, allowance]);\n}\n\n_s(useTokenAllowance, \"BD3HZECpSGOif9kRQ74c6bW+yYc=\", false, function () {\n  return [useTokenContract, useSingleCallResult];\n});","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/hooks/useTokenAllowance.ts"],"names":["CurrencyAmount","useMemo","useSingleCallResult","useTokenContract","useTokenAllowance","token","owner","spender","contract","address","inputs","allowance","result","fromRawAmount","toString","undefined"],"mappings":";;AAAA,SAASA,cAAT,QAAsC,mBAAtC;AACA,SAASC,OAAT,QAAwB,OAAxB;AAEA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,gBAAT,QAAiC,eAAjC;AAEA,OAAO,SAASC,iBAAT,CAA2BC,KAA3B,EAA0CC,KAA1C,EAA0DC,OAA1D,EAA+G;AAAA;;AACpH,QAAMC,QAAQ,GAAGL,gBAAgB,CAACE,KAAD,aAACA,KAAD,uBAACA,KAAK,CAAEI,OAAR,EAAiB,KAAjB,CAAjC;AAEA,QAAMC,MAAM,GAAGT,OAAO,CAAC,MAAM,CAACK,KAAD,EAAQC,OAAR,CAAP,EAAyB,CAACD,KAAD,EAAQC,OAAR,CAAzB,CAAtB;AACA,QAAMI,SAAS,GAAGT,mBAAmB,CAACM,QAAD,EAAW,WAAX,EAAwBE,MAAxB,CAAnB,CAAmDE,MAArE;AAEA,SAAOX,OAAO,CACZ,MAAOI,KAAK,IAAIM,SAAT,GAAqBX,cAAc,CAACa,aAAf,CAA6BR,KAA7B,EAAoCM,SAAS,CAACG,QAAV,EAApC,CAArB,GAAiFC,SAD5E,EAEZ,CAACV,KAAD,EAAQM,SAAR,CAFY,CAAd;AAID;;GAVeP,iB;UACGD,gB,EAGCD,mB","sourcesContent":["import { CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { useMemo } from 'react'\n\nimport { useSingleCallResult } from '../state/multicall/hooks'\nimport { useTokenContract } from './useContract'\n\nexport function useTokenAllowance(token?: Token, owner?: string, spender?: string): CurrencyAmount<Token> | undefined {\n  const contract = useTokenContract(token?.address, false)\n\n  const inputs = useMemo(() => [owner, spender], [owner, spender])\n  const allowance = useSingleCallResult(contract, 'allowance', inputs).result\n\n  return useMemo(\n    () => (token && allowance ? CurrencyAmount.fromRawAmount(token, allowance.toString()) : undefined),\n    [token, allowance]\n  )\n}\n"]},"metadata":{},"sourceType":"module"}