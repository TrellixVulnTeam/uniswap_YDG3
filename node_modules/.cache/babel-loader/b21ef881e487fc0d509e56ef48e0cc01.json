{"ast":null,"code":"import{SafeAppConnector}from'@gnosis.pm/safe-apps-web3-react';import{InjectedConnector}from'@web3-react/injected-connector';import{PortisConnector}from'@web3-react/portis-connector';import{WalletConnectConnector}from'@web3-react/walletconnect-connector';import{WalletLinkConnector}from'@web3-react/walletlink-connector';import UNISWAP_LOGO_URL from\"../assets/svg/logo.svg\";import{ALL_SUPPORTED_CHAIN_IDS,INFURA_NETWORK_URLS,SupportedChainId}from'../constants/chains';import getLibrary from'../utils/getLibrary';import{FortmaticConnector}from'./Fortmatic';import{NetworkConnector}from'./NetworkConnector';var FORMATIC_KEY=process.env.REACT_APP_FORTMATIC_KEY;var PORTIS_ID=process.env.REACT_APP_PORTIS_ID;export var network=new NetworkConnector({urls:INFURA_NETWORK_URLS,defaultChainId:1});var networkLibrary;export function getNetworkLibrary(){var _networkLibrary;return networkLibrary=(_networkLibrary=networkLibrary)!==null&&_networkLibrary!==void 0?_networkLibrary:getLibrary(network.provider);}export var injected=new InjectedConnector({supportedChainIds:ALL_SUPPORTED_CHAIN_IDS});export var gnosisSafe=new SafeAppConnector();export var walletconnect=new WalletConnectConnector({supportedChainIds:ALL_SUPPORTED_CHAIN_IDS,rpc:INFURA_NETWORK_URLS,qrcode:true});// mainnet only\nexport var fortmatic=new FortmaticConnector({apiKey:FORMATIC_KEY!==null&&FORMATIC_KEY!==void 0?FORMATIC_KEY:'',chainId:1});// mainnet only\nexport var portis=new PortisConnector({dAppId:PORTIS_ID!==null&&PORTIS_ID!==void 0?PORTIS_ID:'',networks:[1]});// mainnet only\nexport var walletlink=new WalletLinkConnector({url:INFURA_NETWORK_URLS[SupportedChainId.MAINNET],appName:'Uniswap',appLogoUrl:UNISWAP_LOGO_URL,supportedChainIds:[SupportedChainId.MAINNET]});","map":{"version":3,"sources":["/Users/safahi/Downloads/interface-4.30.1/src/connectors/index.ts"],"names":["SafeAppConnector","InjectedConnector","PortisConnector","WalletConnectConnector","WalletLinkConnector","ALL_SUPPORTED_CHAIN_IDS","INFURA_NETWORK_URLS","SupportedChainId","getLibrary","FortmaticConnector","NetworkConnector","FORMATIC_KEY","process","env","REACT_APP_FORTMATIC_KEY","PORTIS_ID","REACT_APP_PORTIS_ID","network","urls","defaultChainId","networkLibrary","getNetworkLibrary","provider","injected","supportedChainIds","gnosisSafe","walletconnect","rpc","qrcode","fortmatic","apiKey","chainId","portis","dAppId","networks","walletlink","url","MAINNET","appName","appLogoUrl","UNISWAP_LOGO_URL"],"mappings":"AACA,OAASA,gBAAT,KAAiC,iCAAjC,CACA,OAASC,iBAAT,KAAkC,gCAAlC,CACA,OAASC,eAAT,KAAgC,8BAAhC,CACA,OAASC,sBAAT,KAAuC,qCAAvC,CACA,OAASC,mBAAT,KAAoC,kCAApC,C,qDAGA,OAASC,uBAAT,CAAkCC,mBAAlC,CAAuDC,gBAAvD,KAA+E,qBAA/E,CACA,MAAOC,CAAAA,UAAP,KAAuB,qBAAvB,CACA,OAASC,kBAAT,KAAmC,aAAnC,CACA,OAASC,gBAAT,KAAiC,oBAAjC,CAEA,GAAMC,CAAAA,YAAY,CAAGC,OAAO,CAACC,GAAR,CAAYC,uBAAjC,CACA,GAAMC,CAAAA,SAAS,CAAGH,OAAO,CAACC,GAAR,CAAYG,mBAA9B,CAEA,MAAO,IAAMC,CAAAA,OAAO,CAAG,GAAIP,CAAAA,gBAAJ,CAAqB,CAC1CQ,IAAI,CAAEZ,mBADoC,CAE1Ca,cAAc,CAAE,CAF0B,CAArB,CAAhB,CAKP,GAAIC,CAAAA,cAAJ,CACA,MAAO,SAASC,CAAAA,iBAAT,EAA2C,qBAChD,MAAQD,CAAAA,cAAc,kBAAGA,cAAH,mDAAqBZ,UAAU,CAACS,OAAO,CAACK,QAAT,CAArD,CACD,CAED,MAAO,IAAMC,CAAAA,QAAQ,CAAG,GAAItB,CAAAA,iBAAJ,CAAsB,CAC5CuB,iBAAiB,CAAEnB,uBADyB,CAAtB,CAAjB,CAIP,MAAO,IAAMoB,CAAAA,UAAU,CAAG,GAAIzB,CAAAA,gBAAJ,EAAnB,CAEP,MAAO,IAAM0B,CAAAA,aAAa,CAAG,GAAIvB,CAAAA,sBAAJ,CAA2B,CACtDqB,iBAAiB,CAAEnB,uBADmC,CAEtDsB,GAAG,CAAErB,mBAFiD,CAGtDsB,MAAM,CAAE,IAH8C,CAA3B,CAAtB,CAMP;AACA,MAAO,IAAMC,CAAAA,SAAS,CAAG,GAAIpB,CAAAA,kBAAJ,CAAuB,CAC9CqB,MAAM,CAAEnB,YAAF,SAAEA,YAAF,UAAEA,YAAF,CAAkB,EADsB,CAE9CoB,OAAO,CAAE,CAFqC,CAAvB,CAAlB,CAKP;AACA,MAAO,IAAMC,CAAAA,MAAM,CAAG,GAAI9B,CAAAA,eAAJ,CAAoB,CACxC+B,MAAM,CAAElB,SAAF,SAAEA,SAAF,UAAEA,SAAF,CAAe,EADmB,CAExCmB,QAAQ,CAAE,CAAC,CAAD,CAF8B,CAApB,CAAf,CAKP;AACA,MAAO,IAAMC,CAAAA,UAAU,CAAG,GAAI/B,CAAAA,mBAAJ,CAAwB,CAChDgC,GAAG,CAAE9B,mBAAmB,CAACC,gBAAgB,CAAC8B,OAAlB,CADwB,CAEhDC,OAAO,CAAE,SAFuC,CAGhDC,UAAU,CAAEC,gBAHoC,CAIhDhB,iBAAiB,CAAE,CAACjB,gBAAgB,CAAC8B,OAAlB,CAJ6B,CAAxB,CAAnB","sourcesContent":["import { Web3Provider } from '@ethersproject/providers'\nimport { SafeAppConnector } from '@gnosis.pm/safe-apps-web3-react'\nimport { InjectedConnector } from '@web3-react/injected-connector'\nimport { PortisConnector } from '@web3-react/portis-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector'\n\nimport UNISWAP_LOGO_URL from '../assets/svg/logo.svg'\nimport { ALL_SUPPORTED_CHAIN_IDS, INFURA_NETWORK_URLS, SupportedChainId } from '../constants/chains'\nimport getLibrary from '../utils/getLibrary'\nimport { FortmaticConnector } from './Fortmatic'\nimport { NetworkConnector } from './NetworkConnector'\n\nconst FORMATIC_KEY = process.env.REACT_APP_FORTMATIC_KEY\nconst PORTIS_ID = process.env.REACT_APP_PORTIS_ID\n\nexport const network = new NetworkConnector({\n  urls: INFURA_NETWORK_URLS,\n  defaultChainId: 1,\n})\n\nlet networkLibrary: Web3Provider | undefined\nexport function getNetworkLibrary(): Web3Provider {\n  return (networkLibrary = networkLibrary ?? getLibrary(network.provider))\n}\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: ALL_SUPPORTED_CHAIN_IDS,\n})\n\nexport const gnosisSafe = new SafeAppConnector()\n\nexport const walletconnect = new WalletConnectConnector({\n  supportedChainIds: ALL_SUPPORTED_CHAIN_IDS,\n  rpc: INFURA_NETWORK_URLS,\n  qrcode: true,\n})\n\n// mainnet only\nexport const fortmatic = new FortmaticConnector({\n  apiKey: FORMATIC_KEY ?? '',\n  chainId: 1,\n})\n\n// mainnet only\nexport const portis = new PortisConnector({\n  dAppId: PORTIS_ID ?? '',\n  networks: [1],\n})\n\n// mainnet only\nexport const walletlink = new WalletLinkConnector({\n  url: INFURA_NETWORK_URLS[SupportedChainId.MAINNET],\n  appName: 'Uniswap',\n  appLogoUrl: UNISWAP_LOGO_URL,\n  supportedChainIds: [SupportedChainId.MAINNET],\n})\n"]},"metadata":{},"sourceType":"module"}